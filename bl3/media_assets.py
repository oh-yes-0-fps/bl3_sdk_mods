from __future__ import annotations  # type: ignore
from unrealsdk import unreal
from typing import Any
import enum


from . import core_uobject
from . import engine
from . import audio_mixer


class MediaSource(unreal.UObject):

    def Validate(self) -> bool: ...
    def GetUrl(self) -> str: ...


class BaseMediaSource(MediaSource):
    PlayerName: str


class FileMediaSource(BaseMediaSource):
    FilePath: str
    PrecacheFile: bool

    def SetFilePath(self, Path: str): ...


class MediaAudioSinkProviderInterface(core_uobject.Interface): ...


class MediaBlueprintFunctionLibrary(engine.BlueprintFunctionLibrary):

    def EnumerateWebcamCaptureDevices(
        self, OutDevices: unreal.WrappedArray[MediaCaptureDevice], Filter: int
    ): ...
    def EnumerateVideoCaptureDevices(
        self, OutDevices: unreal.WrappedArray[MediaCaptureDevice], Filter: int
    ): ...
    def EnumerateAudioCaptureDevices(
        self, OutDevices: unreal.WrappedArray[MediaCaptureDevice], Filter: int
    ): ...


class MediaPlayer(unreal.UObject):
    OnEndReached: Any
    OnMediaClosed: Any
    OnMediaOpened: Any
    OnMediaOpenFailed: Any
    OnPlaybackResumed: Any
    OnPlaybackSuspended: Any
    OnSeekCompleted: Any
    OnTracksChanged: Any
    CacheAhead: core_uobject.Timespan
    CacheBehind: core_uobject.Timespan
    CacheBehindGame: core_uobject.Timespan
    NativeAudioOut: bool
    PlayOnOpen: bool
    Shuffle: bool
    Loop: bool
    Playlist: MediaPlaylist
    PlaylistIndex: int
    TimeDelay: core_uobject.Timespan
    HorizontalFieldOfView: float
    VerticalFieldOfView: float
    ViewRotation: core_uobject.Rotator
    AudioSinkProvider: Any
    PlayerGuid: core_uobject.Guid

    def SupportsSeeking(self) -> bool: ...
    def SupportsScrubbing(self) -> bool: ...
    def SupportsRate(self, Rate: float, Unthinned: bool) -> bool: ...
    def SetViewRotation(
        self, Rotation: core_uobject.Rotator, Absolute: bool
    ) -> bool: ...
    def SetViewField(
        self, Horizontal: float, Vertical: float, Absolute: bool
    ) -> bool: ...
    def SetVideoTrackFrameRate(
        self, TrackIndex: int, FormatIndex: int, FrameRate: float
    ) -> bool: ...
    def SetTrackFormat(
        self, TrackType: EMediaPlayerTrack, TrackIndex: int, FormatIndex: int
    ) -> bool: ...
    def SetTimeDelay(self, TimeDelay: core_uobject.Timespan): ...
    def SetRate(self, Rate: float) -> bool: ...
    def SetNativeVolume(self, Volume: float) -> bool: ...
    def SetLooping(self, Looping: bool) -> bool: ...
    def SetDesiredPlayerName(self, PlayerName: str): ...
    def SetBlockOnTime(self, Time: core_uobject.Timespan): ...
    def SetAudioSinkProvider(self, NewSinkProvider: Any): ...
    def SelectTrack(self, TrackType: EMediaPlayerTrack, TrackIndex: int) -> bool: ...
    def Seek(self, Time: core_uobject.Timespan) -> bool: ...
    def Rewind(self) -> bool: ...
    def Reopen(self) -> bool: ...
    def Previous(self) -> bool: ...
    def Play(self) -> bool: ...
    def Pause(self) -> bool: ...
    def OpenUrl(self, URL: str) -> bool: ...
    def OpenSource(self, MediaSource: MediaSource) -> bool: ...
    def OpenPlaylistIndex(self, InPlaylist: MediaPlaylist, Index: int) -> bool: ...
    def OpenPlaylist(self, InPlaylist: MediaPlaylist) -> bool: ...
    def OpenFile(self, FilePath: str) -> bool: ...
    def Next(self) -> bool: ...
    def IsReady(self) -> bool: ...
    def IsPreparing(self) -> bool: ...
    def IsPlaying(self) -> bool: ...
    def IsPaused(self) -> bool: ...
    def IsLooping(self) -> bool: ...
    def IsConnecting(self) -> bool: ...
    def IsBuffering(self) -> bool: ...
    def HasError(self) -> bool: ...
    def GetViewRotation(self) -> core_uobject.Rotator: ...
    def GetVideoTrackType(self, TrackIndex: int, FormatIndex: int) -> str: ...
    def GetVideoTrackFrameRates(
        self, TrackIndex: int, FormatIndex: int
    ) -> core_uobject.FloatRange: ...
    def GetVideoTrackFrameRate(self, TrackIndex: int, FormatIndex: int) -> float: ...
    def GetVideoTrackDimensions(
        self, TrackIndex: int, FormatIndex: int
    ) -> core_uobject.IntPoint: ...
    def GetVideoTrackAspectRatio(self, TrackIndex: int, FormatIndex: int) -> float: ...
    def GetVerticalFieldOfView(self) -> float: ...
    def GetUrl(self) -> str: ...
    def GetTrackLanguage(
        self, TrackType: EMediaPlayerTrack, TrackIndex: int
    ) -> str: ...
    def GetTrackFormat(self, TrackType: EMediaPlayerTrack, TrackIndex: int) -> int: ...
    def GetTrackDisplayName(
        self, TrackType: EMediaPlayerTrack, TrackIndex: int
    ) -> str: ...
    def GetTimeDelay(self) -> core_uobject.Timespan: ...
    def GetTime(self) -> core_uobject.Timespan: ...
    def GetSupportedRates(
        self, OutRates: unreal.WrappedArray[core_uobject.FloatRange], Unthinned: bool
    ): ...
    def GetSelectedTrack(self, TrackType: EMediaPlayerTrack) -> int: ...
    def GetRate(self) -> float: ...
    def GetPlaylistIndex(self) -> int: ...
    def GetPlaylist(self) -> MediaPlaylist: ...
    def GetPlayerName(self) -> str: ...
    def GetNumTracks(self, TrackType: EMediaPlayerTrack) -> int: ...
    def GetNumTrackFormats(
        self, TrackType: EMediaPlayerTrack, TrackIndex: int
    ) -> int: ...
    def GetMediaName(self) -> str: ...
    def GetHorizontalFieldOfView(self) -> float: ...
    def GetDuration(self) -> core_uobject.Timespan: ...
    def GetDesiredPlayerName(self) -> str: ...
    def GetAudioTrackType(self, TrackIndex: int, FormatIndex: int) -> str: ...
    def GetAudioTrackSampleRate(self, TrackIndex: int, FormatIndex: int) -> int: ...
    def GetAudioTrackChannels(self, TrackIndex: int, FormatIndex: int) -> int: ...
    def Close(self): ...
    def CanPlayUrl(self, URL: str) -> bool: ...
    def CanPlaySource(self, MediaSource: MediaSource) -> bool: ...
    def CanPause(self) -> bool: ...


class MediaPlaylist(unreal.UObject):
    Items: unreal.WrappedArray[MediaSource]

    def Replace(self, Index: int, Replacement: MediaSource) -> bool: ...
    def RemoveAt(self, Index: int) -> bool: ...
    def Remove(self, MediaSource: MediaSource) -> bool: ...
    def Num(self) -> int: ...
    def Insert(self, MediaSource: MediaSource, Index: int): ...
    def GetRandom(self, OutIndex: int) -> MediaSource: ...
    def GetPrevious(self, InOutIndex: int) -> MediaSource: ...
    def GetNext(self, InOutIndex: int) -> MediaSource: ...
    def Get(self, Index: int) -> MediaSource: ...
    def AddUrl(self, URL: str) -> bool: ...
    def AddFile(self, FilePath: str) -> bool: ...
    def Add(self, MediaSource: MediaSource) -> bool: ...


class MediaSoundComponent(audio_mixer.SynthComponent):
    Channels: EMediaSoundChannels
    DynamicRateAdjustment: bool
    RateAdjustmentFactor: float
    RateAdjustmentRange: core_uobject.FloatRange
    MediaPlayer: MediaPlayer

    def SetMediaPlayer(self, NewMediaPlayer: MediaPlayer): ...
    def GetMediaPlayer(self) -> MediaPlayer: ...
    def BP_GetAttenuationSettingsToApply(
        self, OutAttenuationSettings: engine.SoundAttenuationSettings
    ) -> bool: ...


class MediaTexture(engine.Texture):
    AddressX: int
    AddressY: int
    AutoClear: bool
    ClearColor: core_uobject.LinearColor
    MediaPlayer: MediaPlayer

    def SetMediaPlayer(self, NewMediaPlayer: MediaPlayer): ...
    def GetWidth(self) -> int: ...
    def GetMediaPlayer(self) -> MediaPlayer: ...
    def GetHeight(self) -> int: ...
    def GetAspectRatio(self) -> float: ...


class PlatformMediaSource(MediaSource):
    MediaSource: MediaSource


class StreamMediaSource(BaseMediaSource):
    StreamUrl: str


class TimeSynchronizableMediaSource(BaseMediaSource):
    bUseTimeSynchronization: bool


class MediaCaptureDevice:
    DisplayName: str
    URL: str


class EMediaWebcamCaptureDeviceFilter(enum.Enum):
    DepthSensor = 0
    Front = 1
    Rear = 2
    Unknown = 3


class EMediaVideoCaptureDeviceFilter(enum.Enum):
    Card = 0
    Webcam = 1
    Software = 2
    Unknown = 3


class EMediaAudioCaptureDeviceFilter(enum.Enum):
    Card = 0
    Unknown = 1
    Microphone = 2
    Software = 3


class EMediaPlayerTrack(enum.Enum):
    Subtitle = 0
    Caption = 1
    Metadata = 2


class EMediaSoundChannels(enum.Enum):
    Stereo = 0
    Surround = 1
