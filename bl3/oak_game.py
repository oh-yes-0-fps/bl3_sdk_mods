from __future__ import annotations # type: ignore
from unrealsdk import unreal
import typing
import enum


from . import core_uobject
from . import engine
from . import umg
from . import online_subsystem_utils
from . import gbx_runtime
from . import wwise_audio
from . import gbx_audio
from . import gbx_dialog
from . import apex_destruction
from . import gbx_input
from . import gbx_ai
from . import aimodule
from . import gameplay_tasks
from . import gbx_game_system_core
from . import gbx_nav
from . import gbx_spawn
from . import level_sequence
from . import gbx_level_sequence
from . import gbx_time_of_day
from . import media_assets
from . import phys_xvehicles
from . import procedural_mesh_component
from . import scaleform_ui
from . import gbx_ui
from . import gbx_inventory
from . import gbx_camera_modes
from . import gbx_dynamic_room
from . import gbx_weapon
from . import gbx_abilities
from . import gbx_mission
from . import gbx_travel_station
from . import replication_graph
from . import gbx_vehicle
from . import input_core
from . import slate_core
from . import anim_graph_runtime
from . import gameplay_tags
from . import gbx_anim_runtime
from . import gbx_destruction
from . import gbx_streaming_interaction



class Agonizer9kFloor(engine.Actor):
    PlayersTeam: gbx_game_system_core.Team
    HeatingElementMaterial: engine.MaterialInstance
    DamageData: unreal.UClass
    DamageData_SmallDamage: unreal.UClass
    BurstFlameAudio1: wwise_audio.WwiseEvent
    BurstFlameAudio2: wwise_audio.WwiseEvent
    BurstFlameAudio3: wwise_audio.WwiseEvent
    BurstFlameAudio4: wwise_audio.WwiseEvent
    PreheatAudioSmall1: wwise_audio.WwiseEvent
    PreheatAudioSmall2: wwise_audio.WwiseEvent
    PreheatAudioSmall3: wwise_audio.WwiseEvent
    PreheatAudioSmall4: wwise_audio.WwiseEvent
    PreheatAudioBig1: wwise_audio.WwiseEvent
    PreheatAudioBig2: wwise_audio.WwiseEvent
    PreheatAudioBig3: wwise_audio.WwiseEvent
    PreheatAudioBig4: wwise_audio.WwiseEvent
    BurstFlameAudioGain: float
    BurstFlamesAudioRadius: float
    BurstFlamesAudioRadiusRingMultiplier: float
    SceneRootComp: engine.SceneComponent
    WarmupTime: float
    WarmUpDelayWhenAllWarmUpDone: float
    RotationFloorDoneTime: float
    FloorRotationTimeBetweenSector: float
    AnticipationTimeOneRing: float
    AnticipationTime: float
    AnticipationTimeRotationPattern: float
    BurstinitialOffset: float
    BurstOffsetPerRing: float
    RingPatternInterval: float
    HeatingPipeEmissiveInterval: float
    EmissiveStrengthOverTime: engine.CurveFloat
    EmissiveStrengthOverTimeFadeOut: engine.CurveFloat
    SectorsBP: unreal.WrappedArray[SectorFromBP]
    AgonizerRef: Agonizer9k
    AudioComponent1: wwise_audio.WwiseAudioComponent
    AudioComponent2: wwise_audio.WwiseAudioComponent
    AudioComponent3: wwise_audio.WwiseAudioComponent
    AudioComponent4: wwise_audio.WwiseAudioComponent
    def StopHeatingPipeEmissive(self, SectorRing: Ring): ...
    def StartSafeSpotPattern(self, DelayBeforeStart: float): ...
    def StartRotationPattern(self, DelayBeforeStart: float): ...
    def StartRingPattern(self, DelayBeforeStart: float): ...
    def StartHeatingPipeEmissive(self, SectorRing: Ring): ...
    def StartAnticipationSafeSpot(self, SafeSpotSectorIds: unreal.WrappedArray[int]): ...
    def SetFloorRotationParameters(self, Direction: int, StartingSectorId: int): ...
    def SetAgonizerRef(self, AgonizerRef: Agonizer9k): ...
    def PlayBurstFlameAudio(self): ...
    def OnWarmUpDone(self, FloorSector: Sector): ...
    def OnRotationAnticipationDone(self, FloorSector: Sector, IsLast: bool): ...
    def OnFloorPatternDone(self): ...
    def OnAnticipationOneRingDone(self, FloorSector: Sector, SectorRing: Ring): ...
    def OnAnticipationDone(self): ...
    def CreateSectorsDataFromBP(self): ...


class ActiveWeaponsComponent(engine.ActorComponent):
    WeaponSlots: unreal.WrappedArray[WeaponSlotData]
    WeaponsScale: float
    DefaultWeaponClass: unreal.UClass
    DefaultBalanceWeaponData: gbx_inventory.InventoryBalanceData
    bAutoSpawnDefaultWeapon: bool
    Weapons: WeaponSlotContainer
    OwnerPawn: engine.Pawn
    WeaponItemType: gbx_inventory.InventoryCategoryData
    def ZoomEvent__DelegateSignature(self, IsZooming: EZoomEventType): ...
    def WeaponReloadStarted(self, Weapon: gbx_weapon.Weapon, bAuto: bool): ...
    def WeaponReloadEnded(self, Weapon: gbx_weapon.Weapon, bCompleted: bool): ...
    def WeaponPutDown(self, PutDownWeapon: gbx_weapon.Weapon): ...
    def WeaponChangedEvent__DelegateSignature(self, NewWeapon: gbx_weapon.Weapon, LastWeapon: gbx_weapon.Weapon): ...
    def SpawnWeaponFromClass(self, WeaponClass: unreal.UClass, Slot: WeaponSlotData, ReturnValue: gbx_weapon.Weapon) -> gbx_weapon.Weapon: ...
    def SpawnWeaponFromBalanceData(self, WeaponBalanceData: gbx_inventory.InventoryBalanceData, Slot: WeaponSlotData, ReturnValue: gbx_weapon.Weapon) -> gbx_weapon.Weapon: ...
    def SpawnVehicleWeaponFromAspectData(self, VehicleWeaponAspectData: VehicleAttachWeaponAspectData, Slot: WeaponSlotData, ReturnValue: gbx_weapon.Weapon) -> gbx_weapon.Weapon: ...
    def SpawnDefaultWeapon(self): ...
    def ServerUnlockWeaponActions(self, Reason: str, ChannelsMask: int): ...
    def ServerStopWeaponActions(self, Slot: int, ChannelsMask: int, bClearInput: bool): ...
    def ServerSetCurrentWeapon(self, NewWeapon: gbx_weapon.Weapon, NewWeaponSlot: int, PutDownType: gbx_weapon.EWeaponPutDownType, EquipType: gbx_weapon.EWeaponEquipType): ...
    def ServerLockWeaponActions(self, Reason: str, ChannelsMask: int, bStopActions: bool, bClearInput: bool): ...
    def OnWeaponResumeUse(self, AttachedSlot: WeaponSlotData): ...
    def GetWeapon(self, Slot: int, ReturnValue: gbx_weapon.Weapon) -> gbx_weapon.Weapon: ...
    def ClientUnlockWeaponActions(self, Reason: str, ChannelsMask: int): ...
    def ClientStopWeaponActions(self, Slot: int, ChannelsMask: int, bClearInput: bool): ...
    def ClientLockWeaponActions(self, Reason: str, ChannelsMask: int, bStopActions: bool, bClearInput: bool): ...


class ActivityFeedActionData(gbx_runtime.GbxDataAsset):
    CaptionString: str
    ButtonImageURL: str



class UActivityFeedData(gbx_runtime.GbxDataAsset): ...


class ActivityFeedOpenStoreActionData(ActivityFeedActionData): ...


class ActivityFeedReward(gbx_runtime.GbxDataAsset):
    CaptionString: str
    CondensedCaptionString: str
    SmallImageUrl: str
    SmallImageAspectRatio: EActivityFeedImageAspectRatio
    LargeImageUrl: str
    URLBrowserActionData: ActivityFeedURLActionData
    URLStoreActionData: ActivityFeedOpenStoreActionData
    StartGameActionData: ActivityFeedStartGameActionData



class ActivityFeedStartGameActionData(ActivityFeedActionData):
    CommandLineArgumentsString: str



class ActivityFeedURLActionData(ActivityFeedActionData):
    URLString: str



class AdditionalZoneMapData(gbx_runtime.GbxDataAsset):
    ParentZoneMap: ZoneMapData
    ZoneMapMeshAssetReference: core_uobject.SoftObjectPath
    AdditionalZoneMapPOIList: unreal.WrappedArray[ZoneMapPOIEntry]
    AssociatedLeague: int
    AssociatedPatch: PatchExpansionData
    AssociatedDLC: online_subsystem_utils.DownloadableContentData



class InteractiveObject(engine.Actor):
    CompiledUserStatesData: gbx_game_system_core.CompiledUserStatesData
    RuntimeUserStatesData: gbx_game_system_core.UserStatesRuntimeData
    ReplicatedUserStatesData: gbx_game_system_core.UserStatesReplicationData
    bRegisterAsTargetable: bool
    bShouldDisplayNameplate: bool
    CachedDamageComponent: OakDamageComponent
    CachedTargetableComponent: gbx_game_system_core.TargetableComponent
    RepCurrentState: EInteractiveObjectState
    RepCurrentLockState: EInteractiveObjectLockState
    RepCurrentInteractiveState: EInteractiveObjectInteractiveState
    CurrentState: EInteractiveObjectState
    CurrentLockState: EInteractiveObjectLockState
    CurrentInteractiveState: EInteractiveObjectInteractiveState
    bShouldShowLevelSyncedNameplate: bool
    ShouldColorCrosshairRed: bool
    bHideWhenAttachedToHiddenCharacter: bool
    bCanNotifyKillersOfDeath: bool
    bIsTrapTrigger: bool
    bTrapBreaker: bool
    bReverseTriggerInstructionWhenTriggerDeactivates: bool
    bTrapIsBroken: bool
    TrapsList: unreal.WrappedArray[InteractiveObjectTrapEntry]
    PrimarySkeletalMeshComponent: engine.SkeletalMeshComponent
    OnEnablingAnimation: engine.AnimationAsset
    OnEnabledAnimation: engine.AnimationAsset
    OnDisablingAnimation: engine.AnimationAsset
    OnDisabledAnimation: engine.AnimationAsset
    OnLockedAnimation: engine.AnimationAsset
    PlayerAlertType: EPlayerAlertType
    def SetGbxUserState(self, VariableName: str, Value: int): ...
    def ResetTrapBrokenState(self): ...
    def OnTrapTriggerStateChanged(self, bTriggerActivated: bool): ...
    def OnTrapDeactivated(self): ...
    def OnTrapActivated(self): ...
    def OnRep_ReplicatedUserStatesData(self): ...
    def OnRep_RepCurrentState(self): ...
    def OnRep_RepCurrentLockState(self): ...
    def OnRep_RepCurrentInteractiveState(self): ...
    def OnLStateUnlocked(self): ...
    def OnLStateLocked(self): ...
    def OnLocked(self): ...
    def OnIStateNonInteractive(self): ...
    def OnIStateInteractive(self): ...
    def OnEnabling(self): ...
    def OnEnabled(self): ...
    def OnDisabling(self): ...
    def OnDisabled(self): ...
    def OnAnimationEnded(self, Asset: engine.AnimationAsset): ...
    def ChangeState(self, NewState: EInteractiveObjectState): ...
    def ChangeLockState(self, NewState: EInteractiveObjectLockState): ...
    def ChangeInteractiveState(self, NewState: EInteractiveObjectInteractiveState): ...


class AdvancedInteractiveObject(InteractiveObject):
    CameraData: AIO_CameraData
    CameraMode: str
    CameraBlendInTime: float
    CameraBlendOutTime: float
    CameraExitTransitionDuration: float
    DelayBeforeCameraExitTransitionStarts: float
    bBringUpEchoDevice: bool
    OverrideEchoDeviceEquipDelay: float
    EchoDeviceMenuName: str
    EchoDeviceIdleScreenName: str
    bLockPlayerMovement: bool
    bLockPlayerWeaponUsage: bool
    bTrackNearbyPlayers: bool
    bHideHUDInstantly: bool
    ProxyActorClass: unreal.UClass
    bEnableActorCulling: bool
    bIgnoreAssociatedNPCForCulling: bool
    UsableComponent: gbx_game_system_core.UsableComponent
    AIOMenuData: gbx_ui.GbxMenuData
    bUseParticleBackdrop: bool
    bUseDefaultParticleBackdrop: bool
    BackdropParticleSystem: engine.ParticleSystem
    BackdropParticleSystemOff: engine.ParticleSystem
    bIsAnyoneInInteractRange: bool
    PlayersInInteractRange: unreal.WrappedArray[OakPlayerController]
    bIsAnyoneInteracting: bool
    InteractingPlayers: unreal.WrappedArray[OakPlayerController]
    LocalProxies: unreal.WrappedArray[AdvancedInteractiveObjectProxy]
    LookedAtByController: OakPlayerController
    AssociatedPushedMenu: unreal.UObject
    bUseProxyForPlayerAlert: bool
    def OnRep_bIsAnyoneInteracting(self): ...
    def OnPlayerStopInteraction(self, Player: OakPlayerController): ...
    def OnPlayerExitedInteractRange(self, Player: OakPlayerController): ...
    def OnPlayerEnteredInteractRange(self, Player: OakPlayerController): ...
    def OnPlayerBeginInteraction(self, Player: OakPlayerController): ...
    def OnNoPlayersNowInInteractRange(self): ...
    def OnLookedAwayFromByPlayer(self): ...
    def OnLookedAtByPlayer(self, InstigatingPlayer: engine.PlayerController, bCanInteractWith: bool, NewUsableComponentImpactPoint: core_uobject.Vector, NewUsableDistanceAway: float): ...
    def OnAnyPlayersNowInInteractRange(self): ...
    def NotifyUsed(self, UseEvent: gbx_game_system_core.UseEvent): ...
    def HandleActorDestroyed(self, Actor: engine.Actor): ...


class AdvancedInteractiveObjectOwnedGFxMenu(gbx_ui.GbxGFxMenu):
    bShowHalfWidthBackgroundScreenParticle: bool
    bShowFullWidthBackgroundScreenParticle: bool
    CustomBackdropParticleLoop: engine.ParticleSystem
    CustomBackdropParticleOff: engine.ParticleSystem



class AdvancedInteractiveObjectProxy(engine.Actor):
    InputComponentClass: unreal.UClass
    ProjectionFXData: AIOOrientedParticleData
    DefaultCameraState: str
    CurrentCameraState: str
    CameraEntryTransitionIndex: int
    bCurrentlyInteracting: bool
    bPlayerWithinInteractRange: bool
    bCameraTransitionInProgress: bool
    OwningPlayer: OakPlayerController
    OwningAIO: AdvancedInteractiveObject
    def OnOwningPlayerStoppedInteraction(self): ...
    def OnOwningPlayerStartedInteraction(self): ...
    def OnOwningPlayerExitedInteractRange(self): ...
    def OnOwningPlayerEnteredInteractRange(self): ...
    def OnFinalizeStopInteraction(self): ...


class OakCharacter(gbx_game_system_core.GbxCharacter):
    OwnerGbxAIController: gbx_ai.GbxAIController
    AIActionComponent: OakAIActionComponent
    OakCharacterMovement: OakCharacterMovementComponent
    ResourcePoolComponent: gbx_game_system_core.GameResourcePoolManagerComponent
    OakDamageComponent: OakDamageComponent
    OakDamageCauserComponent: OakDamageCauserComponent
    AbilityManagerComponent: OakCharacterAbilityManagerComponent
    StatusEffectManagerComponent: OakStatusEffectManagerComponent
    OakCharacterInventory: gbx_inventory.InventoryListComponent
    OakCharacterBankInventory: gbx_inventory.InventoryListComponent
    WadingEffectsComponent: WadingEffectsComponent
    CachedBodyWeaponHoldManager: gbx_weapon.BodyWeaponHoldManagerComponent
    AIWeaponUser: gbx_ai.AIWeaponUserComponent
    HealthState: EHealthState
    DeathType: EDeathType
    IsDeadAttached: bool
    bIsDeadInSeatedTurret: bool
    CanGoToInjuredState: bool
    CorpseState: CharacterCorpseState
    CameraModesSet: gbx_camera_modes.CameraModeSetData
    CameraModeSetList: unreal.WrappedArray[gbx_camera_modes.CameraModeSetData]
    BalanceComponent: gbx_game_system_core.BalanceStateComponent
    FFYLComponent: FightForYourLifeComponent
    SprintInfo: gbx_game_system_core.SprintData
    bForcePenetrateOnSelf: bool
    DesiredNameplateType: ETargetedNameplateType
    HUDInfo: gbx_ui.GbxHUDData
    PlayerGivenNicknameKey: str
    StandInData: PlayerStandInData
    bEligibleForIgnoreCollisionWithPlayers: bool
    bPushOverlappingPlayersAway: bool
    bCanUseWeaponWhileSprinting: bool
    bAutoEquipWeapons: bool
    bIkOverride: bool
    bCanBeRooted: bool
    MusicThreatValue: float
    bCopyPlayerCustomizationsFromInstigator: bool
    bUseCustomSlidingEyeHeight: bool
    SlidingEyeHeight: float
    SprintingAttributeModifiers: unreal.WrappedArray[gbx_game_system_core.GbxAttributeModifierHandle]
    DeadRagdollReplicationData: gbx_game_system_core.StaticRagdollReplicationData
    bBlockVehicle: bool
    VehicleCollisionResistanceFactor: float
    DamageToVehicleFactor: float
    AttachedHidableIOs: unreal.WrappedArray[InteractiveObject]
    DefaultWeaponClass: unreal.UClass
    DefaultBalanceWeaponData: gbx_inventory.InventoryBalanceData
    EquipmentSlots: unreal.WrappedArray[InventorySlotData]
    ActiveWeaponSlots: unreal.WrappedArray[WeaponSlotData]
    ActiveWeaponScale: float
    bOverrideBalanceInventory: bool
    bDiscardInventoryOnDeath: bool
    bRebuildInventoryOnLevelChange: bool
    bCanShowHolsterableItemsOnBody: bool
    HideWeaponOnSpawnReason: str
    bHideWeaponOnSpawn: bool
    WeaponHolsterData: unreal.WrappedArray[HolsteredWeaponData]
    WeaponItemType: gbx_inventory.InventoryCategoryData
    CreditsItemType: gbx_inventory.InventoryCategoryData
    EquippedInventory: InventorySlotContainer
    ActiveWeapons: WeaponSlotContainer
    HolsteredGear: unreal.WrappedArray[HolsteredGearSlot]
    HolsteredWeapon: gbx_weapon.Weapon
    PreferredHolsterWeaponSlot: InventorySlotData
    WeaponSwapTimeScale: engine.GbxAttributeFloat
    bUseAccuracyPattern: bool
    bWeaponsRestricted: bool
    InventoryProxy: OakCharacter
    CurrentSlideModifier: SlideModifierAspectData
    RecentlyEquippedWeaponInSprintTime: float
    CameraSocket: str
    BaseTransformsAnimation: engine.AnimSequence
    Mech: OakCharacter
    OverrideVisibleCorpseRemovalTime: float
    CorpseRemovalActionOverride: unreal.UClass
    AudioRandomVariationValue: float
    CachedDefaultAudioComponent: wwise_audio.WwiseAudioComponent
    LastDamageSourceClass: unreal.UClass
    KillerActor: engine.Actor
    CachedFaceFXComponent: engine.ActorComponent
    bCanStomp: bool
    StompDivideModifier: float
    VehicleClassIDBeforeDeath: VehicleClassIdentifier
    VehicleSeatSlotBeforeDeath: int
    LastVehicleSeat: VehicleSeatComponent
    CurrentVehicleSeat: VehicleSeatComponent
    OwnedVehicle: OakVehicle
    CARVehicle: OakVehicle
    LastTurretSeat: OakPawnAttachSlotComponent
    CurrentTurretSeat: OakPawnAttachSlotComponent
    Gender: EOakGender
    bUseGender: bool
    MaleGenderData: OakGenderData
    FemaleGenderData: OakGenderData
    CustomizationSettings: OakCharacterCustomizationData
    CustomizationSeed: int
    bUseSocketsForIconPlacement: bool
    MainAIAction: unreal.UClass
    CoordinatedEffectSwitch: OakCoordinatedEffectSwitch
    AnimStyleEnum: unreal.UEnum
    AnimStyleInitial: int
    AnimStyleCurrent: int
    CloakComp: gbx_ai.AICloakComponent
    def ZoomEvent__DelegateSignature(self, IsZooming: EZoomEventType): ...
    def WeaponReloadStarted(self, Weapon: gbx_weapon.Weapon, bAuto: bool): ...
    def WeaponReloadEnded(self, Weapon: gbx_weapon.Weapon, bCompleted: bool): ...
    def WeaponPutDown(self, PutDownWeapon: gbx_weapon.Weapon): ...
    def WeaponPrev(self): ...
    def WeaponNext(self): ...
    def WeaponEquipped(self): ...
    def WeaponChangedEvent__DelegateSignature(self, NewWeapon: gbx_weapon.Weapon, LastWeapon: gbx_weapon.Weapon): ...
    def WantsToZoom(self, ReturnValue: bool) -> bool: ...
    def WantsToUseWeapon(self, Slot: WeaponSlotData, ReturnValue: bool) -> bool: ...
    def UpdatePreToggleWeaponMode(self): ...
    def UnlockActiveWeaponActions(self, Reason: str, ChannelsMask: int, bReplicate: bool): ...
    def TryDetachFromAttachSlot(self, bInstant: bool): ...
    def TriggerResurrectEvent(self, CashLost: int): ...
    def ToggleWeaponMode(self): ...
    def ToggleFirstPersonClothSimulation(self, TurnOn: bool): ...
    def ToggleCrouch(self): ...
    def TeleportPawnAndAssociatedVehicle(self, StartLoc: core_uobject.Vector, StartRot: core_uobject.Rotator, bDisableClientCameraUpdates: bool, bIsFastTravel: bool): ...
    def StopZooming(self, bForcedStop: bool, bSkipTransitions: bool): ...
    def StopWantingToStartSprinting(self): ...
    def StopUsingWeapon(self, SlotToUse: WeaponSlotData): ...
    def StopReload(self, SlotToUse: WeaponSlotData): ...
    def StartZooming(self): ...
    def StartUsingWeapon(self, SlotToUse: WeaponSlotData): ...
    def SpawnDefaultWeapon(self, ReturnValue: gbx_weapon.Weapon) -> gbx_weapon.Weapon: ...
    def SetWantsToSprint(self, bNewWantsToSprint: bool): ...
    def SetWantsToSlide(self, bNewWantsToSlide: bool): ...
    def SetInventoryProxy(self, Proxy: OakCharacter): ...
    def SetDead(self, InDeathType: EDeathType): ...
    def SetCurrentWeapon(self, NewWeapon: gbx_weapon.Weapon, NewWeaponSlot: WeaponSlotData, PutDownType: gbx_weapon.EWeaponPutDownType, EquipType: gbx_weapon.EWeaponEquipType): ...
    def SetCurrentEquippedWeapon(self, EquippedInventorySlot: InventorySlotData, NewWeaponSlot: WeaponSlotData, PutDownType: gbx_weapon.EWeaponPutDownType, EquipType: gbx_weapon.EWeaponEquipType): ...
    def SetCorpseRemovalOverride(self, RemovelTime: float, DissolveAction: unreal.UClass): ...
    def SetCharacterRooted(self, bRooted: bool, Reason: str): ...
    def SetCARVehicle(self, Vehicle: OakVehicle): ...
    def ServerUnlockActiveWeaponActions(self, Reason: str, ChannelsMask: int): ...
    def ServerUnequipInventorySlot(self, SlotToEquip: InventorySlotData): ...
    def ServerStopWeaponActions(self, Slot: int, ChannelsMask: int, bClearInput: bool): ...
    def ServerSpawnDroppedPickup(self, SelectedInventoryInfo: gbx_inventory.SelectedInventoryInfo, World: engine.World, Location: core_uobject.Vector, LinearVelocity: core_uobject.Vector, AngularVelocity: core_uobject.Vector): ...
    def ServerSetEquippedTrinket(self, SlotToEquip: InventorySlotData, Trinket: WeaponTrinketPartData): ...
    def ServerSetCurrentWeapon(self, NewWeapon: gbx_weapon.Weapon, Slot: int, PutDownType: gbx_weapon.EWeaponPutDownType, EquipType: gbx_weapon.EWeaponEquipType): ...
    def ServerSelectInventoryItem(self, SelectedCategory: gbx_inventory.InventoryCategoryData, SelectedHandle: gbx_inventory.InventoryListEntryHandle): ...
    def ServerLockActiveWeaponActions(self, Reason: str, ChannelsMask: int, bStopActions: bool, bClearInput: bool): ...
    def ServerEquipInventorySlot(self, SlotToEquip: InventorySlotData, SelectedHandle: gbx_inventory.InventoryListEntryHandle, bSwapSlots: bool): ...
    def SafeRemoveCorpse(self): ...
    def ResetCharacterInventory(self): ...
    def ReplaceInventoryItem(self, OldInventoryItem: engine.Actor, NewInventoryItem: engine.Actor): ...
    def RemovingFromInventory(self, RemovedCategory: gbx_inventory.InventoryCategoryData, RemovedActor: engine.Actor, RemovedHandle: gbx_inventory.InventoryListEntryHandle): ...
    def RemoveInWorldIcon(self, TargetInfo: HUDInWorldIconTargetInfo): ...
    def RemoveInventoryItem(self, SelectedHandle: gbx_inventory.InventoryListEntryHandle): ...
    def RemoveHealthTypeAtIndex(self, Index: int, ReturnType: gbx_game_system_core.HealthType): ...
    def Reload(self, SlotToUse: WeaponSlotData, bAutoReload: bool): ...
    def RebuildInventory(self): ...
    def PreInventoryItemPickupCheck(self, PickupActor: engine.Actor, Quantity: int, UsedByInstigator: bool, WorldPickupActor: gbx_inventory.InventoryItemPickup, ReturnValue: bool) -> bool: ...
    def PreAddToFullInventory(self, Category: gbx_inventory.InventoryCategoryData, NewActor: engine.Actor, Flags: int, DesiredSlot: int): ...
    def PostLoadGameEvent__DelegateSignature(self, SaveGameFound: bool): ...
    def PerformMeleeImpact(self, MeleeRange: float, ImpactData: gbx_game_system_core.ImpactData): ...
    def OnZoomedNotifyActions(self, IsZooming: EZoomEventType): ...
    def OnWeaponResumeUse(self, AttachedSlot: WeaponSlotData): ...
    def OnTrinketUnequippedFromSlot(self, InUnequippedTrinket: WeaponTrinketPartData, SlotData: InventorySlotData): ...
    def OnTrinketEquippedOnSlot(self, InEquippedTrinket: WeaponTrinketPartData, SlotData: InventorySlotData): ...
    def OnStartSprinting(self): ...
    def OnRep_OverrideVisibleCorpseRemovalTime(self): ...
    def OnRep_Mech(self): ...
    def OnRep_HolsteredWeapon(self): ...
    def OnRep_HealthState(self): ...
    def OnRep_DeadRagdollReplicationData(self): ...
    def OnRep_Customization(self): ...
    def OnRep_CoordinatedEffectSwitch(self): ...
    def OnRecentlyEquippedWeaponInSprintTimerEnd(self): ...
    def OnInventoryUnequippedFromSlot(self, InUnequippedInventory: engine.Actor, SlotData: InventorySlotData): ...
    def OnInventoryItemReplaced(self, UpdatedItemHandle: gbx_inventory.InventoryListEntryHandle, OldInventoryActor: engine.Actor): ...
    def OnInventoryEquippedOnSlot(self, InEquippedInventory: engine.Actor, SlotData: InventorySlotData): ...
    def OnFirstPersonCreated(self, bCreatedArms: bool): ...
    def OnEndSprinting(self): ...
    def OnDodged(self, DodgeType: gbx_game_system_core.EAIDodgeType): ...
    def OnCryoThawing(self): ...
    def OnCryoFreezing(self): ...
    def OnCharacterTransported(self, bTransportStarted: bool): ...
    def OnAIUncloaked(self): ...
    def OnAICloaked(self): ...
    def NetMulticast_BroadcastPickedUpShieldBoost(self, PickupAudioEvent: wwise_audio.WwiseEvent, ScreenEffect: engine.ParticleSystem, ModifierDuration: float): ...
    def NetMulticast_BroadcastCharacterSoundTag(self, Tag: gbx_audio.CharacterSoundTag): ...
    def LockActiveWeaponActions(self, Reason: str, ChannelsMask: int, bStopActions: bool, bClearInput: bool, bReplicate: bool): ...
    def K2_CanWeaponZoom(self, ReturnValue: bool) -> bool: ...
    def K2_CanPerformWeaponAction(self, Channel: EWeaponActionChannel, ReturnValue: bool) -> bool: ...
    def IsUsingWeapon(self, Slot: WeaponSlotData, ReturnValue: bool) -> bool: ...
    def IsSprinting(self, ReturnValue: bool) -> bool: ...
    def IsSlotOpenInventoryCategory(self, PickupCategory: gbx_inventory.InventoryCategoryData, ReturnValue: bool) -> bool: ...
    def IsSlotEnabledForInventoryCategory(self, PickupCategory: gbx_inventory.InventoryCategoryData, ReturnValue: bool) -> bool: ...
    def IsShowingCrosshair(self, Slot: int, ReturnValue: bool) -> bool: ...
    def IsPerformingGroundSlam(self, ReturnValue: bool) -> bool: ...
    def IsLeaping(self, ReturnValue: bool) -> bool: ...
    def IsInventoryItemEquipped(self, InventoryItem: engine.Actor, ReturnValue: bool) -> bool: ...
    def IsFrozenToDeath(self, ReturnValue: bool) -> bool: ...
    def IsEquippingWeapon(self, SlotToUse: WeaponSlotData, ReturnValue: bool) -> bool: ...
    def IsEchoDeviceActive(self, ReturnValue: bool) -> bool: ...
    def IsCharacterSliding(self, ReturnValue: bool) -> bool: ...
    def IsCharacterRooted(self, ReturnValue: bool) -> bool: ...
    def IsAttachedToSlot(self, ReturnValue: bool) -> bool: ...
    def IsAttachedToSeat(self, ReturnValue: bool) -> bool: ...
    def IsAttached(self, ReturnValue: bool) -> bool: ...
    def HealthStateChangeEvent__DelegateSignature(self, HealthState: EHealthState): ...
    def HasShieldEquipped(self, ReturnValue: bool) -> bool: ...
    def HasRecentlyEquippedWeaponInSprint(self, ReturnValue: bool) -> bool: ...
    def HasInfiniteAmmo(self, ReturnValue: bool) -> bool: ...
    def HasHealthOfType(self, HealthTypeToFind: gbx_game_system_core.HealthTypeData, ReturnValue: bool) -> bool: ...
    def GoFromInjuredToHealed(self, HealedByPlayer: OakPlayerController): ...
    def GoFromInjuredToDead(self): ...
    def GoFromDeadToHealed(self): ...
    def GetZoomToggle(self, ReturnValue: bool) -> bool: ...
    def GetWeaponOffsetRotation(self, ReturnValue: core_uobject.Rotator) -> core_uobject.Rotator: ...
    def GetWeaponOffsetLocation(self, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...
    def GetWeapon(self, SlotToGet: WeaponSlotData, ReturnValue: gbx_weapon.Weapon) -> gbx_weapon.Weapon: ...
    def GetWantsToSprint(self, ReturnValue: bool) -> bool: ...
    def GetWantsToCrouch(self, ReturnValue: bool) -> bool: ...
    def GetViewModelOffsetRotation(self, Index: int, ReturnValue: core_uobject.Rotator) -> core_uobject.Rotator: ...
    def GetViewModelOffsetLocation(self, Index: int, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...
    def GetVehicle(self, ReturnValue: OakVehicle) -> OakVehicle: ...
    def GetOwnedVehicle(self, ReturnValue: OakVehicle) -> OakVehicle: ...
    def GetOakAIController(self, ReturnValue: OakAIController) -> OakAIController: ...
    def GetMovementDirection(self, AXIS: int, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...
    def GetInventoryComponent(self, ReturnValue: gbx_inventory.InventoryListComponent) -> gbx_inventory.InventoryListComponent: ...
    def GetHealthInformationAtIndex(self, Index: int, Branch: EValidIndex, ReturnValue: gbx_game_system_core.HealthType) -> gbx_game_system_core.HealthType: ...
    def GetFirstHealthInformationByType(self, HealthTypeToFind: gbx_game_system_core.HealthTypeData, OutHealthType: gbx_game_system_core.HealthType, ReturnValue: bool) -> bool: ...
    def GetFaceFXBlendWeight(self, DeltaTime: float, BlendTime: float, InSkelMeshComp: engine.SkeletalMeshComponent, ReturnValue: float) -> float: ...
    def GetEquippedInventoryForSlot(self, InventorySlot: InventorySlotData, ReturnValue: engine.Actor) -> engine.Actor: ...
    def GetCARVehicle(self, ReturnValue: OakVehicle) -> OakVehicle: ...
    def GetBankInventoryComponent(self, ReturnValue: gbx_inventory.InventoryListComponent) -> gbx_inventory.InventoryListComponent: ...
    def GetAIActionComponent(self, ReturnValue: OakAIActionComponent) -> OakAIActionComponent: ...
    def GetActiveWeapon(self, Slot: int, ReturnValue: gbx_weapon.Weapon) -> gbx_weapon.Weapon: ...
    def GenericEvent__DelegateSignature(self): ...
    def FillAllHealth(self): ...
    def ExitVehicle(self, bInstant: bool): ...
    def ExitTurret(self, bInstant: bool): ...
    def EquipInventorySlotDirect(self, SlotToEquip: InventorySlotData, SelectedActor: engine.Actor, bSwapSlots: bool): ...
    def EquipInventorySlot(self, SlotToEquip: InventorySlotData, SelectedHandle: gbx_inventory.InventoryListEntryHandle, bSwapSlots: bool): ...
    def EndCompareToEquippedItemEvent__DelegateSignature(self): ...
    def EnableInventorySlot(self, InventorySlot: InventorySlotData, bEnabled: bool): ...
    def DropCurrentWeapon(self): ...
    def DelayWeaponsUse(self, DelayTime: float, bForceUseAfterDelay: bool): ...
    def ControlMech(self, TheMech: OakCharacter): ...
    def CompareToEquippedItemEvent__DelegateSignature(self, EquippedItem: OakInventoryBalanceStateComponent, OtherItem: OakInventoryBalanceStateComponent): ...
    def ClientUnlockActiveWeaponActions(self, Reason: str, ChannelsMask: int): ...
    def ClientStopWeaponActions(self, Slot: int, ChannelsMask: int, bClearInput: bool): ...
    def ClientLockActiveWeaponActions(self, Reason: str, ChannelsMask: int, bStopActions: bool, bClearInput: bool): ...
    def ChangeSeat__DelegateSignature(self, FromSeat: gbx_game_system_core.PawnAttachSlotComponent, ToSeat: gbx_game_system_core.PawnAttachSlotComponent): ...
    def CanEquipInventoryItem(self, InInventoryToEquip: engine.Actor, ReturnValue: bool) -> bool: ...
    def AttemptGroundSlam(self, ReturnValue: bool) -> bool: ...
    def AttachedItemPickedUp(self, InventoryItemPickedUp: gbx_inventory.InventoryItemPickup, PickedUpBy: engine.Actor): ...
    def AttachDetachSeat__DelegateSignature(self, PawnAttachSlotComponent: gbx_game_system_core.PawnAttachSlotComponent): ...
    def AnimNotify_BossClosedCaption(self, IncomingNotify: engine.AnimNotify): ...
    def AddInWorldIcon(self, TargetInfo: HUDInWorldIconTargetInfo): ...
    def AddHealthTypeAtIndex(self, HealthTypeData: gbx_game_system_core.HealthTypeData, HealthPoolData: gbx_game_system_core.GameResourcePoolData, Index: int, Branch: EHealthAdded): ...
    def AddHealthType(self, HealthTypeData: gbx_game_system_core.HealthTypeData, HealthPoolData: gbx_game_system_core.GameResourcePoolData, Branch: EHealthAdded): ...
    def AddedToInventory(self, InventoryList: gbx_inventory.InventoryListComponent, AddedCategory: gbx_inventory.InventoryCategoryData, AddedActor: engine.Actor, AddedHandle: gbx_inventory.InventoryListEntryHandle, Flags: int, DesiredSlot: int): ...
    def AddDefaultItemPoolsToInventory(self, ItemPools: unreal.WrappedArray[gbx_inventory.ItemPoolInfo], SingleEquippedItem: bool, ClearInventory: bool, EquipIfNoInventory: bool): ...
    def AddDefaultItemPoolListInventory(self, DefaultItemPoolList: gbx_inventory.ItemPoolListData, ClearInventory: bool, EquipIfNoInventory: bool): ...
    def AddDefaultItemPoolInventory(self, DefaultItemPoolData: gbx_inventory.ItemPoolData, ClearInventory: bool, EquipIfNoInventory: bool): ...


class OakCharacter_Default(OakCharacter):
    Stance: gbx_game_system_core.StanceComponent
    GbxDialog: gbx_dialog.GbxDialogComponent
    DeathDialogEvent: gbx_dialog.DialogEvent
    DeathVocalizationTag: gbx_audio.CharacterSoundTag
    def OnStartInjured_Common(self): ...
    def OnReaped(self): ...


class Agonizer9k(OakCharacter_Default):
    FightPhase: EA9KFightPhase
    SawTargetRotation: core_uobject.Rotator
    SawTarget: engine.Pawn
    SawState: EA9KSawState
    SawAngleReached: float
    TimeSinceBeginingOfPhase: float
    TimeSinceBeginingOfFight: float
    TimeSinceLastSponsorBegan: float
    SawTargetBlackboardKeyName: str
    Blackboard: aimodule.BlackboardComponent
    SawTimeCooldown: float
    SawRotateSpeedTryToReachTarget: float
    SawTimeBetweenReachAndEquip: float
    SawTimeAnticipation: float
    SawPercentageStopFollowAnticipation: float
    WaitForEquipAnimDoneFailSafe: float
    def StopSaw(self): ...
    def StartSponsorsTimer(self): ...
    def StartSaw(self): ...
    def StartBossFight(self): ...
    def ResetBossTimers(self): ...
    def EquipSawAnimDone(self): ...


class Agonizer9kCore(engine.Actor):
    TargetableComponent: gbx_game_system_core.TargetableComponent
    DamageComponent: OakDamageComponent
    RootSphereComponent: engine.SphereComponent



class Agonizer9kFollowSpot(engine.Actor):
    SceneRootComp: engine.SceneComponent
    LightConeComp: engine.StaticMeshComponent
    SpotLightComp: engine.SpotLightComponent
    def TurnOn(self): ...
    def TurnOff(self): ...
    def StartRotating(self, RotationTime: float, RotationDelta: core_uobject.Rotator): ...
    def LookAtTarget(self, RotationTime: float, Target: engine.Actor): ...


class AgonizerFloor(engine.Actor):
    FireHeat: engine.ParticleSystem
    WarmUp: engine.ParticleSystem
    BurstFlameRing1: engine.ParticleSystem
    BurstFlameRing2: engine.ParticleSystem
    BurstFlameRing3: engine.ParticleSystem
    BurstFlameRing4: engine.ParticleSystem
    HeatingElementMaterial: engine.MaterialInstance
    FakeEmmisiveAllRings: engine.StaticMesh
    DamageData: unreal.UClass
    DamageTypeFire: unreal.UClass
    BurstFlameAudio1: wwise_audio.WwiseEvent
    BurstFlameAudio2: wwise_audio.WwiseEvent
    BurstFlameAudio3: wwise_audio.WwiseEvent
    BurstFlameAudio4: wwise_audio.WwiseEvent
    PreheatAudioSmall1: wwise_audio.WwiseEvent
    PreheatAudioSmall2: wwise_audio.WwiseEvent
    PreheatAudioSmall3: wwise_audio.WwiseEvent
    PreheatAudioSmall4: wwise_audio.WwiseEvent
    PreheatAudioBig1: wwise_audio.WwiseEvent
    PreheatAudioBig2: wwise_audio.WwiseEvent
    PreheatAudioBig3: wwise_audio.WwiseEvent
    PreheatAudioBig4: wwise_audio.WwiseEvent
    BurstFlameAudioGain: float
    BurstFlamesAudioRadius: float
    BurstFlamesAudioRadiusRingMultiplier: float
    SceneRootComp: engine.SceneComponent
    WarmupTime: float
    WarmUpDelayWhenAllWarmUpDone: float
    RotationFloorDoneTime: float
    FloorRotationTimeBetweenSector: float
    AnticipationTimeOneRing: float
    AnticipationTime: float
    AnticipationTimeRotationPattern: float
    DamageOverlapTime: float
    BurstinitialOffset: float
    BurstOffsetPerRing: float
    FloorFireDamage: float
    RingPatternInterval: float
    HeatingPipeEmissiveInterval: float
    EmissiveStrengthOverTime: engine.CurveFloat
    EmissiveStrengthOverTimeFadeOut: engine.CurveFloat
    bDisplayDebugCollisionZones: bool
    def StopHeatingPipeEmissive(self, SectorRing: FloorSectorRing): ...
    def StopDamageFeedbackRing(self, FloorSector: FloorSector, SectorRing: FloorSectorRing): ...
    def StartSafeSpotPattern(self, DelayBeforeStart: float): ...
    def StartRotationPattern(self, DelayBeforeStart: float): ...
    def StartRingPattern(self, DelayBeforeStart: float): ...
    def StartHeatingPipeEmissive(self, SectorRing: FloorSectorRing): ...
    def StartAnticipationSafeSpot(self, SafeSpotSectorId: int): ...
    def SetFloorRotationParameters(self, Direction: int, StartingSectorId: int): ...
    def SetAgonizerRef(self, AgonizerRef: Agonizer9k): ...
    def PlayBurstFlameAudio(self): ...
    def OnWarmUpDone(self, FloorSector: FloorSector): ...
    def OnRotationAnticipationDone(self, FloorSector: FloorSector, IsLast: bool): ...
    def OnDamageFeedbackDone(self): ...
    def OnAnticipationOneRingDone(self, FloorSector: FloorSector, SectorRing: FloorSectorRing): ...
    def OnAnticipationDone(self): ...


class AIAction_AngryPatrolTaunt(gbx_ai.AIAction_Selector):
    ProbabilityOfPlayingTauntAction: gbx_game_system_core.GbxParam
    TauntAction: gbx_ai.AIAspectSettings_GbxAction



class AIAction_GetOutVehicle(gbx_ai.AIAction):
    bInstantDetach: bool



class AIAction_LeapOnVehicle(gbx_ai.AIAction):
    Target: gbx_game_system_core.GbxBlackboardKeySelector
    LeapAction: unreal.UClass
    MaxLeapDistance: float
    bLeapOnHostile: bool



class AIAction_PatrolPath(gbx_ai.AIAction_Priority):
    NavSettings: gbx_ai.AIAspectSettings_Navigation
    MovePathSetting: AIAspectSettings_MovePath



class AIAction_ReviveActor(gbx_ai.AIAction):
    ReviveSettings: AIAspectSettings_Revive
    TicketSettings: gbx_ai.AIAspectSettings_Ticket
    QuerySettings: gbx_ai.AIAspectSettings_EnvQuery
    bUseQuerySettings: bool
    NavSettings: gbx_ai.AIAspectSettings_Navigation
    NavigationQuerySettings: gbx_ai.AIAspectSettings_EnvQuery
    bUseNavigationQuery: bool



class AIAction_VehicleEscort(gbx_ai.AIAction_Sequence):
    EscortSettings: AIAspectSettings_VehicleEscortSpeed
    TargetKey: gbx_game_system_core.GbxBlackboardKeySelector
    EscortFindComponentKey: gbx_game_system_core.GbxBlackboardKeySelector
    EscortLocationComponentKey: gbx_game_system_core.GbxBlackboardKeySelector
    EscortLocationReferenceKey: gbx_game_system_core.GbxBlackboardKeySelector
    EscortLocationOffsetKey: gbx_game_system_core.GbxBlackboardKeySelector
    IsEscortingTargetActorInfoKey: gbx_game_system_core.GbxBlackboardKeySelector
    bMoveEvenIfUnreachable: bool
    def InitEscortTarget(self, Target: engine.Actor, OffsetVector: core_uobject.Vector, OrientationReference: engine.Actor): ...
    def InitCustomEscort(self, Target: engine.Actor, ActorToEscort: engine.Actor, OffsetVector: core_uobject.Vector, OrientationReference: engine.Actor): ...


class AIAction_VehicleEscortTarget(AIAction_VehicleEscort):
    OffsetVector: core_uobject.Vector
    OrientationReferenceKey: gbx_game_system_core.GbxBlackboardKeySelector



class AIAspect_Dialog(gbx_ai.AIAspect):
    Settings: AIAspectSettings_Dialog
    def GetDialogSettingsDescription(self, DialogSettings: AIAspectSettings_Dialog, Property: core_uobject.Property, ReturnValue: str) -> str: ...
    def GetDialogConditionSettingsDescription(self, DialogSettings: AIAspectSettings_DialogCondition, Property: core_uobject.Property, ReturnValue: str) -> str: ...


class AIAspect_MovePath(gbx_ai.AIAspect_Navigation):
    MovePathSettings: AIAspectSettings_MovePath



class AIAspect_NpcGreeting(gbx_ai.AIAspect): ...


class AIAspect_Revive(gbx_ai.AIAspect):
    Settings: AIAspectSettings_Revive
    def GetReviveSettingsDescription(self, ReviveSettings: AIAspectSettings_Revive, Property: core_uobject.Property, ReturnValue: str) -> str: ...


class AIAspect_VehicleArchetype(gbx_ai.AIAspect):
    Settings: AIAspectSettings_VehicleArchetype



class AIAspect_VehicleAttitude(gbx_ai.AIAspect):
    Settings: AIAspectSettings_VehicleAttitude



class AIAspect_VehicleDriverLeaves(gbx_ai.AIAspect):
    Settings: AIAspectSettings_VehicleDriverLeaves



class AIAspect_VehicleDriving(gbx_ai.AIAspect):
    Settings: AIAspectSettings_VehicleDriving



class AIAspect_VehicleEscortSpeed(gbx_ai.AIAspect_Navigation):
    EscortSettings: AIAspectSettings_VehicleEscortSpeed
    TargetKey: gbx_game_system_core.GbxBlackboardKeySelector
    FindComponentKey: gbx_game_system_core.GbxBlackboardKeySelector
    LocationKey: gbx_game_system_core.GbxBlackboardKeySelector
    EscortLocationReferenceKey: gbx_game_system_core.GbxBlackboardKeySelector
    EscortLocationOffsetKey: gbx_game_system_core.GbxBlackboardKeySelector
    IsEscortingTargetActorInfoKey: gbx_game_system_core.GbxBlackboardKeySelector
    bDebugTestDirectPath: bool



class AIAspect_VehicleHorn(gbx_ai.AIAspect):
    Settings: AIAspectSettings_VehicleHorn



class AIAspect_VehicleHover(gbx_ai.AIAspect):
    bTrackTarget: bool



class AIAspect_VehicleParts(gbx_ai.AIAspect):
    Settings: AIAspectSettings_VehicleParts



class AIAspect_VehicleSpeed(gbx_ai.AIAspect):
    Settings: AIAspectSettings_VehicleSpeed



class AIBalanceStateComponent(gbx_game_system_core.BalanceStateComponent):
    PlayThroughs: unreal.WrappedArray[AIPlayThroughData]
    ExperienceLevelFormula: gbx_game_system_core.AttributeInitializationData
    bUseExperienceLevelFormula: bool
    BaseItemGameStageSource: gbx_game_system_core.EBalanceValueType
    ItemGameStageOffset: gbx_game_system_core.AttributeInitializationData
    DropOnDeathItemPools: gbx_inventory.ItemPoolCollection
    CharacterExpansionDropOnDeathItemPools: gbx_inventory.ItemPoolCollection
    DropLootSocketName: str
    DropLootPattern: LootSpawnPatternData
    ExtraDropLootSockets: unreal.WrappedArray[AILootDropOverride]
    bWaitForNotifyToSpawnLoot: bool
    DelayedSpawnLootFailSafeTimer: float
    TimeToSpawnLootOver: float
    DropLootAttributeEffects: unreal.WrappedArray[gbx_game_system_core.AttributeEffectData]
    bIsAnointed: bool
    AnointedData: AnointedEnemyData
    ExtraItemPoolToDropOnDeath: gbx_inventory.ItemPoolListInterface
    ExtraItemPoolDropRule: EItemDropOnDeathType
    bSuppressDropOnDeathItemPools: bool
    AnointedUsableComponent: gbx_game_system_core.UsableComponent
    AnointedDeathState: EAnointedDeathState
    def SuppressDropOnDeathItemPools(self, bSuppress: bool): ...
    def ShatterFrozenAnointed(self): ...
    def SetCustomDropsOnDeath(self, ExtraPoolToDropOnDeath: gbx_inventory.ItemPoolListInterface, AddedToBalanceDropItems: bool, ItemPoolDropRule: EItemDropOnDeathType): ...
    def ManuallyTriggerAnointedDeath(self): ...
    def ForceDropLoot(self): ...
    def FinalizeAnointedFreeze(self): ...
    def EnableDropLootSocket(self, SocketName: str): ...
    def ApplyNameForCurrentPlayThrough(self): ...


class AIDialogEventData(gbx_runtime.GbxDataAsset):
    TargetAcquiredEvent: gbx_dialog.DialogEvent
    TargetLostEvent: gbx_dialog.DialogEvent
    TargetKilledOneEnemyTargetEvent: gbx_dialog.DialogEvent
    TargetDownEvent: gbx_dialog.DialogEvent
    TargetDeadEvent: gbx_dialog.DialogEvent
    ShootingEvent: gbx_dialog.DialogEvent
    ReloadEvent: gbx_dialog.DialogEvent
    ReinforcementsEvent: gbx_dialog.DialogEvent
    TargetParam: gbx_dialog.DialogParameter
    InstigatorParam: gbx_dialog.DialogParameter
    MethodOfDeathParam: gbx_dialog.DialogParameter
    ActionSkillDamageSourceClass: unreal.UClass
    MethodOfDeath_Normal: gbx_dialog.DialogEnumValue
    MethodOfDeath_Gibbed: gbx_dialog.DialogEnumValue
    MethodOfDeath_ActionSkill: gbx_dialog.DialogEnumValue
    NpcGreetingHelloEvent: gbx_dialog.DialogEvent
    NpcGreetingHelloMissionEvent: gbx_dialog.DialogEvent
    NpcGreetingIdleEvent: gbx_dialog.DialogEvent
    NpcGreetingGoodbyeEvent: gbx_dialog.DialogEvent
    NpcGreetingTargetParam: gbx_dialog.DialogParameter



class AIHeldActorInterface(core_uobject.Interface):

    def AIHeldActor_OnThrow(self): ...
    def AIHeldActor_OnPrime(self): ...
    def AIHeldActor_OnDrop(self): ...
    def AIHeldActor_GetElementalType(self, ReturnValue: EOakElementalType) -> EOakElementalType: ...


class AIHeldActorComponent(gbx_game_system_core.GbxChildActorComponent):
    BlackboardKeyEquipped: gbx_game_system_core.GbxBlackboardKeySelector
    BlackboardKeyRequesting: gbx_game_system_core.GbxBlackboardKeySelector
    DefaultDeathTagName: core_uobject.SoftObjectPath
    DeathTag: gbx_game_system_core.HitReactionTag
    bAutofillDeathTag: bool
    bDisableCollisionWhileHeld: bool
    DroppedCollisionProfile: str
    bChangeCollisionProfileOnDrop: bool
    PresetTrigger: gbx_runtime.GbxTriggerProperty
    bInitialized: bool
    HeldActor: engine.Actor
    TargetingComponent: gbx_game_system_core.TargetingComponent
    BlackboardComponent: aimodule.BlackboardComponent
    ClientDisabledCollisionActor: engine.Actor
    def ThrowHeldActorAtTarget(self, ThrowSpeed: float, ThrowAnglePercent: float, TargetSocket: str, TargetOffset: core_uobject.Vector, AngleOffset: core_uobject.Rotator, MaxPrediction: float, bRequestNewHeldActor: bool, bSpawnIfDoesNotExist: bool): ...
    def ThrowHeldActorAtLocation(self, ThrowAtLocation: core_uobject.Vector, ThrowSpeed: float, ThrowAnglePercent: float, bRequestNewHeldActor: bool, bSpawnIfDoesNotExist: bool): ...
    def ThrowHeldActorAtActor(self, ThrowAtActor: engine.Actor, ThrowSpeed: float, ThrowAnglePercent: float, ActorSocket: str, ActorOffset: core_uobject.Vector, AngleOffset: core_uobject.Rotator, MaxPrediction: float, bRequestNewHeldActor: bool, bSpawnIfDoesNotExist: bool): ...
    def SpawnHeldActor(self): ...
    def SetNewHeldActorClass(self, NewHeldActorClass: unreal.UClass): ...
    def PrimeHeldActor(self): ...
    def OnTriggerPreset(self, Preset: EHeldActorPreset): ...
    def OnHeldActorSpawned(self, NewHeldActor: engine.Actor): ...
    def OnHeldActorNativeDrop(self, Actor: engine.Actor): ...
    def GetHeldActorElementalType(self, ReturnValue: EOakElementalType) -> EOakElementalType: ...
    def GetHeldActor(self, ReturnValue: engine.Actor) -> engine.Actor: ...
    def DropHeldActor(self, bRequestNewHeldActor: bool, InstigatorOverride: engine.Actor): ...
    def DetonateHeldActor(self, bKillSelf: bool, bRequestNewHeldActor: bool, InstigatorOverride: engine.Actor): ...


class AIO_CameraData(gbx_runtime.GbxDataAsset):
    CameraStates: unreal.WrappedArray[AIOCameraStateInfo]
    CameraEntryTransitions: unreal.WrappedArray[AIOCameraEntryTransition]
    CameraEntryEasing: gbx_game_system_core.GbxEasingFunc
    CameraEntryLocationDuration: float
    CameraEntryRotationDuration: float
    TargetFOV: float
    TargetFOVSplitscreen: float
    TargetFOVVerticalSplitscreen: float
    TargetFOVQuadSplitscreen: float
    bRestoreCameraRotation: bool
    PostProcessSettings: engine.PostProcessSettings
    DOFMagnitudeInterpTime: float
    VignetteInterpTime: float



class AIProjectileInterface(core_uobject.Interface):

    def AIProjectile_Disarm(self): ...
    def AIProjectile_Detonate(self): ...
    def AIProjectile_CanBeStolen(self, ReturnValue: bool) -> bool: ...
    def AIProjectile_Arm(self): ...


class AIStolenProjectileComponent(engine.BoxComponent):
    BlackboardKeyProjectile: gbx_game_system_core.GbxBlackboardKeySelector
    BlackboardKeyHasProjectile: gbx_game_system_core.GbxBlackboardKeySelector
    DirectionConeHalfAngle: float
    bLimitedByDirection: bool
    ChanceToSucceed: float
    LerpToSocketCurve: engine.CurveFloat
    bCanStealWhenLeftComponent: bool
    TimeToForget: float
    StolenProjectile: engine.Actor
    IgnoreProjectiles: unreal.WrappedArray[engine.Actor]
    SkelMeshComp: engine.SkeletalMeshComponent
    TargetingComponent: gbx_game_system_core.TargetingComponent
    BlackboardComponent: aimodule.BlackboardComponent
    ClientData: ReplicatedStolenProjectileData
    def StolenProjectileReleased(self): ...
    def SetChanceToSucceed(self, NewChanceToSucceed: float): ...
    def ReturnProjectileToTarget(self, Speed: float, AnglePercent: float, Socket: str, TargetOffset: core_uobject.Vector, AngleOffset: core_uobject.Rotator, MaxPrediction: float, ReturnValue: bool) -> bool: ...
    def ReturnProjectileToOwner(self, Speed: float, AnglePercent: float, Socket: str, TargetOffset: core_uobject.Vector, AngleOffset: core_uobject.Rotator, MaxPrediction: float, ReturnValue: bool) -> bool: ...
    def ReturnProjectileToLocation(self, Location: core_uobject.Vector, Speed: float, AnglePercent: float, ReturnValue: bool) -> bool: ...
    def ReturnProjectileToActor(self, Actor: engine.Actor, Speed: float, AnglePercent: float, Socket: str, TargetOffset: core_uobject.Vector, AngleOffset: core_uobject.Rotator, MaxPrediction: float, ReturnValue: bool) -> bool: ...
    def ReleaseOnStolenProjectileDestroyed(self, unused: engine.Actor): ...
    def OnRep_ClientData(self): ...
    def OnOverlapEnd(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int): ...
    def OnOverlapBegin(self, OverlappedComp: engine.PrimitiveComponent, Other: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def LerpToSocket(self, Socket: str, Duration: float, ReturnValue: bool) -> bool: ...
    def GetElementalType(self, ReturnValue: EOakElementalType) -> EOakElementalType: ...
    def DisarmProjectile(self, ReturnValue: bool) -> bool: ...
    def DidInteractionSucceed(self, ReturnValue: bool) -> bool: ...
    def DetonateProjectile(self, ReturnValue: bool) -> bool: ...
    def DestroyProjectile(self, ReturnValue: bool) -> bool: ...
    def AttachProjectile(self, SocketName: str, ReturnValue: bool) -> bool: ...
    def ArmProjectile(self, ReturnValue: bool) -> bool: ...


class OakTriggerVolume(engine.TriggerVolume):
    TriggerComponent: OakTriggerComponent
    def NotifyTriggerUntouched(self, OtherActor: engine.Actor, bIsPlayer: bool): ...
    def NotifyTriggerTouched(self, OtherActor: engine.Actor, bIsPlayer: bool): ...
    def NotifyAllPlayersTouchingTrigger(self): ...


class AllPlayersRequiredVolume(OakTriggerVolume): ...


class AlwaysLoadedData(engine.PrimaryDataAsset): ...


class AmmoAspectData(gbx_inventory.InventoryAspectData):
    AmmoType: gbx_weapon.GbxAmmoTypeData



class AnimNotify_EnableDropLootSocket(engine.AnimNotify):
    SocketNames: unreal.WrappedArray[str]



class AnimNotify_OakPawnAttachSlotTransition(gbx_game_system_core.AnimNotify_PawnAttachSlotTransition):
    bAdvanceCameraState: bool



class AnimNotify_PlayerMelee(engine.AnimNotify): ...


class AnimNotify_PlayerMeleeEnd(engine.AnimNotify): ...


class AnimNotify_PlayerMeleeFOVToggle(engine.AnimNotify):
    bActivate: bool



class AnimNotify_PlayerMeleePullBegin(engine.AnimNotify): ...


class AnimNotify_CatchPickup(engine.AnimNotifyState):
    HideWeaponLock: str
    HideWeaponBone: str



class AnimNotifyState_CryoFreeze(engine.AnimNotifyState):
    bDisableAnimFreeze: bool



class AreaResetVolume(engine.Volume):
    bIsEnabled: bool
    bDisableOnReset: bool
    def SetEnabled(self, bEnabled: bool): ...
    def ResetAreaIfEmpty(self): ...


class AsyncSpinner(gbx_ui.GbxGFxHUDWidget):
    TextureToLoadStringReference: core_uobject.SoftObjectPath
    def StartLoadingTexture(self, AssetPathToLoad: core_uobject.SoftObjectPath): ...
    def CompleteLoadingTexture(self): ...


class AttributeEffectMutatorData_AlliesInRange(gbx_game_system_core.AttributeEffectMutatorData):
    bInfiniteRange: bool
    RangeData: gbx_game_system_core.AttributeInitializationData



class BeamTargetEmptyActor(engine.Actor):
    SceneRootComp: engine.SceneComponent
    BeamTarget: engine.Actor
    FollowLerpSpeed: float
    def SetBeamTarget(self, NewBeamTarget: engine.Actor, NewFollowLerpSpeed: float): ...


class PlayerCharacterComponent(engine.ActorComponent):
    CharacterSlots: unreal.WrappedArray[PlayerCharacterComponentSlotData]
    SlotItemList: OakPlayerCharacterSlotItemList
    CachedPlayer: OakCharacter_Player
    def SetSlotAugment(self, Slot: PlayerCharacterComponentSlotData, Augment: PlayerCharacterComponentAugmentData): ...
    def HasAnySlotAugment(self, Slot: PlayerCharacterComponentSlotData, ReturnValue: bool) -> bool: ...
    def HandlePreInputActivation(self): ...
    def HandleInputActivationEnd(self): ...
    def HandleInputActivationBegin(self): ...
    def GetSlotAugment(self, Slot: PlayerCharacterComponentSlotData, ReturnValue: PlayerCharacterComponentAugmentData) -> PlayerCharacterComponentAugmentData: ...


class BeastmasterCharacterComponent(PlayerCharacterComponent):
    PetSlotData: PlayerCharacterComponentSlotData
    PetSpawnLocationParams: gbx_game_system_core.EnvQueryParams
    OwnedPetStencilData: BeastmasterPetStencilData
    UnownedPetStencilData: BeastmasterPetStencilData
    PetCooldownPool: gbx_game_system_core.GameResourcePoolData
    PetCooldownPoolRef: gbx_game_system_core.GameResourcePoolReference
    PetAttackCooldownPool: gbx_game_system_core.GameResourcePoolData
    PetAttackCooldownPoolRef: gbx_game_system_core.GameResourcePoolReference
    PetActor: OakCharacter
    OwnerPlayer: OakCharacter_Player
    ActivePetAugment: OakPlayerCharacterAugmentData_Pet
    LocalPetAugment: OakPlayerCharacterAugmentData_Pet
    LockedPetAugments: unreal.WrappedArray[OakPlayerCharacterAugmentData_Pet]
    def ValidateCurrentPetAugment(self, PetAugment: OakPlayerCharacterAugmentData_Pet, ReturnValue: bool) -> bool: ...
    def TryOrderPetAttack(self): ...
    def StartPetTargetSearch(self): ...
    def SpawnNewPet(self, PetAugment: OakPlayerCharacterAugmentData_Pet, SpawnLocation: core_uobject.Vector, ReturnValue: OakCharacter) -> OakCharacter: ...
    def ServerSetActivePetAugment(self, Augment: OakPlayerCharacterAugmentData_Pet): ...
    def ServerOrderPetAttack(self): ...
    def RestartPetAttackCooldown(self): ...
    def ResetPetAttackCooldown(self): ...
    def OnRep_PetActor(self): ...
    def OnReleasedPet(self, bForced: bool, ReleaseReason: EPetReleaseReason): ...
    def OnPlayerLevelUp(self, OldExperienceLevel: int, NewExperieneLevel: int): ...
    def OnPlayerDied(self): ...
    def OnPetDied(self): ...
    def OnPetDestroyed(self, DestroyedActor: engine.Actor): ...
    def OnPawnAttachSlotStarted(self, PawnAttachSlotComponent: gbx_game_system_core.PawnAttachSlotComponent): ...
    def OnCharacterAugmentChanged(self, SlotData: PlayerCharacterComponentSlotData): ...
    def GetPetCooldownRefundPercent(self, RefundType: EPetRespawnCooldownRefundType, ReturnValue: float) -> float: ...
    def GetPetAttackCooldownPercent(self, ReturnValue: float) -> float: ...
    def ForcePetSpawnAtLocation(self, Location: core_uobject.Vector, ReturnValue: bool) -> bool: ...
    def ClientNotifyPetAttackFailed(self): ...
    def BreakPetAugment(self, Augment: OakPlayerCharacterAugmentData_Pet, PetType: EOakActionAbilityPetType, EvolutionType: EOakActionAbilityPetEvolutionType, FrameName: str): ...


class StandInCharacterComponent(engine.ActorComponent):
    SkillScreenUnlockAnimation: unreal.UClass
    UnlockAnimationDelay: float
    UnlockedAnimStateDelay: float
    MeleeWeaponAttachmentData: MeleeWeaponAttachmentData
    bShowMeleeWeaponOnCharacterCreate: bool
    bShowMeleeWeaponOnCharacterSelect: bool
    Character: OakCharacter_StandIn
    OwningPlayer: OakCharacter_Player
    AuxiliaryActors: unreal.WrappedArray[StandInAuxiliaryActor]
    LastSlottedItem: gbx_runtime.GbxDataAsset
    def OnAuxiliaryActorDestroyed(self, Actor: engine.Actor): ...


class BeastmasterStandInComponent(StandInCharacterComponent):
    BeastmasterSpawnPetAnimation: unreal.UClass
    PetSpawnAnimation: unreal.UClass
    PetTranslationOffset: core_uobject.Vector
    PetRotationOffset: core_uobject.Rotator
    InitialActionSkillFlourishDelay: float
    ActionSkillSlot: OakPlayerAbilitySlotData
    PetSlot: PlayerCharacterComponentSlotData
    Pets: unreal.WrappedArray[BeastmasterStandInPetData]
    ActionSkills: unreal.WrappedArray[BeastmasterStandInActionSkillData]
    MeleeMeshComponent: engine.PrimitiveComponent
    CurrentPet: PlayerCharacterComponentAugmentData
    CurrentPetActor: StandInAuxiliaryActor_Pet
    CurrentActionAbility: unreal.UClass
    CurrentActionSkillAuxiliary: StandInAuxiliaryActor
    def TriggerFlourishCE(self): ...
    def SetMeleeMeshVisible(self, bVisible: bool): ...


class BehindTheScenesContent(gbx_runtime.GbxDataAsset):
    Categories: unreal.WrappedArray[BehindTheScenesCategory]



class BehindTheScenesMediaContainer(unreal.UObject): ...


class OakCinematicActor(engine.Actor):
    bTeleportPhysic: bool
    bResetPhysic: bool
    def RemoveSlaveViewLocation(self, Name: str): ...
    def AddSlaveViewLocation(self, Name: str, SlaveViewLocation: core_uobject.Vector): ...


class BehindTheScenesMediaPlayerActor(OakCinematicActor):

    def OnBTSMediaTextureLoaded(self): ...
    def GetLanguageName(self, ReturnValue: str) -> str: ...
    def BehindTheScenesMenuRewindMovie(self): ...
    def BehindTheScenesMenuPlayPauseMovie(self): ...
    def BehindTheScenesMenuOpened(self): ...
    def BehindTheScenesMenuFastForwardMovie(self): ...
    def BehindTheScenesMenuClosed(self): ...
    def BehindTheScenesContentSelected(self, MediaContainer: BehindTheScenesMediaContainer): ...


class BlackJackComponent(engine.ActorComponent):
    CardDefinitions: unreal.WrappedArray[BlackJackCardDefinition]
    IndicesOfCurrentCards: unreal.WrappedArray[int]
    def ShouldOpenChest(self, ReturnValue: bool) -> bool: ...
    def Reset(self): ...
    def OpenChest(self): ...
    def OnRep_CurrentCards(self): ...
    def GetNbOfCard(self, ReturnValue: int) -> int: ...
    def GetCurrentHandValue(self, ReturnValue: int) -> int: ...
    def GetCardValueIndexAtIndex(self, Index: int, ReturnValue: int) -> int: ...
    def GetCardSuitIndexAtIndex(self, Index: int, ReturnValue: int) -> int: ...
    def GetCardAtIndex(self, Index: int, ReturnValue: str) -> str: ...
    def CanUseOpenChest(self, ReturnValue: bool) -> bool: ...
    def CanUseAddCard(self, ReturnValue: bool) -> bool: ...
    def AddCard(self): ...


class BoundaryTurret(InteractiveObject):
    StartingDistance: int
    WarningZoneDistance: int
    WarningZoneWidth: int
    ZoneHeight: int
    KillExtent: int
    ZoneVerticalOffset: int
    bShowDebugZones: bool
    WarningFeedback: gbx_game_system_core.FeedbackData
    WarningStartAudioEvent: wwise_audio.WwiseEvent
    WarningStopAudioEvent: wwise_audio.WwiseEvent
    KillAudioEvent: wwise_audio.WwiseEvent
    WarningTriggerComponent: engine.BoxComponent
    KillTriggerComponent: engine.BoxComponent
    TurretMeshComponent: engine.SkeletalMeshComponent
    AllTrackedTargets: unreal.WrappedArray[OakCharacter_Player]
    OverlappedVehicles: unreal.WrappedArray[OakVehicle]
    PriorityTrackedTarget: OakCharacter_Player
    WarningTriggerName: str
    KillTriggerName: str
    TurretMeshName: str
    FXSwitchName: str
    LaserSwitchName: str
    FXStateName: str
    LaserStateName: str
    def WarningTrigger_OnEndOverlap(self, OverlappedComp: engine.PrimitiveComponent, Other: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int): ...
    def WarningTrigger_OnBeginOverlap(self, OverlappedComp: engine.PrimitiveComponent, Other: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def PlayKillEffects(self, TargetLocation: core_uobject.Vector): ...
    def NetMulticast_PlayKillEffects(self, TargetLocation: core_uobject.Vector): ...
    def KillTrigger_OnEndOverlap(self, OverlappedComp: engine.PrimitiveComponent, Other: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int): ...
    def KillTrigger_OnBeginOverlap(self, OverlappedComp: engine.PrimitiveComponent, Other: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def GetTrackedTarget(self, ReturnValue: OakCharacter_Player) -> OakCharacter_Player: ...


class BoundaryTurretAnimInstance(gbx_game_system_core.GbxAnimInstance):
    OwnerTurret: BoundaryTurret
    PivotSocketName: str
    BarrelRotation: core_uobject.Rotator
    RotationSpeed: float
    bInvertTurret: bool



class BTService_FireWeapon(aimodule.BTService): ...


class BTService_TriggerDialog(aimodule.BTService):
    DialogEvent: gbx_dialog.DialogEvent
    RefreshParamsProperty: gbx_runtime.GbxTriggerProperty
    def RefreshParams(self): ...


class BulletNotificationVolume(engine.Volume): ...


class CameraBehavior_AdjustForFocusObject(gbx_camera_modes.CameraBehavior):
    CamReturnTime: float
    CamMovementThreshold: float
    CamMovementSpeed_Fast: float
    CamMovementSpeed_Slow: float
    LastFocusObject: FocusableComponent



class CameraBehavior_AIO(gbx_camera_modes.CameraBehavior):
    FirstPersonComponentTranslationOffset: core_uobject.Vector
    CurrentAIO: AdvancedInteractiveObject
    CurrentProxy: AdvancedInteractiveObjectProxy
    CameraData: AIO_CameraData



class CameraBehavior_AutoFollowVehicleRotation(gbx_camera_modes.CameraBehavior):
    RotationRate: float
    EaseInSpeed: float
    bFollowInAir: bool
    bFollowWhileBoosting: bool
    MinVehicleSpeed: float
    InputDelay: float



class CameraBehavior_ExitLadder(gbx_camera_modes.CameraBehavior_InitialRotation):
    ExitTopParams: LadderBehaviorGoalParams
    ExitBottomParams: LadderBehaviorGoalParams
    ExitJumpParams: LadderBehaviorGoalParams



class CameraBehavior_FocusDOF(gbx_camera_modes.CameraBehavior):
    PostProcessSettings: engine.PostProcessSettings
    BlendInTime: float
    BlendOutTime: float
    bWorldFocus: bool
    bDynamicFocus: bool
    TraceDistance: float
    FocusSpeed: float
    DistanceBasedNearTransitionRegionScale: float
    DistanceBasedFarTransitionRegionScale: float
    bForegroundFocus: bool
    ForegroundFocusDistance: float
    ForegroundFocusNearRegionPct: float
    ZoomedForegroundNearRegion: float
    BlurVignetteSharpness: float
    StartBlurVignetteSize: float
    ColorVignetteSharpness: float
    StartColorVignetteSize: float
    LongitudinalMotionScale: float
    LateralMotionScale: float
    bEnableZoomTransition: bool
    BlendOutPPSettings: engine.PostProcessSettings
    AppliedPPSettings: engine.PostProcessSettings
    ZoomMaterialInst: engine.MaterialInstanceDynamic
    def ApplyPostProcess(self, State: gbx_camera_modes.CameraState, DeltaTime: float, BlendWeight: float, PPSettings: engine.PostProcessSettings): ...


class CameraBehavior_Ladder(gbx_camera_modes.CameraBehavior_InitialRotation):
    EnterBottomParams: LadderBehaviorGoalParams
    EnterTopParams: LadderBehaviorGoalParams
    SlidingParams: LadderBehaviorGoalParams



class CameraBehavior_LimitPitchBySlope(gbx_camera_modes.CameraBehavior_InitialRotation):
    SlopeToMaxPitchCurve: engine.RuntimeFloatCurve
    SlopeToMinPitchCurve: engine.RuntimeFloatCurve
    PitchLimitEasingSpeed: float



class CameraBehavior_MainMenu(gbx_camera_modes.CameraBehavior):
    CameraData: MenuMapCameraData
    MenuFlow: MenuMapMenuFlow
    CurrentViewTarget: engine.CameraActor



class CameraBehavior_MeleeFOV(gbx_camera_modes.CameraBehavior_BlendToFOV): ...


class CameraBehavior_MeleeLock(gbx_camera_modes.CameraBehavior_Look):
    LockedTarget: engine.Actor
    MaxLockDistance: float
    MaxHorizontalLockAngle: float
    MaxVerticalLockAngle: float
    LockBreakDistance: float
    LockSpeed: float



class CameraBehavior_PitchFOV(gbx_camera_modes.CameraBehavior):
    PitchFOVCurve: engine.CurveFloat
    PitchFOVScaleCurve: engine.CurveFloat
    MinPitch: float
    MaxPitch: float



class CameraBehavior_RaidSpectator(gbx_camera_modes.CameraBehavior):
    HorizontalOffset: float
    VerticalOffset: float
    MaxRotateSpeed: float
    MaxZoom: float
    MaxZoomSpeed: float
    CameraPitchMin: float
    CameraPitchMax: float
    IronBearAdditionalOffset: core_uobject.Vector



class CameraBehavior_ScriptedDOF(gbx_camera_modes.CameraBehavior):
    BlendOutTime: float
    BlendOutPPSettings: engine.PostProcessSettings
    AppliedPPSettings: engine.PostProcessSettings



class CameraBehavior_SnapLookToTarget(gbx_camera_modes.CameraBehavior): ...


class CameraBehavior_SprintFOV(gbx_camera_modes.CameraBehavior):
    CurrentDelay: float
    BlendPct: float
    bTransitioningToSprintFoV: bool



class CameraBehavior_Sway(gbx_camera_modes.CameraBehavior):
    LocationWaveformScale: core_uobject.Vector
    LocationWaveforms: unreal.WrappedArray[gbx_game_system_core.VectorWaveform]
    RotationWaveformScale: core_uobject.Vector
    RotationWaveforms: unreal.WrappedArray[gbx_game_system_core.VectorWaveform]



class CameraBehavior_VehicleBoost(gbx_camera_modes.CameraBehavior):
    FOVScale: float
    RelativeLocationOffset: core_uobject.Vector
    bBlendWithSpeed: bool
    BlendInSpeed: float
    BlendOutSpeed: float
    bUseBoostFOVAnimation: bool
    BoostAnimationDuration: float
    BoostFOVAnimation: engine.RuntimeFloatCurve
    BoostAnimationFOV: float
    BoostTranslationAnimation: engine.RuntimeFloatCurve
    bAllowBoostFOVAnimationToStop: bool
    bSeparatePowerSlideAndNormalBoost: bool
    PowerSlideBoostAnimationDuration: float
    PowerSlideBoostFOVAnimation: engine.RuntimeFloatCurve
    PowerSlideBoostTranslationAnimation: engine.RuntimeFloatCurve
    bAllowPowerSlideBoostFOVAnimationToStop: bool
    OverrideByParts: unreal.WrappedArray[VehicleOverrideData]



class CameraBehavior_VehicleCollision(gbx_camera_modes.CameraBehavior):
    LocalOriginRayCast: core_uobject.Vector
    DodgeRadius: float
    MinimalRadius: float
    MovementDampingSpeed: float



class CameraBehavior_VehicleFOV(gbx_camera_modes.CameraBehavior_FOV): ...


class CameraBehavior_VehicleLook(gbx_camera_modes.CameraBehavior):
    bFollowGroundNormal: bool
    GroundDetectionOrigin: core_uobject.Vector
    GroundDetectionPoint1: core_uobject.Vector
    GroundDetectionPoint2: core_uobject.Vector
    BankingTolerance: float
    BankingDampingBySpeed: engine.RuntimeFloatCurve
    BaseLookAtPosition: core_uobject.Vector
    LookAtOffsetInTheAir: core_uobject.Vector
    LookAtOffsetInTheAirDamping: float
    LookAtOffsetInTheGroundDamping: float
    bUseCameraFollowVehicleBody: bool
    CameraFollowBodyPitchRotationBySpeed: engine.RuntimeFloatCurve
    CameraFollowBodyRollRotationBySpeed: engine.RuntimeFloatCurve
    CameraBodyFollowDelay: float
    BaseForwardOffset: float
    BaseFOV: float
    DefaultPitch: float
    PitchMin: float
    PitchMax: float
    CameraOffsetDamping: float
    FreeAimMinTime: float
    FreeLookOffset: CameraKeyOffset
    bKeepCameraOffsetsInFreeLook: bool
    ForwardOffsetByPitchAngle: engine.RuntimeFloatCurve
    UpOffsetByPitchAngle: engine.RuntimeFloatCurve
    PitchKeysByYawAngle: unreal.WrappedArray[CameraPitchOffset]
    ClampToRotateOnly: float
    bEnableAutoLookInDrivingCamera: bool
    MinVelocityByTurnRateForAutoLook: engine.RuntimeFloatCurve
    AutoLookPitchDamping: float
    AutoResetDamping: float
    AutoLookYawFixBySpeed: engine.RuntimeFloatCurve
    LatteralOffsetDampingFactor: float
    ForwardOffsetDampingFactor: float
    bAllowAutoLookInReverse: bool
    KeepLookAtRatio: float
    KeepLookAtSpeedTreshold: float
    BodySocketToFollow: str
    StationaryOffset: CameraKeyOffset
    ForwardInterpolationRatio: engine.RuntimeFloatCurve
    ForwardMaxSpeed: float
    ForwardOffset: CameraKeyOffset
    ReverseInterpolationRatio: engine.RuntimeFloatCurve
    ReverseMaxSpeed: float
    ReverseOffset: CameraKeyOffset
    bApplyTurnSettingsInReverse: bool
    TurnInterpolationRatio: engine.RuntimeFloatCurve
    TurnMaxSpeed: float
    TurnOffset: CameraKeyOffset
    LocalOriginRayCast: core_uobject.Vector
    DodgeRadius: float
    MinimalRadius: float
    MovementDampingSpeed: float
    DefaultIntro: CameraIntroBlend
    OverrideByParts: unreal.WrappedArray[VehicleOverrideData]



class CameraBehavior_VehicleTransitionOut(gbx_camera_modes.CameraBehavior):
    RotateSpeed: float
    LookAtFactor: float
    PitchMin: float
    PitchMax: float
    RotationCurve: engine.RuntimeFloatCurve
    LocationCurve: engine.RuntimeFloatCurve
    LookAtSocket: str
    OverrideByParts: unreal.WrappedArray[VehicleOverrideData]
    NoAnimationDuration: float
    ActionComp: gbx_game_system_core.GbxActionComponent



class CameraBehavior_ViewWeaponFOV(gbx_camera_modes.CameraBehavior):
    SplitScreenScale: float



class CameraBehavior_ViewWeaponOffset(gbx_camera_modes.CameraBehavior_OffsetViewModel):
    bSetFOV: bool
    SplitScreenFOVScale: float
    VerticalSplitScreenFOVScale: float
    QuadSplitScreenFOVScale: float



class CameraBehavior_WeaponLook(gbx_camera_modes.CameraBehavior_Look): ...


class CameraBehavior_WeaponRecoil(gbx_camera_modes.CameraBehavior): ...


class CameraBehavior_WeaponSway(gbx_camera_modes.CameraBehavior): ...


class CameraBehavior_WeaponZoomFOV(gbx_camera_modes.CameraBehavior): ...


class CARConsoleAnimInstance(engine.AnimInstance):
    NearRadiusOfPlayer: float
    LastStatus: ECARStatus
    Status: ECARStatus
    bIsLocked: bool
    bIsUnfolding: bool
    bIsActive: bool
    bIsInactive: bool



class Carnivora(engine.Pawn):
    TrackBuilder: CarnivoraTrackBuilder
    LineTracesToExecutePerFrame: int
    LookAheadDirectionPrediction: float
    WheelMaxAngle: float
    AngleMultiplierWheel: float
    DirectionPredictionWheelAngle: float
    DesiredHeightAboveGround: float
    DesiredAdditionalRoll: float
    DesiredAdditionalPitch: float
    bDrawDebugPlaneTilt: bool
    PartLocation: unreal.WrappedArray[float]
    DefaultSocketToGroundDistanceTireTrack: float
    DefaultSocketToGroundDistanceFrontWheel: float
    SMFrame: engine.StaticMeshComponent
    SKTireTrack: gbx_game_system_core.GbxSkeletalMeshComponent
    LeftTread: CarnivoraTread
    RightTread: CarnivoraTread
    FrontRight_SocketNameDistToGround: str
    FrontLeft_SocketNameDistToGround: str
    BackRight_SocketNameDistToGround: str
    BackLeft_SocketNameDistToGround: str
    LeftWheelDotRatioCollision: float
    RightWheelDotRatioCollision: float
    FrontWheelDotRatioCollision: float
    bMustMoveToDoDamage: bool
    bDrawDebugCollisionTreadsAndWheels: bool
    bDoDamageOnTreadAndWheelCollision: bool
    FakeCarnivoraTurrets: unreal.WrappedArray[CarnivoraFakeTurrets]
    bShootLightProjectileAtPlayers: bool
    SquaredDistanceReplicationCorrectionTreshold: float
    bShouldUpdateCarnivoraTiltBasedOnGround: bool
    InitialCarnivoraLocation: core_uobject.Vector
    SplineTriggers: unreal.WrappedArray[SplineTriggers]
    CurrentCarnivoraSplineId: int
    SplineFollower: SplineFollowerComponent
    def StartCarnivoraMovement(self, SplineTriggersId: int): ...
    def SetTrackBuilder(self, NewTrack: CarnivoraTrackBuilder, bReverse: bool): ...
    def SetShouldUpdateTitlBasedOnGround(self, bShouldUpdate: bool): ...
    def SetShouldUpdateTiltBasedOnGround(self, bShouldUpdate: bool): ...
    def SetShouldShootAtPlayers(self, bShootAtPlayers: bool): ...
    def SetCarnivoraTickEnabled(self, bEnabled: bool): ...
    def OnRep_InitialcarnivoraLocation(self): ...
    def OnComponentHitCallback(self, HitComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, NormalImpulse: core_uobject.Vector, Hit: engine.HitResult): ...
    def NotifyTriggerTouched(self, OtherActor: engine.Actor, bIsPlayer: bool): ...


class CarnivoraAnimInstance(engine.AnimInstance):
    CarnivoraOwner: Carnivora



class CarnivoraCannon(engine.Actor):
    CannonMeshComponent: engine.SkeletalMeshComponent
    ShellBoneName: str
    Shell: engine.StaticMesh
    ShellComponent: engine.StaticMeshComponent
    Cannon: engine.Actor
    Carnivora: Carnivora
    SplineFollower: SplineFollowerComponent
    AimingAngle: float
    ProjectileClass: unreal.UClass
    ShellClass: unreal.UClass
    NumberOfProjectile: int
    FrontStartingDistance: float
    HorizontalDispersionAngle: float
    VerticalToHorizontalDispersionRatio: float
    ProjectileSpreadAngle: float
    ProjectileSpeed: float
    ShellAngularVelocity: core_uobject.Vector
    ShellLinearVelocity: float
    TargetDistanceAheadOnSpline: float
    def GetCannon(self, ReturnValue: engine.Actor) -> engine.Actor: ...
    def FireCannon(self): ...


class CarnivoraDamageZoneComponent(engine.BoxComponent):
    OrgAttachParent: engine.SceneComponent
    DamageFormula: gbx_game_system_core.AttributeInitializationData
    VehicleImpulseFactor: float
    CharacterImpulseFactor: float
    DamageCooldownTime: float
    PlayerDamageInfo: CarnivoraDamageZoneInfo
    OtherDamageInfo: CarnivoraDamageZoneInfo
    def OnActorComponentHit(self, HitComp: engine.PrimitiveComponent, Other: engine.Actor, OtherComp: engine.PrimitiveComponent, NormalImpulse: core_uobject.Vector, SweepResult: engine.HitResult): ...


class CarnivoraTrackBuilder(engine.Actor):
    BuilderSpline: engine.SplineComponent
    BodySpline: engine.SplineComponent
    TreadHeightOffset: float
    LeftTreadSpline: engine.SplineComponent
    RightTreadSpline: engine.SplineComponent
    TreadSideOffset: float
    TreadTraceRadius: float
    BodyTraceRadius: float
    TraceHeightOffset: float
    TraceSpacing: float



class CarnivoraTread(engine.Actor):
    MinAngle: float
    MaxAngle: float
    TreadSpline: engine.SplineComponent
    NumberOfPlate: int
    TreadState: WheelState
    PlateMesh: engine.StaticMesh
    TreadSKComponent: engine.SkeletalMeshComponent
    WheelRotationForward: float
    WheelRotationBackward: float
    InstancedPlates: engine.InstancedStaticMeshComponent
    DotRatioCollision: float
    WheelSplineIndexKey: int
    SuspensionWheelRadius: float
    SuspensionAngles: unreal.WrappedArray[float]
    def OnComponentHitCallback(self, HitComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, NormalImpulse: core_uobject.Vector, Hit: engine.HitResult): ...


class GbxCondition_CanSecondaryUseDeployVehicle(gbx_runtime.GbxCondition): ...


class CatchARide(AdvancedInteractiveObject):
    AllColors: unreal.WrappedArray[core_uobject.Color]
    RestrictionType: ECARRestrictionType
    CatchARide_Platform1: CatchARidePlatform
    CatchARide_Platform2: CatchARidePlatform
    bIsDeploymentAllowed: bool
    bIsTeleportToDeployedAllowed: bool
    DeploymentLocationOffset: core_uobject.Vector
    StationName: str
    CannotSpawnText: str
    CatchARideLockedText: str
    CatchARideDisabledText: str
    AssociatedMenu: GFxCARMenu
    OverlappingPlayers: unreal.WrappedArray[OakCharacter_Player]
    def SetDeployedNonInteractiveState(self, bForceDeployed: bool): ...
    def OnVehicleDeployedFromMenu(self): ...
    def OnNewPartEquipped(self, PartType: ECARPartType, PartData: OakCARVehiclePartData): ...
    def OnNewBodyEquipped(self, VehicleData: OakCARVehicleData): ...
    def HandleSecondaryUse(self, UserController: engine.Controller, UsedComponent: engine.PrimitiveComponent): ...
    def CanRespawnVehicle(self, pc: OakPlayerController, VehicleConfig: OakCARMenuVehicleConfig, ReturnValue: bool) -> bool: ...


class CatchARidePlatform(engine.Actor):
    PlatformMesh: engine.StaticMeshComponent
    PlatformSafeZone: engine.BoxComponent
    PlatformSmallVehicleSafeZone1: engine.BoxComponent
    SmallVehicleSpawnSocket1: gbx_game_system_core.SocketComponent
    PlatformSmallVehicleSafeZone2: engine.BoxComponent
    SmallVehicleSpawnSocket2: gbx_game_system_core.SocketComponent
    ScanDuration: float
    EjectStartDuration: float
    IsSupportScanning: bool
    MinSpeedForScan: float
    WaitTimer: engine.TimerHandle
    EjectTimer: engine.TimerHandle
    UpdateTimer: engine.TimerHandle
    VehicleInScan: OakVehicle
    def StopScanFeedback(self): ...
    def OnSafeZoneEndOverlap(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int): ...
    def OnSafeZoneBeginOverlap(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def GetPlatformBlocked(self, ActorToIgnore: engine.Actor, bForSmallVehicle: bool, ReturnValue: bool) -> bool: ...
    def GetOwnedVehicleOnPlatform(self, TestOwner: engine.Actor, bOnlySpawnedByCAR: bool, ReturnValue: OakVehicle) -> OakVehicle: ...
    def DigistructOut(self): ...
    def DigistructIn(self, bIsScanning: bool): ...


class CatchARideProxy(AdvancedInteractiveObjectProxy):

    def OnTurnedOn(self): ...
    def OnTurnedOff(self): ...
    def OnStartForceDeployed(self): ...
    def OnOwningPlayerInRangeCanUse(self): ...
    def OnOwningPlayerInRangeCannotUse(self): ...
    def OnInteractionPossible(self): ...
    def OnInteractionNotPossible(self): ...
    def OnEndForceDeployed(self): ...
    def CanBeUsedByAPlayerInRange(self, ReturnValue: bool) -> bool: ...


class TrophyCaseBaseComponent(engine.StaticMeshComponent):
    BaseTag: str



class ChallengeTrophyBaseComponent(TrophyCaseBaseComponent): ...


class CharacterEchoData(gbx_dialog.CharacterEchoDataBase):
    SpeakerUIName: gbx_game_system_core.GbxUIName
    SpeakerMovie: scaleform_ui.SwfMovie
    SpeakerMediaPlaybackType: ECharacterEchoDataMediaPlaybackType



class CharacterForcedSlidingVolume(engine.Volume): ...


class CharacterGroundSlamData(gbx_runtime.GbxDataAsset):
    GroundSlamGrades: unreal.WrappedArray[CharacterGroundSlamGradeData]
    DefaultLandingData: gbx_game_system_core.LandingData



class CharacterItemPoolExpansionData(gbx_runtime.GbxDataAsset): ...


class CharacterSlidingData(gbx_runtime.GbxDataAsset):
    MinSprintSpeedPctToStartSliding: float
    ControlledMove: unreal.UClass
    FootBone: str
    FootImpact: gbx_game_system_core.ImpactData
    FootImpact1st: gbx_game_system_core.ImpactData
    ElementalSlideEffects: ElementalSlideEffect
    ElementalSlideEffects1P: ElementalSlideEffect
    WwiseEventStart: wwise_audio.WwiseEvent
    WwiseEventStop: wwise_audio.WwiseEvent
    BaseBone: str
    SpeedParticleParameterName: str
    BaseImpact: gbx_game_system_core.ImpactData
    LegsRotationSpeed: float
    MinDesiredAngleRotationBetweenCameraAndLegsYaw: float
    MaxAllowedAimOffset: float
    FootCollisionDistance: float
    FootTraceLateralOffset: float
    FootCollisionStopAngle: float
    FootCollisionStopAngleDot: float
    FootCollisionStopSpeed: float
    LegsCollisionInterpolationSpeed: float
    MinSprintSpeedPctToTriggerSlideJump: float
    JumpGoal: CharacterJumpGoalSetting
    JumpHorizontalSpeedScale: float
    MinForceSlideFloorAngle: float
    ForceSlideFloorZ: float
    MinDownhillSpeedToStartForcedSlide: float
    MaxDirectionDeviationFromDownhillAngle: float



class TravelStationObject(InteractiveObject):
    DefaultFriendsInArea: unreal.UClass
    FriendsInAreaListMenuData: gbx_ui.GbxGFxMenuData
    bResurrectionProximityDetection: bool
    DebugFriendsCount: int
    UsableComponent: gbx_game_system_core.UsableComponent
    MeshComponent: engine.SkeletalMeshComponent
    AreaComponent: gbx_game_system_core.GbxAreaComponent
    FastTravelStationComponent: gbx_travel_station.FastTravelStationComponent
    LevelTravelStationComponent: gbx_travel_station.LevelTravelStationComponent
    FriendsInNextAreaBillboard: GFxBillboardComponent
    CachedFriendsInNextArea: GFxFriendsInArea
    OutOfMapWaypoint: OutOfMapWaypointComponent
    def SetStationResurrectActive(self, bResurrectionActive: bool): ...
    def PlayerExitedArea(self, GbxPC: gbx_game_system_core.GbxPlayerController): ...
    def PlayerEnteredArea(self, GbxPC: gbx_game_system_core.GbxPlayerController): ...
    def OnUsedSecondaryBy(self, UserController: engine.Controller, UsedComponent: engine.PrimitiveComponent): ...
    def OnUsedBy(self, UseEvent: gbx_game_system_core.UseEvent): ...
    def OnTravelStationActivated(self, OtherStation: engine.Actor): ...
    def OnFastTravelStationDiscovered(self, bNoActivationSequence: bool): ...
    def IsDestinationInstalled(self, ReturnValue: bool) -> bool: ...
    def HasNearbyFriends(self, GbxPC: gbx_game_system_core.GbxPlayerController, ReturnValue: bool) -> bool: ...
    def GetStationResurrectActive(self, ReturnValue: bool) -> bool: ...
    def GetNameOfNextLevel(self, ReturnValue: str) -> str: ...
    def CheckTravelDependencies(self): ...


class CheckpointTravelStationObject(TravelStationObject): ...


class CollisionDamageComponent(engine.ActorComponent):
    LastCollisionDamageInfo: LastCollisionDamageInfo
    MinVelocityToCauseDamage: float
    CollisionDamageFormula: gbx_game_system_core.AttributeInitializationData
    HitForceVelocityFactor: float
    DamageMultiplier: engine.GbxAttributeFloat
    AIDamageMultiplier: engine.GbxAttributeFloat
    ConditionalDamageCondition: gbx_runtime.GbxCondition
    ConditionalDamageMultiplier: engine.GbxAttributeFloat
    SelfCollisionDamageFormula: gbx_game_system_core.AttributeInitializationData
    SelfDamageMultiplier: engine.GbxAttributeFloat
    SelfAIDamageMultiplier: engine.GbxAttributeFloat
    DamageCurveRefSpeed: float
    HitCooldown: float
    FrontalCollisionAngle: float
    DamageType: unreal.UClass
    DamageSource: unreal.UClass
    ImpactForceSelection: gbx_game_system_core.ForceSelection
    MyOakVehicle: OakVehicle
    def OnMeshComponentBeginOverlap(self, OverlappedComp: engine.PrimitiveComponent, Other: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def OnHit(self, SelfActor: engine.Actor, OtherActor: engine.Actor, NormalImpulse: core_uobject.Vector, Hit: engine.HitResult): ...


class CommandRing(engine.Actor):
    bOnlyVisibleToOwner: bool
    RelativeActorType: ECommandRingReferenceActorType
    RelativeLocationType: ECommandRingLocationType
    RelativeLocationSearchDistance: float
    RelativeAlignmentType: ECommandRingAlignmentType
    TargetInfo: CommandRingTarget
    def UpdateTarget(self, Target: engine.Actor, Location: core_uobject.Vector, Rotation: core_uobject.Rotator, Base: engine.SceneComponent, SurfaceNormal: core_uobject.Vector): ...
    def SetVisibility(self, bIsVisible: bool): ...
    def ReleaseTarget(self): ...
    def IsTargetValid(self, ReturnValue: bool) -> bool: ...
    def GetTarget(self, ReturnValue: CommandRingTarget) -> CommandRingTarget: ...
    def GetCommandRingTargetWorldLocation(self, TargetInfo: CommandRingTarget, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...
    def ComputeRotation(self, Type: ECommandRingAlignmentType, RefActor: engine.Actor, RefRotation: core_uobject.Rotator, SurfaceNormal: core_uobject.Vector, ReturnValue: core_uobject.Rotator) -> core_uobject.Rotator: ...
    def ComputeLocation(self, Type: ECommandRingLocationType, RefActor: engine.Actor, RefLocation: core_uobject.Vector, SearchDistance: float, SurfaceNormal: core_uobject.Vector, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...
    def CommandRingReleasedTargetEvent__DelegateSignature(self, TargetInfo: CommandRingTarget): ...
    def CommandRingAcquiredTargetEvent__DelegateSignature(self, TargetInfo: CommandRingTarget): ...


class CommandRing_Operative_GRMLN(CommandRing):
    BeamComponent: engine.ParticleSystemComponent
    BeamEmitterName: str
    DroneSocket: str
    BeamStartEvent: wwise_audio.WwiseEvent
    BeamStopEvent: wwise_audio.WwiseEvent
    RingRange: gbx_game_system_core.AttributeInitializationData
    OwnerActionAbility: OakActionAbility_GRMLN
    def StopLookingForTarget(self): ...
    def StartLookingForTarget(self): ...


class Condition_ShouldPlaySpecialEchoCartridgeInsert(gbx_runtime.GbxCondition):
    PercentageChanceAfterFirstTime: float



class ConditionalFlavorTextIO(AdvancedInteractiveObject):
    FlavorTextElements: unreal.WrappedArray[TextElementCondition]
    TitleText: str
    MenuData: gbx_ui.GbxMenuData



class ConsoleCommandSetterIntComponent(engine.SceneComponent):
    Value: int
    Command: str
    bXboxOne: bool
    bPS4: bool
    bWindows: bool



class CorpseableInterface(core_uobject.Interface): ...


class CorpseManager(unreal.UObject):
    TrackedCorpses: unreal.WrappedArray[CorpseRecord]



class CosmeticDamageableActor(engine.Actor):

    def OnTakeDamage(self, Details: CosmeticDamageEventDetails): ...


class CosmeticFrozenActor(engine.Actor):
    DestructibleComponent: apex_destruction.DestructibleComponent



class CrazyEarlAnointmentReroll(AdvancedInteractiveObject):
    ItemPreviewPlayer: OakPlayerController
    SourceItemActor: engine.Actor
    ItemPreviewActor: engine.Actor
    PlayerDisplayInfo: unreal.WrappedArray[PlayerItemDisplayInfo]
    def OnReRolledInventorySourceSet(self, ReRolledOwner: OakPlayerController, ReRolledInventoryActor: engine.Actor): ...
    def OnReRolledInventoryActorReady(self, ReRolledOwner: OakPlayerController, ReRolledInventoryActor: engine.Actor): ...
    def OnRerolled(self, RerollItem: engine.Actor): ...
    def OnRep_ItemPreviewActor(self): ...
    def OnExitMenu(self): ...


class CrazyEarlAnointmentRerollProxy(AdvancedInteractiveObjectProxy):
    ItemPreviewMeshTag: str
    ItemPreviewSocket: str
    DisplayMesh: engine.MeshComponent



class CrazyEarlDoor(AdvancedInteractiveObject):
    CustomizationList: CustomizationList
    def OnPurchase(self, PurchasedItem: OakCustomizationData): ...
    def OnExitMenu(self): ...


class CrazyEarlDoorProxy(AdvancedInteractiveObjectProxy): ...


class CrewQuartersAssetDecorationData(gbx_runtime.GbxDataAsset): ...


class CrewQuartersActorDecorationData(CrewQuartersAssetDecorationData):
    DecorationActorClass: unreal.UClass



class CrewQuartersActorInterface(core_uobject.Interface): ...


class CrewQuartersCountdownActor(engine.Actor):
    OwningRoom: CrewQuartersRoom
    def OnRoomChanging(self, ChangingRoom: gbx_dynamic_room.DynamicRoomBase): ...
    def OnRoomChangeCountdown(self, CountdownTime: float): ...


class CrewQuartersInteractiveObject(AdvancedInteractiveObject):
    CrewQuartersIOMenuData: gbx_ui.GbxMenuData
    OwningRoom: CrewQuartersRoom
    bRestrictUseToOwningPlayer: bool
    def OnRep_OwningRoom(self): ...
    def IsInteractiveObjectOwnedBy(self, User: OakPlayerController, ReturnValue: bool) -> bool: ...
    def ClientOpenMenu(self, OakPC: OakPlayerController): ...


class CrewQuartersDecoration(CrewQuartersInteractiveObject):
    DefaultDecoration: CrewQuartersDecorationData
    DecorationIndex: int
    CurrentDecoration: CrewQuartersDecorationData
    CurrentAnim: engine.AnimSequence
    DecorationMesh: engine.MeshComponent
    DecorationActor: CrewQuartersDecorationDisplayActor
    InitialDecoration: CrewQuartersDecorationData
    CurrentDecorationAsset: CrewQuartersAssetDecorationData
    def StartDefaultAnim(self): ...
    def SetInitialDecoration(self, NewDecoration: CrewQuartersDecorationData): ...
    def SetDecoration(self, NewDecoration: CrewQuartersDecorationData): ...
    def SelectNextDecoration(self): ...
    def OnUsedSecondaryBy(self, UserController: engine.Controller, UsedComponent: engine.PrimitiveComponent): ...
    def OnUsedBy(self, UseEvent: gbx_game_system_core.UseEvent): ...
    def OnRep_CurrentDecoration(self): ...
    def OnDecorationAssetLoaded(self): ...
    def GetAvailableDecorations(self, OutDecorations: unreal.WrappedArray[CrewQuartersDecorationData], InRoomOverride: CrewQuartersRoom): ...
    def ApplyDecoration(self, NewDecoration: CrewQuartersDecorationData): ...


class CrewQuartersDecorationData(engine.DataAsset):
    DisplayName: str
    Description: str
    bUnlockedByDefault: bool
    DecorationAssetReference: core_uobject.SoftObjectPath



class CrewQuartersDecorationDisplayActor(InteractiveObject):
    bSecondaryUseEnabled: bool
    SecondaryUseDef: gbx_game_system_core.UseDefSelection



class CrewQuartersDecorationItemData(gbx_game_system_core.GbxCustomizationData):
    DecorationAssetPath: str
    DisplayName: str
    bIsDLC: bool
    InventorySetup: CustomizationInventoryAssetSetup
    InventoryAspectList: unreal.WrappedArray[gbx_inventory.InventoryAspectData]
    BalanceData: CustomizationInventoryBalanceData
    InventoryData: CustomizationInventoryData
    DefaultPreviewRotation: core_uobject.Rotator
    DlcContentData: online_subsystem_utils.DownloadableContentData



class CrewQuartersGlobalData(engine.DataAsset):
    AvailableRooms: unreal.WrappedArray[gbx_dynamic_room.DynamicRoomBaseData]
    RoomAssignments: unreal.WrappedArray[CrewQuartersRoomAssignment]
    AvailableDecorations: unreal.WrappedArray[CrewQuartersDecorationData]



class CrewQuartersGunRack(engine.Actor):
    OwningRoom: CrewQuartersRoom
    GunRackSlots: unreal.WrappedArray[GunRackSlotData]
    ItemPickupContainer: unreal.UClass
    EquippedInventory: InventorySlotContainer
    def SaveSlot(self, SlotData: GunRackSlotData): ...
    def OnInventoryUnequippedFromSlot(self, InUnequippedInventory: engine.Actor, SlotData: InventorySlotData): ...
    def OnInventoryEquippedOnSlot(self, InEquippedInventory: engine.Actor, SlotData: InventorySlotData): ...
    def CreateEmptyPickup(self, SlotData: GunRackSlotData): ...


class CrewQuartersRoom(gbx_dynamic_room.DynamicRoomBase):
    CrewQuartersGlobals: CrewQuartersGlobalData
    RoomAssignmentIndex: int
    RoomChangeCountdownTime: float
    RoomChangeCountdownIncrement: float
    OwningPlayer: OakCharacter_Player
    RoomAwareActors: unreal.WrappedArray[engine.Actor]
    RoomChangeCountdown: int
    QueuedPlayer: OakCharacter_Player
    QueuedRoom: gbx_dynamic_room.DynamicRoomBaseData
    AreaComponent: gbx_game_system_core.GbxAreaComponent
    def OnRoomChangeCountdownTimer(self): ...
    def OnRep_RoomChangeCountdown(self): ...
    def OnRep_OwningPlayer(self): ...
    def OnDeferredRoomSpawn(self): ...
    def InstanceRoomForPlayer(self, NewOwningPlayer: OakCharacter_Player, RoomToLoad: gbx_dynamic_room.DynamicRoomBaseData): ...
    def ApplyRoomMood(self, NewOwningPlayer: OakCharacter_Player, RoomToLoad: gbx_dynamic_room.DynamicRoomBaseData): ...


class CrewQuartersRoomData(gbx_dynamic_room.DynamicRoomLevelData): ...


class CrewQuartersRoomItemData(engine.DataAsset):
    RoomAssetPath: str
    bIsDLC: bool



class CrewQuartersSkeletalDecorationData(CrewQuartersAssetDecorationData):
    DecorationSkeletalMeshComponent: engine.SkeletalMeshComponent
    DefaultAnimation: engine.AnimSequence
    UseAnimation: engine.AnimSequence
    SecondaryUseAnimation: engine.AnimSequence



class CrewQuartersStaticDecorationData(CrewQuartersAssetDecorationData):
    DecorationStaticMeshComponent: engine.StaticMeshComponent



class CrosshairDataAsset(gbx_runtime.GbxDataAsset):
    CrosshairID: str
    CrosshairFrameName: str



class BoosterData(gbx_runtime.GbxDataAsset):
    BoosterInfos: unreal.WrappedArray[CSBoosterInfo]
    AllowMultipleBoostersAtTheSameTime: bool



class CustomizationInventoryAssetSetup(gbx_runtime.GbxDataAsset):
    ManufacturerData: gbx_inventory.ManufacturerData
    InventoryCategory: gbx_inventory.InventoryCategoryData
    InventoryActorClass: unreal.UClass



class CustomizationInventoryBalanceData(gbx_inventory.InventoryBalanceData): ...


class CustomizationInventoryData(gbx_inventory.InventoryData): ...


class CustomizationList(gbx_runtime.GbxDataAsset):
    CustomizationList: unreal.WrappedArray[gbx_game_system_core.GbxCustomizationData]



class CustomizationProviderInterface(core_uobject.Interface): ...


class DamageableHISM(InteractiveObject):
    DamageHitBox: core_uobject.Box
    def TakeDamageOnInstances(self, HitLocation: core_uobject.Vector, Radius: float, Origin: core_uobject.Vector): ...


class DamageBlockData(gbx_runtime.GbxDataAsset):
    BlockedDamageScale: gbx_game_system_core.AttributeInitializationData
    BlockAngle: gbx_game_system_core.AttributeInitializationData
    BlockDamageSources: unreal.WrappedArray[unreal.UClass]
    BlockDamageTypes: unreal.WrappedArray[unreal.UClass]



class DamageIndicator(umg.UserWidget):
    ShowDuration: float
    FadeOutDuration: float
    DamageCauser: engine.Actor
    def SetDamageCauser(self, NewDamageActor: engine.Actor): ...
    def SetAlpha(self, NewAlpha: float): ...


class DamageLinkNode(InteractiveObject):
    bLinkingEnabled: bool
    LinkBeamSocket: str
    NodeLinkBeam: unreal.UClass
    NodeLinkDistance: gbx_game_system_core.AttributeInitializationData
    NodeLinkDamage: gbx_game_system_core.AttributeInitializationData
    bUseNodeLinkDamage: bool
    EnemyLinkBeam: unreal.UClass
    EnemyLinkDistance: gbx_game_system_core.AttributeInitializationData
    EnemyLinkDamage: gbx_game_system_core.AttributeInitializationData
    EnemyLinkDamageData: unreal.UClass
    bUseEnemyLinkDamageData: bool
    DeathFX: engine.ParticleSystem
    RumbleData: gbx_game_system_core.FeedbackData
    RumbleDistanceOverrides: gbx_game_system_core.RangedDistanceOverrides
    OakDamage: OakDamageComponent
    Targetable: gbx_game_system_core.TargetableComponent
    def GetAvailableSocketNames(self, Array: unreal.WrappedArray[str]): ...


class DeathCircleElapsedTimeValueResolver(gbx_game_system_core.AttributeValueResolver): ...


class DeathCirclePoint(engine.Actor):
    Stage: int
    NextCircleOptions: unreal.WrappedArray[DeathCirclePoint]
    def GetNextStageDeathCirclePoints(self, NextStageDeathCirclePoints: unreal.WrappedArray[DeathCirclePoint]): ...


class DebugMenuCategoryConfig(unreal.UObject):
    ConfigExecData: unreal.WrappedArray[DebugMenuCommandItemData]



class DebugMenuCategoryList(gbx_ui.GbxUserWidget):
    CommandList: gbx_ui.GbxScrollBoxList
    TitleText: umg.TextBlock
    DescriptionText: umg.TextBlock
    CommandText: umg.TextBlock
    CommandListItemData: unreal.WrappedArray[DebugMenuCommandItemData]
    def RemoveAllItems(self): ...
    def OnExecItemActivated(self, Widget: gbx_ui.GbxUserWidget, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnCommandItemSelected(self, Widget: gbx_ui.GbxUserWidget, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def AddExecItem(self, Label: str, Description: str, Command: str, ReturnValue: gbx_ui.GbxListItem) -> gbx_ui.GbxListItem: ...
    def AddConfigExecItems(self, CategoryName: str): ...


class DebugMenuCategoryCharacterSkills(gbx_ui.GbxDebugMenuSubmenu):
    CascadingListRef: OakAbilityDebugMenuCascadingList
    CharacterNameRef: umg.TextBlock
    DescriptionPanelRef: umg.CanvasPanel
    DescriptionRef: umg.TextBlock
    Grade1Details: DebugMenuGradebox
    PrimaryPlayer: OakCharacter_Player
    PrimaryPlayerAbilityManager: OakPlayerAbilityManagerComponent
    PrimaryPlayerCharacterCompoment: PlayerCharacterComponent
    PlayerAbilityTree: OakPlayerAbilityTree
    BalanceState: PlayerBalanceStateComponent
    AbilitiesSorted: unreal.WrappedArray[OakPlayerAbilityTreeItemData_Ability]
    AugmentsSorted: unreal.WrappedArray[OakPlayerAbilityTreeItemData_ActionAbilityAugment]
    def OnSelectionMade(self): ...
    def OnSelectionFailed(self): ...
    def OnPlayerAbilitySlotChanged(self, SlotData: OakPlayerAbilitySlotData): ...
    def OnLevelChanged(self, OldExperienceLevel: int, NewExperienceLevel: int): ...
    def OnCascadeListItemSelected(self, ListItem: GbxListItemText_CharacterDebugMenu): ...
    def OnCascadeListItemRefresh(self, ListItem: GbxListItemText_CharacterDebugMenu): ...
    def OnCascadeListItemClicked(self, ListItem: GbxListItemText_CharacterDebugMenu): ...
    def OnActionAbilityAugmentChanged(self, ActionAbilityClass: unreal.UClass, SlotData: OakActionAbilityAugmentSlotData): ...
    def OnAbilityTreeReset(self): ...
    def OnAbilityPointsChanged(self, RemainingAbilityPoints: int): ...
    def OnAbilityItemChanged(self, ItemData: OakPlayerAbilityTreeItemData): ...
    def ConstructCharacterPage(self): ...


class DebugMenuCategoryEssentials(gbx_ui.GbxDebugMenuSubmenu):
    CategoryList: DebugMenuCategoryList



class GbxReportTags(unreal.UObject):
    Tags: unreal.WrappedArray[GbxReportTag]



class DebugMenuCategoryTelemetry(gbx_ui.GbxDebugMenuSubmenu):
    CategoryList: DebugMenuCategoryList
    TextExecutionGUID: umg.TextBlock
    TextReportTag: umg.TextBlock
    TextGameGUID: umg.TextBlock
    TextKeys: umg.TextBlock
    TextValues: umg.TextBlock



class DefaultCrosshairComponentData(gbx_runtime.GbxDataAsset):
    CrosshairWidgetsData: unreal.WrappedArray[DefaultCrosshairData]
    CrosshairAnimationWidgetNames: unreal.WrappedArray[str]



class DemoMenu(gbx_ui.GbxUmgMenu):
    BackItem: gbx_ui.GbxListItemText
    ContentPanel: gbx_ui.GbxScrollBoxList
    DemoMenuHideTimerHandle: engine.TimerHandle
    def OnDemoSaveSelected(self, Widget: gbx_ui.GbxUserWidget, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBackClicked(self, Widget: gbx_ui.GbxUserWidget, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def ClientConnectTimedout(self): ...


class DialogSelectorImplementation_CheckAttitude(gbx_dialog.DialogSelectorImplementation):
    ObserverParam: gbx_dialog.DialogParameter
    TargetParam: gbx_dialog.DialogParameter
    DesiredAttitude: int



class DialogSelectorImplementation_CheckCombatState(gbx_dialog.DialogSelectorImplementation):
    TestSubjectParam: gbx_dialog.DialogParameter
    bTrueIfInCombat: bool



class DialogSelectorImplementation_CheckLevel(gbx_dialog.DialogSelectorImplementation):
    BalancedActorParam: gbx_dialog.DialogParameter
    MinLevel: int
    MaxLevel: int



class DialogSelectorImplementation_CheckMissionState(gbx_dialog.DialogSelectorImplementation):
    MissionParam: gbx_dialog.DialogParameter
    DesiredMissionStatus: int



class DialogSelectorImplementation_CheckWeaponElement(gbx_dialog.DialogSelectorImplementation):
    WeaponUserParam: gbx_dialog.DialogParameter
    ElementParam: gbx_dialog.DialogParameter



class DialogSelectorImplementation_CheckWeaponIsUnderleveled(gbx_dialog.DialogSelectorImplementation):
    WeaponUserParam: gbx_dialog.DialogParameter
    MinLevelGap: int



class DialogSelectorImplementation_CheckWeaponManufacturer(gbx_dialog.DialogSelectorImplementation):
    WeaponUserParam: gbx_dialog.DialogParameter
    ManufacturerParam: gbx_dialog.DialogParameter



class DialogSelectorImplementation_CheckWeaponRarity(gbx_dialog.DialogSelectorImplementation):
    WeaponUserParam: gbx_dialog.DialogParameter
    Rarity: gbx_inventory.InventoryRarityData



class DialogSelectorImplementation_CheckWeaponType(gbx_dialog.DialogSelectorImplementation):
    WeaponUserParam: gbx_dialog.DialogParameter
    WeaponTypeParam: gbx_dialog.DialogParameter



class DialogSelectorImplementation_GbxCondition(gbx_dialog.DialogSelectorImplementation):
    Condition: gbx_runtime.GbxCondition
    ContextParam: gbx_dialog.DialogParameter



class DialogSelectorImplementation_HasGameplayTag(gbx_dialog.DialogSelectorImplementation):
    ActorParam: gbx_dialog.DialogParameter
    TagParam: gbx_dialog.DialogParameter



class DialogSelectorImplementation_HasShield(gbx_dialog.DialogSelectorImplementation):
    TestSubjectParam: gbx_dialog.DialogParameter



class DialogSelectorImplementation_IsDriver(gbx_dialog.DialogSelectorImplementation):
    CandidateParam: gbx_dialog.DialogParameter
    VehicleParam: gbx_dialog.DialogParameter



class DialogSelectorImplementation_IsFlag(gbx_dialog.DialogSelectorImplementation):
    FlagParam: gbx_dialog.DialogParameter



class DialogSelectorImplementation_IsNearbyPlayerDown(gbx_dialog.DialogSelectorImplementation):
    ObserverParam: gbx_dialog.DialogParameter
    bUseCustomDistance: bool
    CustomDistance: float



class DialogSelectorImplementation_IsPassenger(gbx_dialog.DialogSelectorImplementation):
    CandidateParam: gbx_dialog.DialogParameter
    VehicleParam: gbx_dialog.DialogParameter



class DialogSelectorImplementation_IsPetAlive(gbx_dialog.DialogSelectorImplementation):
    PetOwnerParam: gbx_dialog.DialogParameter



class DialogSelectorImplementation_MissionCommentary(gbx_dialog.DialogSelectorImplementation):
    MissionParam: gbx_dialog.DialogParameter



class DialogSelectorImplementation_MissionCommentaryIndefinite(gbx_dialog.DialogSelectorImplementation):
    RangeStartParam: gbx_dialog.DialogParameter



class DialogSelectorImplementation_OnMissionInRange(gbx_dialog.DialogSelectorImplementation):
    RangeStartParam: gbx_dialog.DialogParameter
    RangeEndParam: gbx_dialog.DialogParameter



class DiscoveryAreaComponent(gbx_game_system_core.GbxAreaComponent):
    DefaultWorldAreaShortName: str
    WorldAreaDisplayName: str
    WorldAreaDisplayUIName: gbx_game_system_core.GbxUIName
    DiscoverySoundEvent: wwise_audio.WwiseEvent
    DiscoveryChallenge: unreal.UClass
    BalanceToRegionDef: RegionData
    ExperienceRewardMultiplier: gbx_game_system_core.AttributeInitializationData



class DiscoveryComponent(engine.ActorComponent):
    DiscoveredLevels: unreal.WrappedArray[DiscoveredLevelInfo]
    DiscoveredPlanets: unreal.WrappedArray[DiscoveredPlanetInfo]
    def UnlockPlanetForAllPlayers(self, WorldContextObject: unreal.UObject, Planet: PlanetData): ...
    def ServerFirstDiscoveryOfArea(self, AreaComponent: DiscoveryAreaComponent): ...
    def OnHostDiscoveredPlanetsChanged(self): ...
    def IsPlanetNew(self, Planet: PlanetData, ReturnValue: bool) -> bool: ...
    def IsPlanetDiscovered(self, Planet: PlanetData, ReturnValue: bool) -> bool: ...
    def IsLevelDiscovered(self, LevelName: str, ReturnValue: bool) -> bool: ...
    def IsCurrentLevelDiscovered(self, ReturnValue: bool) -> bool: ...
    def IsAreaDiscovered(self, AreaName: str, CurrentLevelOnly: bool, ReturnValue: bool) -> bool: ...
    def FixupAreaDiscoveryAchievement(self): ...
    def DiscoverLevelForAllPlayers(self, WorldContextObject: unreal.UObject, LevelName: str, bAutoDiscoverPlanet: bool): ...
    def DiscoverAreaForAllPlayers(self, WorldContextObject: unreal.UObject, AreaName: str): ...
    def ClientUnlockPlanet(self, Planet: PlanetData): ...
    def ClientDiscoverLevel(self, LevelName: str): ...


class DisplacementZone(InteractiveObject):
    ClassesToPush: unreal.WrappedArray[unreal.UClass]
    Speed: float
    SpeedPullToCenter: float
    BoxCollision: engine.BoxComponent
    ArrowDirectionComponent: engine.ArrowComponent



class DisplayedNotificationWidget(gbx_ui.GbxUserWidget):
    MessageText: umg.TextBlock
    def SetMessageText(self, Text: str): ...
    def OnHideComplete__DelegateSignature(self): ...
    def OnHidden__DelegateSignature(self): ...
    def OnDisplayed__DelegateSignature(self): ...
    def Hidden(self): ...
    def Displayed(self): ...


class DodgeTriggerZoneComponent(engine.ActorComponent):
    MinVelocityToDodge: float
    MaxVelocityToScale: float
    DodgeLength: float
    Radius: float
    MaxScale: float
    StartOffsetX: float
    OffsetZ: float
    PreviousInZoneActors: unreal.WrappedArray[engine.Actor]



class DownloadableEntitlementCategoryData(engine.DataAsset):
    CategoryName: str
    CategoryDescription: str



class DownloadableEntitlementPartData(engine.DataAsset):
    AssetGuid: core_uobject.Guid



class DownloadableEntitlementPartData_Currency(DownloadableEntitlementPartData):
    CurrencyCategory: gbx_inventory.InventoryCategoryData



class DownloadableEntitlementSourceData(engine.DataAsset):
    DisplayName: str
    SourceName: str
    ParentSourceData: DownloadableEntitlementSourceData



class DownloadableExpansionData(online_subsystem_utils.DownloadableContentData):
    LevelTravelPairs: unreal.WrappedArray[DlcLevelTravelPair]
    GatewayStationData: gbx_travel_station.FastTravelStationData
    ZoneMapList: ZoneMapListData
    LevelTravelDataLists: unreal.WrappedArray[LevelTravelDataListStationPatch]
    DescriptionForStartDLC: str
    RegionManagerData: RegionManagerData
    VehicleSpawnPoolList: core_uobject.SoftObjectPath
    ChallengeLists: unreal.WrappedArray[gbx_game_system_core.ChallengeList]
    GameStatLists: unreal.WrappedArray[gbx_game_system_core.GameStatList]
    SoftVehicleLoadouts: unreal.WrappedArray[str]
    ResolvedVehicleLoadouts: unreal.WrappedArray[OakCARMenuLoadout]
    LoadingScreenData: OakLoadingScreenExpansionData
    MayhemModeData: unreal.WrappedArray[OakMayhemModifiersDataAsset]
    MayhemModeUIData: unreal.WrappedArray[OakMayhemUIDataAsset]
    MayhemModeTwoData: unreal.WrappedArray[MayhemOverrideDataAsset]
    ProgressChallengeCategories: unreal.WrappedArray[gbx_game_system_core.ChallengeCategoryData]
    AvailableZoneChallengeFilters: unreal.WrappedArray[ChallengeFilterType]
    AvailableGalaxyChallengeFilters: unreal.WrappedArray[ChallengeFilterType]
    CrewQuartersDecorations: unreal.WrappedArray[CrewQuartersDecorationData]
    CrazyEarlCustomizations: unreal.WrappedArray[gbx_game_system_core.GbxCustomizationData]
    LevelledSaveGameData: LevelledSaveGameData
    ZoneMapAdditions: unreal.WrappedArray[AdditionalZoneMapData]
    GuardianRankRewards: unreal.WrappedArray[GuardianRankRewardData]
    GuardianRankPerks: unreal.WrappedArray[GuardianRankPerkData]
    VaultCardRewards: unreal.WrappedArray[OakVaultCardRewardData]
    GlobalVaultCardData: VaultCardGeneralData
    ItemPoolToReplaceWithRandomItemPool: gbx_inventory.ItemPoolData
    RandomDateBasedItemPools: unreal.WrappedArray[gbx_inventory.ItemPoolCollection]
    bEnablesBTSMenu: bool



class DuelArena(engine.Actor):
    ArenaSetupTime: float
    ArenaTakeDownTime: float
    DuelingPlayers: unreal.WrappedArray[PlayerDuelArenaState]
    DuelGlobals: DuelGlobals
    DuelManager: DuelManager
    DuelStatus: EActiveDuelStatus
    TimerStartTime: float
    NumParticipants: int
    DuelMode: EDuelMode
    def K2_InitDuelArena(self): ...
    def GetTimeBeforeDuelStarts(self, ReturnValue: float) -> float: ...
    def GetMaxDuelLength(self, ReturnValue: float) -> float: ...
    def GetMaxArenaRadius(self, ReturnValue: float) -> float: ...
    def GetDuelTimeRemaining(self, ReturnValue: float) -> float: ...


class DuelGlobals(gbx_runtime.GbxDataAsset):
    DuelInitiateAction: unreal.UClass
    DamageSourceForInitiatingDuels: unreal.UClass
    Settings_OnFoot: DuelModeSettings
    Settings_Vehicle: DuelModeSettings
    ReviveDownedPlayerDelay: float
    DuelTeams: unreal.WrappedArray[DuelTeamGroup]
    EnterVehicleDuelErrorMessage: str



class DuelManager(engine.Actor):
    ActiveDuelArenas: unreal.WrappedArray[DuelArena]
    ActiveDuels: ActiveDuelState
    PotentialDuelTotems: unreal.WrappedArray[DuelTotem]
    DuelGlobals: DuelGlobals
    def MulticastUnacceptedDuel(self, Player: OakCharacter_Player, DuelInstigator: OakCharacter_Player): ...
    def MulticastDuelWon(self, Winners: unreal.WrappedArray[OakCharacter_Player], Classification: EDuelClassification): ...
    def MulticastDuelTimedOut(self, Player: OakCharacter_Player): ...
    def MulticastDuelStarted(self, Participants: unreal.WrappedArray[OakCharacter_Player]): ...
    def MulticastDuelSetupStarted(self, Participants: unreal.WrappedArray[OakCharacter_Player]): ...
    def MulticastDuelLost(self, Player: OakCharacter_Player, LoseReason: EDuelLoseReason, Classification: EDuelClassification): ...
    def MulticastDuelLengthElapsed(self, Player: OakCharacter_Player): ...
    def MulticastDuelInitiated(self, Player: OakCharacter_Player, TargetedPlayer: OakCharacter_Player): ...
    def MulticastDuelCanceled(self, Player: OakCharacter_Player): ...
    def MulticastAcceptedDuel(self, Player: OakCharacter_Player, DuelInstigator: OakCharacter_Player): ...


class DuelTotem(InteractiveObject):
    FailsafeDestroyDelay: float
    UsableComponent: gbx_game_system_core.UsableComponent
    PlayerInstigator: OakCharacter_Player
    NumParticipants: int
    AcceptedPlayers: unreal.WrappedArray[OakCharacter_Player]
    TimerStartTime: float
    DestroyReason: EDuelTotemDestroyReason
    DuelState: EPotentialDuelState
    DuelMode: EDuelMode
    DuelGlobals: DuelGlobals
    def OnRep_NumParticipants(self): ...
    def OnRep_DuelState(self): ...
    def OnRep_DestroyReason(self): ...
    def OnRep_AcceptedPlayers(self): ...
    def OnNumParticipantsChanged(self, NewNumParticipants: int): ...
    def OnDuelStateChanged(self, NewDuelState: EPotentialDuelState): ...
    def OnDestroyTotem(self, TheDestroyReason: EDuelTotemDestroyReason): ...
    def OnAcceptedPlayersChanged(self): ...
    def HandleUsedEvent(self, UseEvent: gbx_game_system_core.UseEvent): ...
    def GetTimeBeforeTimeout(self, ReturnValue: float) -> float: ...
    def GetTimeBeforeDuelStarts(self, ReturnValue: float) -> float: ...
    def GetPlayerInstigator(self, ReturnValue: OakCharacter_Player) -> OakCharacter_Player: ...
    def GetNumParticipants(self, ReturnValue: int) -> int: ...
    def GetAcceptedPlayers(self, ReturnValue: unreal.WrappedArray[OakCharacter_Player]) -> unreal.WrappedArray[OakCharacter_Player]: ...


class EchoCastMenuDescription(gbx_runtime.GbxDataAsset):
    Items: unreal.WrappedArray[EchoCastMenuDescriptionItem]



class OptionDescriptionItem(gbx_runtime.GbxDataAsset):
    OptionType: EOptionType
    OptionItemType: EOptionItemType
    OptionItemName: str
    OptionDescriptionTitle: str
    OptionDescriptionText: str
    SliderMin: float
    SliderMax: float
    SliderStep: float
    SliderIsInteger: bool
    SpinnerOptions: unreal.WrappedArray[str]
    SpinnerWrapEnabled: bool
    DropDownOptions: unreal.WrappedArray[str]
    ButtonBinding: gbx_input.GbxInputKeyRebindData_Button
    AxisBinding: gbx_input.GbxInputKeyRebindData_Axis
    AxisScaleVector: core_uobject.Vector
    DrivingOptionDescriptionLink: OptionDescriptionItem
    BooleanOnText: str
    BooleanOffText: str
    IsDesktop: bool
    IsQuail: bool
    IsXboxOne: bool
    AvailableOnNewerXboxes: bool
    IsXboxSeriesX: bool
    IsPS4: bool
    AvailableOnNewerPlayStations: bool
    IsPS5: bool
    IsOnlyAvailableInFrontendForSplitscreen: bool
    IsPrimaryPlayerOnly: bool
    HelperTexture: engine.Texture2D



class EchoCastMenuDescriptionItem(OptionDescriptionItem):
    Enabled: bool
    StreamingInteractionEvent: OakStreamingInteractionEvent



class OakWeapon(gbx_weapon.Weapon):
    GripPartType: int
    ForegripPartType: int
    MagPartType: int
    ModePartType: int
    ModeSwitchPartType: int
    BarrelPartType: int
    BoltPartType: int
    TriggerPartType: int
    HammerPartType: int
    ScopePartType: int
    MeleePartType: int
    CustomAPartType: int
    CustomBPartType: int
    bHasPistolStock: bool
    HolsteredSizeType: EWeaponHolsteredSizeType
    BalanceStateComponent: WeaponBalanceStateComponent
    CenterCrosshairViewModelLocationOffset: core_uobject.Vector
    CenterCrosshairViewModelRotationOffset: core_uobject.Rotator
    AudioBodyLoopState: int
    bAmpEffectActive: bool
    WeaponSkin: WeaponSkinPartData
    QuickEquipTime: engine.GbxAttributeFloat
    ElementalEffectBucketType: EOakElementalStackBucketType
    bWeaponUsingCollision: bool
    def UpdateBodyLoopActivity(self): ...
    def ReconfigureWeaponAudio(self, UseModeIdx: int, ConfigureEvents: unreal.WrappedArray[WeaponConfigurationEvent], ConfigureRtpcs: unreal.WrappedArray[WeaponConfigurationRtpc], bAdditive: bool): ...
    def OnRep_WeaponSkin(self): ...
    def OnRep_UpdateAmpEffects(self): ...
    def K2_OnWeaponSkinApplied(self): ...
    def GetPartTypeValue(self, PartType: EOakWeaponPartType, ReturnValue: int) -> int: ...
    def GetManufacturer(self, ReturnValue: gbx_inventory.ManufacturerData) -> gbx_inventory.ManufacturerData: ...
    def CloneAudioConfiguration(self, TargetComponent: wwise_audio.WwiseAudioComponent, UseModeIdx: int): ...


class EchoDevice(OakWeapon):
    PlayerOwner: OakCharacter_Player
    ScreenMaterialIndex: int
    ProjectionFX1PComponent: engine.ParticleSystemComponent
    ProjectionFX3PComponent: engine.ParticleSystemComponent
    InMenuFX3PComponent: engine.ParticleSystemComponent
    CloseMenuFX3PComponent: engine.ParticleSystemComponent
    ScreenMaterialPrivate: engine.MaterialInstanceDynamic
    AudioComponentPrivate: wwise_audio.WwiseAudioComponent
    EchoCustomizationTarget: gbx_game_system_core.GbxCustomizationTargetData
    EquippedIdleCameraToEchoLocationOffset: core_uobject.Vector
    EquippedIdleCameraToEchoRotationOffset: core_uobject.Rotator
    QuickFirstPersonUnequipAction: unreal.UClass
    QuickFirstPersonEquipAction: unreal.UClass
    ProjectionFXDelayAfterIdle: float
    MissionDeliveryOrientationRow: str
    EquipSound: wwise_audio.WwiseEvent
    UnequipSound: wwise_audio.WwiseEvent
    DPadPressSound: wwise_audio.WwiseEvent
    DPadReleaseSound: wwise_audio.WwiseEvent
    DPadSoundSocket: str
    DPadDeadZone: float
    DPadSynthSound: wwise_audio.WwiseEvent
    ConfirmSound: wwise_audio.WwiseEvent
    ErrorSound: wwise_audio.WwiseEvent
    ButtonPressDuration: float
    SoundSetSwitch: wwise_audio.WwiseSwitch
    CustomizationComponent: OakCustomizationComponent
    ProjectionSocketName: str
    OrientationDataTable: engine.DataTable
    ScreenDataTable: engine.DataTable
    ProjectionFX1P: gbx_weapon.WeaponRegisterAttachmentEffectData
    ProjectionFX3P: gbx_weapon.WeaponRegisterAttachmentEffectData
    InMenuFX3P: gbx_weapon.WeaponRegisterAttachmentEffectData
    CloseMenuFX3P: gbx_weapon.WeaponRegisterAttachmentEffectData
    BackdropOnAndLoopParticle: engine.ParticleSystem
    BackdropOffParticle: engine.ParticleSystem
    HalfWidthBackdropOnAndLoopParticle: engine.ParticleSystem
    HalfWidthBackdropOffParticle: engine.ParticleSystem
    BackDropFXDepth: float
    BackDropTranslucencySortPriority: int
    ProjectionFXPositionParameterName: str
    DefaultProjectionFXHeight: float
    def OnExitStatusMenu(self): ...
    def OnEnterStatusMenu(self): ...
    def OnCustomizationRemoved(self, Customization: gbx_game_system_core.GbxCustomizationData): ...
    def OnCustomizationApplied(self, Customization: gbx_game_system_core.GbxCustomizationData): ...


class EchoDeviceAnimInstance(gbx_game_system_core.GbxAnimInstance):
    EchoDeviceOwner: EchoDevice
    bOutsideOfMenuMode: bool
    bButton1Pressed: bool
    bButton2Pressed: bool
    bButton3Pressed: bool
    DPadXAxis: float
    DPadYAxis: float
    DPadPosition: core_uobject.Vector2D



class EchoDeviceUIData(gbx_runtime.GbxDataAsset):
    bEnableMouseInput: bool
    MouseXInputAction: str
    MouseYInputAction: str
    MinimumMouseActivationDelta: float



class EchoLogData(gbx_inventory.InventoryData_Simple):
    Dialog: gbx_dialog.DialogTimeSlotReference
    BlockedStartMethod: EEchoLogBlockedStartMethod
    DisplayCategory: EEchoLogDisplayCategory
    AreaName: str
    bShouldShowInUI: bool



class EchoManager(unreal.UObject):
    CurrentEchoInfoStack: unreal.WrappedArray[EchoInfo]



class ElementalEffectCollectionData(gbx_game_system_core.EffectCollectionData):
    bHasElementalEffect: bool
    bHasElementalAudio: bool
    bFallbackToDefault: bool
    ElementalEffect: engine.ParticleSystem
    ElementalAudio: wwise_audio.WwiseEvent



class ElementalInteractionComponent(engine.ActorComponent):
    InteractionMode: EElementalInteractionMode
    bIgnoreDamage: bool
    NaturalState: ElementalInteractionData
    SupportedStates: unreal.WrappedArray[SupportedElementalInteractionData]
    InitialState: ElementalInteractionData
    bIsInitiallySource: bool
    InitialSourceDuration: float
    ElementalInteractionManager: ElementalInteractionManager
    InstigatorController: engine.Controller
    CurrentState: ElementalInteractionData
    bIsSource: bool
    PendingState: ElementalInteractionData
    ClosestSourceComponent: ElementalInteractionComponent
    PendingStateHitLocation: engine.Vector_NetQuantize
    TransitionPercent: float
    bUseDamagePrimitives: bool
    DamagePrimitiveNames: unreal.WrappedArray[str]
    DamagePrimitives: unreal.WrappedArray[engine.PrimitiveComponent]
    bUseInteractionPrimitives: bool
    InteractionPrimitiveNames: unreal.WrappedArray[str]
    InteractionPrimitives: unreal.WrappedArray[engine.PrimitiveComponent]
    bInheritTeamFromOwner: bool
    Team: gbx_game_system_core.Team
    AttitudeDamageRules: gbx_game_system_core.AttitudeDamageRules
    bForceDamageToPlayerControlled: bool
    IgnoredElementalInteractionComponents: unreal.WrappedArray[ElementalInteractionComponent]
    DamageTriggeredInteraction: ElementalDamageTriggeredInteractionData
    bHasElementalEffects: bool
    EffectPrimitiveNames: unreal.WrappedArray[str]
    EffectPrimitives: unreal.WrappedArray[engine.PrimitiveComponent]
    EffectAudioComponent: wwise_audio.WwiseAudioComponent
    EffectSizePrimitiveNames: unreal.WrappedArray[str]
    bCustomEffectSize: bool
    EffectSize: float
    def SetElementalInteractionMode(self, NewInteractionMode: EElementalInteractionMode): ...
    def SetElementalInteractionConfiguration(self, ElementalInteractionConfigurationData: ElementalInteractionConfigurationData): ...
    def OnRep_PendingStateData(self): ...
    def OnRep_PendingState(self): ...
    def OnRep_CurrentState(self): ...
    def OnEndInteractionOverlap(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int): ...
    def OnEndDamageOverlap(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int): ...
    def OnBeginInteractionOverlap(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def OnBeginDamageOverlap(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def NotifySourceDurationEnded(self): ...
    def K2_BeginInteraction(self, NewState: ElementalInteractionData, bInIsSource: bool, SourceDuration: float, NewInstigatorController: engine.Controller): ...
    def IsInElementalState(self, State: ElementalInteractionData, ReturnValue: bool) -> bool: ...
    def ComputeEffectSize(self, EffectSizeComputationType: EElementalEffectSizeComputationType, EffectSizeScale: float): ...


class ElementalInteractionConfigurationData(gbx_runtime.GbxDataAsset):
    InteractionMode: EElementalInteractionMode
    bIgnoreDamage: bool
    NaturalState: ElementalInteractionData
    SupportedStates: unreal.WrappedArray[SupportedElementalInteractionData]
    InitialState: ElementalInteractionData
    bIsInitiallySource: bool
    InitialSourceDuration: float



class ElementalInteractionData(gbx_runtime.GbxDataAsset):
    SourceMode: EElementalInteractionSourceMode
    DamageType: unreal.UClass
    InitiatingDamageType: unreal.UClass
    DamageAmount: gbx_game_system_core.AttributeInitializationData
    InitialDamageDelay: float
    DamageInterval: float
    DamageTriggeredInteractionChance: float
    DamageTriggeredDuration: float
    Transitions: unreal.WrappedArray[ElementalInteractionTransitionData]
    BaseStatusEffectChance: gbx_game_system_core.AttributeInitializationData
    BaseStatusEffectDamage: gbx_game_system_core.AttributeInitializationData
    BaseStatusEffectDuration: gbx_game_system_core.AttributeInitializationData
    GbxNavArea: gbx_nav.GbxNavArea
    bMimicBasedOnDamageType: bool
    NavArea: unreal.UClass



class ElementalInteractionData_Generated(ElementalInteractionData): ...


class ElementalInteractionManager(engine.Actor):
    PostPhysicsTickFunction: ElementalInteractionManagerPostPhysicsTickFunction
    DamageSource: unreal.UClass
    ComponentsNeedingSourceUpdate: unreal.WrappedArray[ElementalInteractionComponent]
    ComponentsNeedingTransitionUpdate: unreal.WrappedArray[ElementalInteractionComponent]
    LargeLiquidBodies: unreal.WrappedArray[LargeLiquidBody]
    TickingPuddles: unreal.WrappedArray[ElementalPuddle]
    PendingPuddleCollisionUpdates: unreal.WrappedArray[ElementalPuddle]
    TickingSplats: unreal.WrappedArray[Splat]
    MaterialInstanceDynamicPool: unreal.WrappedArray[engine.MaterialInstanceDynamic]



class ElementalPuddleOverlapCollisonComponent(engine.PrimitiveComponent):
    ProbeColor: core_uobject.Color
    ProbePoints: unreal.WrappedArray[core_uobject.Vector]
    ProbeRadius: float
    BodySetup: engine.BodySetup



class ElementalPuddle(engine.Actor):
    ElementalInteractionManager: ElementalInteractionManager
    PuddleCollisionOptions: ProjectedMeshOptions
    PuddleCollision: procedural_mesh_component.ProceduralMeshComponent
    PuddleCollisionSurfaceArea: float
    PuddleOverlapProbeSphereRadius: float
    PuddleOverlapCollision: ElementalPuddleOverlapCollisonComponent
    ElementalInteraction: ElementalInteractionComponent
    BalanceState: gbx_game_system_core.BalanceStateComponent
    VisualComponent: engine.PrimitiveComponent
    ElementalPuddleConfiguration: ElementalPuddleConfigurationData
    PuddleState: EPuddleState
    AudioComponent: wwise_audio.WwiseAudioComponent
    CurrentOpacity: float
    CurrentScale: float
    Scale2D: core_uobject.Vector2D
    bOverrideColor: bool
    Color: core_uobject.LinearColor
    ColorHighlights: core_uobject.LinearColor
    bEnableRipples: bool
    bOverrideNormalStrength: bool
    bOverrideMovementSpeed: bool
    RipplesStrength: float
    RipplesSize: float
    RipplesSpeed: float
    NormalStrength: float
    MovementSpeed: float
    bWasSpawned: bool
    OverrideTraceDistance: float
    SpawnTransitionTime: float
    InitialOpacity: float
    InitialScale: float
    FullSizeOpacity: float
    FullSizeScale: float
    LifeTime: float
    CleanUpTransitionTime: float
    CleanUpOpacity: float
    CleanUpScale: float
    ReplicatedCleanUpDuration: float
    NavObstacle: gbx_nav.HavokNavObstacle
    ParticleSystem: engine.ParticleSystemComponent
    def SpawnElementalPuddle(self, WorldContextObject: unreal.UObject, PuddleClass: unreal.UClass, SpawnTransform: core_uobject.Transform, PuddleConfiguration: ElementalPuddleConfigurationData, PuddleSpawnData: ElementalPuddleSpawnData, AutoAlignTraceDistance: float, SpawnOwner: engine.Actor, OverrideFullSizeScale: float, OverrideInstigator: engine.Pawn, ReturnValue: ElementalPuddle) -> ElementalPuddle: ...
    def SimpleSpawnElementalPuddle(self, WorldContextObject: unreal.UObject, SimpleSpawnData: ElementalPuddleSimpleSpawnData, SpawnTransform: core_uobject.Transform, SpawnOwner: engine.Actor, OverrideInstigator: engine.Pawn, ReturnValue: ElementalPuddle) -> ElementalPuddle: ...
    def OnRep_CleanUpDuration(self): ...
    def K2_CleanUpPuddle(self, CleanUpTime: float): ...


class ElementalPuddle_Decal(ElementalPuddle):
    PuddleDecal: engine.DecalComponent



class ElementalPuddle_LargeLiquidBody(ElementalPuddle):
    PuddleMesh: procedural_mesh_component.ProceduralMeshComponent



class ElementalPuddle_Mesh(ElementalPuddle):
    PuddleMesh: engine.StaticMeshComponent
    bSquarePuddle: bool
    bMaskEdges: bool
    bOverrideDepthFade: bool
    DepthFade: float



class ElementalPuddleConfigurationData(gbx_runtime.GbxDataAsset):
    ElementalInteractionConfiguration: ElementalInteractionConfigurationData
    ElementalEffectSizeScale: float
    PuddleDecalMaterial: engine.MaterialInterface
    PuddleDecalMaterial_Ripples: engine.MaterialInterface
    PuddleMeshMaterial: engine.MaterialInterface
    PuddleMeshMaterial_Ripples: engine.MaterialInterface
    LargeLiquidBodySurfaceMaterial: engine.MaterialInterface
    Color: core_uobject.LinearColor
    ColorHighlights: core_uobject.LinearColor
    NormalStrength: float
    MovementSpeed: float
    DepthFade: float
    NaturalStateAudioLoop: wwise_audio.WwiseEvent
    ParticleSystem: engine.ParticleSystem
    ParticleSystemSurfaceAreaScalar: float
    NaturalStateEmitterNames: unreal.WrappedArray[str]
    NaturalStatePhysMat: engine.PhysicalMaterial



class ElementalPuddleSimpleSpawnData(gbx_runtime.GbxDataAsset):
    PuddleClass: unreal.UClass
    PuddleConfiguration: ElementalPuddleConfigurationData
    PuddleSpawnData: ElementalPuddleSpawnData
    AutoAlignTraceDistance: float
    OverrideFullSizeScale: float



class ElementalPuddleSpawnData(gbx_runtime.GbxDataAsset):
    SpawnTransitionTime: float
    InitialOpacity: float
    InitialScale: float
    FullSizeOpacity: float
    FullSizeScale: float
    LifeTime: float
    CleanUpTransitionTime: float
    CleanUpOpacity: float
    CleanUpScale: float
    GroundingDecalCleanUpDelay: float



class Elevator(InteractiveObject):
    ElevatorMesh: engine.StaticMeshComponent
    Floor1Position: engine.StaticMeshComponent
    Floor2Position: engine.StaticMeshComponent
    ElevatorMovementTimeline: engine.TimelineComponent
    NavMeshSection: gbx_nav.GbxNavMeshSectionComponent
    ElevatorMovementSpline: engine.SplineComponent
    bForceBaseBoundedCharacters: bool
    bCylindricalElevatorBounds: bool
    bFastAttachedMoveBasedCharacters: bool
    ElevatorBounds: engine.BoxComponent
    ElevatorMovementBounds: engine.BoxComponent
    FloatCurve: engine.CurveFloat
    SwitchDelayTime: float
    bStartAtFloor2: bool
    bUseTimeForTravel: bool
    ElevatorSpeed: float
    ElevatorTravelTime: float
    InternalButtons: unreal.WrappedArray[InteractiveObject]
    Floor1RecallButtons: unreal.WrappedArray[InteractiveObject]
    Floor2RecallButtons: unreal.WrappedArray[InteractiveObject]
    StartedMovingAudio: wwise_audio.WwiseEvent
    StoppedMovingAudio: wwise_audio.WwiseEvent
    StartMovingFeedback: gbx_game_system_core.FeedbackData
    StopMovingFeedback: gbx_game_system_core.FeedbackData
    bCrushPlayers: bool
    TimelinePlayRate: float
    RepOverrideTimelinePlayRate: float
    Floor1Location: core_uobject.Vector
    Floor2Location: core_uobject.Vector
    Floor1Rotation: core_uobject.Quat
    Floor2Rotation: core_uobject.Quat
    DesiredFloor: int
    bStoppedBetweenFloor: bool
    CurrentPercentage: float
    bHasEverMoved: bool
    OverlappingCharacters: unreal.WrappedArray[OakCharacter]
    LastUpdateBoundedCharacters: unreal.WrappedArray[OakCharacter]
    def TimelineFinishedCallback(self): ...
    def TimelineCallback(self, Val: float): ...
    def TeleportFloor2(self, NewLocation: core_uobject.Vector, NewRotation: core_uobject.Rotator): ...
    def TeleportFloor1(self, NewLocation: core_uobject.Vector, NewRotation: core_uobject.Rotator): ...
    def SetFloor2Rotation(self, NewRotation: core_uobject.Rotator): ...
    def SetFloor2Location(self, NewLocation: core_uobject.Vector): ...
    def SetFloor1Rotation(self, NewRotation: core_uobject.Rotator): ...
    def SetFloor1Location(self, NewLocation: core_uobject.Vector): ...
    def OnRep_StoppedBetweenFloor(self): ...
    def OnRep_Floor2Rotation(self): ...
    def OnRep_Floor2Location(self): ...
    def OnRep_Floor1Rotation(self): ...
    def OnRep_Floor1Location(self): ...
    def OnRep_DesiredFloor(self): ...
    def OnRep_CurrentPercentage(self): ...
    def OnEndBoundsOverlap(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int): ...
    def OnBeginBoundsOverlap(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def GetFloor2Location(self, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...
    def GetFloor1Location(self, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...
    def ElevatorTouched(self, OverlappedComp: engine.PrimitiveComponent, Other: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def ElevatorStopMovement(self): ...
    def ElevatorStartsMoving(self): ...
    def ElevatorReachedFloor2(self): ...
    def ElevatorReachedFloor1(self): ...
    def ElevatorReachedFloor(self): ...
    def ElevatorMoveToFloor2(self, OverrideSpeed: float): ...
    def ElevatorMoveToFloor1(self, OverrideSpeed: float): ...
    def ElevatorInternalButtonPressed(self): ...
    def ElevatorFloor2RecallPressed(self): ...
    def ElevatorFloor1RecallPressed(self): ...
    def ElevatorButtonPressed(self, PressedButton: InteractiveObject): ...
    def ChangeElevatorTravelTime(self, NewTime: float): ...
    def ChangeElevatorSpeed(self, NewSpeed: float): ...


class OakVehicleAnimInstance(phys_xvehicles.VehicleAnimInstance):
    OakVehicle: OakVehicle
    WheeledComponent: gbx_vehicle.WheeledVehicleMovementComponentNW
    HoverComponent: gbx_vehicle.VehicleHoverComponent
    GearShiftSlotName: str
    GearShiftUp: engine.AnimSequenceBase
    GearShiftDown: engine.AnimSequenceBase
    def PlayGearShiftAnim(self, Gear: int, bIsUpShifting: bool): ...
    def OwnerPostBeginPlay(self): ...


class EmperorVehicleAnimInstance(OakVehicleAnimInstance):
    bHasHeavyWheels: bool
    bHasThreads: bool
    F_L_Threads_MID: engine.MaterialInstanceDynamic
    F_R_Threads_MID: engine.MaterialInstanceDynamic
    R_L_Threads_MID: engine.MaterialInstanceDynamic
    R_R_Threads_MID: engine.MaterialInstanceDynamic
    ThreadMaterialAnimDivider: float
    ThreadUVOffsetParam: str
    HellFireRecoilOffset: core_uobject.Vector
    bHasGunnerSeatOccupant: bool
    bHasDriverSeatOccupant: bool
    bHasLeftTurretOccupant: bool
    bHasRightTurretOccupant: bool
    bHasTurretUser: bool
    bIsDroneDoorOpen: bool
    bIsDroneOutside: bool



class EndGamePartMinGameStageAttributeValueResolver(gbx_game_system_core.AttributeValueResolver):
    GameStageToReturnWhenEndGamePartsAreAllowed: gbx_game_system_core.AttributeInitializationData
    GameStageToReturnWhenEndGamePartsAreNotAllowed: gbx_game_system_core.AttributeInitializationData
    OverrideEnableCondition: gbx_runtime.GbxCondition



class OakCondition_IsEndGamePartGuaranteedForLoot(gbx_runtime.GbxCondition): ...


class EnemyExperienceMultiplierAttributeValueResolver(gbx_game_system_core.AttributeValueResolver):
    DefaultMultiplier: float



class EnvQueryGenerator_Allies(aimodule.EnvQueryGenerator):
    Spec: OakPlayerAbilityAllyQuerySpec
    bIncludeSelf: bool



class EnvQueryGenerator_InteractiveObjects(aimodule.EnvQueryGenerator):
    DistanceMax: aimodule.AIDataProviderFloatValue
    Condition: gbx_runtime.GbxCondition
    TagQuery: gbx_game_system_core.ActorTagCompositeQuery
    bUseAllowedTypes: bool
    bUseDisallowedTypes: bool
    AllowedTypesCache: unreal.WrappedArray[unreal.UClass]
    DisallowedTypesCache: unreal.WrappedArray[unreal.UClass]



class EnvQueryGenerator_Lootables(aimodule.EnvQueryGenerator):
    bAllowOpenedLootables: bool
    DistanceMax: aimodule.AIDataProviderFloatValue



class EnvQueryGenerator_PlayerTarget(gbx_game_system_core.EnvQueryGenerator_TargetableActors): ...


class EnvQueryTest_CompanionTargetable(aimodule.EnvQueryTest): ...


class EnvQueryTest_DigicloneTrace(aimodule.EnvQueryTest):
    ItemHeightOffset: aimodule.AIDataProviderFloatValue
    ContextHeightOffset: aimodule.AIDataProviderFloatValue
    Context: unreal.UClass
    Radius: float



class EnvQueryTest_DownStateBoost(aimodule.EnvQueryTest): ...


class EnvQueryTest_PlayerLineOfSight(aimodule.EnvQueryTest): ...


class EnvQueryTest_PlayerTarget(aimodule.EnvQueryTest):
    SourceContext: unreal.UClass



class EscortLocationComponent(engine.SceneComponent):
    SnapToGroundDistance: float
    Escorter: OakVehicle
    bSnapToGround: bool
    def SetOccupation(self, Vehicle: OakVehicle): ...
    def IsOccupied(self, ReturnValue: bool) -> bool: ...
    def InitEscort(self, Target: OakVehicle, ActorToEscort: engine.Actor, bUseNearest: bool): ...
    def FindEscortLocation(self, ActorToEscort: engine.Actor, bIsFree: bool, ReturnValue: unreal.WrappedArray[EscortLocationComponent]) -> unreal.WrappedArray[EscortLocationComponent]: ...
    def FindEscortComponent(self, Target: OakVehicle, ActorToEscort: engine.Actor, bUseNearest: bool, ReturnValue: EscortLocationComponent) -> EscortLocationComponent: ...
    def ClearEscortOccupation(self, Target: OakVehicle): ...


class ExperienceGlobals(gbx_runtime.GbxDataAsset):
    BaseEnemyExperienceFormula: gbx_game_system_core.AttributeInitializationData
    ExpScaleByLevelDifference: unreal.WrappedArray[LevelBasedExpScale]
    VehicleVSCharacterExpModifier: gbx_game_system_core.AttributeInitializationData
    ExpAwardWeights: unreal.WrappedArray[ExpAwardWeight]
    GuardianRankAbilityClass: unreal.UClass
    BaseScanVehicleExperienceFormula: gbx_game_system_core.AttributeInitializationData
    BaseDiscoverAreaExperienceFormula: gbx_game_system_core.AttributeInitializationData
    PlayerExperienceFormula: PlayerExperienceFormula
    PlayerGuardianRankFormula: PlayerGuardianRankFormula
    PlayerVaultCardLevelFormula: PlayerVaultCardLevelFormula



class ExtensionUIData(gbx_runtime.GbxDataAsset):
    JoinCount: str
    JoinLabel: str
    Joined: str
    SubscribersBonus: str
    ShiftAccountNotLinked: str
    PollResultTitle: str
    PollResultVotes: str
    ProfileGameSettingsDifficulty: str
    ProfileGameSettingsGroupMode: str
    ProfileGameSettingsPlaythrough: str
    ProfileGameSettingsMayhem: str
    StoryModeName: str
    StoryModeShortName: str
    StoryModeDescription: str
    NormalModeName: str
    NormalModeShortName: str
    NormalModeDescription: str
    CooperationName: str
    CooperationShortName: str
    CooperationDescription: str
    CoopetitionName: str
    CoopetitionShortName: str
    CoopetitionDescription: str
    MayhemName: str
    MayhemShortName: str
    MayhemDescription: str
    PlaythroughNormalName: str
    PlaythroughNormalShortName: str
    PlaythroughNormalDescription: str
    PlaythroughTVHMName: str
    PlaythroughTVHMShortName: str
    PlaythroughTVHMDescription: str
    PopupClose: str
    PopupSend: str
    PopupSelect: str
    MenuToggle: str
    MenuProfile: str
    MenuInventory: str
    MenuSkillTree: str
    MenuGuardianRank: str
    MenuEvents: str
    MenuAccountLink: str
    MenuGameSettings: str
    TabProfile: str
    TabProfileStats: str
    TabInventoryEquipment: str
    TabInventoryBackpack: str
    TabSkillTreeLeftBranch: str
    TabSkillTreeMiddleBranch: str
    TabSkillTreeRightBranch: str
    TabGuardianRankRewards: str
    TabGuardianRankStats: str
    TabEvents: str
    ToastLoaderHeader: str
    ToastLoaderMessage: str
    ToastPreorderHeader: str
    ToastPreorderMessage: str
    ToastBuyHeader: str
    ToastBuyMessage: str
    ToastDisabledHeader: str
    ToastDisabledMessage: str
    ToastEventStarted: str
    ProfileCharacterLevel: str
    ProfileGuardianRank: str
    ProfileGuardianRankTooltip: str
    ProfileMayhemLevel: str
    ProfileStatSessionLifetime: str
    ProfileStatDamageCaused: str
    ProfileStatEnemiesKilled: str
    ProfileStatTimeInjured: str
    ProfileStatTimeDead: str
    InventoryCardRating: str
    InventoryCardLevelRequired: str
    SkillCardDefaultTypeName: str
    SkillCardAugmentTypeName: str
    SkillCardActionSkillTypeName: str
    SkillCardActionSkillAugmentTypeName: str
    SkillCardPassiveTypeName: str
    SkillCardPetTypeName: str
    SkillCardPoints: str
    SkillCardEquipped: str
    SkillCardNotEquipped: str
    SkillCardPurchased: str
    SkillCardNotEnoughPoints: str
    SkillCardNotPurchased: str
    SkillCardNotUnlocked: str
    SkillCardCurrentEffect: str
    SkillCardNextRank: str
    SkillCardCustomizeBuild: str
    GuardianRankCost: str
    GuardianRankProgress: str
    UpsellHeader: str
    UpsellMessage: str
    UpsellGrantAccessMessage: str
    UpsellGrantAccessAction: str
    UpsellLinkAccountMessage: str
    UpsellLinkAccountAction: str
    UpsellRefreshAction: str
    UpsellLinkedMessage: str
    UpsellViewShiftAction: str
    AugmentOperativeGrenadeMod1: str
    AugmentOperativeGrenadeMod2: str
    AugmentOperativeActionSkillMod1: str
    AugmentOperativeActionSkillMod2: str
    AugmentGunnerRightHardPointSlot: str
    AugmentGunnerRightHardPointMod: str
    AugmentGunnerLeftHardPointSlot: str
    AugmentGunnerLeftHardPointMod: str
    AugmentBeastmasterActionSkillMod1: str
    AugmentBeastmasterActionSkillMod2: str
    BreadcrumbHome: str
    NoTrinket: str
    Redacted: str



class FalconStrikeTargetingComponent(gbx_weapon.WeaponPreUseComponent):
    FallbackHUDIconSocketName: str
    HUDIconPatternSize: float
    HUDIconData: InWorldIconData
    TargetQueryParams: gbx_game_system_core.EnvQueryParams
    MaxTargetsData: gbx_game_system_core.AttributeInitializationData
    TargetPaintingDuration: gbx_game_system_core.AttributeInitializationData
    MaxTargets: int
    PaintedTargets: unreal.WrappedArray[PaintedTarget]
    CachedOwnerPlayer: OakCharacter_Player
    def ServerResetTargetList(self): ...
    def ServerAddTarget(self, NewTarget: engine.Actor): ...
    def PaintTargetFinished(self): ...
    def OnRocketDestroyed(self, Rocket: gbx_weapon.LightProjectile): ...
    def ForceRemoveIconsDelayFinished(self): ...


class FalconStrikeWeaponFireComponent(gbx_weapon.WeaponFireProjectileComponent): ...


class FightForYourLifeComponent(gbx_game_system_core.UsableComponent):
    DownStateTimeResourceData: gbx_game_system_core.GameResourceData
    ReviveTimeResourceData: gbx_game_system_core.GameResourceData
    MaximumRevivingActors: int
    DownTimeResourcePool: gbx_game_system_core.GameResourcePoolReference
    GiveUpDownTimeConsumptionRate: float
    StartDownStateTimePaused: bool
    DefaultExitNotificationAsset: HUDNotificationAsset
    DefaultExitNotificationText: str
    BeingRevivedStatusEffectData: gbx_game_system_core.StatusEffectData
    PostProcessTransition: engine.PostProcessSettings
    PostProcessTransitionCurve: engine.CurveFloat
    PostProcessBleedOut: engine.PostProcessSettings
    PostProcessBleedOutCurve: engine.CurveFloat
    DownstateStartAudio: wwise_audio.WwiseEvent
    DownstateStopAudio: wwise_audio.WwiseEvent
    DeathStartAudio: wwise_audio.WwiseEvent
    DeathWormholeAudio: wwise_audio.WwiseEvent
    InstantDeathWormholeAudio: wwise_audio.WwiseEvent
    ResurrectionStartAudio: wwise_audio.WwiseEvent
    ResurrectionStopAudio: wwise_audio.WwiseEvent
    OverrideHUDState: gbx_ui.GbxHUDStateData
    RevivingParticleTemplate: engine.ParticleSystem
    RevivingParticle: engine.ParticleSystemComponent
    bRevivingParticleActive: bool
    RevivingTimeRateScalarFormula: gbx_game_system_core.GbxAttributeData
    BeingRevivedTimeResourcePool: gbx_game_system_core.GameResourcePoolReference
    RevivingTimeResourcePool: gbx_game_system_core.GameResourcePoolReference
    BeingRevivedByActors: unreal.WrappedArray[engine.Actor]
    ActorToRevive: engine.Actor
    ActorsRevivingCount: int
    bBeingRevivedByPlayer: bool
    CurrentDownState: EDownState
    ReviveState: EReviveState
    bReviveSuccessful: bool
    DownStateExitReason: ExitDownStateInformation
    bCinematicPause: bool
    BeingRevivedEffectRef: gbx_game_system_core.StatusEffectInstanceReference
    StockDownTimeConsumptionRate: float
    StockRevivingTimeConsumptionRate: float
    CurrentSecondWindTargetComp: gbx_game_system_core.DamageComponent
    SecondWindTargetRetainTime: float
    bSuppressWidget: bool
    RadiusExpansion: float
    HalfHeightExpansion: float
    def UpdatePreGiveUp(self): ...
    def TransportEvent__DelegateSignature(self, bTransportStarted: bool): ...
    def ServerGivingUpState_Stop(self): ...
    def ServerGivingUpState_Start(self): ...
    def SecondWindTargetDied(self, DamageReceiver: engine.Actor, DamageCauser: engine.Actor): ...
    def RevivingState_Stop(self, IsHealed: bool): ...
    def RevivingState_Start(self, ActorBeingRevived: engine.Actor): ...
    def ResurrectingState_Stop(self): ...
    def ResurrectingState_Start(self): ...
    def RestoreAttributeValue(self, CurrentValueAttribute: gbx_game_system_core.GbxAttributeData, MaxValueAttribute: gbx_game_system_core.GbxAttributeData, PercentAfterDeathAttribute: gbx_game_system_core.GbxAttributeData): ...
    def ReplenishHealthAndShield(self, HealthPercent: float, ShieldPercent: float, WwiseEvent: wwise_audio.WwiseEvent): ...
    def PlayWwiseEventOnOwner(self, EventToPlay: wwise_audio.WwiseEvent): ...
    def PauseDownStateTimer(self, PauseTimer: bool): ...
    def OtherFightForYourLifeEvent__DelegateSignature(self, OtherFFYL: FightForYourLifeComponent): ...
    def OnRep_RevivingParticleActive(self): ...
    def OnRep_ReviveState(self, OldREviveState: EReviveState): ...
    def OnRep_DownStateExitReason(self): ...
    def OnRep_CurrentDownState(self, OldDownState: EDownState): ...
    def OnRep_ActorToRevive(self): ...
    def NotifyRespawnStart(self): ...
    def MarkSecondWindTarget(self, DamagedActor: engine.Actor): ...
    def IsReviving(self, ReturnValue: bool) -> bool: ...
    def IsResurrecting(self, ReturnValue: bool) -> bool: ...
    def IsLocalOwner(self, ReturnValue: bool) -> bool: ...
    def IsInDownState(self, ReturnValue: bool) -> bool: ...
    def IsCharacterAHealer(self, HealingActor: engine.Actor, ReturnValue: bool) -> bool: ...
    def IsBeingRevivedByPlayer(self, ReturnValue: bool) -> bool: ...
    def IsBeingRevived(self, ReturnValue: bool) -> bool: ...
    def GivingUpState_Stop(self): ...
    def GivingUpState_Start(self): ...
    def GetReviveTimePercentage(self, ReturnValue: float) -> float: ...
    def GetDownTimePercentage(self, ReturnValue: float) -> float: ...
    def FightForYourLifeWithStateEvent__DelegateSignature(self, ExitDownStateReason: EExitDownStateReason): ...
    def FightForYourLifeWithBoolEvent__DelegateSignature(self, IsSuccessful: bool): ...
    def FightForYourLifeResurrected__DelegateSignature(self, ResurrectStation: gbx_travel_station.TravelStationResurrectComponent): ...
    def FightForYourLifeEventWithActorBeingRevived__DelegateSignature(self, ActorBeingRevived: engine.Actor): ...
    def FightForYourLifeEvent__DelegateSignature(self): ...
    def DownStateTimeExpired(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def DownStateCausedDamage(self, DamageInstigator: engine.Actor, Damage: float, DamageType: gbx_game_system_core.GbxDamageType, DamageSource: gbx_game_system_core.DamageSource, DamagedActor: engine.Actor, Details: gbx_game_system_core.CausedDamageDetails): ...
    def DownState_Stop(self, Reason: EExitDownStateReason, CustomExitMessageText: str, CustomExitNotification: HUDNotificationAsset): ...
    def DownState_Start(self, InstantDeath: bool): ...
    def DownState_Finish(self): ...
    def DownAndExertingState_Stop(self): ...
    def DownAndExertingState_Start(self): ...
    def DisplayExitNotification(self): ...
    def ClearSecondWindTarget(self): ...
    def ClearDownStateExitReason(self): ...
    def BeingRevivedTimeExpired(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def BeingRevivedState_Stop(self, IsHealed: bool): ...
    def BeingRevivedState_Start(self, RevivingActor: engine.Actor, ReturnValue: bool) -> bool: ...
    def ActivateSecondWind(self): ...


class FocusableComponent(engine.ActorComponent):
    FocusScreenOffset: core_uobject.Vector2D
    bUseFocusSocket: bool
    FocusSocket: str
    FocusRadius: float



class FogOfDiscoveryCapture(engine.Actor):
    RunBlueprintLogic: bool
    OverrideDiscoveryTexture: engine.TextureRenderTarget2D
    WorldPositionTexture: engine.TextureRenderTarget2D
    CurrentLevelZoneMap: ZoneMapData
    PendingLevelZoneMap: ZoneMapData
    PendingCaptureSize: core_uobject.Vector2D
    def SetUpDataForLevel(self, LevelZoneMap: ZoneMapData, CaptureSize: core_uobject.Vector2D, bImmediateLoad: bool, ReturnValue: bool) -> bool: ...
    def SetupComponentsForCapture(self, ReturnValue: bool) -> bool: ...
    def OnZoneMapMeshDataLoaded(self): ...
    def OnFogLevelLoaded(self, UpdatedZoneMap: ZoneMapData): ...
    def FogTextureCreated(self): ...
    def CaptureScene(self): ...


class FogOfDiscoveryComponent(engine.ActorComponent):
    FogOfDiscoveryMID: engine.MaterialInstanceDynamic
    CurrentLevelZoneMap: ZoneMapData
    PendingLevelZoneMap: ZoneMapData
    def SaveFODTexture(self, bFast: bool): ...
    def OnZoneMapMeshDataLoaded(self): ...
    def OnPlayerExitedVehicle(self, PawnAttachSlotComponent: gbx_game_system_core.PawnAttachSlotComponent): ...
    def OnPlayerEnteringVehicle(self, PawnAttachSlotComponent: gbx_game_system_core.PawnAttachSlotComponent): ...
    def OnCharacterChanged(self, NewPawn: engine.Pawn, OldPawn: engine.Pawn): ...
    def DeferredInitializeZoneMapMesh(self): ...


class VaultHunterStatusData(gbx_runtime.GbxDataAsset):
    DisplayText: str
    Icon: str



class FriendGlobals(gbx_runtime.GbxDataAsset):
    AchievementChallengeList: gbx_game_system_core.ChallengeList
    FriendEventDataTable: engine.DataTable
    VaultHunterStatusTable: unreal.WrappedArray[VaultHunterStatusData]
    EnemyTag: gameplay_tags.GameplayTag
    NamedEnemyTag: gameplay_tags.GameplayTag
    BossTag: gameplay_tags.GameplayTag
    Lifetime_Normal: float
    Lifetime_Long: float
    Lifetime_VeryLong: float
    Frequency_VeryLow: float
    Frequency_Low: float
    Frequency_Normal: float
    Frequency_High: float



class FrontendStandInAnimInstance(gbx_game_system_core.GbxAnimInstance):
    bIsCharacterSelect: bool
    StandInType: EFrontendStandInAnimType
    StandInSlotIndex: int
    bIsInNeutralPose: bool
    StandInGlobals: StandInGlobals
    Character: OakCharacter
    PlayerStandIn: PlayerStandIn



class GalaxyData(gbx_runtime.GbxDataAsset):
    DisplayName: str
    Description: str
    GalaxyMesh: core_uobject.SoftObjectPath
    PlanetData: unreal.WrappedArray[PlanetData]
    ProgressChallengeCategories: unreal.WrappedArray[gbx_game_system_core.ChallengeCategoryData]
    def GetPlanetForTrackedMission(self, WorldContextObject: unreal.UObject, ReturnValue: PlanetData) -> PlanetData: ...


class GalaxyExpansionData(gbx_runtime.GbxDataAsset):
    DiscoveryIOs: unreal.WrappedArray[DiscoveryIOData]
    Skyboxes: unreal.WrappedArray[GalaxySkyboxData]
    ZoneID_to_MapID: unreal.WrappedArray[ZoneIdToMapIdMappingData]
    PlanetData_To_PlanetID: unreal.WrappedArray[PlanetMapDataToPlanetIdMappingData]
    MapID_To_PlanetData: unreal.WrappedArray[MapIDToPlanetDataMappingData]
    UpdateEvent: unreal.WrappedArray[ZoneIDToMissionEventReferenceData]
    AdvanceEvent: unreal.WrappedArray[ZoneIDToMissionEventReferenceData]
    WaypointEnabledCondition: gbx_runtime.GbxCondition
    DropPodWaypointEnabledCondition: gbx_runtime.GbxCondition
    def GetRequiredInterface(self, ReturnValue: unreal.UClass) -> unreal.UClass: ...
    def EnabledConditionRequiresNativeClass(self, ReturnValue: bool) -> bool: ...


class GalaxyMapStation(AdvancedInteractiveObject):
    CurrentPlanetData: PlanetData
    CurrentPlanetMeshData: PlanetMeshData
    OrbitingPlanetData: PlanetData
    GalaxyMapStationPatch: GalaxyMapStationPatch
    def SetCurrentPlanetData(self, PlanetData: PlanetData): ...
    def OnTravelIDsChanged(self): ...
    def OnRep_CurrentPlanetData(self): ...
    def OnPlanetMeshDataLoaded(self): ...
    def K2_PostLoadedPlanetMesh(self): ...
    def K2_OnPlanetSelected(self, Planet: PlanetData): ...
    def K2_OnBrowsePlanet(self, Planet: PlanetData): ...
    def GetPlanetDataFromZoneNameID(self, ZoneNameID: int, ReturnValue: PlanetData) -> PlanetData: ...
    def GetPlanetDataFromMapNameID(self, MapNameID: int, ReturnValue: PlanetData) -> PlanetData: ...


class GalaxyMapStationPatch(engine.Actor):

    def K2_OnPlanetSelected(self, Planet: PlanetData): ...


class GalaxyMapStationProxy(AdvancedInteractiveObjectProxy):

    def OnSelectedPlanet(self, InPlanetData: PlanetData): ...


class GameplayGlobals(gbx_game_system_core.GbxGameplayGlobals):
    PrimaryHealthLowPercent: float
    PrimaryHealthVeryLowPercent: float
    ResurrectionCostPercent: float
    SecondaryHealthLowPercent: float
    SecondaryHealthVeryLowPercent: float
    ProjectedShieldHitRegion: gbx_game_system_core.HitRegionData
    AmmoLowPercent: float
    CoVLoadedAmmoRegenScalar: float
    AmpedShotTracerFX: unreal.UClass
    AmpedShotBeamFX: unreal.UClass
    AmpedShotSound: wwise_audio.WwiseEvent
    WeaponInventoryType: gbx_inventory.InventoryCategoryData
    ShieldInventoryType: gbx_inventory.InventoryCategoryData
    GrenadeModInventoryType: gbx_inventory.InventoryCategoryData
    CreditsInventoryType: gbx_inventory.InventoryCategoryData
    EridiumInventoryType: gbx_inventory.InventoryCategoryData
    VaultCoinInventoryType: gbx_inventory.InventoryCategoryData
    DiamondKeyInventoryType: gbx_inventory.InventoryCategoryData
    GoldenKeyInventoryType: gbx_inventory.InventoryCategoryData
    WeaponSkinInventoryType: gbx_inventory.InventoryCategoryData
    WeaponTrinketInventoryType: gbx_inventory.InventoryCategoryData
    HealthPickupInventoryType: gbx_inventory.InventoryCategoryData
    ArtifactInventoryType: gbx_inventory.InventoryCategoryData
    AmmoInventoryType: gbx_inventory.InventoryCategoryData
    InventoryTypeCategories: unreal.WrappedArray[gbx_inventory.InventoryCategoryData]
    BaseWeaponInventorySlotType: unreal.UClass
    ShieldInventorySlotType: unreal.UClass
    InventoryRarityMission: gbx_inventory.InventoryRarityData
    InventoryRarityMoney: gbx_inventory.InventoryRarityData
    InventoryRarityCommon: gbx_inventory.InventoryRarityData
    InventoryRarityUncommon: gbx_inventory.InventoryRarityData
    InventoryRarityRare: gbx_inventory.InventoryRarityData
    InventoryRarityVeryRare: gbx_inventory.InventoryRarityData
    InventoryRarityLegendary: gbx_inventory.InventoryRarityData
    LostLootRarities: unreal.WrappedArray[gbx_inventory.InventoryRarityData]
    MaxLostLootSize: int
    LostLootIncrementPerSDU: int
    LostLootSDUData: OakSDUData
    InventorySaveGameFrequency: float
    MaxNPCMailSize: int
    CharacterAccuracyPattern: unreal.WrappedArray[gbx_game_system_core.Vector2DWaveform]
    CharacterAccuracyPatternTimeScale: float
    EditorCharacterAccuracyPatternHistoryTime: float
    EditorCharacterAccuracyPatternHistoryDelta: float
    MassPickupRadius: float
    MassPickupMaxPullAmount: int
    MassPickupMaxDelay: float
    MassPickupMinDelay: float
    MassPickupMaxTotalDelay: float
    PickupEvaluationSettings: PickupEvaluationSettings
    OakVehicleManagerSettings: OakVehicleManagerSettings
    DefaultDropLootPattern: LootSpawnPatternData
    bAutomaticallyMassPickupConsumablesFromLootables: bool
    DefaultAutoLootConsumableDelay: float
    bConsumablesAttachedToLootablesCanBeTouchPickuped: bool
    TriggerForceCleanupLongLifeOverflowPercent: float
    ForceCleanupLongLifePickupsPercent: float
    bCleanupPickupsBetweenSlaughterRounds: bool
    MinimumAgeToCleanupSlaughterPickups: float
    ForeverPickupSlaughterCleanupThreshold: int
    BulletMagnetismTargetOffset: float
    MaxTargetingDistance: float
    TargetingTraceUpdateTime: float
    ActiveLeague: int
    LeagueInstance: int
    MissionKickoffScript: gbx_dialog.DialogScriptData
    MissionManufacturer: gbx_inventory.ManufacturerData
    MissionRarity: gbx_inventory.InventoryRarityData
    FriendGlobals: FriendGlobals
    MissionInventoryCategory: gbx_inventory.InventoryCategoryData
    MissionInventoryCategory_Vehicle: gbx_inventory.InventoryCategoryData
    MissionCreditsRewardFormula: gbx_game_system_core.AttributeInitializationData
    PickupFailsafeMinutes: float
    MissionDeliveryRequiredProximityRadius: float
    OptionalObjectiveCompletedStat: gbx_game_system_core.GameStatData
    AIDialogEventData: AIDialogEventData
    DefaultEnemyFadeoutEffect: unreal.UClass
    DuelGlobals: DuelGlobals
    GuardianRankRewardCategories: unreal.WrappedArray[GuardianRankRewardCategoryData]
    GuardianRankRewards: unreal.WrappedArray[GuardianRankRewardData]
    GuardianRankPerks: unreal.WrappedArray[GuardianRankPerkData]
    SkillRespecCostPercent: float
    PhotoModeGlobals: PhotoModeGlobals
    TutorialGlobals: TutorialGlobals
    PlayerAlertRetriggerDelay: float
    PlayerAlertSound: wwise_audio.WwiseEvent
    PlayerAlertPointingAction: unreal.UClass
    PlayerAlertData: unreal.WrappedArray[PlayerAlertData]
    ReceivedMailSound: wwise_audio.WwiseEvent
    ZoneMapGlobals: ZoneMapGlobalsData
    GalaxyMap: GalaxyData
    CustomizationTypeData_Head: gbx_game_system_core.GbxCustomizationTypeData
    CustomizationTypeData_Body: gbx_game_system_core.GbxCustomizationTypeData
    CustomizationTypeData_Skin: gbx_game_system_core.GbxCustomizationTypeData
    CustomizationTypeData_Emote: gbx_game_system_core.GbxCustomizationTypeData
    CustomizationColorName_Primary: str
    CustomizationColorName_Secondary: str
    CustomizationColorName_Tertiary: str
    VaultHunterProfileCard: VaultHunterProfileCard
    DigistructOutGearEffect: unreal.UClass
    DigistructInGearEffect: unreal.UClass
    ModifierTargetResolverTable: engine.DataTable
    ModifierStatusEffectTable: engine.DataTable
    ModifierTable: engine.DataTable
    StatusMenuPPSettings: engine.PostProcessSettings
    StatusMenuPPBlendInTime: float
    StatusMenuPPBlendOutTime: float
    bDisableSeparateTransluencyInStatusMenu: bool
    ActorCullingRadius: float
    DefaultSingularityIgnoreTags: gameplay_tags.GameplayTagContainer
    ExplodingBarrelBaseClass: unreal.UClass
    ChallengeCreditsRewardFormula: gbx_game_system_core.AttributeInitializationData
    ChallengeEridiumRewardFormula: gbx_game_system_core.AttributeInitializationData
    AnointedEridianCrystalGameplayTag: gameplay_tags.GameplayTag
    AnointedCrystalMeleeUsableSelection: gbx_game_system_core.UsabilityDataSelection
    AnointedDeathHitReaction: gbx_game_system_core.HitReactionTag
    EnableCitizenScience: bool
    ActiveVaultCardChallenges: unreal.WrappedArray[VaultCardActiveChallengeList]
    MasterChallengeLists: unreal.WrappedArray[gbx_game_system_core.ChallengeList]
    MasterVaultCardChallengeLists: unreal.WrappedArray[gbx_game_system_core.ChallengeList]
    MasterGameStatLists: unreal.WrappedArray[gbx_game_system_core.GameStatList]
    MasterLoadingScreenData: unreal.WrappedArray[OakLoadingScreenExpansionData]
    MasterMayhemModeData: unreal.WrappedArray[OakMayhemModifiersDataAsset]
    MasterMayhemModeUIData: unreal.WrappedArray[OakMayhemUIDataAsset]
    MasterMayhemModeTwoData: unreal.WrappedArray[MayhemOverrideDataAsset]
    MasterPatchExpansionData: unreal.WrappedArray[PatchExpansionData]
    MasterDownloadableExpansionData: unreal.WrappedArray[DownloadableExpansionData]
    MasterGuardianRankRewards: unreal.WrappedArray[GuardianRankRewardData]
    MasterGuardianRankPerks: unreal.WrappedArray[GuardianRankPerkData]
    MasterVaultCardRewards: unreal.WrappedArray[OakVaultCardRewardData]
    MasterItemPoolsToReplaceWithRandomDateBased: unreal.WrappedArray[gbx_inventory.ItemPoolData]
    MasterRandomDateBasedItemPools: unreal.WrappedArray[gbx_inventory.ItemPoolCollection]



class GameplayTask_PlayGbxAction(gameplay_tasks.GameplayTask):
    Action: gbx_game_system_core.GbxAction
    def PlayGbxAction(self, ActionClass: unreal.UClass, GbxActionRegisters: unreal.WrappedArray[gbx_game_system_core.GbxActionRegister], NetMode: gbx_game_system_core.EGbxActionNetMode, Target: engine.Actor, WeaponSlot: WeaponSlotData, Duration: float, PlayRate: float, Direction: core_uobject.Vector, MontageLoopCount: int, ReturnValue: GameplayTask_PlayGbxAction) -> GameplayTask_PlayGbxAction: ...


class GbxCondition_A9K_AssignFFYLTarget(gbx_runtime.GbxCondition):
    bIncludeGivingUp: bool
    bIncludeResurrecting: bool



class GbxCondition_AreEnemiesWithinRadius(gbx_runtime.GbxCondition):
    RadiusInit: gbx_game_system_core.AttributeInitializationData



class GbxCondition_OakAbility_Base(gbx_runtime.GbxCondition): ...


class GbxCondition_CanAugmentBeUsed(GbxCondition_OakAbility_Base):
    Augment: OakActionAbilityAugmentData



class GbxCondition_CanBeRevivedBy(gbx_runtime.GbxCondition): ...


class GbxCondition_CheckHealthPoolStateByResourceType(gbx_runtime.GbxCondition):
    ResourceType: gbx_game_system_core.GameResourceData
    ResourcePoolState: gbx_game_system_core.EGameResourcePoolState



class GbxCondition_CheckRarity(gbx_runtime.GbxCondition):
    Rarities: unreal.WrappedArray[gbx_inventory.InventoryRarityData]



class GbxCondition_DoesAnyPlayerHaveLowHealth(gbx_runtime.GbxCondition):
    bIncludeLowHealth: bool
    bIncludeVeryLowHealth: bool
    bAccountForReservedHealth: bool



class GbxCondition_EnemiesAreHurtingActor(gbx_runtime.GbxCondition):
    HurtTarget: gbx_game_system_core.GbxBlackboardKeySelector
    MinTargetScore: float
    DecayRate: float



class GbxCondition_HasHealthOfType(gbx_runtime.GbxCondition):
    HealthTypes: unreal.WrappedArray[gbx_game_system_core.HealthTypeData]



class GbxCondition_HasStatusEffect(gbx_runtime.GbxCondition):
    StatusEffectData: gbx_game_system_core.StatusEffectData
    InstanceCount: int
    bQueryOwnerOnly: bool



class GbxCondition_IronBearHardPointMod(gbx_runtime.GbxCondition):
    ModType: EIronBearModType



class GbxCondition_IronBearSpawnStyle(gbx_runtime.GbxCondition):
    SpawnStyle: EIronBearSpawnStyle



class GbxCondition_IsAbilityTimerActive(gbx_runtime.GbxCondition):
    Timer: OakAbilityTimerData
    OptionalAbility: unreal.UClass



class GbxCondition_IsActionAbilityActive(GbxCondition_OakAbility_Base):
    ActionAbilityClass: unreal.UClass



class GbxCondition_IsActionAbilityAugmentSlotted(gbx_runtime.GbxCondition):
    ActionAbilityClass: unreal.UClass
    AugmentData: OakActionAbilityAugmentData
    AugmentSlotData: OakActionAbilityAugmentSlotData



class GbxCondition_IsBetweenActors(gbx_runtime.GbxCondition):
    ForwardActor: gbx_game_system_core.GbxParam
    BehindActor: gbx_game_system_core.GbxParam
    bCanBeAhead: bool
    bCanBeBehind: bool
    MaxDistance: float



class GbxCondition_IsInjuredSprinting(gbx_runtime.GbxCondition): ...


class GbxCondition_IsIronBearCoreActive(gbx_runtime.GbxCondition):
    CoreType: EIronBearCoreType



class GbxCondition_IsLicensedToDLC(gbx_runtime.GbxCondition):
    ContentData: online_subsystem_utils.DownloadableContentData



class GbxCondition_IsMaybeFallingOffACliff(gbx_runtime.GbxCondition):
    TraceDistance: float
    TraceRadius: float



class GbxCondition_IsMovingOnGround(gbx_runtime.GbxCondition): ...


class GbxCondition_IsPassiveAbilityGradeMet(gbx_runtime.GbxCondition):
    MinGradeRequired: int



class GbxCondition_IsPetActive(GbxCondition_OakAbility_Base):
    PetType: EOakActionAbilityPetType
    bUseEvolutionType: bool
    EvolutionType: EOakActionAbilityPetEvolutionType



class GbxCondition_IsPetModActive(GbxCondition_OakAbility_Base):
    PetModType: EOakActionAbilityPetModType



class GbxCondition_IsPlayerClass(gbx_runtime.GbxCondition):
    PlayerClass: PlayerClassIdentifier



class GbxCondition_IsPlayerTiredFromSprinting(gbx_runtime.GbxCondition): ...


class GbxCondition_IsWeaponHidden(gbx_runtime.GbxCondition):
    WeaponSlotIndex: int
    bUseWeaponSlotIndex: bool



class GbxCondition_LowOnAmmo(gbx_runtime.GbxCondition):
    AmmoResource: gbx_game_system_core.GameResourceData
    bLoadedAmmo: bool
    bUsePercent: bool
    LowAmmoPercent: float



class GbxCondition_MapTravelID(gbx_runtime.GbxCondition):
    MapNameEnumIdx: int
    ZoneNameEnumIdx: int



class GbxCondition_OakCharacterMovementCondition(gbx_runtime.GbxCondition):
    Type: EOakCharacterMovementConditionType



class GbxCondition_OakStatusEffects_IsPresenting(gbx_runtime.GbxCondition):
    ElementalEffectData: OakElementalEffectData
    PresentationData: OakStatusEffectPresentationData



class GbxCondition_VehicleBoostChargeCount(gbx_runtime.GbxCondition):
    ComparisonMode: EBoostChargeCountComparisonMode
    NeededChargeCount: int



class GbxCondition_VehicleBoostPoolValue(gbx_runtime.GbxCondition):
    ComparisonMode: EBoostPoolValueComparisonMode
    BoostPoolValue: float
    bValueIsPercentage: bool



class GbxCondition_VehicleHasEquippedParts(gbx_runtime.GbxCondition): ...


class GbxCondition_WasPickupDroppedByPlayer(gbx_runtime.GbxCondition): ...


class GbxGFXConnectionWidget(gbx_ui.GbxGFxHUDWidget):

    def OnConnectionStatusChanged(self, bIsLagging: bool): ...


class GbxGFxCoreDialogBoxHelpers(engine.BlueprintFunctionLibrary):

    def ShowDialog(self, pc: gbx_game_system_core.GbxPlayerController, DialogBoxInfo: GbxGFxDialogBoxInfo, ReturnValue: GbxGFxDialogBox) -> GbxGFxDialogBox: ...
    def ShowBlockingDialog(self, pc: gbx_game_system_core.GbxPlayerController, HeaderText: str, MessageText: str, bBlocksAllUsers: bool, InTargetPC: gbx_game_system_core.GbxPlayerController, bAllowedToDismiss: bool, ReturnValue: GbxGFxDialogBox) -> GbxGFxDialogBox: ...


class GbxGFxDialogBoxData(gbx_ui.GbxGFxMenuData):
    DialogInfo: GbxGFxDialogBoxInfo



class GbxGFxDialogBox(gbx_ui.GbxGFxMenu):
    HeaderTextField: gbx_ui.GbxTextField
    BodyTextField: gbx_ui.GbxTextField
    InputTextField: gbx_ui.GbxGFxEditableTextField
    ContentPanel: gbx_ui.GbxGFxGridScrollingList
    DialogBoxBackground: gbx_ui.GbxGFxObject
    PlayerNameTextField: gbx_ui.GbxTextField
    ProcessingIcon: gbx_ui.GbxGFxObject
    InitialChoice: int
    HeaderText: str
    BodyText: str
    InputText: str
    def SetInputTextFormatArg(self, ArgName: str, ReplacementText: str): ...
    def SetInputText(self, NewText: str, bClearFormatArgs: bool): ...
    def SetHeaderTextFormatArg(self, ArgName: str, ReplacementText: str): ...
    def SetHeaderText(self, NewText: str, bClearFormatArgs: bool): ...
    def SetBodyTextFormatArg(self, ArgName: str, ReplacementText: str): ...
    def SetBodyText(self, NewText: str, bClearFormatArgs: bool): ...
    def OnDialogBoxItemClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def Dismiss(self): ...


class GbxGFxDirectXUpgradeDialogBox(GbxGFxDialogBox):
    MsgScrollBar: gbx_ui.GbxGFxSlider



class GbxGFxEULA(GbxGFxDialogBox):
    EULAScrollBar: gbx_ui.GbxGFxSlider
    def OnSliderPositionUpdate(self, SliderPercent: float): ...


class GbxGFxReportPlayerDialogBox(GbxGFxDialogBox):
    ReportReasons: unreal.WrappedArray[ReportReason]
    ReportReasonList: gbx_ui.GbxGFxGridScrollingList
    def OnReportReasonClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GearUpData(gbx_runtime.GbxDataAsset):
    DeathCircleStages: unreal.WrappedArray[DeathCircleStageData]
    DeathCircleHeight: gbx_game_system_core.AttributeInitializationData
    DeathCircleMesh: engine.StaticMesh
    DeathCircleMaterial: engine.MaterialInterface
    DeathCircleWaypointClass: unreal.UClass
    NextDeathCircleWaypointClass: unreal.UClass
    DeathCircleScreenParticle: engine.ParticleSystem
    ScreenParticleMaxDistance: gbx_game_system_core.AttributeInitializationData
    ScreenParticleIntensityParameter: str
    FogParticle: engine.ParticleSystem
    FogParticleMaxDistance: gbx_game_system_core.AttributeInitializationData
    OutOfCircleDamageData: unreal.UClass
    DeathCircleWaypointCondition: gbx_runtime.GbxCondition
    WallAudioLoopStart: wwise_audio.WwiseEvent
    DistanceToWallRtpc: wwise_audio.WwiseRtpc
    WallOrientationXRtpc: wwise_audio.WwiseRtpc
    WallOrientationYRtpc: wwise_audio.WwiseRtpc
    AudioTransitionToOmni: float
    AudioFadeTimeOnExit: float
    PlayerEnteredStormAudioEvent: wwise_audio.WwiseEvent
    PlayerExitedStormAudioEvent: wwise_audio.WwiseEvent
    EnemyStatusEffect: gbx_game_system_core.StatusEffectData
    PlayerStatusEffect: gbx_game_system_core.StatusEffectData
    ModeStatusEffect: gbx_game_system_core.StatusEffectData
    AllowableBankOverfill: int
    DlcPackageData: online_subsystem_utils.DownloadablePackageData
    ExtractedGearStat: gbx_game_system_core.GameStatData
    ExtractedGearAchievement: EOakAchievements
    ExtractedGearAchievementCount: int
    def GetRequiredInterface(self, ReturnValue: unreal.UClass) -> unreal.UClass: ...
    def EnabledConditionRequiresNativeClass(self, ReturnValue: bool) -> bool: ...


class OakGameMode(gbx_game_system_core.GbxGameMode):
    DefaultPlayerWeapon: gbx_inventory.ItemPoolData
    bPreventFightForYourLifeInRespawnRestrictedVolumes: bool
    def TravelToStationInterrupted(self, TravelStation: gbx_travel_station.TravelStationData): ...
    def RespawnPlayer(self, OakPlayerController: OakPlayerController, ReturnValue: bool) -> bool: ...
    def PrepareToTravelToStation(self, TravelStation: gbx_travel_station.TravelStationData, ActivatingPawn: engine.Pawn): ...
    def GetTravelStationTracker(self, ReturnValue: gbx_travel_station.TravelStationTracker) -> gbx_travel_station.TravelStationTracker: ...
    def FindPlayerStation(self, Player: engine.Controller, IncomingName: str, ReturnValue: engine.Actor) -> engine.Actor: ...
    def CanTravelToStation(self, TravelStation: gbx_travel_station.TravelStationData, OptionalInstigator: engine.Controller, ReturnValue: bool) -> bool: ...
    def CanTravelThroughStations(self, OptionalInstigator: engine.Controller, ReturnValue: bool) -> bool: ...


class RaidGameMode(OakGameMode):
    bSpectateWhenDead: bool
    RaidGameState: RaidGameState
    def SetForceBalanceToMaxPlayers(self, bForced: bool): ...
    def RespawnAllSpectatingPlayers(self): ...
    def OnNumPlayersChanged(self, NewNumPlayers: int): ...
    def OnInitRaidGameState(self): ...
    def K2_OnPlayerRespawned(self, RespawnedPlayer: OakPlayerController): ...
    def K2_OnPlayerDied(self, DeadPlayer: OakPlayerController): ...
    def K2_OnAllPlayersDied(self): ...
    def GetNumPlayerSpectators(self, ReturnValue: int) -> int: ...
    def GetNumPlayersAlive(self, ReturnValue: int) -> int: ...
    def BroadcastRaidComplete(self): ...
    def BroadcastRaidBegun(self, CountdownDuration: int): ...
    def BroadcastLegComplete(self, LegNumber: int): ...


class GearUpGameMode(RaidGameMode):
    GearUpGameState: GearUpGameState
    GearUpData: GearUpData
    DeathCircle: engine.Actor
    DeathCircleMesh: engine.StaticMeshComponent
    TransitionIcon: OakMissionIconComponent
    DeathCircleIcon: OakMissionIconComponent
    DeathCircleHeight: float
    ScreenParticleMaxDistance: float
    FogParticleMaxDistance: float
    TransitionTime: float
    ActiveCircleRadius: float
    TargetCircleRadius: float
    StormDamageSource: gbx_game_system_core.DamageSource
    bRespawnDeadPlayers: bool
    PlayersInStorm: unreal.WrappedArray[engine.Character]
    PlayersInScreenParticleRange: unreal.WrappedArray[OakPlayerController]
    PlayersInFogParticleRange: unreal.WrappedArray[OakPlayerController]
    TimeUntilNextParticleCheck: float
    ImmunePlayers: unreal.WrappedArray[engine.Character]
    bGearUpRunActive: bool
    def StartTimer(self): ...
    def RespawnAllDeadPlayers(self): ...
    def ResetGearUpGameMode(self): ...
    def RandomlySelectActorsWithinDeathCircle(self, NumberToSelect: int, InActors: unreal.WrappedArray[engine.Actor], OutActors: unreal.WrappedArray[engine.Actor]): ...
    def PlayerExitedStorm(self, Player: engine.Character): ...
    def PlayerEnteredStorm(self, Player: engine.Character): ...
    def InitializeGearUpGameMode(self, Data: GearUpData): ...
    def GearUpRunComplete(self): ...
    def FlagImmunePlayer(self, Character: engine.Character): ...
    def FinalDeathCircleStageStarted(self): ...
    def DisableStorm(self): ...
    def DeathCircleTransitionStateStarted(self, ActiveStage: int, StateDuration: float, IsFinalStage: bool): ...
    def DeathCircleStableStateStarted(self, ActiveStage: int, StateDuration: float, IsFinalStage: bool): ...
    def DeathCircleComplete(self): ...
    def BroadcastGearUpSupplyDrop(self): ...
    def BroadcastGearUpRespawn(self): ...
    def BroadcastGearUpNewCircle(self): ...
    def BroadcastGearUpCircleClosing(self): ...


class OakGameState(gbx_game_system_core.GbxGameState):
    MissionTracker: gbx_mission.MissionTrackerBase
    TravelStationTracker: gbx_travel_station.TravelStationTracker
    DuelManager: DuelManager
    ModifierManager: OakModifierManagerActor
    BossBarData: BossbarEventData
    MusicProvider: OakMusicProvider
    ElementalInteractionManager: ElementalInteractionManager
    StartGameState: ENewGameState
    StartGameTimer: int
    bServerMapLoadComplete: bool
    MayhemModeState: MayhemModeState
    bForceDisableLevelSync: bool
    bSyncDamageToExpSyncLevel: bool
    MultiplayerLootMode: EMultiplayerLootMode
    bPreventDestroyedItemsToLostLoot: bool
    CurrentGroupMode: EOakGameStateUIGroupMode
    InventoryShopResetPeriod: float
    EffectivePlayerCountData: EffectivePlayerCountData
    EffectiveExpSyncLevel: int
    ReplicatedSecondsBeforeShopsReset: float
    LocalSecondsBeforeShopsReset: float
    CurrentHUDState: gbx_ui.GbxHUDStateData
    bServerSkippedIntroMovie: bool
    bServerFinishedRockNRollIntro: bool
    ActiveLeague: int
    ActiveLeagueInstance: int
    CurrentPlayThrough: int
    PlayerTargetingActors: unreal.WrappedArray[engine.Actor]
    bInfiniteAmmo: bool
    bPlayerWeaponsRestricted: bool
    PlayerGlobalInputLocks: int
    CleanupPickupTriggerCount: int
    CleanupPickupRemainderCount: int
    PickupList: unreal.WrappedArray[OakInventoryItemPickup]
    PickupCleanupList: unreal.WrappedArray[OakInventoryItemPickup]
    GrenadeList: unreal.WrappedArray[OakProjectile]
    CachedNumProjectilesForQuickPop: int
    NameTaggedCharacters: unreal.WrappedArray[OakCharacter]
    CurrentTutorialMessages: unreal.WrappedArray[TutorialMessageDataAsset]
    LastTraveledMapID: MapIDData
    GlobalScreenParticles: unreal.WrappedArray[GlobalScreenParticleData]
    bClientJoining: bool
    SpawnOptionLevel: engine.GbxAttributeInteger
    def StaticUnregisterGlobalScreenParticle(self, WorldContextObject: unreal.UObject, Tag: str): ...
    def StaticRegisterGlobalScreenParticle(self, WorldContextObject: unreal.UObject, ScreenParticle: GlobalScreenParticleData): ...
    def SetMapTravelIDs(self, WorldContextObject: unreal.UObject, ZoneNameID: int, MapNameID: int, MinWaitTime: float, LatentInfo: engine.LatentActionInfo): ...
    def RemoveNameTaggedCharacter(self, CharacterToRemove: OakCharacter): ...
    def OnRep_StartGameTimer(self): ...
    def OnRep_ServerSkippedIntroMovie(self): ...
    def OnRep_ServerMapLoadComplete(self): ...
    def OnRep_SecondsBeforeShopsReset(self): ...
    def OnRep_MayhemModeState(self): ...
    def OnRep_LastTraveledMapID(self): ...
    def OnRep_EffectiveExpSyncLevel(self): ...
    def OnRep_CurrentTutorialMessages(self): ...
    def OnRep_CurrentHUDState(self): ...
    def OnRep_BossBarData(self): ...
    def OnRep_ActiveLeague(self): ...
    def OnNameTaggedCharactersChanged__DelegateSignature(self): ...
    def OnLastTravelIDsChanged__DelegateSignature(self): ...
    def OnBossBarEvent__DelegateSignature(self, EventData: BossbarEventData): ...
    def GetNameTaggedCharacters(self, ReturnValue: unreal.WrappedArray[OakCharacter]) -> unreal.WrappedArray[OakCharacter]: ...
    def GetCurrentTravelIDs(self, WorldContextObject: unreal.UObject, OutTravelIDs: MapIDData, ReturnValue: bool) -> bool: ...
    def ClientMatchmakingStateChanged(self, MatchmakingState: EMatchmakingState): ...
    def ClientMatchmakingBackup(self): ...
    def ClientBroadcastFriendEvent_PropagateRareSpawnMission(self, WorldContextObject: unreal.UObject, MissionClass: unreal.UClass, StatData: gbx_game_system_core.GameStatData): ...
    def ClearNameTaggedCharacters(self): ...
    def BreakMapIDData(self, InMapIDData: MapIDData, ZoneNameID: int, MapNameID: int): ...
    def AddNameTaggedCharacter(self, CharacterToAdd: OakCharacter): ...


class RaidGameState(OakGameState):
    NotificationData: HUDNotificationAsset
    RaidStartNotificationData: HUDNotificationAsset
    RaidFailedNotificationData: HUDNotificationAsset
    RaidCountdownNotificationData: HUDNotificationAsset
    RaidSurvivedID: EGameModeNotificationType
    RaidDefeatID: EGameModeNotificationType
    RaidStartID: EGameModeNotificationType
    RaidCountdownID: EGameModeNotificationType
    SpectatorHUDData: gbx_ui.GbxHUDData
    SpectatorHUDState: gbx_ui.GbxHUDStateData
    RaidBeginningNotificationPriority: int
    RaidBeginningNotificationText: str
    LegCompleteNotificationPriority: int
    LegCompleteNotificationText: str
    RaidCompleteNotificationPriority: int
    RaidCompleteNotificationText: str
    PlayerDiedNotificationPriority: int
    PlayerDiedNotificationText: str
    TeamWipeNotificationPriority: int
    TeamWipeNotificationText: str
    RaidCountdown: int
    NumSpectatablePlayers: int
    def OnRep_NumSpectatablePlayers(self): ...
    def OnRaidPlayerDied__DelegateSignature(self, PlayerState: OakPlayerState): ...
    def OnRaidLegComplete__DelegateSignature(self, LegNumber: int): ...
    def OnRaidCountdown__DelegateSignature(self, CountdownRemaining: int): ...
    def OnRaidComplete__DelegateSignature(self): ...
    def OnRaidBegun__DelegateSignature(self, CountdownDuration: int): ...
    def OnRaidAllPlayersDied__DelegateSignature(self): ...
    def OnNumSpectatablePlayersChanged__DelegateSignature(self, NewNumSpectatable: int): ...
    def BroadcastRaidComplete(self): ...
    def BroadcastRaidBegun(self, CountdownDuration: int): ...
    def BroadcastPlayerDied(self, PlayerState: OakPlayerState): ...
    def BroadcastLegComplete(self, LegNumber: int): ...
    def BroadcastAllPlayersDied(self): ...


class GearUpGameState(RaidGameState):
    GearUpDataPrivate: GearUpData
    DeathCircleStatus: int
    StableEndTime: float
    TransitionEndTime: float
    DeathCirclePrivate: engine.Actor
    ActiveStage: int
    ActivePoint: DeathCirclePoint
    NextPoint: DeathCirclePoint
    Extractors: unreal.WrappedArray[OakUIGearUpExtractionAIO]
    Respawners: unreal.WrappedArray[GearUpRespawnStation]
    Airdrops: unreal.WrappedArray[GearUpAirdropData]
    PreviousGroupMode: EOakGameStateUIGroupMode
    def UpdateGameStateAudio(self, CircleLocation: core_uobject.Vector, CircleRadius: float): ...
    def StopPlayerStormAudio(self, Player: engine.Character): ...
    def StartPlayerStormAudio(self, Player: engine.Character): ...
    def OnRep_GearUpDataPrivate(self): ...
    def OnGearUpSupplyDrop__DelegateSignature(self): ...
    def OnGearUpRespawn__DelegateSignature(self): ...
    def OnGearUpCircle__DelegateSignature(self): ...
    def MulticastSpawnFogParticle(self, Character: engine.Character): ...
    def MulticastRemoveFogParticle(self, Character: engine.Character): ...
    def GetElapsedDeathCircleTime(self, ReturnValue: float) -> float: ...
    def BroadcastGearUpSupplyDrop(self): ...
    def BroadcastGearUpRespawn(self): ...
    def BroadcastGearUpNewCircle(self): ...
    def BroadcastGearUpCircleClosing(self): ...
    def AddActiveAirdrop(self, AirDrop: OakMissionSpawner): ...


class OakInventoryListComponent(gbx_inventory.InventoryListComponent):
    InventoryListType: EInventoryListType
    def ServerUseItemInInventory(self, InventoryItemHandle: gbx_inventory.InventoryListEntryHandle): ...
    def ServerTransferItemToList(self, InventoryItemHandle: gbx_inventory.InventoryListEntryHandle, DestinationActor: engine.Actor, DestinationListType: EInventoryListType, Quantity: int): ...
    def ServerSetEquippedWeaponSkin(self, InventoryItemHandle: gbx_inventory.InventoryListEntryHandle, WeaponSkinPartData: WeaponSkinPartData): ...
    def CanUseItemInInventory(self, InventoryItemHandle: gbx_inventory.InventoryListEntryHandle, ReturnValue: bool) -> bool: ...


class GearUpInventoryListComponent(OakInventoryListComponent): ...


class GearUpRespawnStation(CheckpointTravelStationObject):
    bAlreadyUsed: bool



class GenericStandInActor(engine.Actor):
    ActionComponent: gbx_game_system_core.GbxActionComponent



class Geyser(InteractiveObject):
    CapsuleCollision: engine.CapsuleComponent
    ParticleSystem: engine.ParticleSystemComponent
    ParticleSystemAnticipation: engine.ParticleSystemComponent
    GeyserData: GeyserAlwaysOnData
    bAutoAdjustParticleToCapsuleHeight: bool
    GeyserState: EGeyserState
    def OnSteamOn(self): ...
    def OnSteamOff(self): ...
    def OnRep_GeyserState(self): ...
    def OnAnticipationStopped(self): ...
    def OnAnticipationStarted(self): ...
    def GetGeyserState(self, ReturnValue: EGeyserState) -> EGeyserState: ...


class GeyserAlwaysOnData(gbx_runtime.GbxDataAsset):
    VerticalAcceleration: engine.RuntimeFloatCurve
    MaxVelocity: float
    bPullToCenter: bool
    TimeToReachCenter: float
    FalloffRange: core_uobject.Vector2D



class GeyserIntermittentData(GeyserAlwaysOnData):
    MinMaxStartDelay: core_uobject.Vector2D
    TimeOn: float
    TimeOff: float
    AnticipationOnTime: float
    PostAnticipationOffTime: float



class GFxOptionBase(unreal.UObject):
    ContentPanel: gbx_ui.GbxGFxGridScrollingList
    def OnUnimplementedOptionClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxAccessiblityOptions(GFxOptionBase):
    CrosshairNeutralColorItem: CrosshairColorListItemSpinner
    CrosshairEnemyColorItem: CrosshairColorListItemSpinner
    CrosshairAllyColorItem: CrosshairColorListItemSpinner
    def OnSubsAndCCTextSizeChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnSubsAndCCBackgroundOpacityChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnHeadBobScaleChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnCrosshairNeutralColorFrameChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnCrosshairEnemyColorFrameChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnCrosshairAllyColorFrameChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...


class CrosshairColorListItemSpinner(gbx_ui.GbxGFxListItemSpinner): ...


class GFxActionSkillWidget(gbx_ui.GbxGFxHUDWidget):
    GFxKEY_ActionSkillInner: str
    ActionSkillInner: gbx_ui.GbxGFxObject
    GFxKEY_CantUseFlourish: str
    CantUseFlourish: gbx_ui.GbxGFxObject
    GFxKEY_StatusBar: str
    StatusBar: gbx_ui.GbxGFxProgressBar
    GFxKEY_CountdownTimerText: str
    GFxKEY_SkillIconContainer: str
    SkillIconContainer: gbx_ui.GbxGFxObject
    DynamicSkillIcon: gbx_ui.GbxGFxObject
    GFxKEY_RemainingChargesDisplay: str
    GFxKEY_RemainingChargesContainer: str
    ReadyForActivationColor: core_uobject.LinearColor
    RechargingOrCooldownColor: core_uobject.LinearColor
    SlotToWidgetMapping: ESkillWidgetSlot
    CoundownSecondsMaxValue: int
    CountdownSecondsAudioValue: int
    SlotIndex: int
    SkillUsedFailAudioEventName: str
    AssignedSlots: unreal.WrappedArray[OakPlayerAbilitySlotData]
    TrackedActionAbility: OakActionAbility
    SkillFailedCharacterSpecific: str
    IconKey: str
    def SetRemainingCharges(self, NewRemainingCharges: int): ...
    def SetBarColor(self, InColor: core_uobject.LinearColor): ...
    def ResourceRegeneratingEvent(self): ...
    def ResourceDepletedEvent(self): ...
    def OnTrackedActionAbilityStateChanged(self, UpdatedAbility: gbx_abilities.GbxAbility): ...
    def OnActionSkillFailedActivation(self, InActionAbility: OakActionAbility, ErrorCode: int): ...
    def OnActionSkillChargeCountChanged(self, InActionAbility: OakActionAbility): ...
    def OnActionSkillActivated(self, InActionAbility: OakActionAbility): ...
    def OnActionAbilityAugmentChanged(self, ActionAbilityClass: unreal.UClass, SlotData: OakActionAbilityAugmentSlotData): ...
    def ForceResourceProgress(self, PercentProgress: float): ...
    def extActivatedAnimationComplete(self): ...


class GFxAmmoBar(gbx_ui.GbxGFxHUDWidget):
    OakHUD: OakHUD
    CachedWeapon: gbx_weapon.Weapon
    CachedCOVHeatComponent: WeaponCOVHeatComponent
    CachedAmmoComponent: gbx_weapon.WeaponAmmoComponent
    OakPCOwner: OakPlayerController
    OakCharacterOwner: OakCharacter
    AmmoCurrentValueContainer: gbx_ui.GbxGFxObject
    AmmoCurrentValueLabel: gbx_ui.GbxTextField
    MaxValueContainer: gbx_ui.GbxGFxObject
    AmmoMaxValueLabel: gbx_ui.GbxTextField
    WeaponIconContainer: gbx_ui.GbxGFxObject
    AmmoAndModeContainer: gbx_ui.GbxGFxObject
    ModeSwitchWrapper: gbx_ui.GbxGFxObject
    ModeSwitchTextContainer: gbx_ui.GbxGFxObject
    ElementalIcon: gbx_ui.GbxGFxObject
    ModeSwitchTextBox: gbx_ui.GbxTextField
    ModeSwitchHint: gbx_ui.GbxGFxHintWidget
    COVHeatBar: gbx_ui.GbxGFxProgressBar
    COVBrokenBar: gbx_ui.GbxGFxObject
    COVRedliningMC: gbx_ui.GbxGFxObject
    COVOverheatWarning: gbx_ui.GbxGFxObject
    MaxSwapWeaponModeTime: float
    EridianFabricatorStat: gbx_game_system_core.UIStatData
    InventorySlotDataTop: InventorySlotData
    InventorySlotDataBottom: InventorySlotData
    InventorySlotDataLeft: InventorySlotData
    InventorySlotDataRight: InventorySlotData
    CachedWeaponSecondaryModeAmmoComponent: gbx_weapon.WeaponAmmoComponent
    def WeaponSecondaryModeAmmoChanged(self): ...
    def UpdateCachedAmmoCounts(self): ...
    def UpdateCachedAmmoComponent(self): ...
    def UpdateAmmoCount(self, LoadedCount: int, SpareCount: int): ...
    def UpdateAmmoBarExtrema(self, ResourcePoolReference: gbx_game_system_core.GameResourcePoolReference, MinNum: float, MaxNum: float): ...
    def OnWeaponSwitchedMode(self): ...
    def OnWeaponEquipped(self): ...
    def OnWeaponChanged(self, NewWeapon: gbx_weapon.Weapon, LastWeapon: gbx_weapon.Weapon): ...
    def OnUpdatePreToggleWeaponMode(self, bPreToggleWeaponModeStarted: bool): ...
    def OnResurrected(self): ...
    def OnMaxAmmoEmpty(self): ...
    def OnLowClipAmmo(self): ...
    def OnInputDeviceChanged(self): ...
    def OnCurrentUsableChanged(self, NewUsableComponent: gbx_game_system_core.UsableComponent, InUsabilityInfo: gbx_game_system_core.UsabilityInfo, NewUsableComponentImpactPoint: core_uobject.Vector, NewUsableComponentDistanceAway: float): ...
    def OnClipAmmoEmpty(self): ...
    def OnAmmoReloaded(self): ...


class GFxAnointmentRerollMenu(AdvancedInteractiveObjectOwnedGFxMenu):
    NavBackpackLeftHint: gbx_ui.GbxGFxHintWidget
    NavBackpackRightHint: gbx_ui.GbxGFxHintWidget
    DenyHint: gbx_ui.GbxGFxHintWidget
    ConfirmHint: gbx_ui.GbxGFxHintWidget
    PlayerEridiumCounter: GFxCurrencyCounterClip
    InsufficientFundsTextClip: gbx_ui.GbxTextField
    InsufficientFundsTextShadowClip: gbx_ui.GbxTextField
    InsufficientFundsObj: gbx_ui.GbxGFxObject
    BackpackClip: gbx_ui.GbxGFxObject
    BackpackDisplayInfoList: unreal.WrappedArray[OakUIInventoryItemDisplayInfo]
    IconManager: OakThumbnailManager
    ItemCardBase: GFxLoadedItemCardBase
    RerollEridiumCounter: gbx_ui.GbxTextField
    SelectedItem: GFxBackpackWidgetItem
    BackpackScrollingList: GFxBackpackWidget
    CurrentFilters: unreal.WrappedArray[OakInventoryMenuFilter]
    CurrentFilterIndex: int
    BackpackItemCellSize: core_uobject.Vector2D
    VisibleBackpackCellsStandard: int
    VisibleBackpackCellsSplit: int
    ItemCardMovie: scaleform_ui.SwfMovie
    PageFilters: unreal.WrappedArray[OakInventoryMenuFilter]
    ItemTypeSortPriorities: unreal.WrappedArray[OakInventoryMenuTypePriorityInfo]
    def OnThumbnailLoaded(self): ...
    def OnSelectedBackpackItemChanged(self, DisplayInfo: OakUIInventoryItemDisplayInfo, GridWidget: gbx_ui.GbxGFxObject): ...
    def OnReRolledInventoryActorReady(self, ReRolledOwner: OakPlayerController, ReRolledInventoryActor: engine.Actor): ...
    def OnItemCardReady(self): ...
    def OnBackpackItemClicked(self, DisplayInfo: OakUIInventoryItemDisplayInfo, GridWidget: gbx_ui.GbxGFxObject, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class OakGFxMenuData(gbx_ui.GbxGFxMenuData): ...


class GFxAnointmentRerollMenuData(OakGFxMenuData): ...


class GFxDisplayedNotificationWidget(gbx_ui.GbxGFxMovie):
    TextFields: unreal.WrappedArray[GFxDisplayNotificationWidgetTextFields]
    LinkedMenuData: gbx_ui.GbxMenuData
    CachedOakHUD: OakHUD
    HintTextBox: gbx_ui.GbxTextField
    MenuName: str
    HintTextID: str
    def OnHideComplete(self): ...
    def LoadLinkedMenuData(self): ...


class GFxAreaDiscoveredNotificationWidget(GFxDisplayedNotificationWidget):
    bUseNowEnteringMessaging: bool
    AreaDiscoveredText: str
    NowEnteringText: str
    TitleTextClip: gbx_ui.GbxTextField



class GFxAudioOptions(GFxOptionBase):
    MasterVolumeItem: gbx_ui.GbxGFxListItemNumber
    MusicVolumeItem: gbx_ui.GbxGFxListItemNumber
    SoundEffectsVolumeItem: gbx_ui.GbxGFxListItemNumber
    VOVolumeItem: gbx_ui.GbxGFxListItemNumber
    VoiceVolumeItem: gbx_ui.GbxGFxListItemNumber
    AlternateBkg: gbx_ui.GbxGFxObject
    PreviewAudioPlaybackInstance: wwise_audio.WwisePlaybackInstance
    PreviewAudioStopEvent: wwise_audio.WwiseEvent
    def OnVOVolumeChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnVoiceVolumeChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnSpeakerSetupChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnSoundEffectsVolumeChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnPushToTalkChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnMuteAudioOnFocusLossChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnMusicVolumeChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnMasterVolumeChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnEnableWindowsSpatialChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnControllerAudioChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnContentPanelSelectionChanged(self, SelectedItem: gbx_ui.GbxGFxListCell): ...
    def OnContentPanelItemClicked(self, ClickedItem: gbx_ui.GbxGFxListCell, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxBackpackWidgetListener(unreal.UObject):
    ListeningList: gbx_ui.GbxGFxGridScrollingList
    ListeningThumbnailManager: OakThumbnailManager
    def OnThumbnailLoaded(self): ...
    def OnBackpackGridItemSelected(self, ListItem: gbx_ui.GbxGFxListCell): ...
    def OnBackpackGridItemPressed(self, PressedItem: gbx_ui.GbxGFxListCell, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBackpackGridItemClicked(self, ClickedItem: gbx_ui.GbxGFxListCell, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxBackpackWidgetItem(gbx_ui.GbxGFxListCell):
    DisplayInfo: OakUIInventoryItemDisplayInfo



class GFxStatusMenuSubmenu(gbx_ui.GbxGFxMenuSwitcherSubmenu):
    IntroTimeout: float
    OuttroTimeout: float
    bAllowPause: bool
    bShowMapMesh: bool
    bAllowMapMenuAxisInput: bool
    bHidStatusMenuForPauseMenu: bool
    bIsPlayingIntro: bool
    bIsPlayingOuttro: bool
    TransitionTimeRemaining: float
    QueuedTransitionAction: EGFxStatusMenuTransitionReason
    QueuedTransitionSwitchToMenu: str
    def OnOuttroAnimationComplete(self): ...
    def OnIntoAnimationComplete(self): ...


class GFxSkillScreenTree(GFxStatusMenuSubmenu):
    SkillScreenTreeBranchContainers: unreal.WrappedArray[GFxSkillScreenBranchContainer]
    PlayerAbilityTree: OakPlayerAbilityTree
    PlayerAbilityData: OakPlayerAbilityTreeData
    InfoCard: GFxSkillScreenInfoCardContainer
    ClassAbilityInfo: GFxSkillScreenSkillInfo
    EchoDeviceScreen_Unlocked: str
    TreeUnlockLevel: int
    AudioSkillPoints: unreal.WrappedArray[str]
    AudioSkillMax: str
    AudioNewRowUnlocked: str
    AudioSpinTree: str
    AudioEquipSkill: str
    AudioTreeUnlock: str
    VOTreeUnlock: str
    TreeUnlockDelayForVO: float
    AudioToggleView: str
    AudioUnequipSkill: str
    AudioErrorNotification: str
    AudioManageLoadout: str
    Tutorials: GFxMenuTutorialCollection
    PurchasePassiveTutorial: str
    WingtipTutorial: str
    TreeUnlockFirstSpinIndex: int
    TreeUnlockSecondSpinIndex: int
    TreeUnlockSlotPrimaryIndex: int
    TreeUnlockSlotPetIndex: int
    TreeUnlockSlotSecondaryHardpointIndex: int
    PurchasePassiveSpendPointIndex: int
    CharacterSpecificFirstUnlockTutorial: str
    IconBackgroundSelectedColor: core_uobject.LinearColor
    IconBackgroundAvailableColor: core_uobject.LinearColor
    IconBackgroundLockedColor: core_uobject.LinearColor
    SkillTreeContainer: gbx_ui.GbxGFxObject
    CachedBranches: unreal.WrappedArray[OakPlayerAbilityTreeBranchData]
    LeftArrow: gbx_ui.GbxGFxButton
    LeftArrowHint: gbx_ui.GbxGFxHintWidget
    RightArrow: gbx_ui.GbxGFxButton
    RightArrowHint: gbx_ui.GbxGFxHintWidget
    DragSkillItem: GFxSkillScreenDragObject
    TutorialWidget: GFxTutorialWidget
    BranchSwfMovie: scaleform_ui.SwfMovie
    CurrentlyFocusedSkillItem: GFxSkillScreenItem
    CachedDragTarget: GFxSkillScreenItem
    CurrentlyFocusedLoadoutSlot: GFxSkillScreenLoadoutSlot
    CharacterBalanceComponent: gbx_game_system_core.BalanceStateComponent
    ScreenState: EGFxSkillScreenState
    TransitionScreenState: EGFxSkillScreenState
    ActionAbilities: unreal.WrappedArray[OakActionAbility]
    SlotsToAutoSlot: unreal.WrappedArray[GFxSkillScreenLoadoutSlot]
    LoadoutSlots: unreal.WrappedArray[GFxSkillScreenLoadoutSlot]
    ValidLoadoutSlotsForSelectedItem: unreal.WrappedArray[GFxSkillScreenLoadoutSlot]
    DragTargetSlots: unreal.WrappedArray[GFxSkillScreenLoadoutSlot]
    EmptySlotText: str
    TreeUnlockedAbility: str
    TreeUnlockedText: str
    ActionSkillName: str
    ActionSkillDescription: str
    ModPrimaryName: str
    ModPrimaryDescription: str
    ModSecondaryName: str
    ModSecondaryDescription: str
    PassiveSlotName: str
    EqippedName: str
    UnlocksAtLevelText: str
    AbilityInUseString: str
    SlotMustBeFilledString: str
    InfoCardEquippedString: str
    InfoCardMustBeEquippedString: str
    InfoCardEquipAnItemString: str
    InfoCardDefaultSlottedItemString: str
    InfoCardRequiresParentSkillString: str
    InfoCardNotEnoughBranchPointsString: str
    InfoCardUnlockTreeString: str
    InfoCardUnpurchasedPassiveString: str
    InfoCardPurchasedPassiveString: str
    InfoCardMaxedPassiveString: str
    InfoCardInsufficientPointsString: str
    DragDropManager: gbx_ui.GbxGFxDragDropManager
    def OnTutorialComplete(self): ...
    def OnTutorialAdvanced(self): ...
    def OnTreeItemPressed(self, PressedItem: GFxSkillScreenItem): ...
    def OnSpinButtonPressed(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnSlotButtonHovered(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnSlotButtonFocused(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnSlotButtonClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnItemUsableStateChanged(self, UpdatedItem: GFxSkillScreenItem): ...
    def OnItemUnlockedAudioRequest(self): ...
    def OnItemSlotRequest(self, ItemToSlot: GFxSkillScreenItem, SlotIndex: int): ...
    def OnItemIncreasedAudioRequest(self, AudioIndex: int): ...
    def OnInfoCardUnhovered(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnInfoCardHovered(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnFocusedTreeItemChanged(self, FocusedItem: GFxSkillScreenItem): ...
    def OnFocusedLoadoutItemChanged(self, FocusedItem: GFxSkillScreenLoadoutSlot): ...
    def OnCharacterAugmentChanged(self, SlotData: PlayerCharacterComponentSlotData): ...
    def OnBranchHovered(self, HoverededButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBranchClicked(self, ClickedBranch: GFxSkillScreenBranch): ...
    def OnAbilitySlotChanged(self, SlotData: OakPlayerAbilitySlotData): ...
    def OnAbilityPointsChanged(self, RemainingAbilityPoints: int): ...
    def OnAbilityItemChanged(self, ItemData: OakPlayerAbilityTreeItemData): ...
    def OnAbilityAugmentChanged(self, ActionAbilityClass: unreal.UClass, SlotData: OakActionAbilityAugmentSlotData): ...
    def extSpinRightTransition(self): ...
    def extSpinLeftTransition(self): ...
    def ExtOnTutorialSpinComplete(self): ...
    def ExtOnScreenUnlockAnimationComplete(self): ...


class GFxBeastmasterSkillScreenTree(GFxSkillScreenTree):
    PetLabel: gbx_ui.GbxTextField
    PetAbilitySlotsLabel: gbx_ui.GbxTextField
    PetUltimateModLabel: gbx_ui.GbxTextField
    PetSlot: GFxSkillScreenLoadoutSlot
    PetUltimateMod: GFxSkillScreenLoadoutSlot
    PetAbilitySlots: GFxSkillScreenLoadoutSlot
    PetSlotDescription: str
    PetUltimateSlotDescription: str
    PetAugmentSlotDescription: str
    PetAbilitySlotDescription: str



class GFxBehindTheScenesMenu(gbx_ui.GbxGFxMenu):
    CategoryIndex: int
    Content: gbx_ui.GbxGFxObject
    MediaListClip: GFxBehindTheScenesMediaSelectionWidget
    MediaPlayerActor: BehindTheScenesMediaPlayerActor
    SelectedMediaCell: GFxBehindTheScenesMediaCell
    def OnMediaItemClicked(self, BUTTON: gbx_ui.GbxGFxListCell, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxBehindTheScenesMediaSelectionWidget(gbx_ui.GbxGFxObject):
    ContentListClip: gbx_ui.GbxGFxGridScrollingList
    Thumbnails: engine.Texture



class GFxBehindTheScenesMediaCell(gbx_ui.GbxGFxListCell):
    ThumbnailClip: gbx_ui.GbxGFxObject
    TypeIconClip: gbx_ui.GbxGFxObject
    def UpdateThumbnail(self, InNewIconData: engine.Texture, TextureIndex: int, bForce: bool): ...


class GFxBehindTheScenesMenuData(gbx_ui.GbxGFxMenuData):
    BehindTheScenesContent: BehindTheScenesContent



class GFxBillboardComponent(engine.StaticMeshComponent):
    TextureParameterName: str
    bShouldBillboard: bool
    CustomTranslucentSortPriority: int
    ContentSize: core_uobject.Vector2D
    DistanceScaleCurve: engine.CurveFloat
    DistanceAlphaCurve: engine.CurveFloat
    TrackedPlayerController: gbx_game_system_core.GbxPlayerController
    CurrentMovie: gbx_ui.GbxGFxMovie
    RenderTarget: engine.TextureRenderTarget2D
    DisplayedMaterial: engine.MaterialInstanceDynamic
    SizeOfPlaneMesh: core_uobject.Vector
    def OnMovieStarted(self): ...


class GFxBossBar(gbx_ui.GbxGFxHUDWidget):
    AdditionalBars: unreal.WrappedArray[gbx_ui.GbxGFxProgressBar]
    Nameplate: GFxNameplate
    OakGameState: OakGameState
    BossDamageComponent: OakDamageComponent
    BarClips: unreal.WrappedArray[gbx_ui.GbxGFxObject]
    ActiveSectionClips: unreal.WrappedArray[gbx_ui.GbxGFxObject]
    FocusableProgressBars: unreal.WrappedArray[gbx_ui.GbxGFxProgressBar]
    CachedBoss: OakCharacter
    NameplateBars: gbx_ui.GbxGFxObject
    NameplateBarsID: str
    PathToTopFocusableBar: str
    PathToMidFocusableBar: str
    PathToBotFocusableBar: str
    FadeInSingle: str
    FadeInDouble: str
    FadeInTriple: str
    DeathAnimation: str
    LevelPrefix: str
    def UpdateEventDelegates(self): ...
    def UpdateActiveSelectionClips(self): ...
    def SetNewBossTarget(self, NewTarget: OakCharacter): ...
    def SetFocusedBar(self, FocusedBarFrame: str): ...
    def PlayEventOnBossBar(self, BossBarCharacter: OakCharacter, BossBarEvent: EBossbarEventType): ...
    def OnPawnChanged(self, Pawn: engine.Pawn, OldPawn: engine.Pawn): ...
    def OnHealthTypeDepeleted(self, Details: HealthTypeDepletedDetails): ...
    def OnHealthTypeAdded(self, HealthType: gbx_game_system_core.HealthType, Index: int): ...
    def OnBossDestroy(self, DestroyedActor: engine.Actor): ...
    def HideAllSelectionClips(self): ...
    def HandleEventOnBossBar(self, EventData: BossbarEventData): ...
    def EnableBossBar(self): ...
    def DisableBossBar(self): ...


class GFxBuddyWidget(gbx_ui.GbxGFxObject):
    WidgetAnims: gbx_ui.GbxGFxObject
    HealthBar: gbx_ui.GbxGFxProgressBar
    ShieldBar: gbx_ui.GbxGFxProgressBar
    ReviveBar: gbx_ui.GbxGFxProgressBar
    DyingBar: gbx_ui.GbxGFxProgressBar
    GodRay: gbx_ui.GbxGFxObject
    CurrentTargetActor: engine.Actor
    CurrentTargetClass: unreal.UClass
    CachedBuddyWidgetState: EBuddyWidgetState
    CachedFanfareState: EBuddyWidgetFanfareState
    InstanceName: str
    def OnPlayerClassChanged(self): ...
    def OnLevelChanged(self, OldExperienceLevel: int, NewExperienceLevel: int): ...
    def OnDownStateExitReasonChanged(self, ExitReason: EExitDownStateReason): ...


class GFxBuddyWidgetContainer(gbx_ui.GbxGFxHUDWidget):
    PlayerBuddyWidgets: GFxBuddyWidget
    PetBuddyWidget: GFxBuddyWidget
    PlayerGodRays: gbx_ui.GbxGFxObject
    PetGodRays: gbx_ui.GbxGFxObject
    AnimQueue: unreal.WrappedArray[GFxBuddyWidgetAnimQueueItem]
    AnimState: EBuddyWidgetContainerAnimState
    def OnPlayerStateUpdated(self): ...
    def OnPlayerStateRemoved(self): ...
    def OnPlayerStateAdded(self, NewPlayerState: OakPlayerState): ...
    def OnPetSpawnStateChanged(self, Pet: OakCharacter): ...
    def NotifyPrimaryCharacterChanged(self, NewPrimaryCharacter: gbx_game_system_core.GbxCharacter): ...
    def extSlideFinished(self): ...
    def extFanfareAnimationFinished(self, TargetName: str): ...


class GFxCARMenuCustomizePanels(gbx_ui.GbxGFxObject):
    CategoryTextClip: gbx_ui.GbxTextField
    UnlockedTextClip: gbx_ui.GbxTextField
    NewIndicatorClip: gbx_ui.GbxGFxObject



class GFxCARMenuData(OakGFxMenuData):
    Tutorials: GFxMenuTutorialCollection
    FirstBootTutorial: str
    ShowBodyUnlockedTutorialIndex: int
    GoToDriverWeaponTutorialIndex: int
    ChooseDriverWeaponTutorialIndex: int
    DeployVehicleTutorialIndex: int



class GFxCARMenu(AdvancedInteractiveObjectOwnedGFxMenu):
    CameraInputSpeed: float
    CameraInputDamping: float
    CameraMinPitch: float
    CameraMaxPitch: float
    bAllowRotateCameraInPart: bool
    PartInfos: unreal.WrappedArray[GFxCARMenuPartInfo]
    DefaultLoadouts: unreal.WrappedArray[OakCARMenuLoadout]
    ListDatas: unreal.WrappedArray[GFxCARMenuListData]
    TestWidget: unreal.UClass
    EchoDeviceController: EchoDeviceUIController
    StandInController: StandInUIController
    EchoDeviceMenuName: str
    EchoDeviceIdleScreenName: str
    EchoDeviceDeployScreenName: str
    StatCardLoadoutStats: unreal.WrappedArray[OakCARVehiclePartStat]
    MaxThumbnails: int
    MaxThumbnailsSplitScreen: int
    bShowDebugPreviewText: bool
    MouseRotateFactor: float
    Loadouts: unreal.WrappedArray[OakCARMenuLoadout]
    PCSpawnerComponent: VehicleSpawnerComponent
    VehiclePreviewActor: engine.Actor
    CurrentLoadoutIndex: int
    DeployedLoadoutIndex: int
    CurrentPage: EGFxCARMenuPage
    CurrentEditPartType: OakCARMenuPartType
    LoadoutCustomizer: OakCARMenuLoadoutCustomizer
    NoPartInfo: GFxCARMenuPartInfo
    TutorialWidget: GFxTutorialWidget
    LoadedAssets: unreal.WrappedArray[GFxCARMenuLoadAssetInfo]
    NewVehicles: unreal.WrappedArray[OakCARVehicleData]
    DebugLoadoutText: gbx_ui.GbxTextField
    CatchARideMenuClip: gbx_ui.GbxGFxObject
    MenuLabelText: gbx_ui.GbxTextField
    StatCard: GFxCARMenuStatCard
    NavArrowLeftButton: gbx_ui.GbxGFxButton
    NavArrowLeft: gbx_ui.GbxGFxObject
    NavArrowRightButton: gbx_ui.GbxGFxButton
    NavArrowRight: gbx_ui.GbxGFxObject
    LoadoutNameClip: gbx_ui.GbxTextField
    SlotLabelClip: gbx_ui.GbxTextField
    PrevLoadoutHintClip: gbx_ui.GbxGFxHintWidget
    NextLoadoutHintClip: gbx_ui.GbxGFxHintWidget
    CustomizationHintNextClip: gbx_ui.GbxGFxHintWidget
    CustomizationHintPrevClip: gbx_ui.GbxGFxHintWidget
    CustomizePanels: GFxCARMenuCustomizePanels
    LoadoutOptionsClip: gbx_ui.GbxGFxObject
    ColorChooserWidget: GFxCARMenuColorChooserWidget
    DeployAnim: gbx_ui.GbxGFxObject
    DeployText: gbx_ui.GbxTextField
    NewBodyNotification: gbx_ui.GbxGFxObject
    NewBodyHeaderText: gbx_ui.GbxTextField
    NewBodyHeaderDsText: gbx_ui.GbxTextField
    NewBodyNameText: gbx_ui.GbxTextField
    ThumbnailManager: OakThumbnailManager
    MouseDragArea: GFxCarMenuMouseDragArea
    bThumbnailRefreshNeeded: bool
    DeployString: str
    NewBodyUnlockedString: str
    SharedOptionsListScrollbar: gbx_ui.GbxGFxSlider
    LastPreview: GFxCARPreviewData
    WantedPreview: GFxCARPreviewData
    StandInPreviewData: DesiredStandInActorData
    def OnVehicleSpawned(self, Vehicle: OakVehicle): ...
    def OnTutorialComplete(self): ...
    def OnTutorialAdvanced(self): ...
    def OnThumbnailLoaded(self): ...
    def OnTeleportPressed(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnPreviewColorChanged(self, Color: core_uobject.Color, bIsPrimary: bool, Index: int, bIsDefault: bool): ...
    def OnPreviewActorContainerLoaded(self): ...
    def OnNavButtonPressed(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnLastDeployedPressed(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnColorChosen(self, Color: core_uobject.Color, bIsPrimary: bool, Index: int, bIsDefault: bool): ...
    def OnAssetLoaded(self): ...
    def GetPartSelectionList(self, ListName: str, ReturnValue: gbx_ui.GbxGFxPooledGridList) -> gbx_ui.GbxGFxPooledGridList: ...
    def extBodyUnlockAnimFinished(self): ...


class GFxCarMenuMouseDragArea(gbx_ui.GbxGFxObject): ...


class GFxColorPickerWidget(gbx_ui.GbxGFxObject):
    ColorList: gbx_ui.GbxGFxGridScrollingList
    SelectionsWrapper: gbx_ui.GbxGFxObject
    PrimarySwatch: GFxColorPickerSwatch
    PrimaryLabel: gbx_ui.GbxTextField
    SecondarySwatch: GFxColorPickerSwatch
    SecondaryLabel: gbx_ui.GbxTextField
    TertiarySwatch: GFxColorPickerSwatch
    TertiaryLabel: gbx_ui.GbxTextField
    CurrentSwatch: GFxColorPickerSwatch
    LeftSwatchArrow: gbx_ui.GbxGFxObject
    LeftSwatchArrowHint: gbx_ui.GbxGFxHintWidget
    RightSwatchArrow: gbx_ui.GbxGFxObject
    RightSwatchArrowHint: gbx_ui.GbxGFxHintWidget
    OwningMenu: gbx_ui.GbxGFxMenu
    CurrentMode: EColorPickerMode
    AvailableColors: unreal.WrappedArray[core_uobject.Color]
    PrimarySwatchDefaults: unreal.WrappedArray[core_uobject.Color]
    SecondarySwatchDefaults: unreal.WrappedArray[core_uobject.Color]
    TertiarySwatchDefaults: unreal.WrappedArray[core_uobject.Color]
    def OnTopColorSelected(self, ClickedItem: gbx_ui.GbxGFxListCell, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnTertiaryColorSwatchSelected(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnSwatchFocused(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnSecondaryColorSwatchSelected(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnPrimaryColorSwatchSelected(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnColorFocused(self, ClickedItem: gbx_ui.GbxGFxListCell): ...
    def OnBottomColorSelected(self, ClickedItem: gbx_ui.GbxGFxListCell, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxCARMenuColorChooserWidget(GFxColorPickerWidget):
    NavArrowLeftButton: gbx_ui.GbxGFxButton
    NavArrowRightButton: gbx_ui.GbxGFxButton



class GFxCARMenuCustomizePage(unreal.UObject):
    CARMenuOwner: GFxCARMenu
    VehicleSpawner: VehicleSpawnerComponent
    ItemList: gbx_ui.GbxGFxPooledGridList
    PartType: OakCARMenuPartType
    Vehicles: unreal.WrappedArray[OakCARVehicleData]
    Parts: unreal.WrappedArray[OakCARVehiclePartData]
    bCanSelectEmpty: bool
    def OnUpdateCell(self, UpdateInfo: gbx_ui.GbxGFxListCellUpdateInfo): ...
    def OnCellFocused(self, UpdateInfo: gbx_ui.GbxGFxListCellUpdateInfo): ...
    def OnCellClicked(self, UpdateInfo: gbx_ui.GbxGFxListCellUpdateInfo): ...


class GFxCARMenuPartButton(gbx_ui.GbxGFxListCell):
    CellType: EGFxCARMenuPartCellType
    PartType: OakCARMenuPartType
    IconStageName: str
    bIsEmptyItem: bool
    LabelText: gbx_ui.GbxTextField
    LabelBackground: gbx_ui.GbxGFxObject
    LoadingCircleClip: gbx_ui.GbxGFxObject
    ImageRenderClip: gbx_ui.GbxGFxObject
    ImageRenderShadowClip: gbx_ui.GbxGFxObject
    EquipmentNameClip: gbx_ui.GbxGFxObject
    EquipmentNameText: gbx_ui.GbxTextField
    EmptyLabelText: gbx_ui.GbxTextField
    ButtonHelpHintClip: gbx_ui.GbxGFxHintWidget
    EquippedFlourishAnimClip: gbx_ui.GbxGFxObject
    LockIconClip: gbx_ui.GbxGFxObject
    InvalidSlot: gbx_ui.GbxGFxObject
    NewIndicatorWrapperClip: gbx_ui.GbxGFxObject
    PrimaryColorClip: gbx_ui.GbxGFxObject
    SecondaryColorClip: gbx_ui.GbxGFxObject
    TertiaryColorClip: gbx_ui.GbxGFxObject
    CategoryIconClip: gbx_ui.GbxGFxObject
    CategoryIconInnerClip: gbx_ui.GbxGFxObject
    def OnThisFocused(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnThisClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxCARMenuStatLine(gbx_ui.GbxGFxObject):
    MaxStatValue: float
    StatIconClip: gbx_ui.GbxGFxObject
    StatLabelText: gbx_ui.GbxTextField
    StatValueText: gbx_ui.GbxTextField
    Stat: OakCARVehiclePartStat



class GFxCARMenuStatCard(gbx_ui.GbxGFxObject):
    PartType: OakCARMenuPartType
    PanelHeader: gbx_ui.GbxTextField
    StatBarClips: gbx_ui.GbxGFxObject
    ModNameClip: gbx_ui.GbxTextField
    ModDescriptionClip: gbx_ui.GbxTextField
    StatDescriptionClip: gbx_ui.GbxTextField
    StatLines: unreal.WrappedArray[GFxCARMenuStatLine]



class GFxChallengeProgressWidget(gbx_ui.GbxGFxHUDWidget):
    WidgetDuration: float
    DelayToThingTransitions: float
    MaxWidgetRolloutTime: float
    ChallengeCompleteText: str
    WidgetState: EGFxChallegeProgressWidgetState
    CurrentChallenge: GFxChallengeProgressItem
    WidgetStateTime: float
    bHasStartedThingTransitions: bool
    ChallengeManager: gbx_game_system_core.ChallengeManager
    ChallengesComponent: gbx_game_system_core.ChallengesComponent
    WidgetWrapper: gbx_ui.GbxGFxObject
    Widget: gbx_ui.GbxGFxObject
    LabelText: gbx_ui.GbxTextField
    BodyText: gbx_ui.GbxTextField
    ProgressBarClip: gbx_ui.GbxGFxProgressBar
    ProgressText: gbx_ui.GbxTextField
    TypeIconClip: gbx_ui.GbxGFxObject
    ScanlinesClip: gbx_ui.GbxGFxObject
    ChallengesQueue: unreal.WrappedArray[GFxChallengeProgressItem]
    bBlockedByTutorial: bool
    def OnInputDeviceChanged(self): ...
    def OnChallengeUpdated(self, Component: gbx_game_system_core.ChallengesComponent, ChallengeClass: unreal.UClass, NewValue: int, bDisplayNotification: bool, bCompleted: bool): ...
    def OnChallengeCompleted(self, Component: gbx_game_system_core.ChallengesComponent, ChallengeClass: unreal.UClass): ...
    def OnChallengeChildCompleted(self, Component: gbx_game_system_core.ChallengesComponent, ChallengeClass: unreal.UClass): ...
    def OnChallengeActivated(self, Component: gbx_game_system_core.ChallengesComponent, ChallengeClass: unreal.UClass): ...
    def extOnUpdateThingComplete(self, Thing: str): ...
    def extOnUpdateThing(self, Thing: str): ...
    def extOnRolloutComplete(self): ...
    def extOnRollOnComplete(self): ...


class GFxCharacterSelectButton(gbx_ui.GbxGFxListCell):
    ShadowTextField: gbx_ui.GbxTextField



class GFxCharacterSelectMenu(gbx_ui.GbxGFxMenu):
    ButtonLibraryName: str
    PlayerStatusLibraryName: str
    PlayerClassInfos: unreal.WrappedArray[PlayerClassInfo]
    PlayerClassButtons: unreal.WrappedArray[GFxCharacterSelectButton]
    CountdownText: gbx_ui.GbxTextField
    PlayerName: gbx_ui.GbxTextField
    CharacterDescriptionPanel: gbx_ui.GbxGFxObject
    CharacterDescriptionLabel: gbx_ui.GbxTextField
    CharacterDescription: gbx_ui.GbxTextField
    LobbyWidget: GFxLobbyWidget
    def WaitForValidPlayerController(self, WorldContextObject: unreal.UObject, LatentInfo: engine.LatentActionInfo): ...
    def ShowLoadGameMenu(self): ...
    def OnPlayerClassItemFocused(self, ButtonFocused: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnPlayerClassItemClicked(self, ButtonClicked: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxCheckpointWidget(gbx_ui.GbxGFxHUDWidget):
    NumCheckpointIdleLoops: int
    CurrentState: ECheckpointWidgetState
    NextState: ECheckpointWidgetState
    CheckpointLoopsRemaining: int
    InnerClip: gbx_ui.GbxGFxObject
    CheckpointTextClip: gbx_ui.GbxTextField
    def PlayCheckpointAnimation(self): ...
    def AnimationComplete(self, AnimationName: str): ...


class GFxClassSelectionMenu(gbx_ui.GbxGFxMenu):
    ContentPanel: gbx_ui.GbxGFxGridScrollingList
    CharacterPicture: scaleform_ui.GFxObject
    CharacterClass: gbx_ui.GbxTextField
    CharacterName: gbx_ui.GbxTextField
    CharacterDescription: gbx_ui.GbxTextField
    TargetPC: gbx_game_system_core.GbxPlayerController
    PlayerStandIn: PlayerStandIn
    def OnPlayerClassItemFocused(self, FocusedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnPlayerClassItemClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxColorPickerItem(gbx_ui.GbxGFxListCell):
    AssociatedColor: core_uobject.Color
    DefaultColorClip: gbx_ui.GbxGFxObject
    TopHintWrapper: gbx_ui.GbxGFxObject
    TopHint: gbx_ui.GbxGFxHintWidget
    TopTextField: gbx_ui.GbxTextField
    BottomHintWrapper: gbx_ui.GbxGFxObject
    BottomHint: gbx_ui.GbxGFxHintWidget
    BottomTextField: gbx_ui.GbxTextField



class GFxColorPickerSwatch(gbx_ui.GbxGFxButton):
    bIsSplit: bool
    ColorSquare: gbx_ui.GbxGFxObject
    ColorSquareSplit: gbx_ui.GbxGFxObject
    bIsPickingForThis: bool
    AssignedColorListIndex: int
    AssignedSplitColorListIndex: int



class GFxControllerDisconnectMovie(gbx_ui.GbxGFxMovie):
    ControllerDisconnectHeaderText: str
    ControllerDisconnectBodyText: str
    ContentClip: gbx_ui.GbxGFxObject
    WindowFrameClip: gbx_ui.GbxGFxObject
    HeaderTextFieldClip: gbx_ui.GbxTextField
    BodyTextFieldClip: gbx_ui.GbxTextField
    TotalNumDisconnectMovies: int



class OakUIControllerDisconnectManager(unreal.UObject):
    ConnectedStates: unreal.WrappedArray[OakUIControllerConnectedState]



class GFxControllerOptions(GFxOptionBase):
    PreviousSubmenuHint: gbx_ui.GbxGFxHintWidget
    NextSubmenuHint: gbx_ui.GbxGFxHintWidget
    PreviousControlSchemeHint: gbx_ui.GbxGFxHintWidget
    NextControlSchemeHint: gbx_ui.GbxGFxHintWidget
    WalkingRebindContext: gbx_input.GbxInputRebindContext
    DrivingRebindContext: gbx_input.GbxInputRebindContext
    CommonRebindContext: gbx_input.GbxInputRebindContext
    WalkingThumbstickSchemeDescription: OptionDescriptionItem
    WalkingButtonSchemeDescription: OptionDescriptionItem
    DrivingThumbstickSchemeDescription: OptionDescriptionItem
    DrivingButtonSchemeDescription: OptionDescriptionItem
    def OnWalkingControlSchemeChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnRevertToDefaultClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnJoystickWalkingSchemeChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnJoystickDrivingSchemeChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnDrivingControlSchemeChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnCustomizeControlsClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnControlSchemeButtonFocused(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnContentPanelSelectionChanged(self, SelectedItem: gbx_ui.GbxGFxListCell): ...
    def OnChangedColumnFocus(self, BindingType: gbx_ui.EBindingType): ...


class GFxControlsAdvancedOptions(GFxOptionBase):
    PreviousSubmenuHint: gbx_ui.GbxGFxHintWidget
    NextSubmenuHint: gbx_ui.GbxGFxHintWidget
    def OnGamepadRightDeadZoneOuterChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnGamepadRightDeadZoneInnerChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnGamepadMoveAxialDeadZoneScaleChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnGamepadLookAxialDeadZoneScaleChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnGamepadLeftDeadZoneOuterChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnGamepadLeftDeadZoneInnerChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...


class GFxControlsBasicOptions(GFxOptionBase):
    PreviousSubmenuHint: gbx_ui.GbxGFxHintWidget
    NextSubmenuHint: gbx_ui.GbxGFxHintWidget
    UseAdvancedHipAimSettingsItem: gbx_ui.GbxGFxListItemSpinner
    UseAdvancedZoomedAimSettingsItem: gbx_ui.GbxGFxListItemSpinner
    UseAdvancedVehicleAimSettingsItem: gbx_ui.GbxGFxListItemSpinner
    EnableGamepadInputItem: gbx_ui.GbxGFxListItemSpinner
    GamepadHipSensitivityLevelItem: gbx_ui.GbxGFxListItemNumber
    GamepadZoomedSensitivityLevelItem: gbx_ui.GbxGFxListItemNumber
    GamepadVehicleSensitivityLevelItem: gbx_ui.GbxGFxListItemNumber
    GamepadHipYawRateItem: gbx_ui.GbxGFxListItemNumber
    GamepadHipPitchRateItem: gbx_ui.GbxGFxListItemNumber
    GamepadHipExtraYawItem: gbx_ui.GbxGFxListItemNumber
    GamepadHipExtraPitchItem: gbx_ui.GbxGFxListItemNumber
    GamepadHipRampUpTimeItem: gbx_ui.GbxGFxListItemNumber
    GamepadHipRampUpDelayItem: gbx_ui.GbxGFxListItemNumber
    GamepadZoomedYawRateItem: gbx_ui.GbxGFxListItemNumber
    GamepadZoomedPitchRateItem: gbx_ui.GbxGFxListItemNumber
    GamepadZoomedExtraYawItem: gbx_ui.GbxGFxListItemNumber
    GamepadZoomedExtraPitchItem: gbx_ui.GbxGFxListItemNumber
    GamepadZoomedRampUpTimeItem: gbx_ui.GbxGFxListItemNumber
    GamepadZoomedRampUpDelayItem: gbx_ui.GbxGFxListItemNumber
    GamepadVehicleYawRateItem: gbx_ui.GbxGFxListItemNumber
    GamepadVehiclePitchRateItem: gbx_ui.GbxGFxListItemNumber
    GamepadVehicleExtraYawItem: gbx_ui.GbxGFxListItemNumber
    GamepadVehicleExtraPitchItem: gbx_ui.GbxGFxListItemNumber
    GamepadVehicleRampUpTimeItem: gbx_ui.GbxGFxListItemNumber
    GamepadVehicleRampUpDelayItem: gbx_ui.GbxGFxListItemNumber
    def OnUseAdvancedZoomedAimSettingsChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnUseAdvancedVehicleAimSettingsChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnUseAdvancedHipAimSettingsChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnMouseVehicleScaleChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnMouseScaleChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnMouseADSScaleChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnGlyphModeChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnGamepadZoomedSensitivityLevelChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnGamepadVehicleSensitivityLevelChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnGamepadHipSensitivityLevelChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnEnableGamepadInputChoiceMade(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnEnableGamepadInputChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...


class CreditsDataAsset(gbx_runtime.GbxDataAsset):
    HeaderText: str
    HeaderTextStyle: str
    CreditsDataTable: engine.DataTable
    OrganizationInfos: unreal.WrappedArray[OrganizationInfo]
    TitleTextStyle: str
    PeopleTextStyle: str



class TimedWwiseEvent(unreal.UObject):
    RefWorld: engine.World
    OwningPawn: engine.Pawn
    TimerHandle: engine.TimerHandle
    WwiseEvent: wwise_audio.WwiseEvent
    def CallWwiseEvent(self): ...


class GFxCreditsMenu(gbx_ui.GbxGFxMenu):
    CreditsSections: unreal.WrappedArray[CreditsSection]
    SizeTextureCache: int
    CreditsImages: unreal.WrappedArray[core_uobject.SoftObjectPath]
    InsertPosYDelta: float
    NumCreditsLinesCached: int
    CreditsTextureCache: unreal.WrappedArray[CreditsTextureCache]
    Image: gbx_ui.GbxGFxObject
    CreditsContainer: gbx_ui.GbxGFxObject
    CreditsLineInfos: unreal.WrappedArray[CreditsLineInfo]
    TextFieldInfos: unreal.WrappedArray[CreditsTextFieldInfo]
    def PushCreditsMenuFor(self, Target: OakPlayerController, LatentInfo: engine.LatentActionInfo, bDismissWhenEndReached: bool, OverrideCreditsMenuData: gbx_ui.GbxMenuData): ...
    def OnImageLoaded(self): ...


class GFxCrewChallengeCompletedNotificationWidget(GFxDisplayedNotificationWidget):
    CrewChallengeCompletedText: gbx_ui.GbxTextField
    CrewChallengeCompletedTextShadow: gbx_ui.GbxTextField
    CrewChallengeTitleText: gbx_ui.GbxTextField



class GFxCrewQuartersMoodMenu(gbx_ui.GbxGFxMenu):
    InfoPanelClip: GFxCrewQuartersMoodMenuInfoPanelObject
    MoodListClip: gbx_ui.GbxGFxGridScrollingList
    MoodListScrollbarClip: gbx_ui.GbxGFxSlider
    UnlockedTextClip: gbx_ui.GbxTextField
    MoodListData: unreal.WrappedArray[GFxCrewQuartersMoodMenuMoodInfo]
    NumUnlockedCount: int
    Room: CrewQuartersRoom
    def OpenCrewQuartersMoodMenu(self, InOakPC: OakPlayerController, InMoodMenuData: gbx_ui.GbxMenuData, InRoom: CrewQuartersRoom): ...
    def OnMoodItemSelected(self, ListItem: gbx_ui.GbxGFxListCell): ...
    def OnMoodItemClicked(self, ListItem: gbx_ui.GbxGFxListCell, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxCrewQuartersMoodMenuInfoPanelObject(gbx_ui.GbxGFxObject):
    RoomMoodsTextClip: gbx_ui.GbxTextField
    DescriptionTextClip: gbx_ui.GbxTextField
    ButtonPromptHintClip: gbx_ui.GbxGFxHintWidget
    def OnTextureLoaded(self): ...


class GFxCrewQuartersMenuListItem(gbx_ui.GbxGFxListCell): ...


class OakCrewQuartersMoodIO(AdvancedInteractiveObject):
    AssociatedRoom: CrewQuartersRoom
    MoodMenuData: gbx_ui.GbxMenuData
    def OnUsedBy(self, UseEvent: gbx_game_system_core.UseEvent): ...


class GFxCrewQuartersPlaceObjectsMenu(gbx_ui.GbxGFxMenu):
    BackpackWidgetConfig: GFxBackpackWidgetConfig
    NewPreviewDelaySeconds: float
    BackpackWidget: GFxBackpackWidget
    BackpackClip: GFxCrewQaurtersPlaceObjectsBackpackObject
    Room: CrewQuartersRoom
    CrewQuartersIO: unreal.UObject
    ThumbnailManager: OakThumbnailManager
    ButtonPromptHintClip: gbx_ui.GbxGFxHintWidget
    bMenuStarted: bool
    bMenuSetUp: bool
    RevertToDecorationData: CrewQuartersDecorationData
    TimeTilNextPreview: float
    bPreviewRequested: bool
    def OpenPlaceObjectsMenu(self, InOakPC: OakPlayerController, InMenuData: gbx_ui.GbxMenuData, InRoom: CrewQuartersRoom, InIO: unreal.UObject): ...
    def OnThumbnailLoaded(self): ...
    def OnListItemSelected(self, Item: OakUIInventoryItemDisplayInfo, GridWidget: gbx_ui.GbxGFxObject): ...
    def OnListItemClicked(self, Item: OakUIInventoryItemDisplayInfo, GridWidget: gbx_ui.GbxGFxObject, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxCrewQaurtersPlaceObjectsBackpackObject(gbx_ui.GbxGFxObject):
    HeaderTextClip: gbx_ui.GbxTextField
    FilterTextClip: gbx_ui.GbxTextField
    SortTextClip: gbx_ui.GbxTextField
    SortButtonLeftClip: gbx_ui.GbxGFxHintWidget
    SortButtonRightClip: gbx_ui.GbxGFxHintWidget



class GFxInventoryItemWidget(GFxBackpackWidgetItem):
    bIsNewItemWidgetContent: bool
    ButtonHelpClip: gbx_ui.GbxGFxHintWidget
    DisabledReason: EOakInventoryItemWidgetDisabledReason
    bEquippingToThis: bool
    SlotData: InventorySlotData
    FilterTypeId: str
    WidgetLineAnchorLocationAbsolute: core_uobject.Vector2D
    WidgetLineAnchorLocationViewport: core_uobject.Vector2D
    bAnchorLocationValid: bool
    IconData: OakThumbnailManagerIcon
    bUseCosmeticLabel: bool
    bAppearsDisabled: bool
    bUseTrashButtonStates: bool
    LastFavoriteTrashFrame: str



class GFxCrewQuartersPlaceObjectsItemWidget(GFxInventoryItemWidget):
    ItemNameText: str



class CrosshairColorEnumMapToFrames(gbx_runtime.GbxDataAsset): ...


class GFxCrosshairWidget(gbx_ui.GbxGFxHUDWidget):
    DefaultCrosshairData: gbx_ui.GbxCrosshairDataAsset
    CrosshairEnumType: ECrosshairType
    CachedWeapon: gbx_weapon.Weapon
    CachedWeapons: unreal.WrappedArray[gbx_weapon.Weapon]
    CachedZoomComponent: gbx_weapon.WeaponZoomComponent
    CrosshairActor: engine.Actor
    CurrentTarget: engine.Actor
    CrosshairContainerInstanceName: str
    MeleeCrosshairInstanceName: str
    ActionSkillCrosshairInstanceName: str
    SprintCrosshairInstanceName: str
    DefaultCrosshairInstanceName: str
    MaxRepresentableAngle: float
    FeedbackWidget: OakReticleFeedbackWidget
    def UpdateWeaponSlot(self): ...
    def UpdateLightForDamageType(self): ...
    def SetLockedTargetClipsState(self, bIsEnabled: bool): ...
    def SetCrosshairColor(self, NewColor: ECrosshairColorsEnum): ...
    def OnZoomed(self, ZoomLevel: int): ...
    def OnWeaponChanged(self, Weapon: gbx_weapon.Weapon, LastWeapon: gbx_weapon.Weapon): ...
    def OnTargetLockChange(self, EventWeapon: gbx_weapon.Weapon, bInLockedOn: bool): ...
    def OnSwitchedWeaponMode(self): ...
    def OnNotZoomed(self): ...
    def OnMeleeStateChangeEvent(self, bMeleePossible: bool): ...
    def HandleCrosshairSpread(self): ...
    def FindCrosshairColor(self, ReturnValue: ECrosshairColorsEnum) -> ECrosshairColorsEnum: ...
    def CheckForCrosshairVisibility(self): ...
    def ChangeCrosshairType(self, NewCrosshairDataAsset: gbx_ui.GbxCrosshairDataAsset): ...
    def ChangeCrosshairByString(self, NewFrame: str): ...


class GFxCurrencyCounterClip(gbx_ui.GbxGFxObject):
    Categories: unreal.WrappedArray[GFxCurrencyCounterCategoryData]
    SpinnerWidgets: unreal.WrappedArray[GFxUISpinnerWidget]
    CurrentDisplayedValue: int
    CurrencyCounterState: EGFxCurrencyCounterState
    HoldOnValueTimerHandle: engine.TimerHandle
    AnimationContainer: gbx_ui.GbxGFxObject
    CounterQueue: unreal.WrappedArray[GFxCurrencyCounterQueueInfo]
    TotalSpinnerHeightOverride: float
    CostSpinTime: float
    PauseOnNewValueTime: float
    bGamePaused: bool
    TotalSliders: int
    def OnPostChangeDisplayHoldComplete(self): ...
    def OnDisplayValueAnimationComplete(self): ...
    def OnCurrencyQuantityChanged(self, ItemCategory: gbx_inventory.InventoryCategoryData, Quantity: int): ...


class GFxCurrencyWidget(gbx_ui.GbxGFxHUDWidget):
    TotalSpinnerHeightOverride: float
    PauseOnNewValueTime: float
    CostSpinTime: float
    DelayAfterResurrect: float
    CostSpinTimeOnResurrect: float
    PauseOnNewValueTimeOnResurect: float
    CurrencyCounter: GFxCurrencyCounterClip
    AnimationContainerID: str
    InventoryComponent: gbx_inventory.InventoryListComponent
    OakCharacter: OakCharacter
    def OnPauseStateChanged(self, bPaused: bool): ...
    def OnOwnerResurrected(self, CashLost: int): ...
    def OnDisplayCurrencyWidgetOnHUD(self, CurrencyType: gbx_game_system_core.GbxInventoryCategoryData): ...
    def OnCurrencyQuantityChanged(self, UpdatedItemHandle: gbx_inventory.InventoryListEntryHandle, ItemCategory: gbx_inventory.InventoryCategoryData, Quantity: int, MaxQuantity: int): ...
    def OnCurrencyDisplayCompleted(self): ...


class GFxDuelingWidget(gbx_ui.GbxGFxHUDWidget):
    DuelManager: DuelManager
    def OnWonDuel(self, Classification: EDuelClassification): ...
    def OnUnacceptedCompetitorDuel(self, Other: OakCharacter_Player): ...
    def OnTimerElapsed(self): ...
    def OnStartedDuelSetup(self): ...
    def OnStartedDuel(self): ...
    def OnLostDuel(self, LoseReason: EDuelLoseReason, Classification: EDuelClassification): ...
    def OnDuelTimedOut(self): ...
    def OnDuelInitated(self): ...
    def OnDuelCanceled(self): ...
    def OnCompetitorUnacceptedDuel(self, Other: OakCharacter_Player): ...
    def OnCompetitorAcceptedDuel(self, Other: OakCharacter_Player): ...
    def OnAcceptedCompetitorDuel(self, Other: OakCharacter_Player): ...


class GFxDuelingRolloutObject(gbx_ui.GbxGFxObject): ...


class GFxDuelingTimerObject(gbx_ui.GbxGFxObject):
    DuelTotem: DuelTotem
    DuelArena: DuelArena
    DuelWidgetTotemComponent: OakDuelingWidgetTotemComponent
    OwningWidget: GFxDuelingTimerWidget
    DistanceScaleCurve: engine.CurveFloat
    TimerState: EGFxDuelingTimerState
    NumChallengers: int
    bHasBeenInited: bool
    CachedDistanceAwayFromItem: float
    OriginalRootDisplayTransform: core_uobject.Transform
    CachedItemPosition: core_uobject.Vector
    bIsHudWidget: bool
    IsSplitscreenBottom: bool



class GFxDuelTimerTotemObject(gbx_ui.GbxGFxObject):
    TimerClip: GFxDuelingTimerObject



class GFxDuelingNotificationObject(gbx_ui.GbxGFxObject):
    RewardWin: GFxDeulingNotificationRewardWin



class GFxDuelingRolloutWidget(GFxDuelingWidget):
    RolloutClip: GFxDuelingRolloutObject
    bRolloutPlaying: bool
    def extOnRolloutAnimationEnded(self): ...


class GFxDuelingNotificationWidget(GFxDuelingWidget):
    NotificationClip: GFxDuelingNotificationObject
    OtherPlayer: OakCharacter_Player
    bNotificationPlaying: bool
    bCountingDown: bool
    LastCountdownSecond: int
    def extOnDuelNotificationAnimationEnded(self): ...


class GFxDuelingTimerWidget(GFxDuelingWidget):
    DistanceScaleCurve: engine.CurveFloat
    HudTimerClip: GFxDuelingTimerObject
    TotemTimers: unreal.WrappedArray[GFxDuelTimerTotemData]
    DuelTotemComponent: OakDuelingWidgetTotemComponent
    TimerCount: int
    bHudTimeActive: bool
    def extOnDuelTimerHidden(self): ...


class OakDuelingWidgetTotemComponent(engine.SceneComponent):

    def DeinitTotem(self): ...


class GFxEchoNetSubMenu(gbx_ui.GbxGFxMenuSwitcherSubmenu): ...


class GFxEchoCastMenu(GFxEchoNetSubMenu):
    MenuDescription: EchoCastMenuDescription
    SettingsPanelTitle: str
    LocalizationStatusPanel: LocalizationStatus
    NotificationTitle: str
    DescriptionPanel: gbx_ui.GbxGFxObject
    DescriptionTitleTextField: gbx_ui.GbxTextField
    DescriptionTextField: gbx_ui.GbxTextField
    SettingsPanel: gbx_ui.GbxGFxObject
    SettingsList: gbx_ui.GbxGFxGridScrollingList
    StatusPanel: gbx_ui.GbxGFxObject
    ShiftAccountStateTextField: gbx_ui.GbxTextField
    StreamingServiceStateTextField: gbx_ui.GbxTextField
    AccountNameTextField: gbx_ui.GbxTextField
    ExtensionVersionTextField: gbx_ui.GbxTextField
    StreamChannelTitleTextField: gbx_ui.GbxTextField
    ViewerCountTextField: gbx_ui.GbxTextField
    NotificationPanel: gbx_ui.GbxGFxObject
    NotificationDescriptionTextField: gbx_ui.GbxTextField
    bForceStreamingServiceReset: bool
    ServiceUpdateTimer: float
    def OnStreamStatusUpdated(self, bIsLiveStreaming: bool): ...
    def OnStreamingServiceChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnSettingsSelectionChanged(self, SelectedItem: gbx_ui.GbxGFxListCell): ...
    def OnRestoreDefaultChoiceMade(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnRareChestEventEnabledChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnPinataEventEnabledChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnMoxxisDrinkEventEnabledChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnMoxxisDrinkEventBitsProductIdChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnIsLiveStreamingUpdated(self, bIsLiveStreaming: bool): ...
    def OnIncreasedChanceForSubscribersChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnExtractionEventEnabledChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnBadassEventEnabledChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnBadassEventCooldownChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...


class GFxEchologWidgetBase(gbx_ui.GbxGFxObject):
    GFxKEY_SpeakerImage: str
    SkinWrapper: gbx_ui.GbxGFxObject
    SpeakerImage: gbx_ui.GbxGFxObject
    GFxKEY_PassiveAnimation: str
    GFxKEY_SpeakerName: str
    AssociatedPerformanceMode: EEchoPerformanceMode
    CurrentlyDisplayedMovie: gbx_ui.GbxGFxMovie
    MediaPlayerConfig: gbx_ui.GbxGFxMediaPlayerConfig
    bEchoIsPlaying: bool
    CurrentState: EECHOLOGWidgetState
    CachedSpeakerImage: gbx_ui.GbxGFxObject
    CachedMoodKeyframe: str
    MediaPlayer: gbx_ui.GbxGFxMediaPlayer
    bMediaIsPlaying: bool
    bCloseMediaWhenEchoEnds: bool
    bEchoIsShown: bool
    def OnMediaMovieStopped(self): ...
    def OnMediaMovieStarted(self): ...
    def OnEchoStarted(self, CharacterData: CharacterEchoData, PerformanceData: PerformanceEchoData, MoodKeyframe: str, VoGMoodKey: str, VoGSpeakerID: gbx_dialog.EVoiceOfGodSpeaker, bIsNewEchoLog: bool): ...
    def OnEchoFinished(self, CharacterData: CharacterEchoData, PerformanceData: PerformanceEchoData, bCompleted: bool): ...


class GFxEchoNetMailboxListCell(gbx_ui.GbxGFxListCell):
    ExpirationLabel: gbx_ui.GbxTextField
    SenderLabel: gbx_ui.GbxTextField
    SubjectLabel: gbx_ui.GbxTextField
    SenderIcon: gbx_ui.GbxGFxObject



class GFxEchoNetMailboxFriendCell(gbx_ui.GbxGFxListCell):
    PlayerName: gbx_ui.GbxTextField
    PlayerIcon: gbx_ui.GbxGFxObject
    PlayerStatus: gbx_ui.GbxTextField



class GFxEchoNetMailboxMenu(GFxEchoNetSubMenu):
    ItemCardMovie: scaleform_ui.SwfMovie
    BackpackWidgetConfig: GFxBackpackWidgetConfig
    GoldenKeyResourceData: gbx_inventory.InventoryCategoryData
    SortFilters: unreal.WrappedArray[OakInventoryMenuFilter]
    ItemTypeSortPriorities: unreal.WrappedArray[OakInventoryMenuTypePriorityInfo]
    FriendsListConfig: gbx_ui.GbxGFxPooledGridListFullConfig
    FriendsListConfigSplit: gbx_ui.GbxGFxPooledGridListFullConfig
    MailListConfig: gbx_ui.GbxGFxPooledGridListFullConfig
    MailListConfigSplit: gbx_ui.GbxGFxPooledGridListFullConfig
    InspectRecipientContextAdjustment: GFxEchoNetMailboxMenu_Adjustment
    InspectSenderContextAdjustment: GFxEchoNetMailboxMenu_Adjustment
    SplitScreenInspectRecipientContextAdjustment: GFxEchoNetMailboxMenu_Adjustment
    SplitScreenInspectSenderContextAdjustment: GFxEchoNetMailboxMenu_Adjustment
    ContextMenuScale: core_uobject.Vector2D
    MailboxRoot: gbx_ui.GbxGFxObject
    Mailbox: gbx_ui.GbxGFxObject
    MailListHeaderTextClip: gbx_ui.GbxTextField
    MailListCountClip: gbx_ui.GbxTextField
    MailListSortTextClip: gbx_ui.GbxTextField
    MailList: gbx_ui.GbxGFxPooledGridList
    MailScrollBar: gbx_ui.GbxGFxSlider
    ReceiveMailItemCard: GFxLoadedItemCard
    SendMailItemCard: GFxLoadedItemCard
    FriendListContainer: gbx_ui.GbxGFxObject
    FriendsListHeader: gbx_ui.GbxTextField
    FriendList: gbx_ui.GbxGFxPooledGridList
    FriendScrollBar: gbx_ui.GbxGFxSlider
    MessagePanel: gbx_ui.GbxGFxObject
    MessagePanelSenderIcon: gbx_ui.GbxGFxObject
    MessagePanelPlatformIcon: gbx_ui.GbxGFxObject
    MessagePanelSubject: gbx_ui.GbxTextField
    MessagePanelSender: gbx_ui.GbxTextField
    MessagePanelBody: gbx_ui.GbxTextField
    MessagePanelBodyScrollBar: gbx_ui.GbxGFxSlider
    MessagePanelBodyMask: gbx_ui.GbxGFxObject
    MessagePanelItem: gbx_ui.GbxGFxObject
    BackpackClip: gbx_ui.GbxGFxObject
    BackpackHeaderTextClip: gbx_ui.GbxTextField
    BackpackFilterTextClip: gbx_ui.GbxTextField
    BackpackSortTextClip: gbx_ui.GbxTextField
    BackpackCapacityHeaderTextClip: gbx_ui.GbxTextField
    BackpackCapacityCountTextClip: gbx_ui.GbxTextField
    GoldenKeyCountTextClip: gbx_ui.GbxTextField
    CenterScreenNotification: gbx_ui.GbxGFxObject
    CenterScreenHeaderTextField: gbx_ui.GbxTextField
    CenterScreenBodyTextField: gbx_ui.GbxTextField
    NoMailTextField: gbx_ui.GbxTextField
    CenterScreenConfirmHint: gbx_ui.GbxGFxHintWidget
    CenterScreenCancelHint: gbx_ui.GbxGFxHintWidget
    MailListPrevSortHint: gbx_ui.GbxGFxHintWidget
    MailListNextSortHint: gbx_ui.GbxGFxHintWidget
    BackpackPrevSortHint: gbx_ui.GbxGFxHintWidget
    BackpackNextSortHint: gbx_ui.GbxGFxHintWidget
    MessagePanelAcceptHint: gbx_ui.GbxGFxHintWidget
    MessagePanelDeclineHint: gbx_ui.GbxGFxHintWidget
    CurrentlyProcessingMailItem: GFxEchoNetMailboxListCell
    BackpackWidget: GFxBackpackWidget
    IconManager: OakThumbnailManager
    FriendThumbnailManager: OakThumbnailManager
    ReceivedMailGearItem: engine.Actor
    ReceivedMailItemCategory: gbx_inventory.InventoryCategoryData
    ReceiveItemCardDisplayedBalanceState: gbx_inventory.InventoryBalanceStateComponent
    SendItemCardDisplayedBalanceState: gbx_inventory.InventoryBalanceStateComponent
    ItemToSend: OakInventoryBalanceStateComponent
    ItemRecipient: GFxEchoNetMailboxFriendCell
    HintAccept: str
    HintChoose: str
    HintDecline: str
    HintSendConfirm: str
    HintSendCancel: str
    HintClose: str
    HintBack: str
    HintInbox: str
    HintSendMail: str
    HintExamineFriend: str
    BackpackCapacityHeaderText: str
    BackpackHeaderText: str
    BackpackAllItemsText: str
    BackpackSortByText: str
    MailListHeader: str
    MailListSortByDateText: str
    MailListSortByUnreadText: str
    MailListSortByFriendText: str
    MailListSortBySystemText: str
    FriendsListHeaderText: str
    CenterScreenConfirmationHeaderText: str
    CenterScreenConfirmationBodyText: str
    NoMailText: str
    MailSentStatData: gbx_game_system_core.GameStatData
    PlayerInventory: OakInventoryListComponent
    def OnUpdateMailCell(self, UpdateInfo: gbx_ui.GbxGFxListCellUpdateInfo): ...
    def OnUpdateFriendCell(self, UpdateInfo: gbx_ui.GbxGFxListCellUpdateInfo): ...
    def OnSendItemCardReady(self): ...
    def OnReceiveItemCardReady(self): ...
    def OnMailCellSelected(self, UpdateInfo: gbx_ui.GbxGFxListCellUpdateInfo): ...
    def OnMailCellClicked(self, UpdateInfo: gbx_ui.GbxGFxListCellUpdateInfo): ...
    def OnItemThumbnailLoaded(self): ...
    def OnInventoryListChanged(self): ...
    def OnFriendThumbnailLoaded(self): ...
    def OnFriendCellSelected(self, UpdateInfo: gbx_ui.GbxGFxListCellUpdateInfo): ...
    def OnFriendCellClicked(self, UpdateInfo: gbx_ui.GbxGFxListCellUpdateInfo): ...
    def OnDialogDismissed(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBackpackItemSelected(self, Item: OakUIInventoryItemDisplayInfo, GridWidget: gbx_ui.GbxGFxObject): ...
    def OnBackpackItemClicked(self, Item: OakUIInventoryItemDisplayInfo, GridWidget: gbx_ui.GbxGFxObject, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def GetItemRenderBitmapData(self, ItemActor: engine.Actor, ItemCategory: gbx_inventory.InventoryCategoryData, ReturnValue: OakThumbnailManagerIcon) -> OakThumbnailManagerIcon: ...
    def extOnHideItemComplete(self): ...


class GFxEchoNetMatchmakingMenu(GFxEchoNetSubMenu):
    NotificationText: str
    MatchmakingInitalizedModeText: str
    MatchmakingInitializedText: str
    HeroicModeText: str
    StandardModeText: str
    MatchmakingInProgressText: str
    ButtonStartText: str
    ButtonCancelText: str
    LockedText: str
    StartButtonLabelExtraPadding: float
    MatchmakingModeInitializedClip: GFxEchoNetMatchmakingInitializedWidget
    MatchmakingInfoPanelClip: GFxEchoNetMatchmakingInfoPanelWidget
    ModeSelectionClip: GFxEchoNetMatchmakingModeSelectionWidget
    ActivityListData: unreal.WrappedArray[GFxEchoNetMatchmakingActivityData]
    CurrentMatchmakingActivityGuid: str
    QueuedMatchmakingActivityGuid: str
    CurrentSelectedActivityIdx: int
    MatchmakingRegions: unreal.WrappedArray[str]
    def OnMatchMakingButtonHeld(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnMatchMakingButtonClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnActivityItemFocused(self, ListItem: gbx_ui.GbxGFxListCell): ...
    def OnActivityItemClicked(self, BUTTON: gbx_ui.GbxGFxListCell, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxEchoNetMatchmakingInitializedWidget(gbx_ui.GbxGFxObject):
    MatchmakingModeClip: gbx_ui.GbxTextField
    InitializedClip: gbx_ui.GbxTextField
    bIsShowing: bool



class GFxEchoNetMatchmakingInfoPanelWidget(gbx_ui.GbxGFxObject):
    ContentClip: gbx_ui.GbxGFxObject
    MatchmakingModeNameClip: gbx_ui.GbxTextField
    ModeSelectionClip: gbx_ui.GbxGFxObject
    NormalModeButtonClip: gbx_ui.GbxGFxButton
    HeroicModeButtonClip: gbx_ui.GbxGFxButton
    MenuGlyphClip: gbx_ui.GbxTextField
    ScrollBarClip: gbx_ui.GbxGFxSlider
    ObjectiveDescriptionClip: gbx_ui.GbxTextField
    ObjectiveDescriptionMaskClip: gbx_ui.GbxGFxObject
    ButtonStartClip: GFxEchoNetMatchmakingStartButton
    MatchmakingModeLockedClip: gbx_ui.GbxGFxObject
    RequirementsClips: unreal.WrappedArray[gbx_ui.GbxTextField]
    DisplayedActivityIndex: int
    bIsShowing: bool
    def OnHeroicModeButtonClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxEchoNetMatchmakingStartButton(gbx_ui.GbxGFxButton):
    BaseButtonWidth: float
    BaseContentWrapperX: float
    BaseContentWrapperY: float
    ContentWrapperClip: gbx_ui.GbxGFxObject
    ButtonHintClip: gbx_ui.GbxGFxHintWidget
    bMatchmakingButtonEnabled: bool
    bMatchmakingButtonIsPressToHold: bool



class GFxEchoNetMatchmakingModeSelectionWidget(gbx_ui.GbxGFxObject):
    ScrollVelocity: float
    ContentListClip: gbx_ui.GbxGFxGridScrollingList
    ButtonLeftClip: gbx_ui.GbxGFxButton
    ButtonRightClip: gbx_ui.GbxGFxButton
    bIsShowing: bool
    def OnArrowButtonClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnActivityItemFocused(self, ListItem: gbx_ui.GbxGFxListCell): ...


class GFxEchoNetMatchmakingModeSelectionCell(gbx_ui.GbxGFxListCell):
    StandardBgClip: GFxEchoNetMatchmakingModeBackgroundWidget
    FocusedBgClip: GFxEchoNetMatchmakingModeBackgroundWidget
    ModeImageClip: gbx_ui.GbxGFxObject



class GFxEchoNetMatchmakingModeBackgroundWidget(gbx_ui.GbxGFxObject):
    StarIconClip: gbx_ui.GbxGFxObject
    HeroicTextClip: gbx_ui.GbxTextField
    CurrentlyMatchmakingTextClip: gbx_ui.GbxTextField
    RequirementsClips: unreal.WrappedArray[gbx_ui.GbxTextField]



class GFxEchoNetMenuWrapper(gbx_ui.GbxGFxMenuSwitcher):
    RosterMenuPageIndex: int
    MenuToGotoOffline: str
    BackdropParticleSystem: engine.ParticleSystem
    BackgroundParticleDepth: float
    NavListSpacing: core_uobject.Vector2D
    NavBarClip: gbx_ui.GbxGFxMenuSwitcherNavWidget
    TargetPC: gbx_game_system_core.GbxPlayerController
    TargetMenuWhenGoingOnline: str



class GFxRosterCell(gbx_ui.GbxGFxListCell):
    OnlineStatusTextField: gbx_ui.GbxTextField
    VaultStatusAnimClip: gbx_ui.GbxGFxObject
    PlayerIdWidget: PlayerIdentityWidget
    FriendTextClip: gbx_ui.GbxTextField
    RosterCellType: EGFxRosterCellType



class GFxEchoNetRosterMenu(GFxEchoNetSubMenu):
    ItemsPerpageFullScreen: int
    ItemsPerpageSplitScreen: int
    SplitScreenFirstExternalIndex: int
    CellVertSpacing: float
    CellHorzSpacing: float
    ContextMenuOffsetExpandingDown: core_uobject.Vector2D
    ContextMenuOffsetExpandingUp: core_uobject.Vector2D
    ContextMenuQuadraticFactor: float
    ContextMenuScale: core_uobject.Vector2D
    ContextMenuAdjustmentHorizontalSplitScreen: GFxEchoNetRosterMenu_Adjustment
    InGameRosterCellName: str
    OnlineRosterCellName: str
    OfflineRosterCellName: str
    EmptyRosterCellName: str
    InputAction_ToggleVaultHunterView: str
    RosterGrid: gbx_ui.GbxGFxGridScrollingList
    MenuPagerTextClip: gbx_ui.GbxTextField
    InternalWrapper: gbx_ui.GbxGFxObject
    ScreenTitle: gbx_ui.GbxTextField
    FriendsNum: gbx_ui.GbxTextField
    MenuFilter: gbx_ui.GbxTextField
    LeftTabHint: gbx_ui.GbxGFxHintWidget
    RightTabHint: gbx_ui.GbxGFxHintWidget
    LeftPageHint: gbx_ui.GbxGFxHintWidget
    RightPageHint: gbx_ui.GbxGFxHintWidget
    MenuDescriptionTextClip: gbx_ui.GbxTextField
    VaultHunterStatusClip: gbx_ui.GbxGFxObject
    ChangeVaultHunterViewHintClip: gbx_ui.GbxGFxHintWidget
    ViewedPlayerVaultHunterProfileCard: GFxVaultHunterProfileCard
    MyVaultHunterProfileCard: GFxVaultHunterProfileCard
    SelectedPlayerInfo: OakOnlineLobbyPlayerInfo
    CurrentPage: int
    LastPageIndex: int
    bPendingPopulateFriends: bool
    bPendingPopulateRecentPlayers: bool
    SavedSelectedIndex: int
    SavedCurrentPage: int
    TargetPC: OakPlayerController
    PlayerDetailsMenuData: gbx_ui.GbxMenuData
    CurrentProfileView: EGFxVaultHunterProfileCardView
    def OnSelectedPlayerChanged(self, Item: gbx_ui.GbxGFxListCell): ...
    def OnRecentPlayerSelected(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnFriendSelected(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnFriendFocused(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxEchoNetSubMenuData(OakGFxMenuData):
    bShouldDisplayInMainMenus: bool
    bRequiresOnline: bool
    bRequiresLan: bool
    bRequiresInGame: bool



class GFxEchoNetSubMenuDLCData(GFxEchoNetSubMenuData):
    SubmenuName: str
    MenuID: str



class GFxECHOWidget(gbx_ui.GbxGFxHUDWidget):
    GFxKEY_SpeakerImage: str
    SpeakerImage: gbx_ui.GbxGFxObject
    GFxKEY_PassiveAnimation: str
    GFxKEY_SpeakerName: str
    AssociatedPerformanceMode: EEchoPerformanceMode
    CurrentlyDisplayedMovie: gbx_ui.GbxGFxMovie
    MediaPlayerConfig: gbx_ui.GbxGFxMediaPlayerConfig
    CurrentState: EECHOWidgetState
    CachedSpeakerImage: gbx_ui.GbxGFxObject
    CachedMoodKeyframe: str
    MediaPlayer: gbx_ui.GbxGFxMediaPlayer
    bEchoIsPlaying: bool
    bMediaIsPlaying: bool
    bCloseMediaWhenEchoEnds: bool
    EchoWidgetBase: GFxEchologWidgetBase
    EchoStringID: str
    def OnMediaMovieStopped(self): ...
    def OnMediaMovieStarted(self): ...
    def OnEchoStarted(self, CharacterData: CharacterEchoData, PerformanceData: PerformanceEchoData, MoodKeyframe: str, VoGMoodKey: str, VoGSpeakerID: gbx_dialog.EVoiceOfGodSpeaker, bIsNewEcho: bool): ...
    def OnEchoFinished(self, CharacterData: CharacterEchoData, PerformanceData: PerformanceEchoData, bCompleted: bool): ...


class GFxEditableCurrencyCounterClip(GFxCurrencyCounterClip):
    OwningMenu: gbx_ui.GbxGFxMenu
    CurrencyInputTextField: gbx_ui.GbxGFxEditableTextField



class GFxExperienceBar(gbx_ui.GbxGFxHUDWidget):
    BarSpeedThreshold: float
    BarSpeedModifier: float
    FadeOutTime: float
    LevelUpDelay: float
    NAME_XPGain_Quick: str
    NAME_XPGain_Slow: str
    NAME_LEVEL_UP_SOUND: str
    LevelUpNotifcation: HUDNotificationAsset
    ActionSkillsAvailableForFirstTime: str
    SkillPointsAvailableText: str
    SkillPointsAvailableTextWithPrompt: str
    GuardianPointsAvailableText: str
    GuardianPointsAvailableTextWithPrompt: str
    BothGuadianAndSkillPointsAvailableText: str
    VaultCardRewardAvailable: str
    DimContainer: gbx_ui.GbxGFxObject
    WrapperForBars: gbx_ui.GbxGFxObject
    NormalXPProgressBar: gbx_ui.GbxGFxProgressBar
    VaultCardXPProgressBar: gbx_ui.GbxGFxProgressBar
    MayhemIcon: gbx_ui.GbxGFxObject
    MayhemIconContainer: gbx_ui.GbxGFxObject
    CitizenScienceBoosterIcon: GFxPassiveSkillIcon
    StreamerPrimaryBoosterIcon: GFxPassiveSkillIcon
    StreamerSecondaryBoosterIcon: GFxPassiveSkillIcon
    GuardianXPProgressBar: gbx_ui.GbxGFxProgressBar
    SkillPointsAvailableWrapper: gbx_ui.GbxGFxObject
    PlayerAbilityTree: OakPlayerAbilityTree
    PlayerBalanceState: PlayerBalanceStateComponent
    PlayerGuardianRank: PlayerGuardianRankComponent
    NormalXPBarState: EGFxExperienceBarState
    GuardianXPBarState: EGFxExperienceBarState
    VaultCardXPBarState: EGFxExperienceBarState
    CachedAmountOfMissionTrackerSlots: int
    CachedLevel: int
    LastLevelUpLevel: int
    CachedExperienceAmount: int
    CachedNextLevelExperience: int
    CachedPreviousLevelExperience: int
    AccumulatedExperience: int
    CachedRemainingSkillPoints: int
    CachedRemainingGuardianPoints: int
    CachedGuardianRank: int
    GuardianAccumulatedExperience: int
    GuardianCachedNextLevelExperience: int
    GuardianCachedPreviousLevelExperience: int
    GuardianCachedExperienceAmount: int
    CachedVaultCardRank: int
    VaultCardAccumulatedExperience: int
    VaultCardCachedNextLevelExperience: int
    VaultCardCachedPreviousLevelExperience: int
    VaultCardCachedExperienceAmount: int
    TimerHandle_FadeoutNormal: engine.TimerHandle
    TimerHandle_FadeoutGuardian: engine.TimerHandle
    TimerHandle_FadeoutVaultCard: engine.TimerHandle
    TimerHandle_LevelUpNormal: engine.TimerHandle
    TimerHandle_LevelUpGuardian: engine.TimerHandle
    TimerHandle_LevelUpVaultCard: engine.TimerHandle
    SkillPointsAvailableCharacterSpecific: str
    def OnInputDeviceChanged(self): ...
    def NotifyPrimaryCharacterChanged(self, NewPrimaryCharacter: gbx_game_system_core.GbxCharacter): ...
    def HandleVaultCardProgressAnimationComplete(self): ...
    def HandleSkillPointsChanged(self, RemainingSkillPoints: int): ...
    def HandleProgressAnimationComplete(self): ...
    def HandleLevelChanged(self, OldExperienceLevel: int, NewExperienceLevel: int): ...
    def HandleGuardianProgressAnimationComplete(self): ...
    def HandleGuardianExperienceAdded(self, Amount: int): ...
    def HandleExperienceAdded(self, ExperienceAdded: int, Source: EPlayerExperienceSource, Type: EPlayerExperienceType): ...
    def extFinishedDim(self): ...


class GFxFeedWidget(gbx_ui.GbxGFxHUDWidget):
    WidgetDuration: float
    MaxWidgetRolloutTime: float
    WidgetState: EGFxFeedWidgetState
    WidgetStateTime: float
    Widget: gbx_ui.GbxGFxObject
    LabelText: gbx_ui.GbxTextField
    def extOnRolloutComplete(self): ...


class GFxFightForYourLifeWidget(gbx_ui.GbxGFxHUDWidget):
    AssociatedFFYLComponent: FightForYourLifeComponent
    IconSwitcher: gbx_ui.GbxGFxObject
    LabelContainer: gbx_ui.GbxGFxObject
    MainLabel: gbx_ui.GbxTextField
    DyingBar: gbx_ui.GbxGFxProgressBar
    ReviveBar: gbx_ui.GbxGFxProgressBar
    MaxHoldToGiveUpTime: float
    ActionText: gbx_ui.GbxTextField
    GiveUpHint: gbx_ui.GbxGFxHintWidget
    FFYLHUDState: gbx_ui.GbxHUDStateData
    def OnRevivingStop(self, IsHealed: bool): ...
    def OnRevivingStart(self): ...
    def OnRevivingNonLocalStop(self, OtherFFYL: FightForYourLifeComponent): ...
    def OnInputDeviceChanged(self): ...
    def OnGiveUpStop(self): ...
    def OnDownStop(self): ...
    def OnDownStart(self): ...
    def OnDownFinish(self): ...
    def OnBeingRevivedStop(self): ...
    def OnBeingRevivedStart(self): ...
    def OnActionSkillCoolingDown(self, InActionAbility: OakActionAbility): ...
    def OnActionSkillActivated(self, InActionAbility: OakActionAbility): ...
    def OnAbilitySlotChanged(self, SlotData: OakPlayerAbilitySlotData): ...


class GFxFlavorTextMenu(AdvancedInteractiveObjectOwnedGFxMenu):
    CachedFlavorTextIO: ConditionalFlavorTextIO
    DescriptionTextBox: gbx_ui.GbxTextField
    TitleTextBox: gbx_ui.GbxTextField
    ScrollBar: gbx_ui.GbxGFxSlider
    DescriptionTextMask: gbx_ui.GbxGFxObject
    CachedFlavorTextData: unreal.WrappedArray[TextElementCondition]
    CachedTitleText: str
    DescriptionTextBoxClipID: str
    TitleTextBoxClipID: str
    ScrollBarClipID: str
    DescriptionTextMaskClipID: str
    BackOutText: str
    def InitWithData(self, FlavorTextData: unreal.WrappedArray[TextElementCondition], TitleText: str, FlavorTextIO: ConditionalFlavorTextIO): ...


class GFxFriendsInArea(gbx_ui.GbxGFxMovie):
    FriendCount: gbx_ui.GbxTextField



class GFxFriendsInAreaListMenu(gbx_ui.GbxGFxMenu):
    ContextMenuOffsetExpandingDown: core_uobject.Vector2D
    ContextMenuOffsetExpandingUp: core_uobject.Vector2D
    ContextMenuScale: core_uobject.Vector2D
    ContextMenuAdjustmentHorizontalSplitScreen: GFxFriendsInAreaListMenu_Adjustment
    FriendList: gbx_ui.GbxGFxGridScrollingList
    HeaderLabel: gbx_ui.GbxTextField
    LocationLabel: gbx_ui.GbxTextField
    HeaderFriendCount: gbx_ui.GbxTextField
    CachedMapName: str
    def OnFriendSelected(self, ListItem: gbx_ui.GbxGFxListCell): ...
    def OnFriendClicked(self, ListItem: gbx_ui.GbxGFxListCell, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxFriendsInAreaListCell(gbx_ui.GbxGFxListCell):
    PlayerName: str
    LevelText: gbx_ui.GbxTextField
    PlayerIcon: gbx_ui.GbxGFxObject
    FriendNameText: gbx_ui.GbxTextField
    FriendInfoText: gbx_ui.GbxTextField
    PartyInfoText: gbx_ui.GbxTextField



class GFxFrontendLandingPage(gbx_ui.GbxGFxObject):
    InfoBoxClip: gbx_ui.GbxGFxObject
    TitleTextClip: gbx_ui.GbxTextField
    DescriptionTextClip: gbx_ui.GbxTextField
    DescriptionTextGridAreaClip: gbx_ui.GbxGFxObject
    DescriptionTextScrollBarClip: gbx_ui.GbxGFxSlider
    LandingButtonClip: gbx_ui.GbxGFxButton
    TransitionTextClip: gbx_ui.GbxTextField
    KeyArtClip: gbx_ui.GbxGFxObject
    bIsEnbaled: bool
    CurrentPageType: EGFxFrontendLandingPageType
    def OnGoOnlineClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def GetFrameForGoOnlineButton(self, BUTTON: gbx_ui.GbxGFxButton, ButtonState: gbx_ui.EGbxFocusableWidgetState, ReturnValue: str) -> str: ...


class GFxFrontendLandingMenu(GFxEchoNetSubMenu):
    LandingPageClip: GFxFrontendLandingPage
    GoOnlineButtonClip: gbx_ui.GbxGFxButton



class GFxFrontendMenu(gbx_ui.GbxGFxMenu):
    NewsImageNotLoadedTexture: engine.Texture
    NewsWidgetImageMovie: scaleform_ui.SwfMovie
    LobbyWidgetFocusInspectionDelay: float
    TintScale: float
    TintOffset: float
    CachedMainMenu: GFxOakMainMenu
    LobbyWidgetFocusedClip: gbx_ui.GbxGFxObject
    LobbyWidgetTintClip: gbx_ui.GbxGFxObject
    LobbyWrapperClip: gbx_ui.GbxGFxObject
    LobbyWidgetClip: GFxLobbyWidget
    LastFocusedLobbyWidgetPlayerItem: gbx_ui.GbxGFxObject
    NewsWidgetFadeClip: gbx_ui.GbxGFxObject
    NewsWidgetVisibilityClip: gbx_ui.GbxGFxObject
    NewsWrapperClip: GFxNewsWidgetWrapper
    NewsWidgetClip: GFxNewsWidget
    MatchmakingWidgetClip: GFxLobbyWidgetMatchmakingWidget
    bCurLobbyWidgetFocusedState: bool
    bLobbyWidgetVisibilityOverride: bool
    bNewsWidgetVisibilityOverride: bool
    CurrentMenuMode: EGFxFrontendMenuMode
    CurrentFocusAnim: EGFxFrontendMenuFocusAnim
    bChatNotificationIsOpen: bool
    def OnMenuStackChanged(self, ActiveMenu: unreal.UObject): ...
    def OnLobbyWidgetAddFriendsButtonClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxFrontendTargetMenuInterface(core_uobject.Interface): ...


class GFxFullScreenMovieMenu(gbx_ui.GbxGFxMenu):
    GFxMediaPlayerConfig: gbx_ui.GbxGFxMediaPlayerConfig
    GFxMediaPlayer: gbx_ui.GbxGFxMediaPlayer
    MediaSourceObject: media_assets.MediaSource
    bScaleformHasStarted: bool
    bMoviePlaybackComplete: bool
    def OnMoviePlaybackComplete(self): ...


class GFxGameModeNotificationWidget(GFxDisplayedNotificationWidget):
    GameModeNotificationTextFields: unreal.WrappedArray[GFxGameModeNotificationWidgetInfo]
    WidgetBasePath: str
    TextObject: gbx_ui.GbxTextField
    ShadowTextObject: gbx_ui.GbxTextField
    def HandleCountdownChange(self, CountdownRemaining: int): ...


class GFxGameplayOptions(GFxOptionBase):

    def OnShowMinimapLegendariesChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnResetTutorialsClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnResetTutorialsChoiceMade(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnFixedMinimapRotationChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnDifficultyChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnCenterCrosshairChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnCensorContentChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...


class GFxGearUpExtractionMenu(AdvancedInteractiveObjectOwnedGFxMenu):
    TutorialText: str
    ConfirmOfferingBodyText: str
    DialogHeaderTitle: str
    ItemCardMovie: scaleform_ui.SwfMovie
    MaxDelayTimeToLoadThumbnails: float
    SortFilters: unreal.WrappedArray[OakInventoryMenuFilter]
    ItemTypeSortPriorities: unreal.WrappedArray[OakInventoryMenuTypePriorityInfo]
    EchoDeviceController: EchoDeviceUIController
    EchoDeviceMenuName: str
    EchoDeviceIdleScreenName: str
    CountdownCancelHintClip: gbx_ui.GbxGFxHintWidget
    InfoPanelClip: GFxGearUpExtractionMenuInfoPanel
    OfferingBackpackClip: gbx_ui.GbxGFxObject
    OfferingBackpack: GFxGearUpExtractionMenuBackpack
    OfferingButtonClip: gbx_ui.GbxGFxButton
    BackpackBackpackClip: gbx_ui.GbxGFxObject
    BackpackBackpack: GFxGearUpExtractionMenuBackpack
    BackpackPrevSortClip: gbx_ui.GbxGFxHintWidget
    BackpackNextSortClip: gbx_ui.GbxGFxHintWidget
    BackpackCurrencyWidgetClip: GFxCurrencyCounterClip
    ItemCardClip: GFxLoadedItemCard
    AllowableBankOverfill: int
    def OnTargetInventoryQuantityChanged(self, UpdatedItemHandle: gbx_inventory.InventoryListEntryHandle, ItemCategory: gbx_inventory.InventoryCategoryData, Quantity: int, MaxQuantity: int): ...
    def OnTargetInventoryItemUpdated(self, UpdatedItemHandle: gbx_inventory.InventoryListEntryHandle): ...
    def OnTargetInventoryItemRemoved(self, UpdatedItemHandle: gbx_inventory.InventoryListEntryHandle): ...
    def OnTargetInventoryItemAdded(self, UpdatedItemHandle: gbx_inventory.InventoryListEntryHandle): ...
    def OnMakeOfferButtonUnhovered(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnMakeOfferButtonClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnItemCardReady(self): ...
    def OnInventoryQuantityChanged(self, UpdatedItemHandle: gbx_inventory.InventoryListEntryHandle, ItemCategory: gbx_inventory.InventoryCategoryData, Quantity: int, MaxQuantity: int): ...
    def OnInventoryItemUpdated(self, UpdatedItemHandle: gbx_inventory.InventoryListEntryHandle): ...
    def OnInventoryItemRemoved(self, UpdatedItemHandle: gbx_inventory.InventoryListEntryHandle): ...
    def OnInventoryItemAdded(self, UpdatedItemHandle: gbx_inventory.InventoryListEntryHandle): ...
    def OnGearUpThumbnailLoaded(self): ...
    def OnConfirmExtraction(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def extOnCountdownFinished(self): ...


class GFxGearUpExtractionMenuWidget(gbx_ui.GbxGFxObject): ...


class GFxGearUpExtractionMenuInfoPanel(GFxGearUpExtractionMenuWidget):
    GearDescriptionMaskClip: gbx_ui.GbxGFxObject
    GearDescriptionTextClip: gbx_ui.GbxTextField
    GearDescriptionScrollBarClip: gbx_ui.GbxGFxSlider



class OakUIVirtualBackpack(unreal.UObject):

    def OnListScrollBarUpdated(self, SliderPercentage: float): ...


class GFxGearUpExtractionMenuBackpack(OakUIVirtualBackpack): ...


class GFxGraphicsOptions(GFxOptionBase):
    ResolutionComboBox: gbx_ui.GbxGFxListItemComboBox
    AspectRatioComboBox: gbx_ui.GbxGFxListItemComboBox
    RefreshRateComboBox: gbx_ui.GbxGFxListItemComboBox
    WindowsModeSpinner: gbx_ui.GbxGFxListItemSpinner
    PreferredMonitorSpinner: gbx_ui.GbxGFxListItemSpinner
    ResolutionScaleSpinner: gbx_ui.GbxGFxListItemSpinner
    VSyncSpinner: gbx_ui.GbxGFxListItemSpinner
    FrameRateLimitCustomSlider: gbx_ui.GbxGFxListItemNumber
    DisplayPerformanceStatsSpinner: gbx_ui.GbxGFxListItemSpinner
    AntialiasingSpinner: gbx_ui.GbxGFxListItemSpinner
    CASSpinner: gbx_ui.GbxGFxListItemSpinner
    CameraMotionBlurSlider: gbx_ui.GbxGFxListItemSpinner
    ObjectMotionBlurSpinner: gbx_ui.GbxGFxListItemSpinner
    GraphicsQualitySpinner: gbx_ui.GbxGFxListItemSpinner
    TextureStreamingSpinner: gbx_ui.GbxGFxListItemSpinner
    MaterialQualitySpinner: gbx_ui.GbxGFxListItemSpinner
    AnisotropicFilteringSpinner: gbx_ui.GbxGFxListItemSpinner
    ShadowQualitySpinner: gbx_ui.GbxGFxListItemSpinner
    DrawDistanceSpinner: gbx_ui.GbxGFxListItemSpinner
    EnvironmentDetailSpinner: gbx_ui.GbxGFxListItemSpinner
    TerrainSpinner: gbx_ui.GbxGFxListItemSpinner
    FoliageSpinner: gbx_ui.GbxGFxListItemSpinner
    CharacterTextureDetailSpinner: gbx_ui.GbxGFxListItemSpinner
    CharacterDetailSpinner: gbx_ui.GbxGFxListItemSpinner
    AmbientOcclusionQualitySpinner: gbx_ui.GbxGFxListItemSpinner
    VolumetricFogSpinner: gbx_ui.GbxGFxListItemSpinner
    ScreenSpaceReflectionsSpinner: gbx_ui.GbxGFxListItemSpinner
    ApplySettingsDialog: GbxGFxDialogBox
    PreviousSubmenuHint: gbx_ui.GbxGFxHintWidget
    NextSubmenuHint: gbx_ui.GbxGFxHintWidget
    def OnWindowModeChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnVSyncChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnVolumetricFogChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnTextureStreamingChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnTerrainChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnSplitScreenConfigChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnShadowQualityChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnScreenSpaceReflectionsChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnSafeAreaSetupPressed(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnResolutionScaleChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnResolutionDropDownSelectionChanged(self, ComboBoxItem: gbx_ui.GbxGFxListItemComboBox, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnResolutionClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnRefreshRateChanged(self, ComboBoxItem: gbx_ui.GbxGFxListItemComboBox, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnObjectMotionBlurChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnMonitorDisplayTypeChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnMaterialQualityChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnHudScaleMultiplierChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnHDRSetupPressed(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnGraphicsQualityChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnGraphicsModeTypeChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnGraphicsAPIChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnFrameRateLimitCustomChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnFrameRateLimitChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnFoliageChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnEnvironmentDetailChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnDrawDistanceChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnDisplayPerformanceStatsChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnConfirmNewSettings(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnCharacterDetailChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnCASChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnCameraMotionBlurChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnBenchmarkTypeChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnBenchmarkRunClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBenchmarkResultsDetailsClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBenchmarkResultPhaseChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnBenchmarkResultNothingChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnBenchmarkResultDateTimeChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnBenchmarkResultDataOutputPathClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBenchmarkDataOutputChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnBaseVehicleFOVChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnBaseFOVChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnAspectRatioChanged(self, ComboBoxItem: gbx_ui.GbxGFxListItemComboBox, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnAnisotropicFilteringChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnAmbientOcclusionQualityChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnAAChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...


class GFxGrenadeIndicatorClip(gbx_ui.GbxGFxObject):
    IndicatorSpread: float
    DangerRadiusScalar: float
    GrenadeDangerMinimumRadius: float
    IndicatorMode: EGFxGrenadeIndicatorMode
    TrackedGrenade: OakProjectile
    PlayerLocation: core_uobject.Vector
    PlayerRotation: core_uobject.Rotator



class GFxGrenadeIndicatorWidget(gbx_ui.GbxGFxHUDWidget):
    IndicatorDistanceFromCrosshair: float
    IndicatorClass: str
    MaxTrackedGrenades: int
    TrackedGrenades: unreal.WrappedArray[GFxGrenadeIndicatorClip]
    SortHelper: unreal.WrappedArray[GFxGrenadeIndicatorSortItem]
    def EndTrackingGrenades(self): ...
    def BeginTrackingGrenades(self): ...


class GFxGrenadeWidget(gbx_ui.GbxGFxHUDWidget):
    GrenadePool: gbx_game_system_core.GameResourceData
    CachedResourcePoolRef: gbx_game_system_core.GameResourcePoolReference
    GrenadeWidgetClipStringID: str
    InnerTextClipStringID: str
    InnerTextClipContainerStringID: str
    InitializationClipID: str
    GrenadeIcon_SwapIconToReady: str
    GrenadeIcon_SwapIconToEmpty: str
    GrenadeIcon_FailedToActivate: str
    GrenadeIcon_EmptyToReady: str
    GrenadeIcon_ReadyToEmpty: str
    GrenadeIcon_ValueChanged: str
    DefaultState_WithGrenades: str
    DefaultState_WithoutGrenades: str
    GrenadeIcon_FailedToActivateNoGrenadesLeft: str
    GrenadeIcon_SetIconToDisbaled: str
    TextValueChanged: str
    GrenadeIcon_InitializationAnim: str
    MainGrenadeClip: gbx_ui.GbxGFxObject
    TextContainer: gbx_ui.GbxGFxObject
    TextClip: gbx_ui.GbxTextField
    def UpdatePoolReferenceHelper(self): ...
    def UpdateGrenadeValues(self, ResourcePoolReference: gbx_game_system_core.GameResourcePoolReference): ...
    def UpdateGrenadeBar(self, NewGrenadeCount: int): ...
    def SetGrenadePoolReference(self, NewGrenadeResourcePoolReference: gbx_game_system_core.GameResourcePoolReference): ...
    def OnNewResourcePoolAdded(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def OnInventoryEquipHasChanged(self, ChangedActor: engine.Actor, SlotData: InventorySlotData): ...
    def OnGrenadeThrowFailed(self, FailureReason: EGrenadeThrowFailureReason): ...
    def OnGrenadeMinMaxValueUpdate(self, ResourcePoolReference: gbx_game_system_core.GameResourcePoolReference, MinValue: float, MaxValue: float): ...
    def OnGrenadeCurrentValueUpdate(self, ResourcePoolReference: gbx_game_system_core.GameResourcePoolReference, CurrentValue: float): ...
    def ClearDelegates(self, OldCharacter: OakCharacter): ...


class GFxGuardianRankPerkCell(gbx_ui.GbxGFxListCell):
    PerkInfo: GuardianRankPerkEntry
    DesiredColorFrame: str
    def GetButtonState(self, BUTTON: gbx_ui.GbxGFxButton, State: gbx_ui.EGbxFocusableWidgetState, ReturnValue: str) -> str: ...


class GFxGuardianRankRewardCell(gbx_ui.GbxGFxListCell):
    RewardData: GuardianRankRewardData



class GFxGuardianRankRewardStatCell(gbx_ui.GbxGFxListCell):
    RewardData: GuardianRankRewardData



class GFxGuardianRankMenu(GFxStatusMenuSubmenu):
    PerkPanel: gbx_ui.GbxGFxObject
    InfoPanel: gbx_ui.GbxGFxObject
    InfoPanelRewardStats: gbx_ui.GbxGFxGridScrollingList
    GuardianRankBar: gbx_ui.GbxGFxProgressBar
    RedeemTokenButton: gbx_ui.GbxGFxButton
    EnforcerStatsList: gbx_ui.GbxGFxGridScrollingList
    SurvivorStatsList: gbx_ui.GbxGFxGridScrollingList
    HunterStatsList: gbx_ui.GbxGFxGridScrollingList
    PerkSlots: gbx_ui.GbxGFxGridScrollingListPaged
    EnforcerPerksBar: gbx_ui.GbxGFxProgressBar
    SurvivorPerksBar: gbx_ui.GbxGFxProgressBar
    HunterPerksBar: gbx_ui.GbxGFxProgressBar
    CurrentFocusedRankPerk: GuardianRankPerkData
    CurrentFocusedRankCell: GFxGuardianRankPerkCell
    CurrentlySelectedRewardStatCell: GFxGuardianRankRewardStatCell
    HintSelect: str
    HintAccept: str
    HintCancel: str
    HintClose: str
    Branch1String: str
    Branch2String: str
    Branch3String: str
    BonusStatsString: str
    TokensString: str
    RankString: str
    PerkCostString: str
    GuardianTokenCountString: str
    RedeemTokenString: str
    ChooseRewardString: str
    PerkPanelLabelText: str
    UnlockMenuText: str
    MenuUnlockedTextString: str
    MenuLockedString: str
    MenuLockedDescription: str
    StatImprovedString: str
    EnforcerTextColor: core_uobject.LinearColor
    SurvivorTextColor: core_uobject.LinearColor
    HunterTextColor: core_uobject.LinearColor
    ChunksPerPageFullScreen: int
    ChunksPerPageSplitScreen: int
    CachedGuardianRankComponent: PlayerGuardianRankComponent
    RewardCategories: unreal.WrappedArray[GuardianRankRewardCategoryData]
    CurrentMenuState: EGFxGuardianRankMenuState
    def OnRewardCellFocused(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnRewardCellClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnRedeemTokenButtonFocused(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnRedeemTokenButtonClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnPerkSlotFocused(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def HandleGuardianTokensAdded(self, TokensAdded: int): ...
    def HandleGuardianRankPerkEnableChanged(self, ChangedPerk: GuardianRankPerkData, bEnabled: bool): ...
    def HandleGuardianRankChanged(self, OldGuardianRank: int, NewGuardianRank: int): ...
    def HandleGuardianPerksUpdated(self): ...
    def HandleGuardianExperienceAdded(self, Amount: int): ...
    def ExtOnIntroAnimationComplete(self): ...


class GFxGunnerSkillScreenTree(GFxSkillScreenTree):
    HardPointsLabel: gbx_ui.GbxTextField
    ModsLabel: gbx_ui.GbxTextField
    LeftHardPoint: GFxSkillScreenLoadoutSlot
    LeftHardPointMod: GFxSkillScreenLoadoutSlot
    RightHardPoint: GFxSkillScreenLoadoutSlot
    RightHardPointMod: GFxSkillScreenLoadoutSlot
    HardpointSlotDescription: str
    AugmentSlotDescription: str



class GFxHDRCalibrationMenu(gbx_ui.GbxGFxMenu):
    FrontendMenuData: gbx_ui.GbxMenuData
    HDRToggleTitle: str
    HDRToggleDescription: str
    HDRBrightnessTitle: str
    HDRBrightnessDescription: str
    HDRMenuBrightnessTitle: str
    HDRMenuBrightnessDescription: str
    HDRBrightnessStep: float
    HDRBrightnessDefault: float
    HDRMenuBrightnessDefault: float
    BrightnessTitle: str
    BrightnessDescription: str
    BrightnessStep: float
    BrightnessDefault: float
    BlackLevelTitle: str
    BlackLevelDescription: str
    BlackLevelStep: float
    BlackLevelDefault: float
    GraphicsPreferenceTitle: str
    GraphicsPreferenceDescription: str
    SubtitlesTitle: str
    SubtitlesDescription: str
    ClosedCaptionsTitle: str
    ClosedCaptionsDescription: str
    TitleText: gbx_ui.GbxTextField
    DescriptionText: gbx_ui.GbxTextField
    OptionList: gbx_ui.GbxGFxGridScrollingList
    Background: gbx_ui.GbxGFxObject
    CachedFrontendMenu: GFxFrontendMenu
    def OnSubtitlesSettingFocused(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnSubtitlesSettingChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnHDROptionChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnHDROptionButtonFocused(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnHDRMenuBrightnessFocused(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnHDRMenuBrightnessChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnHDRBrightnessFocused(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnHDRBrightnessChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnGraphicsPreferenceFocused(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnGraphicsPreferenceChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnClosedCaptionsSettingFocused(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnClosedCaptionsSettingChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnBrightnessFocused(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBrightnessChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnBlackLevelFocused(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBlackLevelChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...


class GFxHealthBar(gbx_ui.GbxGFxHUDWidget):
    NAME_ProgressBarId: str
    NAME_HealthLowStop: str
    NAME_HealthVeryLowStop: str
    Name_HealthLowStart: str
    NAME_HealthVeryLowStart: str
    ProgressBar: gbx_ui.GbxGFxRechargeableProgressBar
    CachedHealthPercent: float
    CachedHealthCurrentValue: int
    CachedHealthTypeState: EHealthTypeState
    CachedResourcePoolState: gbx_game_system_core.EGameResourcePoolState
    def OnInjured(self): ...
    def OnHealthVeryLow(self): ...
    def OnHealthRegenerating(self): ...
    def OnHealthNormal(self): ...
    def OnHealthLow(self): ...
    def OnHealthFull(self): ...
    def OnDeath(self): ...


class GFxHUDInitializationMovie(gbx_ui.GbxGFxMenu):
    DefaultBootText: str
    HealthBarDisplayName: str
    XPBarDisplayName: str
    MinimapDisplayName: str
    MissionTrackerDisplayName: str
    AmmoBarDisplayName: str
    ShieldBarDisplayName: str
    GrenadeBarDisplayName: str
    DefaultWidgetDisplayName: str
    InitializationAnims: gbx_ui.GbxGFxObject
    InitializationText: gbx_ui.GbxTextField
    WidgetLabel: gbx_ui.GbxTextField
    QueuedInitAnim: str
    QueuedWidgetTarget: EHUDInitAnimWidgetTarget
    def extInitAnimationTrigger(self): ...
    def extInitAnimationComplete(self): ...


class GFxInteractionPrompt(gbx_ui.GbxGFxHUDWidget):
    HintWidgetPrimary: gbx_ui.GbxGFxHintWidget
    InteractionLabelPrimary: gbx_ui.GbxTextField
    ModeIconsPrimary: gbx_ui.GbxGFxObject
    HintWidgetSecondary: gbx_ui.GbxGFxHintWidget
    InteractionLabelSecondary: gbx_ui.GbxTextField
    ModeIconsSecondary: gbx_ui.GbxGFxObject
    DefaultGlyphSize: core_uobject.Vector2D
    UseComponent: gbx_game_system_core.UseComponent
    CachedUsableComponent: gbx_game_system_core.UsableComponent
    CachedUsabilityInfo: gbx_game_system_core.UsabilityInfo
    CachedInventoryList: gbx_inventory.InventoryListComponent
    LinesLayout: EPromptLinesLayouts
    def UpdateUsabilityTextColor(self): ...
    def OnUsedSecondaryHold(self, UserController: engine.Controller, UsedComponent: engine.PrimitiveComponent): ...
    def OnUsedSecondary(self, UserController: engine.Controller, UsedComponent: engine.PrimitiveComponent): ...
    def OnUsedPrimaryHold(self, UserController: engine.Controller, UsedComponent: engine.PrimitiveComponent): ...
    def OnUsedPrimary(self, UserController: engine.Controller, UsedComponent: engine.PrimitiveComponent): ...
    def OnUsabilityChanged(self, NewUsableComponent: gbx_game_system_core.UsableComponent, InUsabilityInfo: gbx_game_system_core.UsabilityInfo): ...
    def OnRevivingStop(self, IsHealed: bool): ...
    def OnRevivingStart(self): ...
    def OnInputDeviceChanged(self): ...
    def OnHoldUseStopped(self): ...
    def OnCurrentUsableChanged(self, NewUsableComponent: gbx_game_system_core.UsableComponent, InUsabilityInfo: gbx_game_system_core.UsabilityInfo, NewUsableComponentImpactPoint: core_uobject.Vector, NewUsableComponentDistanceAway: float): ...
    def OnCurrencyQuantityChanged(self, UpdatedItemHandle: gbx_inventory.InventoryListEntryHandle, ItemCategory: gbx_inventory.InventoryCategoryData, Quantity: int, MaxQuantity: int): ...


class GFxInventoryFeedbackWidget(gbx_ui.GbxGFxObject):
    AnimUnlockedClip: gbx_ui.GbxGFxObject
    AnimDroppedClip: gbx_ui.GbxGFxObject



class GFxInventoryMenuAmmoWidget(gbx_ui.GbxGFxObject): ...


class GFxStatusMenuSubmenuData(OakGFxMenuData):
    IconFrameString: str
    StatusMenuSubMenuName: str
    EchoDeviceMenuName: str
    EchoDeviceIdleScreenName: str
    StandInConfigName: str
    bWantsBackgroundEffect: bool
    bEnabledInGearUpMode: bool
    MenuID: str
    MenuPriority: int



class GFxInventoryMenuData(GFxStatusMenuSubmenuData): ...


class GFxInventoryMenuDragObject(gbx_ui.GbxGFxObject): ...


class GFxInventoryMenu(GFxStatusMenuSubmenu):
    Config: GFxInventoryMenuConfig
    ManufacturerToUnlockTextLookupTable: unreal.WrappedArray[GFxInventoryMenuUnlockLookupItem]
    BackpackCellSizeTwoColumn: core_uobject.Vector2D
    BackpackCellSpacingTwoColumn: core_uobject.Vector2D
    BackpackCellSizeOneColumn: core_uobject.Vector2D
    BackpackCellSpacingOneColumn: core_uobject.Vector2D
    AmmoLabelText: str
    MaxDelayTimeToLoadThumbnails: float
    ItemSwapSource: GFxInventoryMenuSwapItem
    LastFocusedPaperDollWidget: GFxInventoryItemWidget
    DragDropManager: gbx_ui.GbxGFxDragDropManager
    InventoryEventDisabledCount: int
    PaperDollSlots: unreal.WrappedArray[GFxInventoryMenuEquipToSlot]
    EquippingToTrinketButton: GFxInventoryMenuTrinketButton
    CurrentFilterIndex: int
    CurrentFilterCategory: gbx_inventory.InventoryCategoryData
    CurrentFilterSlotData: InventorySlotData
    CurrentFilters: unreal.WrappedArray[OakInventoryMenuFilter]
    IconManager: OakThumbnailManager
    TrinketThumbnailManager: OakThumbnailManager
    LeftItemCard: GFxLoadedItemCardBase
    RightItemCard: GFxLoadedItemCardBase
    LeftItemCardTargetWidget: GFxInventoryItemWidget
    RightItemCardTargetWidget: GFxInventoryItemWidget
    PaperDollFeedbackWidget: GFxInventoryFeedbackWidget
    BackpackFeedbackWidget: GFxInventoryFeedbackWidget
    LargeBackpackWidget: GFxBackpackWidget
    SmallBackpackWidget: GFxBackpackWidget
    BackpackBrowseButton: gbx_ui.GbxGFxButton
    BackpackClip: gbx_ui.GbxGFxObject
    BackpackNextHintClip: gbx_ui.GbxGFxHintWidget
    BackpackPrevHintClip: gbx_ui.GbxGFxHintWidget
    EquippedSlotsClip: gbx_ui.GbxGFxObject
    SplitScreenPaperDollPageUpButton: gbx_ui.GbxGFxButton
    SplitScreenPaperDollPageDownButton: gbx_ui.GbxGFxButton
    SplitScreenPaperDollPageBackground: gbx_ui.GbxGFxObject
    TutorialWidget: GFxTutorialWidget
    DragInventoryItem: GFxInventoryMenuDragObject
    FocusSide: EGFxInventoryMenuFocusSide
    BackpackSize: EGFxInventoryMenuBackpackSize
    bIsInspecting: bool
    bIsBeastmaster: bool
    bHasExtraArtifacts: bool
    bStandInHasBeenShown: bool
    UnlockedTrinkets: unreal.WrappedArray[WeaponTrinketPartData]
    CurrentInventory: unreal.WrappedArray[gbx_inventory.InventoryListEntryHandle]
    CurrentInventoryMaxSize: int
    UnequipToTargetIndex: int
    PaperDollElementalIndex: int
    BackpackElementalIndex: int
    bBackpackIsTrinkets: bool
    HeaderTextClip: gbx_ui.GbxTextField
    CashCounterClip: GFxCurrencyCounterClip
    def OnTrinketUnequipped(self, Trinket: WeaponTrinketPartData, SlotData: InventorySlotData): ...
    def OnTrinketEquipped(self, Trinket: WeaponTrinketPartData, SlotData: InventorySlotData): ...
    def OnThumbnailLoaded(self): ...
    def OnSplitScreenPaperDollPageButtonClicked(self, UserWidget: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnRefreshEverything(self): ...
    def OnPaperDollTrinketClicked(self, Widget: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnPaperDollSlotPressed(self, Widget: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnPaperDollSlotClicked(self, Widget: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnPaperDollItemCardReady(self): ...
    def OnPaperDollarItemCardElementalUpdated(self, NewElementalFrameName: str): ...
    def OnInventoryQuantityChanged(self, UpdatedItemHandle: gbx_inventory.InventoryListEntryHandle, ItemCategory: gbx_inventory.InventoryCategoryData, Quantity: int, MaxQuantity: int): ...
    def OnInventoryItemUpdated(self, ItemHandle: gbx_inventory.InventoryListEntryHandle): ...
    def OnInventoryItemUnequipped(self, ChangedActor: engine.Actor, SlotData: InventorySlotData): ...
    def OnInventoryItemRemoved(self, ItemHandle: gbx_inventory.InventoryListEntryHandle): ...
    def OnInventoryItemEquipped(self, ChangedActor: engine.Actor, SlotData: InventorySlotData): ...
    def OnInventoryItemAdded(self, ItemHandle: gbx_inventory.InventoryListEntryHandle): ...
    def OnInventoryCustomizationUnlocked(self, CustomizationPart: OakInventoryCustomizationPartData): ...
    def OnCurrentWeaponChanged(self, EquippedWeapon: gbx_weapon.Weapon, LastWeapon: gbx_weapon.Weapon): ...
    def OnCurrentWeaponAmmoCountChanged(self): ...
    def OnBrowseBackpackButtonClicked(self, UserWidget: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBackpackSelectionChanged(self, Item: OakUIInventoryItemDisplayInfo, GridWidget: gbx_ui.GbxGFxObject): ...
    def OnBackpackItemPressed(self, Item: OakUIInventoryItemDisplayInfo, GridWidget: gbx_ui.GbxGFxObject, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBackpackItemClicked(self, Item: OakUIInventoryItemDisplayInfo, GridWidget: gbx_ui.GbxGFxObject, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBackpackItemCardReady(self): ...
    def OnBackpackItemCardElementalUpdated(self, NewElementalFrameName: str): ...


class GFxInventoryMenuTrinketButton(gbx_ui.GbxGFxButton):
    bIsEquippingToThis: bool



class GFxInWorldIcon(gbx_ui.GbxGFxObject):
    Stacks: int
    CurrentLocation: core_uobject.Vector2D
    TransitionStartingLocation: core_uobject.Vector2D
    SmoothTransitionStart: core_uobject.Vector2D
    IconData: InWorldIconData
    TargetSocketName: str
    TargetLocation: core_uobject.Vector
    TargetGuid: core_uobject.Guid
    LastClampUpdateType: EGFxInWorldIconClampUpdate
    def SetTargetRadius(self, InRadius: float): ...
    def SetTargetLocationOffset(self, InLocationOffset: core_uobject.Vector): ...
    def SetTargetLocationComponent(self, InTargetLocationComponent: engine.SceneComponent): ...
    def SetTargetActor(self, InTarget: engine.Actor): ...
    def SetLifeTimer(self, LifeTime: float): ...
    def SetIconData(self, InIconData: InWorldIconData): ...
    def OnNumberOfStacksChanged(self, NewStacksNumber: int): ...
    def IsForTarget(self, Target: HUDInWorldIconTargetInfo, ReturnValue: bool) -> bool: ...
    def HasValidTarget(self, ReturnValue: bool) -> bool: ...
    def HasLifeTimeExpired(self, ReturnValue: bool) -> bool: ...
    def GetTargetRadius(self, ReturnValue: float) -> float: ...
    def GetTargetLocationOffset(self, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...
    def GetTargetLocationComponent(self, ReturnValue: engine.SceneComponent) -> engine.SceneComponent: ...
    def GetTargetLocation(self, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...
    def GetTargetActor(self, ReturnValue: engine.Actor) -> engine.Actor: ...
    def GetIconData(self, ReturnValue: InWorldIconData) -> InWorldIconData: ...


class GFxInWorldIconContainer(gbx_ui.GbxGFxHUDWidget):
    OverheadNameplateIconData: InWorldIconData
    CustomWaypointIconData: InWorldIconData
    SplitscreenOffset: float
    MinSplitscreenYValue: float
    MaxTopPlayerSplitscreenYValue: float
    IconSnapThreshold: float
    SmoothTransitionDuration: float
    NextIconInstId: int
    TimerHandle_RegisterNameplates: engine.TimerHandle
    ContainerObject: gbx_ui.GbxGFxObject
    ContainerSize: core_uobject.Vector2D
    ContainerOrigin: core_uobject.Vector2D
    CurrentPetTargetInfo: HUDInWorldIconTargetInfo
    RangeCutoff: float
    ContainerOriginStandard: core_uobject.Vector2D
    ContainerOriginSplit: core_uobject.Vector2D
    MaxTransitionToMapTime: float
    ActiveIcons: unreal.WrappedArray[GFxInWorldIcon]
    PetNameplate: GFxOverheadNameplate
    bNeedRefreshTrackedMissionIcons: bool
    def UnregisterTarget(self, TargetInfo: HUDInWorldIconTargetInfo): ...
    def RegisterTarget(self, TargetInfo: HUDInWorldIconTargetInfo): ...
    def OnRemovePlayerAlert(self, Instigator: engine.UniqueNetIdRepl): ...
    def OnPrimaryCharacterChanged(self, NewPrimaryCharacter: gbx_game_system_core.GbxCharacter): ...
    def OnPetRenamed(self, NewName: str): ...
    def OnIconRemoved(self, Icon: GFxInWorldIcon): ...
    def OnIconAdded(self, Icon: GFxInWorldIcon): ...
    def OnCreatePlayerAlert(self, Instigator: engine.UniqueNetIdRepl, Actor: engine.Actor, AlertLocation: core_uobject.Vector, AlertData: PlayerAlertData): ...
    def AddNewNameplateForPlayerState(self, NewPlayerState: OakPlayerState): ...


class GFxIronbearDurationWidget(gbx_ui.GbxGFxHUDWidget):
    WarningFlourishThreshold: float
    HardPointDeltaEpsilon: float
    IronBearAbility: OakActionAbility_IronBear
    DurationBar: gbx_ui.GbxGFxProgressBar
    FuelAnimWrapper: gbx_ui.GbxGFxObject
    FuelLabel: gbx_ui.GbxTextField
    BorderAnimWrapper: gbx_ui.GbxGFxObject



class GFxIronbearEjectWidget(gbx_ui.GbxGFxHUDWidget):
    ExitButtonText: gbx_ui.GbxTextField
    def OnInputTypeChanged(self): ...


class GFxIronbearExitAnimationWidget(gbx_ui.GbxGFxHUDWidget):
    ExitHintWidget: gbx_ui.GbxGFxHintWidget
    EjectHintTextField: gbx_ui.GbxTextField
    EjectHintText: str
    def SetHoldPromptPercentage(self, NewPecentage: float): ...
    def OnInputDeviceChanged(self): ...
    def OnExitStarted(self): ...
    def OnExitCanceled(self): ...


class GFxIronbearWeaponWidget(gbx_ui.GbxGFxObject):
    ActionIcon: gbx_ui.GbxGFxObject
    CachedWeapon: OakWeapon_IronBearHardPoint
    CachedAmmoComponent: gbx_weapon.WeaponAmmoComponent
    KeyBindingTextfield: gbx_ui.GbxTextField
    CachedPlayerController: OakPlayerController
    ProgressBar: gbx_ui.GbxGFxProgressBar
    ElementalIcon: gbx_ui.GbxGFxObject
    ElementalIconBG: gbx_ui.GbxGFxObject
    BarTextField: gbx_ui.GbxTextField
    HUDContainer: GFxIronBearHUDWidgetContainer
    AugmentData: OakActionAbilityAugmentData_IronBear
    CachedBindingOrientation: EIronBearHardPointOrientation
    def UpdateProgressbar(self, Amount: float): ...
    def OnInputDeviceChanged(self): ...
    def HardpointUseStop(self): ...
    def HardpointUsed(self): ...


class GFxIronbearFist(GFxIronbearWeaponWidget):
    CachedEquippedWeapon: OakWeapon_IronBearHardPoint
    RechargingClip: gbx_ui.GbxGFxObject
    BracketAnim: gbx_ui.GbxGFxObject
    AnimateBar: gbx_ui.GbxGFxObject
    def UpdateFistElementalIcon(self, NewDamageType: gbx_game_system_core.GbxDamageType): ...
    def SetFistReadyState(self, ReadyState: bool): ...


class GFxIronBearHUDWidgetContainer(gbx_ui.GbxGFxHUDWidget):
    HardPointFramesTable: UIHardpointData
    WidgetsToTick: unreal.WrappedArray[GFxIronbearWeaponWidget]
    IronbearLeftWidgetID: str
    IronbearRightWidgetID: str



class GFxIronbearMinigun(GFxIronbearWeaponWidget):
    OverheatAnimation: gbx_ui.GbxGFxObject
    CachedHeatComponent: gbx_weapon.WeaponHeatComponent



class GFxIronBearRechargeWeaponWidget(GFxIronbearWeaponWidget):
    OverheatClip: gbx_ui.GbxGFxObject
    TypeIconClip: gbx_ui.GbxGFxObject
    ChargeComponent: gbx_weapon.WeaponChargeComponent
    FireProjectileComponent: gbx_weapon.WeaponFireProjectileComponent
    ReloadComponent: gbx_weapon.WeaponReloadComponent
    ReloadTime: float
    ReloadTimeProgress: float
    bIsReloading: bool
    ProgressBarOverchagePctBegin: float
    def OnReloadStarted(self, bAutoReload: bool): ...
    def OnReloadEnded(self, bCompleted: bool): ...
    def AmmoChanged(self): ...


class GFxIronbearWidgetGrenadeLauncher(GFxIronbearWeaponWidget):
    RemainingAmmoText: gbx_ui.GbxTextField
    ReloadAnimation: gbx_ui.GbxGFxObject
    RemainingAmmoTextID: str
    ReloadAnimationID: str



class GFxItemCard(gbx_ui.GbxGFxHUDWidget):
    UpdateElementalInfoTime: float
    ElementalTimerHandle: engine.TimerHandle
    ItemCardObject: GFxItemCardObject
    HideSmallIconDistance: float
    ShowSmallIconDistance: float
    HideItemCardDistance: float
    ShowItemCardDistance: float
    BeamAlignmentOffset: float
    ItemCardHeightPivotOffsetFactor: float
    SplitscreenOffset: float
    CalibrationResolutionX: float
    CalibrationResolutionY: float
    VerticalSplitScreenMinItemCardOffset: core_uobject.Vector2D
    VerticalSplitScreenMaxItemCardOffset: core_uobject.Vector2D
    QuadSplitScreenMinItemCardOffset: core_uobject.Vector2D
    QuadSplitScreenMaxItemCardOffset: core_uobject.Vector2D
    DistanceScaleCurve: engine.CurveFloat
    CachedItemPosition: core_uobject.Vector
    LocationScreenSpace: core_uobject.Vector2D
    OriginalRootDisplayTransform: core_uobject.Transform
    TimeUntilOutro: float
    def OnWeaponChanged(self, Weapon: gbx_weapon.Weapon, LastWeapon: gbx_weapon.Weapon): ...
    def OnPawnChanged(self, Pawn: engine.Pawn, OldPawn: engine.Pawn): ...
    def IsDisplayed(self, ReturnValue: bool) -> bool: ...
    def extFinishedTransition(self): ...
    def extFinishedHide(self): ...


class GFxItemCardAbbreviated(gbx_ui.GbxGFxHUDWidget):
    ItemCardObject: GFxItemCardAbbreviatedObject
    TimeUntilOutro: float
    TimerHandle: engine.TimerHandle
    def OnWeaponChanged(self, Weapon: gbx_weapon.Weapon, LastWeapon: gbx_weapon.Weapon): ...
    def OnPawnChanged(self, Pawn: engine.Pawn, OldPawn: engine.Pawn): ...
    def OnEndCompareToEquippedItem(self): ...
    def OnCompareToEquippedItem(self, HeldItem: OakInventoryBalanceStateComponent, OtherItem: OakInventoryBalanceStateComponent): ...
    def IsDisplayed(self, ReturnValue: bool) -> bool: ...
    def HideAfterDelay(self): ...


class GFxItemCardMainStat(gbx_ui.GbxGFxObject):
    PreviousRarityFrame: str



class GFxItemCardArtifactLine(gbx_ui.GbxGFxObject): ...


class GFxItemCardSkillEntry(gbx_ui.GbxGFxObject):
    SkillIconContainer: gbx_ui.GbxGFxObject
    SkillIcon: gbx_ui.GbxGFxObject
    IconKeyframe: str



class GFxLoadedItemCardBase(gbx_ui.GbxGFxMovieLoader):
    bHasBeenLoaded: bool



class GFxLoadedItemCardAbbreviated(GFxLoadedItemCardBase):
    ItemCardObject: GFxItemCardAbbreviatedObject
    def OnItemCardLoadComplete(self, MovieLoader: gbx_ui.GbxGFxMovieLoader): ...


class GFxLoadedItemCard(GFxLoadedItemCardBase):
    ItemCardObject: GFxItemCardObject
    def OnItemCardLoadComplete(self, MovieLoader: gbx_ui.GbxGFxMovieLoader): ...


class GFxItemInspectionMenu(gbx_ui.GbxGFxMenu):
    ItemCardMovie: scaleform_ui.SwfMovie
    DefaultSkinNameText: str
    PageDatas: unreal.WrappedArray[GFxItemInspectionPageData]
    ItemInspectionContainerClass: unreal.UClass
    CategoryInfos: unreal.WrappedArray[GFxItemInspectionCategoryInfo]
    MaxPrimaryStatsDisplayed: int
    MaxSecondaryStatsDisplayed: int
    InspectPage: GFxItemInspectionInspectPage
    ManufacturerPage: GFxItemInspectionManufacturerPage
    ElementalPage: GFxItemInspectionElementalPage
    PartsPage: GFxItemInspectionPartsPage
    SkinsPage: GFxItemInspectionSkinsPage
    ItemScoreTextHTMLColor: str
    ItemStatBaseSize: float
    ItemStatMainSateSpacing: float
    ItemStatSecondaryStatsSpacing: float
    ItemPartInspectionOutlineColor: core_uobject.LinearColor
    ItemPartInspectionFocusInterpolationRate: float
    PartInspectionSelectedPartData: ItemInspectionSelectedPartData
    PartLineColor: core_uobject.LinearColor
    PartLineThickness: float
    PartEnumTable: GFXItemInspectionPartEnumTable
    FullScreenMovieMenuData: gbx_ui.GbxMenuData
    PartInspectionStats: unreal.WrappedArray[gbx_game_system_core.UIStatData_Attribute]
    AvailablePages: unreal.WrappedArray[EGFxItemInspectionPages]
    bMenuHasStarted: bool
    bHasSetInspectionItem: bool
    bItemCardReady: bool
    ContentClip: gbx_ui.GbxGFxObject
    ItemCard: GFxLoadedItemCard
    MouseDragArea: gbx_ui.GbxGFxObject
    NavAnimClip: gbx_ui.GbxGFxObject
    NavBarClip: gbx_ui.GbxGFxMenuSwitcherNavWidget
    ItemInspectionContainer: OakUIActorContainer
    ItemInspectionActor: engine.Actor
    BaseTransform: core_uobject.Transform
    SourceCategory: gbx_inventory.InventoryCategoryData
    InspectionSourceItemHandle: gbx_inventory.InventoryListEntryHandle
    InspectionSourceInventoryList: gbx_inventory.InventoryListComponent
    InspectionSourceActor: engine.Actor
    InspectionSourceBalanceComponent: gbx_inventory.InventoryBalanceStateComponent
    InspectionPartList: unreal.WrappedArray[gbx_inventory.InventoryPartData]
    SelectedPart: gbx_inventory.InventoryPartData
    PreviewLocator: GFxItemInspectionLocator
    CurrentPageIndex: int
    bIsInSkins: bool
    LastMousePos: core_uobject.Vector2D
    bRMBDown: bool
    bLMBDown: bool
    LineDrawObject: gbx_ui.GbxGFxSprite
    CurrentLineTarget: core_uobject.Vector2D
    bHasPreviewSkin: bool
    PreviewSkin: WeaponSkinPartData
    bCanChangeSkins: bool
    bIsUIHidden: bool
    def OnTabClicked(self, ItemId: str): ...
    def OnSkinsListCellFocused(self, UpdateInfo: gbx_ui.GbxGFxListCellUpdateInfo): ...
    def OnSkinsListCellClicked(self, UpdateInfo: gbx_ui.GbxGFxListCellUpdateInfo): ...
    def OnSkinsListArrowClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnPartsListCellFocused(self, UpdateInfo: gbx_ui.GbxGFxListCellUpdateInfo): ...
    def OnPartsListCellClicked(self, UpdateInfo: gbx_ui.GbxGFxListCellUpdateInfo): ...
    def OnManufacturerPlayClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnItemCardReady(self): ...
    def OnInventoryItemUpdated(self, UpdatedItemHandle: gbx_inventory.InventoryListEntryHandle): ...
    def OnChallengeClassLoaded(self): ...


class GFxItemInspectionMenuData(OakGFxMenuData):
    AxialDeadZoneBegin_Pan: float
    AxialDeadZoneRatio_Pan: float
    AxialDeadZoneBegin_Rotate: float
    AxialDeadZoneRatio_Rotate: float



class GFxItemInspectionManufacturerChallengeObject(gbx_ui.GbxGFxProgressBar): ...


class GFxItemInspectionPartCell(gbx_ui.GbxGFxListCell): ...


class GFxItemInspectionPartList(gbx_ui.GbxGFxPooledGridList):

    def OnCellChanged(self, UpdateInfo: gbx_ui.GbxGFxListCellUpdateInfo): ...


class GFxItemInspectionStatRowObject(gbx_ui.GbxGFxObject): ...


class GFxItemInspectionSkinsList(gbx_ui.GbxGFxPooledGridList):
    DataList: unreal.WrappedArray[WeaponSkinPartData]
    ThumbnailManager: OakThumbnailManager
    bNeedsThumbnailRefresh: bool
    def OnThumbnailLoaded(self): ...
    def OnCellChanged(self, UpdateInfo: gbx_ui.GbxGFxListCellUpdateInfo): ...


class GFxItemInspectionSkinCell(gbx_ui.GbxGFxListCell):
    SkinPart: WeaponSkinPartData



class GFxItemTradingMenu(gbx_ui.GbxGFxMenu):
    Config: GFxInventoryMenuConfig
    CurrentFilters: unreal.WrappedArray[OakInventoryMenuFilter]
    ItemCardMovie: scaleform_ui.SwfMovie
    NumNonBackpackThumbnails: int
    ItemTypeSortPriorities: unreal.WrappedArray[OakInventoryMenuTypePriorityInfo]
    ItemGroupingsByType: unreal.WrappedArray[OakInventoryMenuItemGrouping]
    ItemGroupingsByManufacturer: unreal.WrappedArray[OakInventoryMenuItemGrouping]
    BackpackCellSizeTwoColumn: core_uobject.Vector2D
    BackpackCellSpacingTwoColumn: core_uobject.Vector2D
    CountdownOverlay: gbx_ui.GbxGFxObject
    CountdownCancelHint: gbx_ui.GbxGFxHintWidget
    ItemCard: GFxLoadedItemCard
    OfferingPanel: GFxItemTradingMenuOffer
    UnfocusedOfferingPanel: GFxItemTradingMenuOffer
    ReceivingPanel: GFxItemTradingMenuOffer
    BackpackWidget: GFxBackpackWidget
    HeaderTextClip: gbx_ui.GbxTextField
    FilterTextClip: gbx_ui.GbxTextField
    SortTextClip: gbx_ui.GbxTextField
    BackpackNextHintClip: gbx_ui.GbxGFxHintWidget
    BackpackPrevHintClip: gbx_ui.GbxGFxHintWidget
    HeldCashCounter: GFxCurrencyCounterClip
    CurrentBackpackFilter: OakInventoryMenuFilter
    CurrentlyPopulatingOfferSlot: GFxItemTradingBackpackItem
    IconManager: OakThumbnailManager
    def OnTradeButtonClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnThumbnailLoaded(self): ...
    def OnItemCardReady(self): ...
    def OnDuelButtonClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBackpackGridItemSelected(self, Item: OakUIInventoryItemDisplayInfo, GridWidget: gbx_ui.GbxGFxObject): ...
    def OnBackpackGridItemClicked(self, Item: OakUIInventoryItemDisplayInfo, GridWidget: gbx_ui.GbxGFxObject, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def extOnCountdownFinished(self): ...


class GFxItemTradingBackpackItem(GFxInventoryItemWidget): ...


class GFxItemTradingMenuOffer(gbx_ui.GbxGFxObject):
    OwningMenu: GFxItemTradingMenu
    GridItemsClip: gbx_ui.GbxGFxObject
    ItemSlots: unreal.WrappedArray[GFxItemTradingBackpackItem]
    OfferingPanelCurrencyWidget: GFxEditableCurrencyCounterClip
    ReceivingPanelCurrencyWidget: GFxCurrencyCounterClip
    TradeButton: gbx_ui.GbxGFxButton
    DuelButton: gbx_ui.GbxGFxButton
    def OnSlotUnfocused(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnSlotFocused(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnSlotClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxJokeEULA(gbx_ui.GbxGFxMenu):
    EULAScrollBar: gbx_ui.GbxGFxSlider
    ScrollSpeed: float
    MainContent: str
    AcceptButtonText: str
    OtherAcceptButtonText: str
    AudioForAutoClose: gbx_dialog.DialogTimeSlotReference
    ContentWrapper: gbx_ui.GbxGFxObject
    EULAText: gbx_ui.GbxTextField
    EULATextMask: gbx_ui.GbxGFxObject
    AcceptButton: gbx_ui.GbxGFxButton
    OtherAcceptButton: gbx_ui.GbxGFxButton
    def OnSliderPositionUpdate(self, SliderPercent: float): ...
    def OnEitherAcceptButtonPressed(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def extFinishedHide(self): ...


class GFxKeybindingsOptions(GFxOptionBase):
    DefaultWalkingKeybindingsAndDescriptions: RebindContextAndDescription
    DefaultDrivingKeybindingsAndDescriptions: RebindContextAndDescription
    DefaultCommonKeybindingsAndDescriptions: RebindContextAndDescription
    WalkingRebindContext: gbx_input.GbxInputRebindContext
    DrivingRebindContext: gbx_input.GbxInputRebindContext
    CommonRebindContext: gbx_input.GbxInputRebindContext
    CurrentDialog: GbxGFxDialogBox
    MainOptionPanel: GFxMainOptionPanel
    PreviousSubmenuHint: gbx_ui.GbxGFxHintWidget
    NextSubmenuHint: gbx_ui.GbxGFxHintWidget
    PreviousControlSchemeHint: gbx_ui.GbxGFxHintWidget
    NextControlSchemeHint: gbx_ui.GbxGFxHintWidget



class GFxLeagueChallengeCell(gbx_ui.GbxGFxListCell):
    ChallengeNameField: gbx_ui.GbxTextField
    ProgressBar: gbx_ui.GbxGFxObject
    CurretProgressField: gbx_ui.GbxTextField
    OwningLeagueMenu: GFxLeaguesMenu
    ChallengeCDO: OakChallenge



class GbxGFxLeaguesDetailsPanel(gbx_ui.GbxGFxObject):
    TitleField: gbx_ui.GbxTextField
    SubtitleField: gbx_ui.GbxTextField
    BodyField: gbx_ui.GbxTextField



class GbxGFxLeagueMenuChestButton(gbx_ui.GbxGFxButton):
    UnlockNumberField: gbx_ui.GbxTextField
    ChestLockedIcon: gbx_ui.GbxGFxObject
    ChestAvailableIcon: gbx_ui.GbxGFxObject
    ChestOpenIcon: gbx_ui.GbxGFxObject
    UnlockHintWrapper: gbx_ui.GbxGFxObject
    UnlockHint: gbx_ui.GbxTextField
    UnlockText: gbx_ui.GbxTextField
    MasterLeagueChallenge: OakChallenge
    CustomizationRewards: unreal.WrappedArray[OakCustomizationData]
    WeaponSkinRewards: unreal.WrappedArray[WeaponSkinPartData]
    WeaponTrinketRewards: unreal.WrappedArray[WeaponTrinketPartData]
    ItemPoolRewards: unreal.WrappedArray[engine.Actor]



class GbxGFxLeaguesBigPanelButton(gbx_ui.GbxGFxButton): ...


class GFxLeaguesMenu(GFxStatusMenuSubmenu):
    OverviewBigButton: GbxGFxLeaguesBigPanelButton
    ChallengesBigButton: GbxGFxLeaguesBigPanelButton
    ChallengesBigButtonLeagueField: gbx_ui.GbxTextField
    ChallengesBigButtonProgressField: gbx_ui.GbxTextField
    LeftNavButton: gbx_ui.GbxGFxHintWidget
    RightNavButton: gbx_ui.GbxGFxHintWidget
    MainPanel: gbx_ui.GbxGFxObject
    LeagueTitleField: gbx_ui.GbxTextField
    LeagueOverviewSubtitle: gbx_ui.GbxTextField
    LeagueDetailsScrollableText: gbx_ui.GbxTextField
    LeagueDetailsScrollBar: gbx_ui.GbxGFxSlider
    LeagueDetailsScrollMask: gbx_ui.GbxGFxObject
    MasterChallengeRewardBar: gbx_ui.GbxGFxObject
    ChestContainer: gbx_ui.GbxGFxObject
    ChallengesSubtitle: gbx_ui.GbxTextField
    ChallengesList: gbx_ui.GbxGFxGridScrollingList
    ChallengesListScrollBar: gbx_ui.GbxGFxSlider
    RewardUnlocked: gbx_ui.GbxGFxObject
    RewardUnlockedField: gbx_ui.GbxTextField
    RewardUnlockedFieldShadow: gbx_ui.GbxTextField
    RewardUnlockedSubtitle: gbx_ui.GbxTextField
    DetailsPanel: GbxGFxLeaguesDetailsPanel
    OwnerChallengesComponent: OakChallengesComponent
    CurrentLeagueChallenges: unreal.WrappedArray[unreal.UClass]
    CurrentMasterLeagueChallenge: OakChallenge
    ChestButtons: unreal.WrappedArray[GbxGFxLeagueMenuChestButton]
    CurrentlyPreviewedCustomizations: unreal.WrappedArray[OakCustomizationData]
    OriginalWeaponSkin: WeaponSkinPartData
    PreviewedWeaponSkin: WeaponSkinPartData
    CurrentLeaguePatchData: PatchExpansionData
    CurrentStandInState: GFxLeaguesMenuStandInState
    def OnOverviewBigButtonClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnChestButtonFocused(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnChestButtonClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnChallengesBigButtonClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnChallengeCellFocused(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxLoadGameListItem(gbx_ui.GbxGFxListCell):
    CharacterClassIcon: gbx_ui.GbxGFxObject



class GFxLoadGameMenu(gbx_ui.GbxGFxMenu):
    LoadGameMenuEntries: unreal.WrappedArray[LoadGameMenuEntry]
    PlayerName: gbx_ui.GbxTextField
    MenuTitle: gbx_ui.GbxTextField
    LoadInProgressClip: gbx_ui.GbxGFxObject
    LoadCharacterPanel: gbx_ui.GbxGFxObject
    SaveGameList: gbx_ui.GbxGFxRadioButtonList
    SaveGameDetails: GFxSaveGameDetails
    CreateCharacterButton: gbx_ui.GbxGFxButton
    CreateCharacterButtonHint: gbx_ui.GbxGFxHintWidget
    CountdownText: gbx_ui.GbxTextField
    TargetPC: gbx_game_system_core.GbxPlayerController
    PlayerStandIn: PlayerStandIn
    def OnSaveGameItemFocused(self, FocusedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnSaveGameItemClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnPromptNoSaveGame(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnPromptDeleteCorruptSavegame(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnDeleteCharacterChoiceMade(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnCreateCharacterButtonClicked(self, FocusedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxLobbyWidget(gbx_ui.GbxGFxObject):
    RecommendedFriendsPopupTimeout: float
    ContextMenuConfig: gbx_ui.GbxGFxListConfig
    TimeRequiredToReinvite: float
    HideRecommendedFriendsTimer: engine.TimerHandle
    CurrentFriendInvites: unreal.WrappedArray[RecommendedFriendInviteStatus]
    OverridePrimaryPlayer: OakPlayerController
    PlayerList: GFxLobbyWidgetPlayerList
    LobbyWidgetHint: gbx_ui.GbxGFxHintWidget
    AddFriendsButton: gbx_ui.GbxGFxButton
    SettingsButton: GFxLobbyWidgetSettingsButton
    SettingsPanel: GFxLobbyWidgetSettingsPanel
    FocusManager: gbx_ui.GbxWidgetFocusManager
    ContextMenu: ContextMenu
    OwningMenu: gbx_ui.GbxGFxMenu
    def OnSettingsButtonClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnSelectionChanged(self, Item: gbx_ui.GbxGFxListCell): ...
    def OnRecommendedFriendUnhovered(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnRecommendedFriendHovered(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnRecommendedFriendClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnQuitChoiceMade(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnPlayerOptionSelected(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnPlayerItemChanged(self, Item: gbx_ui.GbxGFxListCell): ...
    def OnMenuStackMenuActivated(self, ActiveMenu: unreal.UObject): ...
    def OnLobbyWidgetHovered(self, HoveredObject: gbx_ui.GbxGFxObject, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnContextMenuSelectionChanged(self, Item: gbx_ui.GbxGFxListCell): ...
    def OnAddFriendsUnhovered(self, HoveredButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnAddFriendsHovered(self, HoveredButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnAddFriendsFocused(self, FocusedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnAddFriendsButtonClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxLobbyWidgetSettingsButton(gbx_ui.GbxGFxButton): ...


class GFxLobbyWidgetMatchmakingWidget(gbx_ui.GbxGFxObject):
    MatchmakingWidget: gbx_ui.GbxGFxObject
    ModeNameTextClip: gbx_ui.GbxTextField
    ProgressTextClip: gbx_ui.GbxTextField
    bIsShowing: bool



class GFxLobbyWidgetPlayerItem(gbx_ui.GbxGFxListCell):
    PlayerIdWidget: PlayerIdentityWidget
    ContextualMenuAnchor: gbx_ui.GbxGFxObject
    CachedGameInstance: OakGameInstance
    CurrentStateFrame: str



class GFxLobbyWidgetPlayerList(gbx_ui.GbxGFxGridScrollingList):
    LobbyWidgetOwner: GFxLobbyWidget
    def OnPlayerItemUnhovered(self, HoveredButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnPlayerItemHovered(self, HoveredButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnPlayerItemClicked(self, ClickedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxLobbyWidgetSettingsCell(gbx_ui.GbxGFxListCell):
    bIsDisabledAppearance: bool



class GFxLobbyWidgetSettingList(gbx_ui.GbxGFxRadioButtonList):
    OwningMenu: gbx_ui.GbxGFxMenu
    def OnSettingListItemUnhovered(self, HoveredButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnSettingListHovered(self, HoveredButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnSettingItemFocused(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class PrivacySettingList(GFxLobbyWidgetSettingList):

    def OnConfirmChangeNetworkMode(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class LootModeSettingList(GFxLobbyWidgetSettingList):
    LootModeListOrder: unreal.WrappedArray[EOakGameStateUIGroupMode]



class GFxLobbyWidgetSettingsPanel(gbx_ui.GbxGFxObject):
    PrivacySettingWidget: GFxPrivacySettingWidget
    LootModeSettingWidget: GFxLootModeSettingWidget
    PrivacySettingPanel: gbx_ui.GbxGFxObject
    PrivacySettingList: PrivacySettingList
    LootModeSettingPanel: gbx_ui.GbxGFxObject
    LootModeSettingList: LootModeSettingList
    ToolTipWrapperClip: gbx_ui.GbxGFxObject
    ToolTipClip: gbx_ui.GbxTextField
    FocusManager: gbx_ui.GbxWidgetFocusManager
    LastHoveredWidget: unreal.UObject
    OwningLobbyWidget: GFxLobbyWidget



class GFxLobbyWidgetSettingWidget(gbx_ui.GbxGFxObject):
    Label: gbx_ui.GbxTextField
    Icon: gbx_ui.GbxGFxObject
    OwningMenu: gbx_ui.GbxGFxMenu



class GFxPrivacySettingWidget(GFxLobbyWidgetSettingWidget): ...


class GFxLootModeSettingWidget(GFxLobbyWidgetSettingWidget): ...


class GFxLobbyWidgetText(unreal.UObject):
    FriendsOnlyText: str
    InviteOnlyText: str
    OpenToPublicText: str
    LANText: str
    OfflineText: str
    GroupModeText: str
    ClassicModeText: str
    SharedModeText: str
    ClassicModeTooltipText: str
    SharedModeTooltipText: str
    LootModeLockedText: str
    FriendsOnlyTooltipText: str
    InviteOnlyTooltipText: str
    PublicTooltipText: str
    LANTooltipText: str
    OfflineTooltipText: str
    OfflinePCTooltipText: str
    LeaveGroupDialogTitleText: str
    LeaveGroupDialogBodyText: str
    LeaveGroupDialogAdditionalBodyText: str
    GoOnline: str
    ConnectToLan: str
    OfflineConnectionHeader: str
    OfflineConnectionInformation: str
    NotLanConnectionHeader: str
    NotLanConnectionInformation: str
    InGameConnectionHeader: str
    InGameConnectionInformation: str



class GFxMainAndPauseBaseMenu(gbx_ui.GbxGFxMenu):
    FrontendMenuData: gbx_ui.GbxGFxMenuData
    BehindTheScenesMenuDataReference: GFxBehindTheScenesMenuData
    MenuType: EGFxMainAndPauseMenuType
    MenuItems: unreal.WrappedArray[MenuItemButton]
    MenuList: gbx_ui.GbxGFxGridScrollingList
    FrontendMenu: GFxFrontendMenu
    OnGoingMenuTransition: gbx_ui.EMenuTransition
    bIsMenuLevel: bool
    CachedCameraController: MainMenuCameraController
    CachedMenuMapMenuFlow: MenuMapMenuFlow
    def OnSocialCoreClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnNetworkClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnInvitesClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnInviteListItemClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnInviteListClearClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnGraphicsClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnGameplayClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnControlsClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnAudioClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnAccessibilityClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxManagedWidget(gbx_ui.GbxGFxHUDWidget):

    def extShowAnimationFinished(self): ...


class GFxMapMenu(GFxStatusMenuSubmenu):
    InitialMenuState: EGFxMapMenuState
    Sanctuary3Name: str
    CameraMoveThreshold: float
    FriendStatusUpdateRateSeconds: float
    ChallengeProviderClass: unreal.UClass
    AvailableGalaxyChallengeFilters: unreal.WrappedArray[ChallengeFilterType]
    AvailableZoneChallengeFilters: unreal.WrappedArray[ChallengeFilterType]
    Tutorials: GFxMenuTutorialCollection
    FirstTimeTutorial: str
    FastTravelTutorial: str
    FirstTimeShowStage1Index: int
    FirstTimeShowStage2Index: int
    FirstTimeShowStage3Index: int
    FirstTimeShowStage4Index: int
    FirstTimeShowStage5Index: int
    FirstTimeFreeNavigationIndex: int
    FastTravelOrbitZoomIndex: int
    FastTravelChooseZoneInfoIndex: int
    FastTravelChooseZoneIndex: int
    FastTravelChooseLocationIndex: int
    FriendListSplitScreenScalePlayer1: core_uobject.Vector2D
    FriendListSplitScreenPositionPlayer1: core_uobject.Vector2D
    ContextMenuOffsetExpandingDown: core_uobject.Vector2D
    ContextMenuOffsetExpandingUp: core_uobject.Vector2D
    ContextMenuScale: core_uobject.Vector2D
    ContextMenuAdjustmentHorizontalSplitScreen: GFxMapMenu_Adjustment
    MenuRoot: gbx_ui.GbxGFxObject
    ProgressPanel: GFxMapMenuProgressPanel
    NavBar: gbx_ui.GbxGFxGridScrollingList
    FastTravelList: gbx_ui.GbxGFxGridScrollingList
    ChallengeList: gbx_ui.GbxGFxGridScrollingList
    FriendList: gbx_ui.GbxGFxGridScrollingList
    CurrentGalaxyChallengeFilterIndex: int
    CurrentZoneChallengeFilterIndex: int
    ChallengeListWrapper: gbx_ui.GbxGFxObject
    ChallengeFilterHint: gbx_ui.GbxGFxHintWidget
    IconContainer: gbx_ui.GbxGFxObject
    CrosshairContainers: GFxMapMenuCrosshair
    CurrentCrosshair: GFxMapMenuCrosshair
    MouseCapturePanel: gbx_ui.GbxGFxMouseCapturePanel
    ZoomLevelInfo: GFxMapMenuZoomLevelInfo
    DetailsPanel: GFxMapDetailsPanel
    HyperspaceHeader: gbx_ui.GbxTextField
    MapWarning: gbx_ui.GbxGFxObject
    MapError: gbx_ui.GbxGFxObject
    MapErrorText: gbx_ui.GbxTextField
    TutorialWidget: GFxTutorialWidget
    FastTravelStationListData: unreal.WrappedArray[ZoneMapPOIEntry]
    LevelListData: unreal.WrappedArray[ZoneMapData]
    PlanetListData: unreal.WrappedArray[PlanetData]
    PlayerLevel: ZoneMapData
    ChallengeProvider: OakUIChallengeDataProvider
    ChallengeToFocusAfterLoad: OakChallenge
    TargetIconInfo: ZoneMapIconInfo
    MapIconInfos: unreal.WrappedArray[ZoneMapIconInfo]
    PendingPOIPlanet: PlanetData
    def OnTutorialComplete(self): ...
    def OnTutorialAdvanced(self): ...
    def OnPlanetSelected(self, ListItem: gbx_ui.GbxGFxListCell): ...
    def OnPlanetClicked(self, ListItem: gbx_ui.GbxGFxListCell, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnNavBarItemSelected(self, ListItem: gbx_ui.GbxGFxListCell): ...
    def OnMinimapIconComponentEndTracking(self, MinimapIconComponent: OakMinimapIconComponent): ...
    def OnMinimapIconComponentBeginTracking(self, MinimapIconComponent: OakMinimapIconComponent): ...
    def OnMapIconUnhovered(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnMapIconClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnLevelSelected(self, ListItem: gbx_ui.GbxGFxListCell): ...
    def OnLevelClicked(self, ListItem: gbx_ui.GbxGFxListCell, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnFriendSelected(self, ListItem: gbx_ui.GbxGFxListCell): ...
    def OnFriendClicked(self, ListItem: gbx_ui.GbxGFxListCell, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnFastTravelStationSelectedExplicitly(self, ListItem: gbx_ui.GbxGFxListCell): ...
    def OnFastTravelStationSelected(self, ListItem: gbx_ui.GbxGFxListCell): ...
    def OnFastTravelStationClicked(self, ListItem: gbx_ui.GbxGFxListCell, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnFastTravelAvailabilityChanged(self, bAvailable: bool): ...
    def OnChallengeSelected(self, ListItem: gbx_ui.GbxGFxListCell): ...
    def OnChallengeListItemUpdated(self, ListData: OakUIChallengeListData): ...
    def OnChallengeClicked(self, ListItem: gbx_ui.GbxGFxListCell, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def InitForHyperspaceMenu(self): ...


class GFxMapMenuFastTravelCell(gbx_ui.GbxGFxListCell):
    NewIndicator: gbx_ui.GbxGFxObject
    CurrentLocation: gbx_ui.GbxGFxObject
    FriendWidget: gbx_ui.GbxGFxObject
    FriendCount: gbx_ui.GbxTextField
    MissionIndicator: gbx_ui.GbxGFxObject



class GFxMapMenuFriendCell(gbx_ui.GbxGFxListCell):
    FriendNameText: gbx_ui.GbxTextField
    FriendInfoText: gbx_ui.GbxTextField
    ItemIcon: gbx_ui.GbxGFxObject
    IconPath: str



class GFxMapMenuNavItemCell(gbx_ui.GbxGFxListCell): ...


class GFxMapMenuProgressPanel(gbx_ui.GbxGFxObject):
    ProgressHeader: gbx_ui.GbxTextField
    ProgressPercentText: gbx_ui.GbxTextField
    ProgressLines: unreal.WrappedArray[gbx_ui.GbxGFxObject]
    CachedProgressTextLines: unreal.WrappedArray[str]
    CachedProgressFractionLines: unreal.WrappedArray[str]



class GFxMapMenuZoomLevelInfo(gbx_ui.GbxGFxObject):
    LocationNameLabel: gbx_ui.GbxTextField
    LocationIcon: gbx_ui.GbxGFxObject
    LocationParentNameLabel: gbx_ui.GbxTextField
    LocationParentIcon: gbx_ui.GbxGFxObject
    LayerIndicator: gbx_ui.GbxGFxObject



class GFxMapMenuCrosshair(gbx_ui.GbxGFxObject):
    ProgressFill: gbx_ui.GbxGFxProgressBar



class GFxMapDetailsPanel(gbx_ui.GbxGFxObject):
    ContentPanel: gbx_ui.GbxGFxObject
    LocationPreviewContainer: gbx_ui.GbxGFxObject
    HeaderField: gbx_ui.GbxTextField
    SubHeaderField: gbx_ui.GbxTextField
    DescriptionText: gbx_ui.GbxTextField
    GeneralIcon: gbx_ui.GbxGFxObject
    DLCChallengeIcon: gbx_ui.GbxGFxObject
    BackgroundPanel: gbx_ui.GbxGFxObject
    DetailsPanelHintWrapper: gbx_ui.GbxGFxObject
    PanelHint: gbx_ui.GbxGFxHintWidget
    RewardsHeader: gbx_ui.GbxTextField
    RewardLines: unreal.WrappedArray[gbx_ui.GbxTextField]
    RewardLineSymbols: unreal.WrappedArray[gbx_ui.GbxGFxObject]
    RewardItemTypeContainer: gbx_ui.GbxGFxObject
    RewardRarityContainer: gbx_ui.GbxGFxObject
    RewardItemType: gbx_ui.GbxGFxObject
    RewardBackground: gbx_ui.GbxGFxObject
    MissionTypeIcon: gbx_ui.GbxGFxObject
    ObjectiveLines: unreal.WrappedArray[gbx_ui.GbxTextField]
    OwnerMapMenu: GFxMapMenu
    MayhemModLines: gbx_ui.GbxTextField
    MayhemCoreMods: gbx_ui.GbxTextField
    MayhemLevel: gbx_ui.GbxTextField
    CollatedMayhemCoreUIStats: unreal.WrappedArray[gbx_game_system_core.UIStatData]
    OwnerPlayerController: OakPlayerController
    CachedDetailsHintInfo: gbx_ui.GbxHintInfo



class GFxMatchmakingHUDWidget(gbx_ui.GbxGFxHUDWidget):
    MatchmakingWidgetObject: gbx_ui.GbxGFxObject
    MatchMessageText: gbx_ui.GbxTextField
    MatchTypeIcon: gbx_ui.GbxGFxObject
    MatchStatusIcon: gbx_ui.GbxGFxObject
    MessageShowDuration: float
    def OnShrinkDelayExpired(self): ...
    def OnMatchmakingWidgetStateChanged(self): ...
    def OnInputDeviceChanged(self): ...
    def OnHideDelayExpired(self): ...


class GFxMayhemMenuData(GFxStatusMenuSubmenuData): ...


class GFxMayhemModifierListItem(gbx_ui.GbxGFxListCell):
    HeaderText: gbx_ui.GbxTextField
    BodyText: gbx_ui.GbxTextField



class GFxMayhemMenu(GFxStatusMenuSubmenu):
    InfoPanelHeader: gbx_ui.GbxTextField
    InfoPanelBody: gbx_ui.GbxTextField
    CurrentMayhemStatusText: gbx_ui.GbxTextField
    ApplyWarningText: gbx_ui.GbxTextField
    StatsPanelHeader: gbx_ui.GbxTextField
    StatsPanelText1: gbx_ui.GbxTextField
    StatsPanelText2: gbx_ui.GbxTextField
    StatsPanelText3: gbx_ui.GbxTextField
    StatsPanelBonusText1: gbx_ui.GbxTextField
    StatsPanelBonusText2: gbx_ui.GbxTextField
    StatsPanelBonusText3: gbx_ui.GbxTextField
    ModifiersPanelHeader: gbx_ui.GbxTextField
    ModifiersList: gbx_ui.GbxGFxGridScrollingList
    MayhemOptionStatusSpinner: gbx_ui.GbxGFxListItemSpinner
    MayhemOptionLevelSlider: gbx_ui.GbxGFxListItemNumber
    MayhemOptionApplyButton: gbx_ui.GbxGFxButton
    StatsArray: unreal.WrappedArray[gbx_ui.GbxTextField]
    CollatedMayhemCoreUIStats: unreal.WrappedArray[gbx_game_system_core.UIStatData]
    ModifierSets: unreal.WrappedArray[MayhemModifierSet]
    MayhemDescriptionText: str
    ApplyWarningLocText: str
    ApplyConfirmationLocText: str
    VehicleWarningLocText: str
    def OnMayhemValueChanged(self): ...
    def OnMayhemOptionFocused(self): ...
    def OnMayhemExitDialogChoiceMade(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnMayhemApplyChoiceMade(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnMayhemApplyButtonClicked(self): ...
    def OnMayhemActivationChanged(self): ...


class GFxMenuDamageWidget(gbx_ui.GbxGFxHUDWidget):
    SplitScreenOffsetY: float



class GFxTutorialDialogWidget(gbx_ui.GbxGFxObject):
    HintBarContainerClip: gbx_ui.GbxGFxHintBarContainer
    HintBar: gbx_ui.GbxHintBar
    bAdvanceOnKeyPress: bool
    bIsFinalStageOfTutorial: bool
    bAllowTutorialSkip: bool



class GFxTutorialWidget(gbx_ui.GbxGFxObject):
    TutorialSequence: GFxMenuTutorialSequence
    TutorialSequenceReadPosition: int
    bIsTutorialActive: bool
    bAdvanceOnKeyPress: bool
    bAllowTutorialSkip: bool
    InnerClip: gbx_ui.GbxGFxObject
    LargeDialogWidget: GFxTutorialDialogWidget
    MediumDialogWidget: GFxTutorialDialogWidget
    SmallDialogWidget: GFxTutorialDialogWidget
    CurrentDialogWidget: GFxTutorialDialogWidget
    TintClips: unreal.WrappedArray[GFxMenuTutorialTintClipData]
    CurrentlyPlayingTutorial: str
    CachedHeaderText: str
    CachedBodyText: str
    def OnInputDeviceChanged(self, NewInputDevice: gbx_ui.EGbxMenuInputDevice): ...


class GFxMinimapWidget(gbx_ui.GbxGFxHUDWidget):
    AreaWaypointToClampIconCushion: float
    NorthPseudoDistance: float
    BoundingRadius: float
    BoundTriggeringRadius: float
    ClampedIconPerfCutOff: float
    IconClampTransitionBounds: core_uobject.Vector2D
    MaxMapWorldTransitionTime: float
    MinimapIconPrefix: str
    OriginalNorthPosition: core_uobject.Vector2D
    DefaultTexture: engine.Texture2D
    ClampedIconStage: gbx_ui.GbxGFxObject
    ClampedSizeReference: gbx_ui.GbxGFxObject
    MailNotification: gbx_ui.GbxGFxObject
    NorthTextField: gbx_ui.GbxTextField
    NorthPseudoLocation: core_uobject.Vector
    ZoneMapViewer: ZoneMapViewer
    InitializationWrapper: gbx_ui.GbxGFxObject
    MinimapTerrainObject: gbx_ui.GbxGFxObject
    CurrentMinimapTexture: engine.Texture
    ClampedIconStageBounds: scaleform_ui.GbxGFxBounds
    TrackedIcons: unreal.WrappedArray[GFxMinimapWidgetIcon]
    TopLeftBoundingCircle: MinimapBoundingCircle
    TopRightBoundingCircle: MinimapBoundingCircle
    BottomLeftBoundingCircle: MinimapBoundingCircle
    BottomRightBoundingCircle: MinimapBoundingCircle
    MissionTrackerRegisteredWith: gbx_mission.MissionTracker
    ChallengeManagerRegisteredWith: OakChallengeManager
    RegisterTrackerTimerHandle: engine.TimerHandle
    RegisterChallengeTimerHandle: engine.TimerHandle
    IconPool: unreal.WrappedArray[gbx_ui.GbxGFxObject]
    CustomWaypointIconData: GFxMinimapWidgetIcon
    NextIconInstId: int
    NorthDegreeOffset: float
    bFixedMinimapRotation: bool
    bNeedRefreshTrackedMissionIcons: bool
    def OnMinimapIconComponentEndTracking(self, MinimapIconComponent: OakMinimapIconComponent): ...
    def OnMinimapIconComponentBeginTracking(self, MinimapIconComponent: OakMinimapIconComponent): ...
    def OnHasMailChanged(self, bNewHasMail: bool): ...
    def OnFixedMinimapRotationChanged(self, bNewValue: bool): ...
    def OnCustomWaypointChanged(self, bDisplay: bool, WorldLocation: core_uobject.Vector): ...
    def DeferredSetupForZoneMapViewer(self): ...


class GFxMissionCompletedNotificationWidget(GFxDisplayedNotificationWidget):
    MissionCompletedText: gbx_ui.GbxTextField
    MissionCompletedTextShadow: gbx_ui.GbxTextField
    MissionTitleText: gbx_ui.GbxTextField



class GFxMissionDeliveryMenu(gbx_ui.GbxGFxMenu):
    AcceptButton: gbx_ui.GbxGFxButton
    DeclineButton: gbx_ui.GbxGFxButton
    MissionDescriptionContainer: gbx_ui.GbxGFxObject
    MissionDescriptionText: gbx_ui.GbxTextField
    MissionDescriptionScrollBar: gbx_ui.GbxGFxSlider
    MissionDescriptionGridArea: gbx_ui.GbxGFxObject
    MissionTitleText: gbx_ui.GbxTextField
    MissionLevelText: gbx_ui.GbxTextField
    MissionLocationText: gbx_ui.GbxTextField
    MultiMissionNavBar: gbx_ui.GbxGFxObject
    MultiMissionPreviousHint: gbx_ui.GbxGFxHintWidget
    MultiMissionLeftArrow: gbx_ui.GbxGFxButton
    MultiMissionNextHint: gbx_ui.GbxGFxHintWidget
    MultiMissionRightArrow: gbx_ui.GbxGFxButton
    MultiMissionMissionPipsWrapper: gbx_ui.GbxGFxObject
    MultiMissionMissionPips: unreal.WrappedArray[gbx_ui.GbxGFxButton]
    DifficultyText: gbx_ui.GbxTextField
    PlacardBG: gbx_ui.GbxGFxObject
    PlacardTop: gbx_ui.GbxGFxObject
    PlacardElementsBG: gbx_ui.GbxGFxObject
    PlacardTopText: gbx_ui.GbxGFxObject
    ModalDetails: gbx_ui.GbxGFxObject
    FriendAmountText: gbx_ui.GbxTextField
    FriendsOnMissionText: gbx_ui.GbxTextField
    DescriptionCycleGlyph: gbx_ui.GbxTextField
    PlayerBalanceState: PlayerBalanceStateComponent
    DisplayedMissionData: unreal.UClass
    DisplayedMissionGiver: engine.Actor
    CurrentDisplayState: EMissionDeliveryMenuDisplayState
    CachedMissionDescription: str
    CachedMissionTitle: str
    CachedMissionLocation: str
    CachedMissionLevel: int
    CachedMissionLevelText: str
    CurrentMissionTracker: gbx_mission.MissionTracker
    TimerHandle_PopulateFriendNames: engine.TimerHandle
    WaitingForNameString: str
    ProjectionFXWidgetName: str
    def OnRejectMission(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnAcceptMission(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def MissionDeliveryEvent__DelegateSignature(self, bMissionAccepted: bool, bEmergencyExit: bool, MissionIndex: int, MissionGiver: engine.Actor): ...


class GFxMissionLogNavCell(gbx_ui.GbxGFxListCell):
    NavType: EGFxMissionLogNavType



class GFxMissionLogObjective(gbx_ui.GbxGFxListCell): ...


class GFxMissionLogDescriptionBox(gbx_ui.GbxGFxObject):
    ActiveMissionIconClip: gbx_ui.GbxGFxObject
    InfoPanelLabelClip: gbx_ui.GbxTextField
    InfoPanelSecondaryLabelClip: gbx_ui.GbxTextField
    ObjectiveList: gbx_ui.GbxGFxGridScrollingList
    DescriptionSlider: gbx_ui.GbxGFxSlider
    ReplayAudioHint: gbx_ui.GbxGFxHintWidget
    MissionTimerClip: gbx_ui.GbxTextField
    DescriptionScrollingBoxClip: gbx_ui.GbxTextField
    DescriptionScrollingBoxScrollbarClip: gbx_ui.GbxGFxSlider
    DescriptionScrollingBoxMaskClip: gbx_ui.GbxGFxObject
    MissionTracker: gbx_mission.MissionTracker
    OwnerMissionLog: GFxMissionLogMenu
    bIsVisible: bool
    PromptClipReplay: str



class GFxMissionLogMenu(GFxStatusMenuSubmenu):
    bUseDebug: bool
    HeaderListItem: str
    ActiveMissionListItem: str
    CompletedMissionListItem: str
    CurrentObjectiveHeaderColor: core_uobject.Color
    CurrentObjectiveEntryColor: core_uobject.Color
    OptionalObjectiveHeaderColor: core_uobject.Color
    OptionalObjectiveEntryColor: core_uobject.Color
    LogListItemSpacing: core_uobject.Vector2D
    EchoDeviceScreen_MissionVOPlayed: str
    EchoDeviceScreen_EchoLogPlayed: str
    EchoDeviceScreen_EridianLogPlayed: str
    EchoDeviceScreen_TyphonLogPlayed: str
    EchoNetSubmenuName: str
    EridianCategoryName: str
    TyphonCategoryName: str
    EchoCategoryName: str
    MissionCategoryName: str
    SocialWidgetViewRoster: str
    EmptyLogString: str
    FilterString: str
    MediaPlayerConfig: gbx_ui.GbxGFxMediaPlayerConfig
    CachedPlayerController: OakPlayerController
    bEchoLogWasPlaying: bool
    EmptyTextField: gbx_ui.GbxTextField
    FilterName: str
    MediaPlayer: gbx_ui.GbxGFxMediaPlayer
    ContentClip: gbx_ui.GbxGFxObject
    NavBarList: gbx_ui.GbxGFxGridScrollingList
    NavBarHint: gbx_ui.GbxGFxHintWidget
    NavBarHintPrev: gbx_ui.GbxGFxHintWidget
    NavBarHintNext: gbx_ui.GbxGFxHintWidget
    FilterTextClip: gbx_ui.GbxTextField
    FilterHintClip: gbx_ui.GbxGFxHintWidget
    AudioLogClip: GFxEchologWidgetBase
    CategoryTextField: gbx_ui.GbxTextField
    MissionDescriptionBoxClip: GFxMissionLogDescriptionBox
    LogDescriptionBoxClip: GFxMissionLogDescriptionBox
    MissionListBox: gbx_ui.GbxGFxGridScrollingList
    MissionBoxItems: unreal.WrappedArray[GFxMissionLogMissionItem]
    PlayerDetailsMenuData: gbx_ui.GbxMenuData
    CurrentNav: EGFxMissionLogNavType
    CurrentFilterType: EGFxMissionLogFilterType
    MyMissionTracker: gbx_mission.MissionTracker
    PlayerMissionComponent: OakPlayerMissionComponent
    SocialWidget: gbx_ui.GbxGFxObject
    SocialWidgetHeader: gbx_ui.GbxTextField
    SocialWidgetHint: gbx_ui.GbxGFxHintWidget
    SocialWidgetScrollingList: gbx_ui.GbxGFxGridScrollingList
    def UpdatePauseHint(self, bShouldAddToHintBar: bool): ...
    def ShowFriendsOnMissionDialog(self): ...
    def SetLookingAtMissionInfo(self, MissionInfo: GFxMissionLogMissionItem): ...
    def OnNavCellSelectionChanged(self, NewSelectedItem: gbx_ui.GbxGFxListCell): ...
    def OnMissionSelectionChanged(self, ListItem: gbx_ui.GbxGFxListCell): ...
    def OnMissionListItemClicked(self, ListItem: gbx_ui.GbxGFxListCell, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnFriendSelectedToJoin(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnEchoStarted(self, CharacterData: CharacterEchoData, PerformanceData: PerformanceEchoData, MoodKeyframe: str, VoGMoodKey: str, VoGSpeakerID: gbx_dialog.EVoiceOfGodSpeaker, bIsNewEcho: bool): ...
    def OnEchoFinished(self, CharacterData: CharacterEchoData, PerformanceData: PerformanceEchoData, bCompleted: bool): ...


class GFxMissionLogMenuItemCell(gbx_ui.GbxGFxListCell):
    MissionName: gbx_ui.GbxTextField
    FriendsOnMissionTextField: gbx_ui.GbxTextField
    HintClip: gbx_ui.GbxGFxHintWidget
    ActiveMissionIconClip: gbx_ui.GbxGFxObject
    ProgressTextClip: gbx_ui.GbxTextField



class GFxSocialWidgetCell(gbx_ui.GbxGFxListCell):
    TextClip: gbx_ui.GbxTextField



class GFxMissionLogMenuDescriptionCell(gbx_ui.GbxGFxListCell):
    DescriptionTextClip: gbx_ui.GbxTextField



class GFxMissionTrackerHUDWidget(gbx_ui.GbxGFxHUDWidget):
    NewMissionNotificationAsset: HUDNotificationAsset
    MissionCompletedNotificationAsset: HUDNotificationAsset
    RestartMissionText: str
    MaxTimeTillReturnToTrackedMission: float
    MissionActivateCheatSuppressionDuration: float
    MaxNormalRewardsDisplayTime: float
    MaxBonusRewardsDisplayTime: float
    TempTrackedMission: unreal.UClass
    TimerHandle: engine.TimerHandle
    MissionTracker: OakMissionTracker
    TaskContainer: gbx_ui.GbxGFxObject
    ObjectiveSlots: unreal.WrappedArray[GFxMissionTrackerSlot]
    MissionTrackerContainerInner: gbx_ui.GbxGFxObject
    RewardSlots: unreal.WrappedArray[GFxMissionTrackerRewardSlot]
    MoneyCurrency: gbx_inventory.InventoryCategoryData
    EridiumCurrency: gbx_inventory.InventoryCategoryData
    RewardsToDisplay: unreal.WrappedArray[GFxMissionTrackerRewardQueueData]
    CachedMissionObjectiveSet: gbx_mission.MissionObjectiveSet
    CurrentTimerFieldSlot: GFxMissionTrackerSlot
    CurrentProgressBarSlot: GFxMissionTrackerSlot
    def UpdateTracker(self, TrackedMission: unreal.UClass): ...
    def SetTrackerAfterDelay(self): ...
    def OnMissionActivatedCheatStop(self): ...
    def OnMissionActivatedCheatStart(self): ...
    def OnInputDeviceChanged(self): ...
    def extRewardPanelFadeOutFinished(self): ...


class GFxMissionTrackerSlot(gbx_ui.GbxGFxObject):
    CurrentText: str



class GFxModalTutorialDataAsset(gbx_runtime.GbxDataAsset):
    Header: str
    Body: str
    ImageFrameName: str
    LockoutDelay: float
    bUpsellContent: bool
    bShowEvenIfTutorialsAreDisabled: bool



class GFxModalTutorial(gbx_ui.GbxGFxMenu):
    WaitString: str
    ExitString: str
    TintScale: float
    TintOffset: float
    ExitHint: gbx_ui.GbxGFxHintWidget
    bAllowMenuAdvance: bool
    ImageFrameName: str
    def OnNumPlayersChanged(self, NewNumPlayers: int): ...
    def OnLockoutDelayComplete(self): ...
    def extOnIntroComplete(self): ...


class GFxMultiplayerMenu(gbx_ui.GbxGFxMenu):
    ContentPanel: gbx_ui.GbxGFxGridScrollingList
    LANGamesItem: gbx_ui.GbxGFxListCell
    OnlineGamesItem: gbx_ui.GbxGFxListCell
    NetworkOptionsItem: gbx_ui.GbxGFxListCell
    AlternateBkg: gbx_ui.GbxGFxObject
    def OnSwitchProfileClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnSplitscreenControllerSelected(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnSplitscreenClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnShiftClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnRosterClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnNetworkOptionsClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnMatchmakingClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnManagePartyClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnLANBrowserClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxNameplate(gbx_ui.GbxGFxObject):
    LevelPrefix: str
    BarsFlashType: gbx_ui.EEdgeFlashType
    OverLevelIconPlacement: gbx_ui.GbxGFxObject
    OverLevelIcon: gbx_ui.GbxGFxObject
    NameTextContainer: gbx_ui.GbxGFxObject
    NameplateBarsContainer: gbx_ui.GbxGFxObject
    BarPrimary: gbx_ui.GbxGFxProgressBar
    BarSecondary: gbx_ui.GbxGFxProgressBar
    BarTertiary: gbx_ui.GbxGFxProgressBar
    LevelText: gbx_ui.GbxTextField
    CenteredNameText: gbx_ui.GbxTextField
    LeftNameText: gbx_ui.GbxTextField
    NameplateDataArray: NameplateBarData
    RangeFadeCurve: engine.CurveFloat
    FadeStartDistance: float
    FadeEndDistance: float
    BracketFadeCooldown: float
    CurrentTargetDamageComponent: gbx_game_system_core.DamageComponent
    EnemyName: str
    NameplateStyle: ENameplateStyle
    DesiredTargetedNameplateType: ETargetedNameplateType
    TargetedNameplateState: ETargetedNameplateState
    TargetTextMarkupString: str
    ImmuneClipID: str
    ImmuneAnimation: str
    StopAnimationFrame: str
    def OnTeamUpdated(self, NewTeam: gbx_game_system_core.TeamComponent, OldTeam: gbx_game_system_core.Team): ...
    def OnPrimaryCharacterChanged(self, Character: gbx_game_system_core.GbxCharacter): ...
    def OnOwningPlayerLevelChanged(self, OldExperienceLevel: int, NewExperienceLevel: int): ...
    def OnNameUpdated(self): ...
    def OnLevelChanged(self, OldExperienceLevel: int, NewExperienceLevel: int): ...
    def ForceUpdateFocusableBars(self): ...
    def extDeathAnimComplete(self): ...
    def AnimateBar(self, Index: int, AnimationToPlay: str): ...


class GFxNetworkOptions(GFxOptionBase):
    NetworkModeSpinner: gbx_ui.GbxGFxListItemSpinner
    CrossplayStateSpinner: gbx_ui.GbxGFxListItemSpinner
    FriendSyncStateSpinner: gbx_ui.GbxGFxListItemSpinner
    bForceStreamingServiceReset: bool
    def OnTradeRequestSpinner(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnToastLifetimeChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnToastFrequencyChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnStreamingServiceChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnRareChestEventEnabledChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnPinataEventEnabledChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnNetworkTypeChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnMoxxisDrinkEventEnabledChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnMoxxisDrinkEventBitsProductIdChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnMatchmakingRegionChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnIncreasedChanceForSubscribersChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnHideTextChatSpinner(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnFriendSyncStateChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnExtractionEventEnabledChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnCrossplayStateChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnBadassEventEnabledChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnBadassEventCooldownChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...


class GFxNewDLCMenuData(OakGFxMenuData): ...


class GFxNewDLCCell(gbx_ui.GbxGFxListCell):
    ItemLabel: gbx_ui.GbxTextField



class GFxNewDLCMenu(gbx_ui.GbxGFxMenu):
    TitleText: gbx_ui.GbxTextField
    CategoryText: gbx_ui.GbxTextField
    TipsText: gbx_ui.GbxTextField
    StartButton: gbx_ui.GbxGFxButton
    StartButtonHint: gbx_ui.GbxGFxHintWidget
    DLCList: gbx_ui.GbxGFxGridScrollingList
    def OnDLCListSelectionClicked(self, ClickedItem: gbx_ui.GbxGFxListCell, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnDLCListSelectionChanged(self, Item: gbx_ui.GbxGFxListCell): ...


class GbxGFxNewGameSettingsButton(gbx_ui.GbxGFxButton):
    Icon: gbx_ui.GbxGFxObject
    Sparkle: gbx_ui.GbxGFxObject



class GFxNewGameSettings(gbx_ui.GbxGFxMenu):
    StartGameAudioEventName: str
    StoryDifficultyAudioEventName: str
    NormalDifficultyAudioEventName: str
    EasierDifficultyText: str
    NormalDifficultyText: str
    RightPanelDifficultyTitleText: str
    RightPanelLootModeTitleText: str
    RightPanelDifficultyText: str
    RightPanelLootModeText: str
    RightPanelSelectDlcTitleText: str
    RightPanelSelectDlcBodyText: str
    RightPanelSelectCharacterTitleText: str
    RightPanelSelectCharacterBodyText: str
    StartFromNewGameText: str
    OptionPannel: gbx_ui.GbxGFxObject
    CategoryText: gbx_ui.GbxTextField
    OptionButton1: GbxGFxNewGameSettingsButton
    OptionButton2: GbxGFxNewGameSettingsButton
    TipsLabel: gbx_ui.GbxTextField
    StartButton: gbx_ui.GbxGFxButton
    StartButtonHint: gbx_ui.GbxGFxHintWidget
    TooltipTitle: gbx_ui.GbxTextField
    ToolTipText: gbx_ui.GbxTextField
    ChoiceListClip: gbx_ui.GbxGFxGridScrollingList
    MenuMapMenuFlowActor: MenuMapMenuFlow
    def OnStartButtonClicked(self, ClickedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnOption2Focused(self, FocusedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnOption2Clicked(self, ClickedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnOption1Focused(self, FocusedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnOption1Clicked(self, ClickedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnChoiceListItemSelected(self, Item: gbx_ui.GbxGFxListCell): ...
    def OnChoiceListItemClicked(self, ClickedItem: gbx_ui.GbxGFxListCell, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def extUpdateLayout(self): ...
    def extOnUITransitionCompleted(self): ...
    def extOnStartGame(self): ...
    def extOnMenuHid(self): ...
    def extClearTipsLabel(self): ...


class GFxNewGameListButton(gbx_ui.GbxGFxListCell):
    CharacterClassClip: gbx_ui.GbxGFxObject
    CharacterLevelNumClip: gbx_ui.GbxTextField
    CharacterLevelLabelClip: gbx_ui.GbxTextField
    DlcLabelClip: gbx_ui.GbxTextField



class GFxNewMissionNotificationWidget(GFxDisplayedNotificationWidget):
    HoldToTrackGlyphSizeOverride: core_uobject.Vector2D
    HoldToTrackPromptText: str
    MissionTitleText: gbx_ui.GbxTextField
    NewMissionText: gbx_ui.GbxTextField
    ContextSensitivePrompt: gbx_ui.GbxGFxHintWidget
    ContextSensitivePromptBackground: gbx_ui.GbxGFxObject
    def TrackNotificationTarget(self): ...
    def OnInputDeviceChanged(self): ...


class GFxNewsMenuItemDataAsset(gbx_runtime.GbxDataAsset):
    Header: str
    Body: str
    BackgroundImage: engine.Texture
    ForegroundImage: engine.Texture
    bDisplayItem: bool



class GFxNewsMenu(gbx_ui.GbxGFxMenu):
    HeaderText: gbx_ui.GbxTextField
    BodyText: gbx_ui.GbxTextField
    NewsData: GFxNewsMenuItemDataAsset
    CachedForegroundNewsImage: engine.Texture
    CachedBackgroundNewsImage: engine.Texture



class GFxNewsWidget(gbx_ui.GbxGFxButton):
    bIsCurrentlyHovered: bool
    bIsCurrentlyFocused: bool
    UnhoverTimeoutSeconds: float
    UnhoveredTimerHandle: engine.TimerHandle
    bIsHoveredByArrowButton: bool
    bIsHoveredBySelf: bool
    NavigationDots: GFxNewsWidgetNavCircles
    NewsContainer: gbx_ui.GbxGFxObject
    LeftToRight: Transition
    RightToLeft: Transition
    NewsHint: gbx_ui.GbxTextField
    NewsItemClips: unreal.WrappedArray[GFxNewsItem]
    NavLeftButton: gbx_ui.GbxGFxButton
    NavRightButton: gbx_ui.GbxGFxButton
    VisibilityClip: gbx_ui.GbxGFxObject
    bVisibilityClipIsVisible: bool
    def OnUnhoverTimeout(self): ...


class GFxNewsItem(gbx_ui.GbxGFxButton):
    TooltipTextField: gbx_ui.GbxTextField
    BackgroundClip: gbx_ui.GbxGFxObject
    LoadingCircleClip: gbx_ui.GbxGFxObject
    NewsImageClip: GFxLoadedNewsImage
    FrameAndExternalTextureName: str



class GFxNewsWidgetWrapper(gbx_ui.GbxGFxObject):
    NewsWidgetClip: GFxNewsWidget
    NavLeftButtonClip: gbx_ui.GbxGFxButton
    NavRightButtonClip: gbx_ui.GbxGFxButton
    def OnNavigationButtonUnhovered(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnNavigationButtonHovered(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnNavigationButtonClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxNewsWidgetNavCircles(gbx_ui.GbxGFxObject):
    CircleClipButtons: unreal.WrappedArray[gbx_ui.GbxGFxButton]
    NewsWidgetClip: GFxNewsWidget
    def OnCircleButtonClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxLoadedNewsImage(gbx_ui.GbxGFxMovieLoader):
    CurrentImageFrame: str
    NewsFrameClip: gbx_ui.GbxGFxObject
    def OnNewsImageLoadComplete(self, MovieLoader: gbx_ui.GbxGFxMovieLoader): ...


class GFxNewUWidget(gbx_ui.GbxGFxHUDWidget):
    GFxKEY_TitleField: str
    GFxKEY_DescriptionField: str
    GFxKEY_FeeField: str
    TitleText: str
    DescriptionText: str
    FeeText: str
    OnShowSoundEntryName: str
    OnHideSoundEntryName: str
    TimeBeforeHide: float
    def OnOwnerResurrected(self, CashLost: int): ...


class GFxNotificationWidget(gbx_ui.GbxGFxHUDWidget):
    MaxWidgetDisplayTime: float
    QueduedNotifications: unreal.WrappedArray[GFxNotificationQueueListItem]
    ActiveNotification: GFxNotificationQueueListItem
    CurrentError: GFxNotificationQueueListItem
    def OnWidgetHidden(self, Widget: GFxDisplayedNotificationWidget): ...
    def OnHUDErrorNotification(self, Reason: str): ...
    def OnGrenadeThrowFailed(self, FailureReason: EGrenadeThrowFailureReason): ...
    def DisplayNotificationWithId(self, Asset: HUDNotificationAsset, NotificationId: int, MESSAGE: str, NotificationPriority: int, TrackedNotificationTarget: unreal.UClass, bMakeActiveImmediately: bool, bAbortIfNotImmediatelyActive: bool): ...
    def DisplayNotification(self, Asset: HUDNotificationAsset, MESSAGE: str, NotificationPriority: int, TrackedNotificationTarget: unreal.UClass, bMakeActiveImmediately: bool): ...
    def DisplayError(self, MESSAGE: str): ...
    def ClearNotifications(self): ...


class GFxOakLegalScreenMenu(gbx_ui.GbxGFxMenu):
    DelayBeforeInputSkipScreen: float
    DelayBeforeAutoSkipScreen: float
    LegalText: str
    LegalTextPC: str
    LogosWrapper: gbx_ui.GbxGFxObject
    def OnLegalScreenTimerExpired(self): ...
    def EnableInputToSkipScreen(self): ...


class GFxOakMainMenu(GFxMainAndPauseBaseMenu):
    DarkenBackgroundMaterial: engine.MaterialInterface
    DarkenBackgroundTransitionTime: float
    SecondPlaythroughTitleText: str
    SecondPlaythroughMessageText: str
    MaxRotationSpeed: float
    MouseMaxRotationSpeed: float
    MaxSecondsToReachTargetSpeed: float
    MainMenuContainer: gbx_ui.GbxGFxObject
    HostBreadcrumbDisplayText: str
    NewsItemsToView: unreal.WrappedArray[GFxNewsMenuItemDataAsset]
    MouseCapturePanel: gbx_ui.GbxGFxMouseCapturePanel
    CloudSaveProgressDialog: GbxGFxDialogBox
    def OnUploadSaveClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnTrueVaultHunterClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnTestMapsClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnStoreClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnStartGameClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnStartDLCClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnSplitscreenClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnShiftClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnRosterClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnQuitGameClicked(self, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnQuitClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnQuitChoiceMade(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnPlayClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnOtherButtonClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnOptionsClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnNewPlaythroughClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnMultiplayerDebugClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnMatchmakingClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnLoadGameClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnLeaveGroupClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnLanGamesClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnEnableLeaguesClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnDownloadSaveClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnDebugClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnCreditsClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnContinueClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnChoiceMadeTravelToUnreachableDLC(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnChoiceMadeSkipPlayableIntro(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBehindTheScenesClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBehindTheScenesCategoryClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBackOutToTitleChoiceMade(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxOakMenuScrollingList(gbx_ui.GbxGFxGridScrollingList): ...


class GFxOakTitleScreenMenuData(gbx_ui.GbxGFxMenuData):
    MenuToSwitchTo: gbx_ui.GbxMenuData
    FirstBootMenu: gbx_ui.GbxGFxMenuData



class GFxOakTitleScreenMenu(gbx_ui.GbxGFxMenu):
    GFxHintText: gbx_ui.GbxTextField
    def OnQuitChoiceMade(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxRolloutMessage(gbx_ui.GbxGFxHUDWidget):
    CachedMessage: UIManagerMessage
    GlyphField: gbx_ui.GbxGFxHintWidget
    MinimumDisplaySeconds: float
    InnerInstanceString: str
    EventIconInstanceName: str
    TitleFieldInstanceName: str
    DescriptionFieldInstanceName: str
    DescriptionWithGlyphFieldInstanceName: str
    GlyphFieldInstanceName: str
    PlayerNameFieldInstanceName: str
    CommandFieldInstanceName: str
    SpinnerInstanceName: str
    SpinnerPulseInstanceName: str
    bHUDWidget: bool
    def RolloutMessageDelegate__DelegateSignature(self, Widget: GFxRolloutMessage): ...
    def OnInputDeviceChanged(self): ...
    def extShowAnimationFinished(self): ...


class GFxOnlineMessageAnimationWidget(GFxRolloutMessage):
    ProfileTextureName: str
    SubtitleBackgroundSizeMapping: unreal.WrappedArray[float]
    UserPicWidthPadding: float
    DebugForUserPic: bool
    InnerInstanceStringMenu: str
    InnerInstanceStringHud: str



class GFxOperativeSkillScreenTree(GFxSkillScreenTree):
    SkillLabel: gbx_ui.GbxTextField
    ModsLabel: gbx_ui.GbxTextField
    TopSkillSlot: GFxSkillScreenLoadoutSlot
    TopSkillMods: GFxSkillScreenLoadoutSlot
    BottomSkillSlot: GFxSkillScreenLoadoutSlot
    BottomSkillMods: GFxSkillScreenLoadoutSlot
    DeviceSlotDescription: str
    AugmentSlotDescription: str
    GrenadeName: str
    GrenadeDescription: str



class GFxOptionsControlsPanel(gbx_ui.GbxGFxObject):
    TitleLabel: gbx_ui.GbxTextField
    TooltipLine1: gbx_ui.GbxTextField
    TooltipLine2: gbx_ui.GbxTextField



class GFxControlsKeybindingItem(gbx_ui.GbxGFxObject):
    KeybindingName: gbx_ui.GbxTextField
    Glyph: gbx_ui.GbxTextField
    BadBindingIcon: gbx_ui.GbxGFxObject
    LineObjects: unreal.WrappedArray[gbx_ui.GbxGFxObject]



class GFxOptionsMenu(gbx_ui.GbxGFxMenu):
    SafeFrameMenuData: gbx_ui.GbxGFxMenuData
    HDRCalibrationMenuData: gbx_ui.GbxGFxMenuData
    RestartRequiredText: str
    MouseScaleMinValue: float
    MouseScaleMaxValue: float
    CurrentMenu: GFxOptionBase
    OptionsDescriptionGlobal: OptionDescriptionData
    MainPanel: GFxMainOptionPanel
    RestartTextField: gbx_ui.GbxTextField
    def SubtitleNavigationClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnSubtitlesButtonClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnRestoreDefaultChoiceMade(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnNonStadiaControllerDialogClicked(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnContentPanelSelectionChanged(self, SelectedItem: gbx_ui.GbxGFxListCell): ...


class GFxMainOptionPanel(gbx_ui.GbxGFxObject):
    Title: gbx_ui.GbxGFxObject
    ContentPanel: gbx_ui.GbxGFxGridScrollingList
    DescriptionPanel: GFxOptionPreviewPanel
    ScrollBar: gbx_ui.GbxGFxSlider
    ControlSchemeSpinner: gbx_ui.GbxGFxListItemSpinner
    ControlSchemeDrivingSpinner: gbx_ui.GbxGFxListItemSpinner
    ControlSchemeJoystickSpinner: gbx_ui.GbxGFxListItemSpinner
    ControlSchemeJoystickDrivingSpinner: gbx_ui.GbxGFxListItemSpinner
    SubtitleBarItems: SubtitleBarItems
    SubSectionTitle: gbx_ui.GbxTextField
    ControlsRightPanel: GFxOptionsControlsPanel
    OwningMenu: GFxOptionsMenu



class GFxOptionPreviewPanel(gbx_ui.GbxGFxObject):
    Title: gbx_ui.GbxTextField
    Description: gbx_ui.GbxTextField
    GraphicsPreview: gbx_ui.GbxGFxMovie



class GFxOutOfBoundsWarning(gbx_ui.GbxGFxHUDWidget):

    def OnBoundaryWarningStateChanged(self, bWarningActive: bool): ...


class GFxOverheadNameplate(GFxInWorldIcon):
    CenteredNameContainer: gbx_ui.GbxGFxObject
    CenteredNameObject: gbx_ui.GbxGFxObject
    StateContainer: gbx_ui.GbxGFxObject
    StateObject: gbx_ui.GbxGFxObject
    StateIndicator: gbx_ui.GbxGFxObject
    StateArrow: gbx_ui.GbxGFxObject
    StateArrowColors: gbx_ui.GbxGFxObject
    WaypointIcon: gbx_ui.GbxGFxObject
    OverheadArrow: gbx_ui.GbxGFxObject
    ReviveBar: gbx_ui.GbxGFxProgressBar
    DyingBar: gbx_ui.GbxGFxProgressBar
    CachedOverheadNameplateHealthState: EOverheadNameplateHealthState
    CachedOverheadNameplateDisplayState: EOverheadNameplateDisplayState
    def OnPlayerLocationChanged(self, NewLocation: core_uobject.Vector): ...


class GFxPassiveSkillWidget(gbx_ui.GbxGFxHUDWidget):
    Icons: unreal.WrappedArray[GFxPassiveSkillIcon]
    ActiveAbilityQueue: unreal.WrappedArray[GFxPassiveSkillWidgetSlotData]
    SlotPositions: unreal.WrappedArray[core_uobject.Vector2D]
    AbilityManager: OakPlayerAbilityManagerComponent



class GFxPassiveSkillIcon(gbx_ui.GbxGFxObject):
    CooldownProgressBar: gbx_ui.GbxGFxProgressBar
    TextureContainer: gbx_ui.GbxGFxObject
    OwningWidget: gbx_ui.GbxGFxHUDWidget
    TextureRef: engine.Texture



class GFxPauseMenu(GFxMainAndPauseBaseMenu):
    PostProcessSettings: engine.PostProcessSettings
    BlendWeight: float
    ContentPanel: gbx_ui.GbxGFxGridScrollingList
    AbandonDestination: gbx_travel_station.TravelStationData
    OakGameState: OakGameState
    def OnRosterClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnResumeClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnQuitToDesktopSaveComplete(self, SlotName: str, bSuccess: bool): ...
    def OnQuitGameClicked(self, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnQuitClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnQuitChoiceMade(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnPhotoModeClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnOptionsClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnNumPlayersChanged(self, NewNumPlayers: int): ...
    def OnNewsWidgetClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnMultiplayerDebugClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnMatchmakingClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnLeaveModeClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnLeaveChoiceMade(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnDebugMenuClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnConfirmMatchClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnConfirmCharacterClicked(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnAchievementsClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxPCTextChatBuffer(unreal.UObject): ...


class GFxPCTextChatMenu(gbx_ui.GbxGFxMenu):
    MaxLinesShown: int
    ScrollThumbTrackMinSize: float
    PlayerNameColor: str
    bCloseInMenuChatWhenSubmitting: bool
    TextChatLogClip: gbx_ui.GbxTextField
    ScrollBarClip: gbx_ui.GbxGFxSlider
    TextInputMCClip: gbx_ui.GbxGFxObject
    TextInputClip: gbx_ui.GbxGFxEditableTextField
    PlaceholderTextMCClip: gbx_ui.GbxGFxObject
    PlaceholderTextClip: gbx_ui.GbxTextField
    ButtonCloseClip: gbx_ui.GbxGFxButton
    ScrollPosition: int
    NumScrollEntries: int
    bNeedsToUpdateLogThisFrame: bool
    bDefaultMessageShowing: bool
    def OnTextLogChanged(self, TextChatBuffer: GFxPCTextChatBuffer): ...
    def OnTextChanged(self, EditableTextField: gbx_ui.GbxGFxEditableTextField, Text: str): ...
    def OnSubmit(self, EditableTextField: gbx_ui.GbxGFxEditableTextField, Text: str): ...
    def OnScrollBarUpdated(self, SliderPercent: float): ...
    def OnPrePushMenu(self): ...
    def OnCloseButtonClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxPCTextChatMenuData(gbx_ui.GbxGFxMenuData): ...


class GFxPCTextChatMenuNotification(gbx_ui.GbxGFxMenu):
    NotificationDuration: float
    ChatButtonClip: gbx_ui.GbxGFxButton
    Duration: float
    bChatMenuIsOpen: bool
    def OnMenuStackEmptied(self): ...
    def OnChatButtonClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxPCTextChatWidget(gbx_ui.GbxGFxHUDWidget):
    PlayerNameColor: str
    MaxLinesShown: int
    SecondsUntilHide: float
    PromptGlyphHeight: float
    KeyToShowForOpenTextChat: input_core.Key
    bTextChatEnabled: bool
    TextChatFeedClip: gbx_ui.GbxGFxObject
    TextChatLogClip: gbx_ui.GbxTextField
    HideTimerHandle: engine.TimerHandle
    bNeedsToUpdateLogThisFrame: bool
    def OnTextLogChanged(self, TextChatBuffer: GFxPCTextChatBuffer): ...
    def OnTextChatOptionChanged(self, bIsActive: bool): ...
    def OnMenuActivated(self, MenuObject: unreal.UObject): ...


class GFxPetCommandWidget(gbx_ui.GbxGFxHUDWidget):
    StateWrapper: gbx_ui.GbxGFxObject
    CommandHint: gbx_ui.GbxGFxHintWidget
    PetIcon: gbx_ui.GbxGFxObject
    CantUseFlourish: gbx_ui.GbxGFxObject
    StatusBar: gbx_ui.GbxGFxProgressBar
    CountdownTimerText: gbx_ui.GbxTextField
    DynamicSkillIcon: gbx_ui.GbxGFxObject
    ReadyForActivationColor: core_uobject.LinearColor
    RechargingOrCooldownColor: core_uobject.LinearColor
    MaxPreAttackTime: float
    CoundownSecondsMaxValue: int
    CountdownSecondsAudioValue: int
    SkillUsedFailAudioEventName: str
    CachedBeastmasterComponent: BeastmasterCharacterComponent
    def OnPetSpawnStateChanged(self, Pet: OakCharacter): ...
    def OnPetAttackCommandFailed(self): ...
    def OnInputDeviceChanged(self): ...


class GFxPhotoModeMenuSpinner(gbx_ui.GbxGFxListItemSpinner): ...


class GFxPhotoModeMenuSlider(gbx_ui.GbxGFxListItemNumber): ...


class GFxPhotoModeMenu(gbx_ui.GbxGFxMenu):
    PhotoModeCloseMenuSound: str
    PhotoModeSwitchTabsSound: str
    PhotoModeToggleSound: str
    PhotoModeResetSettingSound: str
    PhotoModeTakePhotoSound: str
    PhotoModeSliderSound: str
    PhotoModeSpinnerSound: str
    PhotoModeNavigateSound: str
    CachedPhotoModeController: PhotoModeController
    CachedPhotoModeGlobals: PhotoModeGlobals
    bUseCurrentTimeOfDayAsDefault: bool
    TimeOfDayWhenEnteringPhotoMode: float
    CameraButton: gbx_ui.GbxGFxButton
    DepthOfFieldButton: gbx_ui.GbxGFxButton
    ColorButton: gbx_ui.GbxGFxButton
    SceneButton: gbx_ui.GbxGFxButton
    FilterButton: gbx_ui.GbxGFxButton
    FrameButton: gbx_ui.GbxGFxButton
    Buttons: unreal.WrappedArray[gbx_ui.GbxGFxButton]
    SelectedButton: gbx_ui.GbxGFxButton
    PhotoModePrevHint: gbx_ui.GbxGFxHintWidget
    PhotoModeNextHint: gbx_ui.GbxGFxHintWidget
    FilterSpinner: GFxPhotoModeMenuSpinner
    FilterIntensitySlider: GFxPhotoModeMenuSlider
    TimeOfDaySlider: GFxPhotoModeMenuSlider
    HidePlayerSpinner: GFxPhotoModeMenuSpinner
    OverrideFocusSpinner: GFxPhotoModeMenuSpinner
    FocusDistanceSlider: GFxPhotoModeMenuSlider
    FocusRegionSlider: GFxPhotoModeMenuSlider
    FocusIntensitySlider: GFxPhotoModeMenuSlider
    ItemList: gbx_ui.GbxGFxGridScrollingList
    def OnSpinnerItemChanged(self, Item: gbx_ui.GbxGFxListItemSpinner): ...
    def OnSliderItemChanged(self, Item: gbx_ui.GbxGFxListItemNumber): ...
    def OnOptionSetButtonClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxPlayerStorageMenu(AdvancedInteractiveObjectOwnedGFxMenu):
    BackpackLabel: str
    BankLabel: str
    ItemInspectionMenuData: gbx_ui.GbxMenuData
    SortFilters: unreal.WrappedArray[OakInventoryMenuFilter]
    CurrentFilters: unreal.WrappedArray[OakInventoryMenuFilter]
    ItemTypeSortPriorities: unreal.WrappedArray[OakInventoryMenuTypePriorityInfo]
    ItemCardMovie: scaleform_ui.SwfMovie
    EchoDeviceController: EchoDeviceUIController
    EchoDeviceMenuName: str
    EchoDeviceIdleScreenName: str
    EchoDeviceDepositIdleScreenName: str
    MaxBackpackSize: int
    MaxBankSize: int
    BackpackCellBounds: core_uobject.Vector2D
    CompareBackpackCellBounds: core_uobject.Vector2D
    BackpackCellSpacing: core_uobject.Vector2D
    NumBigBagCellsFullScreen: int
    NumBigBagCellsSplitScreen: int
    NumCompareBagCellsFullScreen: int
    NumCompareBagCellsSplitScreen: int
    NumBigBagColumns: int
    MaxDelayTimeToLoadThumbnails: float
    MenuState: EGFxPlayerStorageMenuState
    BankInventory: OakInventoryListComponent
    CharacterInventory: OakInventoryListComponent
    IconManager: OakThumbnailManager
    StorageContainerClip: gbx_ui.GbxGFxObject
    CompareContainerLeftClip: gbx_ui.GbxGFxObject
    CompareContainerRightClip: gbx_ui.GbxGFxObject
    ListCapacityPanelClip: GFxPlayerStorageListCapacityObject
    ListCapacityPanelLeftClip: GFxPlayerStorageListCapacityObject
    NavClip: GFxPlayerStorageNavObject
    StorageHeader: GFxPlayerStorageHeader
    ItemCard1Clip: GFxLoadedItemCardBase
    ItemCard2Clip: GFxLoadedItemCardBase
    BigBagItemCard: GFxLoadedItemCardBase
    CompareItemCards: GFxLoadedItemCardBase
    bWaitingForUpdateFromServer: bool
    bRefreshBagsNextTick: bool
    SortIndex: int
    NumItemCardsLoading: int
    bMenuHasStarted: bool
    bNeedsIconsRefreshed: bool
    CompareSourceItem: engine.Actor
    StateBeforeCompare: EGFxPlayerStorageMenuState
    PagedBigBag: GFxPlayerStorageBag
    PagedCompareBankBag: GFxPlayerStorageBag
    PagedCompareInventoryBag: GFxPlayerStorageBag
    def OnThumbnailLoaded(self): ...
    def OnItemCardReady(self): ...
    def OnInventoryCompareItemSelected(self, Item: OakUIInventoryItemDisplayInfo, GridWidget: gbx_ui.GbxGFxObject): ...
    def OnCompareInventoryBagScrollBarUpdated(self, SliderPercentage: float): ...
    def OnCompareBankBagScrollBarUpdated(self, SliderPercentage: float): ...
    def OnCharacterItemUpdated(self, UpdatedItemHandle: gbx_inventory.InventoryListEntryHandle): ...
    def OnCharacterItemRemoved(self, UpdatedItemHandle: gbx_inventory.InventoryListEntryHandle): ...
    def OnCharacterItemAdded(self, UpdatedItemHandle: gbx_inventory.InventoryListEntryHandle): ...
    def OnBigBagScrollBarUpdated(self, SliderPercentage: float): ...
    def OnBigBagItemSelected(self, Item: OakUIInventoryItemDisplayInfo, GridWidget: gbx_ui.GbxGFxObject): ...
    def OnBigBagItemClicked(self, Item: OakUIInventoryItemDisplayInfo, GridWidget: gbx_ui.GbxGFxObject, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBankItemUpdated(self, UpdatedItemHandle: gbx_inventory.InventoryListEntryHandle): ...
    def OnBankItemRemoved(self, UpdatedItemHandle: gbx_inventory.InventoryListEntryHandle): ...
    def OnBankItemAdded(self, UpdatedItemHandle: gbx_inventory.InventoryListEntryHandle): ...
    def OnBankCompareItemSelected(self, Item: OakUIInventoryItemDisplayInfo, GridWidget: gbx_ui.GbxGFxObject): ...
    def extOnCompareIntroComplete(self): ...


class GFxPlayerStorageListCapacityObject(gbx_ui.GbxGFxObject):
    SecondListHeaderClip: gbx_ui.GbxTextField
    ListCapacityLabelClip: gbx_ui.GbxTextField
    ListTypeIconClip: gbx_ui.GbxGFxObject



class GFxPlayerStorageNavObject(gbx_ui.GbxGFxObject):
    OwnerStorageMenu: GFxPlayerStorageMenu
    PreviousButtonTextClip: gbx_ui.GbxGFxHintWidget
    NextButtonTextClip: gbx_ui.GbxGFxHintWidget
    BankButton: GFxPlayerStorageNavButton
    InventoryButton: GFxPlayerStorageNavButton
    MenuLabelClip: gbx_ui.GbxTextField



class GFxPlayerStorageNavButton(gbx_ui.GbxGFxButton):
    OwnerStorageMenu: GFxPlayerStorageMenu
    IconClip: gbx_ui.GbxGFxObject
    NavToType: EInventoryListType
    def OnNavButtonClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def GetNavFrameState(self, BUTTON: gbx_ui.GbxGFxButton, ButtonState: gbx_ui.EGbxFocusableWidgetState, ReturnValue: str) -> str: ...


class GFxPlayerStorageHeader(gbx_ui.GbxGFxObject):
    OwnerStorageMenu: GFxPlayerStorageMenu
    SortHintClip: gbx_ui.GbxGFxHintWidget
    ListHeaderLabelClip: gbx_ui.GbxTextField
    FilterTextClip: gbx_ui.GbxTextField
    ListTypeIconClip: gbx_ui.GbxGFxObject



class GFxPlayerStorageBackpackItem(GFxInventoryItemWidget): ...


class GFxPlaythroughSelectionMenu(gbx_ui.GbxGFxMenu):
    ModeEntries: unreal.WrappedArray[PlaythroughSelectionModeEntry]
    MenuTitleString: str
    ToolTipTitleString: str
    ToolTipDescriptionString: str
    AcceptString: str
    CancelString: str
    ResetProgressString: str
    ResetProgressDialogHeader: str
    ResetProgressDialogBody: str
    SelectionContainer: gbx_ui.GbxGFxObject
    ToolTipPane: gbx_ui.GbxGFxObject
    TitleText: gbx_ui.GbxTextField
    ModeDescriptionText: gbx_ui.GbxTextField
    ModeTitleText: gbx_ui.GbxTextField
    ToolTipTitleText: gbx_ui.GbxTextField
    ToolTipDescText: gbx_ui.GbxTextField
    AcceptHint: gbx_ui.GbxGFxHintWidget
    ResetProgressHint: gbx_ui.GbxGFxHintWidget
    ModesList: gbx_ui.GbxGFxGridScrollingList
    FocusedObjectBeforeLobbyWidget: unreal.UObject
    CachedPlaythroughNum: int
    def OnResetProgressChoiceMade(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnPlaythroughModeCellFocused(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnPlaythroughModeCellClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def extOnUITransitionCompleted(self): ...
    def extOnMenuHid(self): ...


class GFxPlaythroughModeCell(gbx_ui.GbxGFxListCell):
    ModeIcon: gbx_ui.GbxGFxObject
    ModeData: PlaythroughSelectionModeEntry



class GFxQuickChangeRespecTreeBranch(gbx_ui.GbxGFxObject):
    Rows: unreal.WrappedArray[QuickChangeRespecTreeBranchRow]
    ProgressText: gbx_ui.GbxTextField
    BackgroundFill: gbx_ui.GbxGFxProgressBar
    CachedBranchData: OakPlayerAbilityTreeBranchData



class GFxQuickChangeMenuBase(AdvancedInteractiveObjectOwnedGFxMenu):
    MainContent: gbx_ui.GbxGFxObject
    TopperText: gbx_ui.GbxTextField
    EmoteWheel: gbx_ui.GbxGFxObject
    MenuList: gbx_ui.GbxGFxGridScrollingList
    SelectionList: gbx_ui.GbxGFxGridScrollingList
    UnlockedCustomizationsDataArray: unreal.WrappedArray[gbx_game_system_core.GbxCustomizationData]
    LockedCustomizationsDataArray: unreal.WrappedArray[gbx_game_system_core.GbxCustomizationData]
    EchoDeviceMenuName: str
    EchoDeviceIdleScreenName: str
    EchoDeviceMenuName_EchoSkin: str
    EchoDeviceIdleScreenName_EchoSkin: str
    ColorizationDataArray: unreal.WrappedArray[core_uobject.Color]
    StandInController: StandInUIController
    EchoDeviceController: EchoDeviceUIController
    ProjectionFXWidgetName: str
    EmoteLoadoutButtons: unreal.WrappedArray[GFxBaseQuickChangeMenuItem]
    MouseCapturePanel: gbx_ui.GbxGFxMouseCapturePanel
    EquippedEmoteLabel: gbx_ui.GbxTextField
    EmoteToSlot: OakCustomizationData
    CounterWrapper: gbx_ui.GbxGFxObject
    CounterText: gbx_ui.GbxTextField
    CustomizationButtonType: gbx_ui.EGbxGFxButtonType
    MaxRotationSpeed: float
    MouseMaxRotationSpeed: float
    MaxSecondsToReachTargetSpeed: float
    PendingStandInCustomization: gbx_game_system_core.GbxCustomizationData
    def OnSelectionListSelectionChanged(self, SelectedItem: gbx_ui.GbxGFxListCell): ...
    def OnSelectionListItemClicked(self, ClickedItem: gbx_ui.GbxGFxListCell, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnQuickChangeChoiceMade(self, ChoiceType: EBaseQuickChangeChoiceType): ...
    def OnMenuListItemClicked(self, ClickedItem: gbx_ui.GbxGFxListCell, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnEmoteLoadoutButtonClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxQuickChangeMenu(GFxQuickChangeMenuBase):
    RespecAnimTime: float
    RenameSaveGameContainer: gbx_ui.GbxGFxObject
    RenameCharacterLabel: gbx_ui.GbxTextField
    RenameCharacterField: gbx_ui.GbxGFxEditableTextField
    RenamePetContainer: gbx_ui.GbxGFxObject
    RenamePetLabel: gbx_ui.GbxTextField
    RenamePetField: gbx_ui.GbxGFxEditableTextField
    ColorPicker: GFxColorPickerWidget
    RespecTreeBranches: unreal.WrappedArray[GFxQuickChangeRespecTreeBranch]
    def OnSaveGameRenamed(self, SaveGameField: gbx_ui.GbxGFxEditableTextField, NewName: str): ...
    def OnSaveGameRenameAborted(self, SaveGameField: gbx_ui.GbxGFxEditableTextField, NewName: str): ...
    def OnRespecChoiceMade(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnPetRenamed(self, SaveGameField: gbx_ui.GbxGFxEditableTextField, NewName: str): ...
    def OnPetRenameAborted(self, SaveGameField: gbx_ui.GbxGFxEditableTextField, NewName: str): ...
    def OnMenuListItemSelectionChanged(self, SelectedItem: gbx_ui.GbxGFxListCell): ...
    def OnEmoteLoadoutButtonFocused(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnColorSelected(self, NewColor: core_uobject.Color, bIsSplit: bool, Index: int, bIsDefault: bool): ...
    def OnColorFocused(self, NewColor: core_uobject.Color, bIsSplit: bool, Index: int, bIsDefault: bool): ...


class GFxBaseQuickChangeMenuItem(gbx_ui.GbxGFxListCell):
    AssociatedCustomizationData: gbx_game_system_core.GbxCustomizationData
    ItemIcon: gbx_ui.GbxGFxObject
    NewIcon: gbx_ui.GbxGFxObject
    ItemNameFieldHighlighted: gbx_ui.GbxTextField
    ItemDescriptionField: gbx_ui.GbxTextField
    ItemDescriptionFieldHighlighted: gbx_ui.GbxTextField
    EridiumCounter: gbx_ui.GbxTextField
    IconPath: str
    MenuState: EBaseQuickChangeMenuState



class GFxQuickChangeMenuStore(GFxQuickChangeMenuBase):
    EridiumResourceData: gbx_inventory.InventoryCategoryData
    DebugCustomizationsArray: unreal.WrappedArray[gbx_game_system_core.GbxCustomizationData]
    CrazyEarlCustomizationList: unreal.WrappedArray[gbx_game_system_core.GbxCustomizationData]
    PlayerEridiumCounter: GFxCurrencyCounterClip
    InsufficientFundsTextClip: gbx_ui.GbxTextField
    InsufficientFundsTextShadowClip: gbx_ui.GbxTextField
    InsufficientFundsObj: gbx_ui.GbxGFxObject
    CachedClickedItem: GFxBaseQuickChangeMenuItem
    CustomizationUnlockedWidget: GFxCustomizationUnlockedWidget
    SoldOutWidget: GFxSoldOutAnimationWidget
    ShopMgr: PlayerShopManagerComponent
    InventoryList: gbx_inventory.InventoryListComponent
    CachedOakCharacter: OakCharacter
    def OnInventoryQuantityChanged(self, UpdatedItemHandle: gbx_inventory.InventoryListEntryHandle, ItemCategory: gbx_inventory.InventoryCategoryData, Quantity: int, MaxQuantity: int): ...
    def extPlayAnimationFinished(self): ...


class GFxCustomizationUnlockedWidget(gbx_ui.GbxGFxObject): ...


class GFxSoldOutAnimationWidget(gbx_ui.GbxGFxObject): ...


class GFxEmoteWheelButton(gbx_ui.GbxGFxButton):
    RolloverLabel: str



class GFxQuickMenu(gbx_ui.GbxGFxMenu):
    GFxKEY_ButtonPattern: str
    GFxNAME_RollOverLabel: str
    OutroTime: float
    RadialTolerance: float
    WheelButtons: unreal.WrappedArray[GFxEmoteWheelButton]
    RolloverLabel: gbx_ui.GbxTextField
    CurrentTargetOtherPlayer: OakPlayerState
    CurrentFocusedButton: GFxEmoteWheelButton
    def WheelButtonUnfocused(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def WheelButtonPressed(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def WheelButtonFocused(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def extWheelDisplayed(self): ...


class GFxRaidSpectatorWidget(gbx_ui.GbxGFxHUDWidget):
    HintBar: gbx_ui.GbxHintBar
    HintBarContainer: gbx_ui.GbxGFxHintBarContainer
    TargetPlayerName: gbx_ui.GbxTextField
    def OnRaidSpectatorTargetChanged(self, NewSpectatorTargetName: str): ...
    def OnNumSpectatablePlayersChanged(self, NewNumSpectatablePlayers: int): ...
    def OnInputDeviceChanged(self): ...


class GFxReloadWidget(gbx_ui.GbxGFxHUDWidget):
    CachedWeapon: gbx_weapon.Weapon
    CachedCOVHeatComponent: WeaponCOVHeatComponent
    CachedAmmoComponent: gbx_weapon.WeaponAmmoComponent
    CachedReloadComponent: gbx_weapon.WeaponReloadComponent
    ReloadIcon: gbx_ui.GbxGFxObject
    KeybindingText: gbx_ui.GbxTextField
    ReloadTextWrapper: gbx_ui.GbxGFxObject
    ReloadText: gbx_ui.GbxTextField
    def UpdateCachedAmmoCounts(self): ...
    def UpdateCachedAmmoComponent(self): ...
    def OnWeaponChanged(self, NewWeapon: gbx_weapon.Weapon, LastWeapon: gbx_weapon.Weapon): ...
    def OnUsabilityChanged(self, NewUsableComponent: gbx_game_system_core.UsableComponent, InUsabilityInfo: gbx_game_system_core.UsabilityInfo): ...
    def OnReloadStarted(self, bAuto: bool): ...
    def OnReloadEnded(self, bCompleted: bool): ...
    def OnLadderExit(self): ...
    def OnLadderEnter(self): ...
    def OnInputDeviceChanged(self): ...
    def OnCurrentUsableChanged(self, NewUsableComponent: gbx_game_system_core.UsableComponent, InUsabilityInfo: gbx_game_system_core.UsabilityInfo, NewUsableComponentImpactPoint: core_uobject.Vector, NewUsableComponentDistanceAway: float): ...


class GFxResolutionsMenu(gbx_ui.GbxGFxMenu):
    ContentPanel: gbx_ui.GbxGFxGridScrollingList
    AlternateBkg: gbx_ui.GbxGFxObject
    ResolutionDlg: GbxGFxDialogBox
    def OnResolutionItemClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnConfirmNewResolution(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxSafeAreaCalibrationMenu(gbx_ui.GbxGFxMenu):
    SafeAreaTitle: str
    SafeAreaDescrption: str
    SafeAreaStep: float
    DefaultSafeAreaPercent: float
    TitleText: gbx_ui.GbxTextField
    DescriptionText: gbx_ui.GbxTextField
    SafeAreaBox: gbx_ui.GbxGFxObject
    Background: gbx_ui.GbxGFxObject
    HintBarWrapper: gbx_ui.GbxGFxObject



class GFxSaveGameDetails(gbx_ui.GbxGFxObject):
    SaveGameName: gbx_ui.GbxTextField
    ChapterMission: gbx_ui.GbxTextField
    CurrentMission: gbx_ui.GbxTextField
    VaultHunterMode: gbx_ui.GbxTextField
    TimePlayed: gbx_ui.GbxTextField



class GFxTextFeedback(gbx_ui.GbxGFxObject):
    InnerText: gbx_ui.GbxTextField
    InnerTextShadow: gbx_ui.GbxTextField



class GFxSDUVendorMenu(gbx_ui.GbxGFxMenu):
    ItemCardMovie: scaleform_ui.SwfMovie
    CurrencySpinnerOverrideHeight: float
    CurrencySpinnerSpinTime: float
    CurrencyWidgetPauseOnNewValueTime: float
    SDUUnlockedText: str
    BuyItemSoundFX: str
    WarningSoundFX: str
    LoadedItemCard: GFxLoadedItemCard
    PlayerInfoContainerClip: GFxSDUVendorMenuInfoContainer
    SDUCase: SDUCase
    SDUCaseProxy: SDUCaseProxy
    PurchasedItemText: GFxTextFeedback
    WarningText: GFxTextFeedback
    bMenuContentReady: bool
    bGameDataReady: bool
    bItemCardReady: bool
    def OnSelectedSDUChanged(self, CurrentSDULevel: int, SDUData: OakSDUData): ...
    def OnSDUPurchased(self, OakSDUData: OakSDUData, bIsSoldOut: bool): ...
    def OnItemCardReady(self): ...
    def OnInsufficientFunds(self, OakSDUData: OakSDUData): ...
    def OnCurrencyQuantityChanged(self, UpdatedItemHandle: gbx_inventory.InventoryListEntryHandle, ItemCategory: gbx_inventory.InventoryCategoryData, Quantity: int, MaxQuantity: int): ...


class GFxSDUVendorMenuInfoContainer(gbx_ui.GbxGFxObject):
    PlayerIconClip: gbx_ui.GbxGFxObject
    UpgradeTextClip: gbx_ui.GbxTextField
    CurrencyClip: GFxCurrencyCounterClip
    ContextualSelectClip: gbx_ui.GbxGFxObject
    OwnedTextClip: gbx_ui.GbxTextField
    AmmoTextClip: gbx_ui.GbxTextField
    OwnedAmountClip: gbx_ui.GbxTextField
    TotalAmountClip: gbx_ui.GbxTextField
    LastViewedSDUData: OakSDUData
    LastViewedSDULevel: int
    LastOwnedCurrencyQuantity: int



class GFxServerBrowserListItem(gbx_ui.GbxGFxListCell):
    HostLevel: gbx_ui.GbxTextField
    PlayThrough: gbx_ui.GbxTextField
    Mission: gbx_ui.GbxTextField
    NumOfPlayers: gbx_ui.GbxTextField
    MaxPlayers: gbx_ui.GbxTextField
    Latency: gbx_ui.GbxTextField
    NetworkStrengthIcon: gbx_ui.GbxGFxObject



class GFxServerBrowserMenu(GFxEchoNetSubMenu):
    bIsLanBrowser: bool
    GamesFoundLabel: gbx_ui.GbxTextField
    SearchResultPanel: gbx_ui.GbxGFxObject
    SearchResultPanelLabel: gbx_ui.GbxTextField
    ContentPanel: gbx_ui.GbxGFxGridScrollingList
    SortCriteriaLabel: gbx_ui.GbxTextField
    HintSortCriteria: gbx_ui.GbxTextField
    HintSortingOrder: gbx_ui.GbxTextField
    FilterHint: gbx_ui.GbxGFxHintWidget
    MenuPagerTextClip: gbx_ui.GbxTextField
    def OnSessionCellSelected(self, Item: gbx_ui.GbxGFxListCell): ...
    def OnServerSelected(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnRefreshSelected(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnErrorDialogClicked(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBackClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxShieldBar(gbx_ui.GbxGFxHUDWidget):
    CurrentShieldResourcePool: gbx_game_system_core.GameResourcePoolReference
    NAME_ProgressBarId: str
    NAME_ShieldFull: str
    NAME_ShieldLow: str
    ProgressBar: gbx_ui.GbxGFxRechargeableProgressBar
    EdgeFlash: gbx_ui.GbxGFxObject
    HitDetect: gbx_ui.GbxGFxObject
    ShieldGlowAnim: gbx_ui.GbxGFxObject
    CachedShieldValue: int
    bIsBeingDamaged: bool
    bIsDepleted: bool
    CachedHealthTypeState: EHealthTypeState
    CachedResourcePoolState: gbx_game_system_core.EGameResourcePoolState
    def OnTakeShieldDamage(self, Index: int, HealthType: gbx_game_system_core.HealthType, Damage: float, Details: SecondaryHealthDamageEventDetails): ...
    def OnShieldUnequippedOnSlot(self): ...
    def OnShieldsVeryLow(self, HealthType: gbx_game_system_core.HealthType, Index: int): ...
    def OnShieldsRegenerating(self): ...
    def OnShieldsNormal(self, HealthType: gbx_game_system_core.HealthType, Index: int): ...
    def OnShieldsLow(self, HealthType: gbx_game_system_core.HealthType, Index: int): ...
    def OnShieldsFull(self): ...
    def OnShieldsDepleted(self, Details: HealthTypeDepletedDetails): ...
    def OnShieldMinMaxValueUpdate(self, ResourcePoolReference: gbx_game_system_core.GameResourcePoolReference, MinValue: float, MaxValue: float): ...
    def OnShieldEquippedOnSlot(self): ...
    def OnShieldCurrentValueUpdate(self, ResourcePoolReference: gbx_game_system_core.GameResourcePoolReference, CurrentValue: float): ...


class GFxSHiFTMenu(GFxEchoNetSubMenu):
    TargetPC: gbx_game_system_core.GbxPlayerController
    def HandleEULAResponse(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxSHiFTMenuPage(gbx_ui.GbxGFxObject):

    def OnEditableTextFocused(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnEditableTextClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxSHiFTMenuCodeRedemptionPage(GFxSHiFTMenuPage):
    ErrorTextField: gbx_ui.GbxTextField
    AccountNameTextField: gbx_ui.GbxTextField
    PageDescription: gbx_ui.GbxTextField
    CodeSegments: unreal.WrappedArray[GFxSHiFTMenuEditableTextField]
    CheckVerificationClip: gbx_ui.GbxGFxObject
    DiamondKeyTextField: gbx_ui.GbxTextField
    GoldenkeyTextField: gbx_ui.GbxTextField
    CodeRedemptionButton: gbx_ui.GbxGFxButton
    RewardHistoryButton: gbx_ui.GbxGFxButton
    SubmitButton: gbx_ui.GbxGFxButton
    def OnClickSubmit(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnClickRewardHistory(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnButtonFocused(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxSHiFTMenuCreateAccountPage(GFxSHiFTMenuPage):
    ConfirmAgeButton: gbx_ui.GbxGFxButton
    EmailTextField: GFxSHiFTMenuEditableTextField
    PasswordTextField: GFxSHiFTMenuEditableTextField
    ConfirmPasswordTextField: GFxSHiFTMenuEditableTextField
    SubmitButton: gbx_ui.GbxGFxButton
    def OnClickSubmit(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnButtonFocused(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnAgeConfirmedClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxSHiFTMenuNoCrossplay(GFxEchoNetSubMenu):
    ActivePage: GFxSHiFTMenuPage
    NotSignedInPage: GFxSHiFTMenuNotSignedInPage
    ResetPasswordPageWidget: GFxSHiFTMenuResetPasswordPage
    SignInAccountPage: GFxSHiFTMenuSignInAccountPage
    CreateAccountPageWidget: GFxSHiFTMenuCreateAccountPage
    RewardHistoryPageWidget: GFxSHiFTMenuRewardHistoryPage
    CodeRedemptionPageWidget: GFxSHiFTMenuCodeRedemptionPage
    OfflinePageWidget: GFxSHiFTMenuOfflinePage
    TargetPlayerName: gbx_ui.GbxTextField
    TargetPC: gbx_game_system_core.GbxPlayerController
    PageDescriptionText: str
    EmailDescriptionText: str
    AgeDescriptionText: str
    PasswordDescriptionText: str
    ConfirmPasswordDescriptionText: str
    PasswordInvalidText: str
    AgeInvalidText: str
    EmailInvalidText: str
    ConfirmPasswordInvalidText: str
    ResetPasswordDescription: str
    PasswordResetResponseText: str
    CodeRedemptionPageDescriptionText: str
    CodeRedemptionErrorText: str
    NoRewardText: str
    WebSiteLinkText: str
    WebSiteLinkFormatText: str
    OfflineMessageText: str
    ErrorMessageDialogBox: gbx_ui.GbxMenuData
    ErrorTextColor: core_uobject.LinearColor
    EditableTextClickedAudioEventName: str
    EditableTextSubmittedAudioEventName: str
    EditableTextEditAbortedAudioEventName: str
    EditableTextInputAudioEventName: str
    def HandleEULAResponse(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def extFinishedHide(self): ...


class GFxSHiFTMenuNotSignedInPage(GFxSHiFTMenuPage):
    SignInButton: gbx_ui.GbxGFxButton
    CreateAccountButton: gbx_ui.GbxGFxButton
    DescriptionTextFieldClip: gbx_ui.GbxTextField
    DescriptionTextFieldScrollBarClip: gbx_ui.GbxGFxSlider
    DescriptionTextFieldGridAreaClip: gbx_ui.GbxGFxObject
    def OnClickSignIn(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnClickCreateAccount(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxSHiFTMenuOfflinePage(GFxSHiFTMenuPage):
    MainContainer: gbx_ui.GbxGFxObject
    RetryButton: gbx_ui.GbxGFxButton
    def OnClickRetry(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxSHiFTMenuEditableTextField(gbx_ui.GbxGFxEditableTextField):
    HeaderTextField: gbx_ui.GbxTextField
    DescriptionTextField: gbx_ui.GbxTextField



class GFxSHiFTMenuResetPasswordPage(GFxSHiFTMenuPage):
    EmailTextField: GFxSHiFTMenuEditableTextField
    ErrorTextBox: gbx_ui.GbxTextField
    SubmitButton: gbx_ui.GbxGFxButton
    def OnSubmitFocused(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnClickSubmit(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxSHiftMenuRewardHistoryPageItem(gbx_ui.GbxGFxListCell): ...


class GFxSHiFTMenuRewardHistoryPage(GFxSHiFTMenuPage):
    NoRewardTextField: gbx_ui.GbxTextField
    MainRewardList: gbx_ui.GbxGFxGridScrollingList
    CodeRedemptionMenuButton: gbx_ui.GbxGFxButton
    RewardHistoryMenuButton: gbx_ui.GbxGFxButton
    AccountNameTextField: gbx_ui.GbxTextField
    DiamondKeyTextField: gbx_ui.GbxTextField
    GoldenkeyTextField: gbx_ui.GbxTextField
    EmptyRewardScaleformClass: str
    NonEmptyRewardScaleformClass: str
    NonEmptyRewardScaleformClassSplit: str
    ListItemNativeClass: unreal.UClass
    def OnClickCodeRedemption(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxSHiFTMenuSignInAccountPage(GFxSHiFTMenuPage):
    ErrorTextBox: gbx_ui.GbxTextField
    DescriptionStep1: gbx_ui.GbxTextField
    DescriptionStep2: gbx_ui.GbxTextField
    SHiFTLinkCode: gbx_ui.GbxTextField
    SHiFTLinkCodeTimer: gbx_ui.GbxTextField
    SubmitButton: gbx_ui.GbxGFxButton
    def OnSubmitFocused(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnClickSubmit(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnClickCancel(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxSirenSkillScreenTree(GFxSkillScreenTree):
    ComboLabel: gbx_ui.GbxTextField
    PassivesText: gbx_ui.GbxTextField
    SkillSlot: GFxSkillScreenLoadoutSlot
    ModSlot: GFxSkillScreenLoadoutSlot
    ElementalEffectSlot: GFxSkillScreenLoadoutSlot
    SkillSlotDescription: str
    AugmentSlotDescription: str
    ShockDescription: str
    ShockName: str
    ShockFrameName: str



class GFxSkillBar(gbx_ui.GbxGFxObject):
    Wrapper: gbx_ui.GbxGFxObject
    SkillDurationBars: unreal.WrappedArray[gbx_ui.GbxGFxProgressBar]
    ChargeIconWrapper: gbx_ui.GbxGFxObject
    ChargesRemainingIcons: unreal.WrappedArray[gbx_ui.GbxGFxObject]
    SecondaryFill: gbx_ui.GbxGFxObject
    CachedAbility: OakActionAbility



class GFxSkillDurationBars(gbx_ui.GbxGFxHUDWidget):
    SkillBarWrapper: gbx_ui.GbxGFxObject
    LeftSkillBar: GFxSkillBar
    RightSkillBar: GFxSkillBar
    def OnActionSkillCoolingDown(self, InActionAbility: OakActionAbility): ...
    def OnActionAbilityAugmentChanged(self, ActionAbilityClass: unreal.UClass, SlotData: OakActionAbilityAugmentSlotData): ...
    def OnAbilitySlotChanged(self, SlotData: OakPlayerAbilitySlotData): ...


class GFxSkillScreenBranch(gbx_ui.GbxGFxButton):
    LayoutBranch: gbx_ui.GbxGFxObject
    SkillRowList: GFxSkillScreenRowList
    PlayerAbilityTree: OakPlayerAbilityTree
    BranchData: OakPlayerAbilityTreeBranchData
    BackgroundFill: gbx_ui.GbxGFxProgressBar
    PreviousRow: GFxSkillScreenRow
    def OnTreeItemUnfocused(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnTreeItemPressed(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnTreeItemFocused(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnItemUsableStateChanged(self, UpdatedItem: GFxSkillScreenItem): ...
    def OnItemUnlockedAudioRequest(self): ...
    def OnItemSlotRequest(self, ItemToSlot: GFxSkillScreenItem, SlotIndex: int): ...
    def OnItemIncreasedAudioRequest(self, AudioIndex: int): ...
    def OnAbilityTierChanged(self, TierData: OakPlayerAbilityTreeTierData): ...
    def OnAbilityPointsChanged(self, RemainingAbilityPoints: int): ...


class GFxSkillScreenItem(gbx_ui.GbxGFxButton):
    ItemData: OakPlayerAbilityTreeItemData
    AbilityTree: OakPlayerAbilityTree
    OwnerRowList: GFxSkillScreenRowList
    CurrentTextColor: core_uobject.LinearColor
    def GetButtonState(self, BUTTON: gbx_ui.GbxGFxButton, State: gbx_ui.EGbxFocusableWidgetState, ReturnValue: str) -> str: ...


class GFxSkillScreenLoadoutChoiceItem(gbx_ui.GbxGFxListCell):
    IconGray: gbx_ui.GbxGFxObject
    IconColored: gbx_ui.GbxGFxObject
    IconSelected: gbx_ui.GbxGFxObject
    BackgroundGray: gbx_ui.GbxGFxObject
    BackgroundColored: gbx_ui.GbxGFxObject
    BackgroundSelected: gbx_ui.GbxGFxObject
    ChoiceSelectionName: str
    ChoiceSelectedName: str
    ChoiceDescription: str
    EquipState: EGFxSkillScreenLoadoutChoiceEquipState
    ItemData: OakPlayerAbilityTreeItemData
    def GetButtonState(self, BUTTON: gbx_ui.GbxGFxButton, State: gbx_ui.EGbxFocusableWidgetState, ReturnValue: str) -> str: ...


class GFxSkillScreenLoadoutSlot(gbx_ui.GbxGFxButton):
    LockedOverlay: gbx_ui.GbxGFxObject
    ReceiveHighlight: gbx_ui.GbxGFxObject
    SlotIndicator: gbx_ui.GbxGFxObject
    ReceiveHighlightState: ESkillScreenReceiveHighlightState
    AssociatedActiveAbility: OakActionAbility
    EmptySlotInfo: GFxSkillScreenSkillInfo
    SwapSlot: GFxSkillScreenLoadoutSlot
    IronCubSwapSlot: GFxSkillScreenLoadoutSlot
    AugmentSlotData: OakActionAbilityAugmentSlotData
    AbilitySlotData: OakPlayerAbilitySlotData
    CharacterAugmentSlotData: PlayerCharacterComponentSlotData
    def OnAssociatedResourcePoolUpdated(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference, NewValue: float): ...
    def OnActionSkillCoolingDown(self, InActionAbility: OakActionAbility): ...
    def OnActionSkillActivated(self, InActionAbility: OakActionAbility): ...


class GFxSkillScreenMenuData(GFxStatusMenuSubmenuData): ...


class GFxSkillScreenRow(gbx_ui.GbxGFxListCell):
    DisplayedSkillSlots: GFxSkillScreenItem
    TierData: OakPlayerAbilityTreeTierData



class GFxSkillScreenRowList(gbx_ui.GbxGFxGridScrollingListPaged): ...


class GFxSkillScreenDragObject(gbx_ui.GbxGFxObject):
    SkillIconArt: gbx_ui.GbxGFxObject



class GFxStatusMenuData(gbx_ui.GbxGFxMenuSwitcherMenuData):
    FirstMenuToLookAt: str
    FirstMenuSelectionObject: unreal.UObject



class GFxStatusMenu(gbx_ui.GbxGFxMenuSwitcher):
    SubmenuKeymapping: unreal.WrappedArray[GFxStatusMenuSubmenuKeyMap]
    StatusMenuInputAction: str
    EchoDeviceController: EchoDeviceUIController
    StandInController: StandInUIController
    BackgroundParticleEffectWipeSound: str
    BackgroundParticleEffectCloseSound: str
    OakGameState: OakGameState
    StatusMenuNavBar: GFxStatusMenuNavBar
    ZoneMapViewer: ZoneMapViewer
    bBackgroundParticleStateOn: bool
    NavBarInfos: unreal.WrappedArray[GFxStatusMenuNavBarInfo]
    def OnPlayTransitionAnimation(self, Reason: EGFxStatusMenuTransitionReason): ...
    def OnPlayerWeaponChanged(self, NewWeapon: gbx_weapon.Weapon, LastWeapon: gbx_weapon.Weapon): ...
    def OnNumPlayersChanged(self, NewNumPlayers: int): ...


class GFxStatusMenuNavBar(gbx_ui.GbxGFxObject):
    NavListClip: gbx_ui.GbxGFxGridScrollingList
    PrevButtonHintClip: gbx_ui.GbxGFxHintWidget
    NextButtonHintClip: gbx_ui.GbxGFxHintWidget
    OwnerSubmenu: GFxStatusMenuSubmenu
    def OnNavCellClicked(self, ClickedItem: gbx_ui.GbxGFxListCell, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxStatusMenuNavBarButton(gbx_ui.GbxGFxListCell):
    ButtonInfo: GFxStatusMenuNavBarInfo



class GFxStoreMenu(gbx_ui.GbxGFxMenu):
    SampleTextureUrls: unreal.WrappedArray[str]
    ItemBrowserWidgetClip: GFxStoreMenuItemBrowserWidget
    DetailsWidgetClip: GFxStoreMenuDetailsWidget
    AllDLCDatas: unreal.WrappedArray[GFxStoreMenuDLCItem]
    Pages: unreal.WrappedArray[GFxStoreMenuPage]
    PreviewImageManager: OakThumbnailManager
    bPreviewImagesNeedRefresh: bool
    def OnPreviewImageLoaded(self): ...
    def OnClickStoreButton(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxStoreMenuWidget(gbx_ui.GbxGFxObject):
    bIsShowing: bool



class GFxStoreMenuNavBarTabButton(gbx_ui.GbxGFxButton):
    IconClip: gbx_ui.GbxGFxObject
    TabType: EGFxStoreMenuTabType



class GFxStoreMenuItemBrowserNavBarWidget(gbx_ui.GbxGFxObject):
    TabButtonClips: unreal.WrappedArray[GFxStoreMenuNavBarTabButton]
    PrevHintClip: gbx_ui.GbxGFxHintWidget
    NextHintClip: gbx_ui.GbxGFxHintWidget
    def OnTabButtonClicked(self, PressedButton: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxStoreMenuItemBrowserPageWidget(gbx_ui.GbxGFxObject):
    PageTextClip: gbx_ui.GbxTextField
    PrevHintClip: gbx_ui.GbxGFxHintWidget
    NextHintClip: gbx_ui.GbxGFxHintWidget



class GFxStoreMenuBrowserItemWidget(gbx_ui.GbxGFxButton):
    DiscountTextClip: gbx_ui.GbxTextField
    ItemPictureClip: gbx_ui.GbxGFxObject
    ItemTypeTextClip: gbx_ui.GbxTextField
    PreviewImageUrl: str
    bIsFeaturedType: bool
    CurrentData: GFxStoreMenuDLCItem



class GFxStoreMenuBrowserWidget(gbx_ui.GbxGFxButton):
    ButtonClips: unreal.WrappedArray[GFxStoreMenuBrowserItemWidget]



class GFxStoreMenuItemBrowserWidget(GFxStoreMenuWidget):
    ContentClip: gbx_ui.GbxGFxObject
    TitleTextClip: gbx_ui.GbxTextField
    NavBarClip: GFxStoreMenuItemBrowserNavBarWidget
    SubTitleTextClip: gbx_ui.GbxTextField
    ItemBrowserListClip: GFxStoreMenuBrowserWidget
    PageNavBarClip: GFxStoreMenuItemBrowserPageWidget
    CurrentTab: EGFxStoreMenuTabType
    CurrentPageIndex: int



class GFxStoreMenuDetailsWidget(GFxStoreMenuWidget):
    ContentClip: gbx_ui.GbxGFxObject
    DetailTitleClip: gbx_ui.GbxTextField
    DetailTypeClip: gbx_ui.GbxTextField
    DetailDescClip: gbx_ui.GbxTextField
    InstalledClip: gbx_ui.GbxGFxObject
    InstalledTextClip: gbx_ui.GbxTextField
    PurchasedClip: gbx_ui.GbxGFxObject
    PurchasedTextClip: gbx_ui.GbxTextField
    HintButtonClip: gbx_ui.GbxGFxHintWidget



class GFxStoreMenuData(gbx_ui.GbxGFxMenuData): ...


class GFxSubtitlesWidget(gbx_ui.GbxGFxHUDWidget):
    ClosedCaptionLifetime: float
    MaxTextScalingForLargestBackground: float
    SubtitleBackgroundSizeMapping: unreal.WrappedArray[float]
    SubtitleField: gbx_ui.GbxTextField
    SubtitleBackground: gbx_ui.GbxGFxObject
    CurrentSubtitleLayoutType: ESubtitleLayoutType
    ClosedCaptioningContainer: gbx_ui.GbxGFxObject
    ClosedCaptioningLines: unreal.WrappedArray[ClosedCaptionEntry]
    SubtitleLines: unreal.WrappedArray[SubtitleLine]
    CurrentSubtitleID: int
    bStopAfterCurrentSubtitle: bool
    bSubtitleChangePending: bool
    SubtitleLifetime: float
    CachedSubtitle: str



class GFxTargetedNameplate(gbx_ui.GbxGFxHUDWidget):
    Nameplate: GFxNameplate
    RangeFadeCurve: engine.CurveFloat
    FadeStartDistance: float
    FadeEndDistance: float
    LingerDuration: float



class GFxTrophyCaseMenu(gbx_ui.GbxGFxMenu):
    TrophyCase: TrophyCase
    TrophyCaseProxy: TrophyCaseProxy
    CurrentViewingState: ETrophyCaseViewingState
    CachedSetName: str
    CachedSetPercent: int
    bMenuContentReady: bool
    bGameDataReady: bool
    LargeNavClip: GFxTrophyCaseMenuLargeNavObject
    SmallNavClip: GFxTrophyCaseMenuSmallNavObject
    TrophyPanel: GFxTrophyCaseMenuTrophyPanel
    def OnTrophyCaseViewingStateChanged(self, NewViewingState: ETrophyCaseViewingState): ...
    def OnTrophyCaseCurrentTrophySetChanged(self, TrophySetName: str, TrophySetDescription: str, NumComplete: int, NumTotal: int): ...
    def OnTrophyCaseCurrentTrophyGroupChanged(self, TrophyGroupName: str, TrophyGroupDescription: str, NumComplete: int, NumTotal: int): ...
    def OnTrophyCaseCurrentTrophyChanged(self, TrophyName: str, TrophyDescription: str, bLocked: bool, CompletedProgressLevel: int, MaxProgressLevel: int, AssociatedChallenge: gbx_game_system_core.Challenge): ...


class GFxTrophyCaseMenuLargeNavObject(gbx_ui.GbxGFxObject):
    CategoryNameTextClip: gbx_ui.GbxTextField
    CompletionTextClip: gbx_ui.GbxTextField
    NavButtonLeftClip: gbx_ui.GbxGFxButton
    NavButtonRightClip: gbx_ui.GbxGFxButton
    bShowing: bool



class GFxTrophyCaseMenuSmallNavObject(gbx_ui.GbxGFxObject):
    CategoryNameTextClip: gbx_ui.GbxTextField
    CompletionTextClip: gbx_ui.GbxTextField
    PromptHintWrapperRBClip: gbx_ui.GbxGFxHintWidget
    PromptHintWrapperLBClip: gbx_ui.GbxGFxHintWidget
    bShowing: bool



class GFxTrophyCaseMenuTrophyPanel(gbx_ui.GbxGFxObject):
    TrophyPanelClip: gbx_ui.GbxGFxObject
    EnemyNameTextClip: gbx_ui.GbxTextField
    TrophyColorTextClip: gbx_ui.GbxTextField
    NextRankTextClip: gbx_ui.GbxTextField
    KillsLabelTextClip: gbx_ui.GbxTextField
    KillsCountTextClip: gbx_ui.GbxTextField
    PanelNavClip: gbx_ui.GbxGFxGridScrollingList
    PanelNavHintClip: gbx_ui.GbxGFxHintWidget
    EnemyDescriptionTextClip: gbx_ui.GbxTextField
    EnemyDescriptionTextMaskClip: gbx_ui.GbxGFxObject
    EnemyDescriptionScrollbarClip: gbx_ui.GbxGFxSlider
    ProgressBarClip: gbx_ui.GbxGFxProgressBar
    bShowing: bool



class GFxTutorialMessageWidget(gbx_ui.GbxGFxHUDWidget):
    TutorialWidgetContainer: gbx_ui.GbxGFxObject
    HeaderText: gbx_ui.GbxTextField
    BodyText: gbx_ui.GbxTextField
    TutorialMessageQueue: unreal.WrappedArray[TutorialMessageDataAsset]
    CurrentTutorialMessage: TutorialMessageDataAsset
    TestMessage: TutorialMessageDataAsset
    def OnInputDeviceChanged(self): ...
    def extOnRolloutComplete(self): ...


class TutorialMessageDataAsset(gbx_runtime.GbxDataAsset):
    Header: str
    Body: str
    Duration: float



class GFxUISpinnerWidget(gbx_ui.GbxGFxObject):
    TargetValue: int
    AnimationWrapper: gbx_ui.GbxGFxObject
    TotalDigitsDisplayed: int



class GFxVaultCardMenu(GFxStatusMenuSubmenu):
    RewardsClip: gbx_ui.GbxGFxObject
    RewardsRowClip: gbx_ui.GbxGFxObject
    RewardHeaderIconClip: gbx_ui.GbxGFxObject
    FloatingPanelKeyIconClip: gbx_ui.GbxGFxObject
    ChallengePanelKeyIconClip: gbx_ui.GbxGFxObject
    FloatingPanelClip: GFxVaultCardFloatingPanel
    ChallengePanelClip: GFxVaultCardChallengePanel
    NavBarList: gbx_ui.GbxGFxGridScrollingList
    NavBarHintPrev: gbx_ui.GbxGFxHintWidget
    NavBarHintNext: gbx_ui.GbxGFxHintWidget
    VaultCardTitleTextField: gbx_ui.GbxTextField
    VaultCardChestContainer: OakUIActorContainer
    VaultCardLootableChest: LootableObject
    ThumbnailManager: OakThumbnailManager
    ItemCardBase: GFxLoadedItemCardBase
    ItemCardReward: GFxLoadedItemCardBase
    RewardTypeClip: gbx_ui.GbxGFxObject
    ChestRewardTitleText: str
    ChestRewardDescText: str
    OriginalWeaponSkin: WeaponSkinPartData
    PurchaseRewardSoundFX: str
    InsufficientFundsSoundFX: str
    OpenChestSoundFX: str
    RedeemRewardSoundFX: str
    StartInspectItemSoundFX: str
    StopInspectItemSoundFX: str
    VaultCardChestContainerClass: unreal.UClass
    MysteryGearClass: unreal.UClass
    OperativeStandInClass: unreal.UClass
    GunnerStandInClass: unreal.UClass
    BeastmasterStandInClass: unreal.UClass
    SirenStandInClass: unreal.UClass
    ItemCardMovie: scaleform_ui.SwfMovie
    ItemInspectionMenuData: gbx_ui.GbxMenuData
    NumberOfVisibleRewardRows: int
    NumberOfVisibleRewardRows_Split: int
    RewardRowSize: core_uobject.Vector2D
    def SetAdjancenyInfoForCells(self): ...
    def OnStandInActorCreated(self, InStandInActor: engine.Actor): ...
    def OnRewardsListScrollBarUpdated(self, SliderPercentage: float): ...
    def OnRewardItemCardReady(self): ...
    def OnPlayerOpenChest(self, InLootable: LootableObject): ...
    def OnNavCellSelectionChanged(self, ListItem: gbx_ui.GbxGFxListCell): ...
    def OnItemCardReady(self): ...
    def OnChestOpeningAnimationComplete(self, InLootable: LootableObject): ...
    def extOpenChestAnimationComplete(self): ...


class GFxVaultCardRewardCell(gbx_ui.GbxGFxButton):
    UnlockAnimClip: gbx_ui.GbxGFxObject



class GFxVaultCardRewardsRow(gbx_ui.GbxGFxObject):
    RewardCells: unreal.WrappedArray[GFxVaultCardRewardCell]



class GFxVaultCardFloatingPanel(gbx_ui.GbxGFxObject):
    HintClip: gbx_ui.GbxGFxHintWidget



class GFxVaultCardChallengePanel(gbx_ui.GbxGFxObject):
    ChallengeListClip: gbx_ui.GbxGFxGridScrollingList



class GFxVaultCardChallengeCell(gbx_ui.GbxGFxListCell): ...


class GFxVaultCardMenuData(GFxStatusMenuSubmenuData): ...


class GFxVaultCardRankUpWidget(GFxDisplayedNotificationWidget): ...


class GFxVaultHunterProfileCard(gbx_ui.GbxGFxObject):
    PictureClip: gbx_ui.GbxGFxObject
    PlayerNameClip: gbx_ui.GbxTextField
    PlayerStatusClip: GFxVaultHunterProfileCardPlayerStatusWidget
    SkillClip: GFxVaultHunterProfileCardSkillsWidget
    InventoryClip: GFxVaultHunterProfileCardInventoryWidget
    StatsClip: GFxVaultHunterProfileCardStatsWidget
    MissionNameTextClip: gbx_ui.GbxTextField
    CardMode: EGFxVaultHunterProfileCardMode
    CurrentView: EGFxVaultHunterProfileCardView
    SelfOakPC: OakPlayerController
    bIsOff: bool



class GFxVaultHunterProfileCardChangeStatusCell(gbx_ui.GbxGFxListCell):
    IconClip: gbx_ui.GbxGFxObject



class GFxVaultHunterProfileCardChangeStatusList(gbx_ui.GbxGFxGridScrollingList):
    WrapperClip: gbx_ui.GbxGFxObject



class GFxVaultHunterProfileCardPlayerStatusWidget(gbx_ui.GbxGFxObject):
    StatusWrapperClip: gbx_ui.GbxGFxObject
    LookingForHelpTextClip: gbx_ui.GbxTextField
    StatusTextClip: gbx_ui.GbxTextField
    StatusIconClip: gbx_ui.GbxGFxObject
    ChangeStatusWrapperClip: gbx_ui.GbxGFxObject
    ChangeHunterStatusClip: GFxVaultHunterProfileCardChangeStatusList
    ToggleHelpHintClip: gbx_ui.GbxGFxHintWidget
    UpdateStatusHintClip: gbx_ui.GbxGFxHintWidget
    bCurrentLookingForHelp: bool
    bCurrentHasStatus: bool
    OwningProfileCard: GFxVaultHunterProfileCard
    def OnActivityCellClicked(self, ClickedItem: gbx_ui.GbxGFxListCell, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class GFxVaultHunterProfileCardSkillsWidget(gbx_ui.GbxGFxObject):
    ClassIconClip: gbx_ui.GbxGFxObject
    GreenProgressBarClip: gbx_ui.GbxGFxProgressBar
    GreenProgressBarIconClip: gbx_ui.GbxGFxObject
    GreenPercentLabelClip: gbx_ui.GbxTextField
    BlueProgressBarClip: gbx_ui.GbxGFxProgressBar
    BlueProgressBarIconClip: gbx_ui.GbxGFxObject
    BluePercentLabelClip: gbx_ui.GbxTextField
    RedProgressBarClip: gbx_ui.GbxGFxProgressBar
    RedProgressBarIconClip: gbx_ui.GbxGFxObject
    RedPercentLabelClip: gbx_ui.GbxTextField
    PurpleProgressBarClip: gbx_ui.GbxGFxProgressBar
    PurpleProgressBarIconClip: gbx_ui.GbxGFxObject
    PurplePercentLabelClip: gbx_ui.GbxTextField



class GFxVaultHunterProfileCardInventoryItemWidget(gbx_ui.GbxGFxObject):
    RarityClip: gbx_ui.GbxGFxObject
    WeaponTypeClip: gbx_ui.GbxGFxObject
    IconGearClip: gbx_ui.GbxGFxObject



class GFxVaultHunterProfileCardInventoryWidget(gbx_ui.GbxGFxObject):
    WeaponClips: GFxVaultHunterProfileCardInventoryItemWidget
    GrenadeClip: GFxVaultHunterProfileCardInventoryItemWidget
    ShieldClip: GFxVaultHunterProfileCardInventoryItemWidget
    ClassModClip: GFxVaultHunterProfileCardInventoryItemWidget
    RelicClip: GFxVaultHunterProfileCardInventoryItemWidget



class GFxVaultHunterProfileCardStatItemWidget(gbx_ui.GbxGFxProgressBar):
    ListTextClip: gbx_ui.GbxTextField
    PercentageTextClip: gbx_ui.GbxTextField



class GFxVaultHunterProfileCardStatsWidget(gbx_ui.GbxGFxObject):
    StatBarContainerClip: gbx_ui.GbxGFxObject
    StatBarsScrollerClip: gbx_ui.GbxGFxSlider
    StatBarsGridAreaClip: gbx_ui.GbxGFxObject
    StatClips: unreal.WrappedArray[GFxVaultHunterProfileCardStatItemWidget]
    TimePlayedTextClip: gbx_ui.GbxTextField
    StatBarsInitialPosition: core_uobject.Vector2D
    StatBarWindowHeight: float
    StatBarContentHeight: float
    def OnStatBarScrollerUpdated(self, SliderPercent: float): ...


class GFxVehicleBoostbar(gbx_ui.GbxGFxHUDWidget):
    BoostMeter: gbx_ui.GbxGFxProgressBar
    BoostText: gbx_ui.GbxTextField
    FillDividersClip: gbx_ui.GbxGFxObject



class GFxVehiclePartsWidget(gbx_ui.GbxGFxHUDWidget):
    InnerClip: gbx_ui.GbxGFxObject
    NotificationText: gbx_ui.GbxTextField
    NewPartCountText: gbx_ui.GbxTextField
    CondensedPartIcon: gbx_ui.GbxGFxObject
    PartIcons: unreal.WrappedArray[gbx_ui.GbxGFxObject]
    MaxNumPartIcons: int
    def RefreshWidget(self): ...
    def extBeginCondensed(self): ...


class GFxVehiclePartUnlockedWidget(gbx_ui.GbxGFxHUDWidget):
    NumPartIcons: int
    ContentClip: gbx_ui.GbxGFxObject
    HeaderTextClip: gbx_ui.GbxTextField
    HeaderTextShadowClip: gbx_ui.GbxTextField
    UnlockedTextClip: gbx_ui.GbxTextField
    PartIconsClip: gbx_ui.GbxGFxObject
    IconClips: unreal.WrappedArray[gbx_ui.GbxGFxObject]
    CurrentIconCount: int
    RevealState: UGFxVehiclePartUnlockedWidgetState
    def extOnPlayComplete(self): ...


class GFxVehicleSpeedometer(gbx_ui.GbxGFxHUDWidget):
    SpeedMeter: gbx_ui.GbxGFxProgressBar
    SpeedText: gbx_ui.GbxTextField
    MPHorKPHText: gbx_ui.GbxTextField



class GFxVehicleWeaponContainer(gbx_ui.GbxGFxHUDWidget):
    LeftWeaponWidget: GFxVehicleWeaponWidget
    RightWeaponWidget: GFxVehicleWeaponWidget
    LeftWeaponWidgetID: str
    RightWeaponWidgetID: str



class GFxVehicleWeaponWidget(gbx_ui.GbxGFxObject):
    WeaponType: EGFxVehicleWeaponType
    CachedAmmoComponent: gbx_weapon.WeaponAmmoComponent
    CachedHeatComponent: gbx_weapon.WeaponHeatComponent
    CachedChargeComponent: gbx_weapon.WeaponChargeComponent
    ActiveWeaponsComponent: ActiveWeaponsComponent
    VisibilityClip: gbx_ui.GbxGFxObject
    ResourceIconContainerClip: gbx_ui.GbxGFxObject
    DriverWeaponsClip: gbx_ui.GbxGFxObject
    WeaponIcon: gbx_ui.GbxGFxObject
    DynamicWeaponIcon: gbx_ui.GbxGFxObject
    WeaponIconFrames: gbx_ui.GbxGFxObject
    CurrentlyLoadedWeaponIcons: scaleform_ui.SwfMovie
    DesiredWeaponIconFrame: str
    AmmoProgressBars: unreal.WrappedArray[gbx_ui.GbxGFxProgressBar]
    CachedWeaponSlot: int
    VisibilityClipID: str
    ResourceIconContainerClipID: str
    DriverWeaponsID: str
    ResourceIconClipID: str
    HeatMeterID: str
    ChargeMeterID: str
    MagazineMeterID: str
    WeaponIconID: str
    ResourceWeaponFrameName: str
    DisabledBar: str
    def UpdateWeaponDisplay(self): ...
    def UpdateAmmoAmounts(self): ...
    def OnWeaponChanged(self, NewWeapon: gbx_weapon.Weapon, LastWeapon: gbx_weapon.Weapon): ...


class GFxVendingMachineBackpackItemWidget(GFxInventoryItemWidget): ...


class GFxVendingMachineMenu(AdvancedInteractiveObjectOwnedGFxMenu):
    BackpackWidgetConfig: GFxBackpackWidgetConfig
    BackpackVisibleCells: int
    BackpackCellSize: core_uobject.Vector2D
    BackpackCellSpacing: core_uobject.Vector2D
    ItemCardOffset: core_uobject.Vector2D
    BackpackItemCardOffset: core_uobject.Vector2D
    BuyCameraState: str
    SellCameraState: str
    CompareFromMachineCameraState: str
    CompareFromInventoryCameraState: str
    BuyEchoOrientation: str
    SellEchoOrientation: str
    CompareFromMachineEchoOrientation: str
    CompareFromInventoryEchoOrientation: str
    DefaultProjectionFXWidgetName: str
    ItemCardScale: float
    ItemCardCurrencyWidgetTime: float
    ItemCardScaleSplitScreen: float
    ItemCardClass: unreal.UClass
    ItemCardSwf: scaleform_ui.SwfMovie
    ItemInspectionMenuData: gbx_ui.GbxMenuData
    Radius: float
    IconManager: OakThumbnailManager
    GFxItemInfoDisplayComponent: GFxBillboardComponent
    RadiusDebug: float
    ShouldUseVec: unreal.WrappedArray[bool]
    EchoDeviceController: EchoDeviceUIController
    ShelfScorecardOffsets: unreal.WrappedArray[core_uobject.Vector]
    AmountToModify: float
    NavigationTabOrder: VendingTabOrder
    CounterCategories: unreal.WrappedArray[GFxCurrencyCounterCategoryData]
    AddedToInventorySoundFX: str
    RemovedFromInventorySoundFX: str
    WarningSoundFX: str
    OpenBackpackFX: str
    BuyItemSoundFX: str
    SellItemSoundFX: str
    HealthFilledFX: str
    AmmoFilledFX: str
    IODDisplayedFX: str
    SoldAllJunkFX: str
    IdToSockets: unreal.WrappedArray[VendingIDToSocketNameMap]
    ObjectToSocketLocations: unreal.WrappedArray[VendingObjectToSocketLocationMap]
    CurrentSocketMap: int
    CurrencyWidgetSpinnerHeightOverride: float
    CurrencyWidgetCostSpinTime: float
    CurrencyWidgetPauseOnNewValueTime: float
    MaxThumbnails: int
    bQueueRefreshThumbnails: bool
    bBackpackHidden: bool
    CurrentInventory: unreal.WrappedArray[gbx_inventory.InventoryListEntryHandle]
    CurrentInventoryMaxSize: int
    bNeedsBackpackUpdateOnTick: bool
    bSetIndexToZeroForBackpackRefresh: bool
    CurrentBackpackState: EGFxVendingMachineMenuBackpackState
    CurrentPlayerWidgetCategory: gbx_inventory.InventoryCategoryData
    CachedPlayerController: OakPlayerController
    CachedOakCharacter: OakCharacter
    InventoryList: gbx_inventory.InventoryListComponent
    SavedBillboards: unreal.WrappedArray[GFxBillboardComponent]
    Config: GFxVendingMenuConfig
    BackpackItemCardLoader: GFxLoadedItemCardBase
    VendingItemCardLoader: GFxLoadedItemCardBase
    CachedCompareInventoryActor: engine.Actor
    CachedComparedBackpackItem: GFxVendingMachineBackpackItemWidget
    NavButtons: unreal.WrappedArray[gbx_ui.GbxGFxButton]
    CurrentFilterIndex: int
    CurrentFilters: unreal.WrappedArray[OakInventoryMenuFilter]
    BackpackDoubleClickTimeLimit: float
    CurrentNavIndex: int
    bWantUpdateEverythingOnNextBagUpdate: bool
    CachedVendingMachineProxy: VendingMachineProxy
    CachedVendingMachine: VendingMachine
    PlayerShopManager: PlayerShopManagerComponent
    CurrentShopComponent: InventoryShopComponent
    VendingMachineFocusWidget: gbx_ui.GbxGFxButton
    CurrentDisplayMode: GFxVendingMachineDisplayMode
    NavBarContainerClip: gbx_ui.GbxGFxObject
    NavBuyButton: gbx_ui.GbxGFxButton
    NavBuyBackButton: gbx_ui.GbxGFxButton
    NavSellButton: gbx_ui.GbxGFxButton
    InspectionItemCard: GFxItemCard
    Backpack: GFxBackpackWidget
    BackpackContainer: gbx_ui.GbxGFxObject
    MarcusTipContainer: gbx_ui.GbxGFxObject
    ItemOfTheDayClip: gbx_ui.GbxGFxObject
    VendingPlayerWidget: GFxVendingMachinePlayerWidget
    BackpackOuterContainerClip: gbx_ui.GbxGFxObject
    MaxDelayTimeToLoadThumbnails: float
    VendingPlayerWidgetString: str
    MarcusHeadClipString: str
    MarcusTooltipContainerString: str
    ItemOfTheDayShelfString: str
    VendingMachineListBoxID: str
    BuyStateNavID: str
    BuyBackStateNavID: str
    SellStateNavID: str
    StateTextID: str
    iodTimerTextID: str
    ItemOfTheDayTextID: str
    NavMenuID: str
    NavBuyButtonID: str
    NavBuyBackButtonID: str
    NavSellButtonID: str
    NavMenuLeftGlyphID: str
    NavMenuRightGlyphID: str
    MarcusHeadSlotBaseID: str
    BackpackSortID: str
    BackpackHeaderID: str
    BackpackID: str
    PreviousButtonTextClipID: str
    NextButtonTextClipID: str
    MarcusTipContainerID: str
    SmallPlayerHeadID: str
    VendingItemClass: str
    LimitedTimeString: str
    ItemOfTheDayString: str
    CantSellFavoriteText: str
    CantSellItemGenericText: str
    CloseString: str
    BackString: str
    CompareString: str
    BuyString: str
    BuyBackString: str
    SellString: str
    SellJunkString: str
    InspectString: str
    def OnVendingSelectionChanged(self): ...
    def OnVendingMachineScroll(self, ScrollDirection: EVendingMachineScrollDirection): ...
    def OnVendingMachineDirty(self): ...
    def OnVendingMachineBoughtItem(self, BuyType: EVendingMachineBuyType, InventoryActor: engine.Actor): ...
    def OnVendingItemClicked(self, BUTTON: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnThumbnailLoaded(self): ...
    def OnRigthItemCardReady(self): ...
    def OnNavMenuItemClicked(self, Widget: gbx_ui.GbxGFxButton, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnLeftItemCardReady(self): ...
    def OnInventoryQuantityChanged(self, UpdatedItemHandle: gbx_inventory.InventoryListEntryHandle, ItemCategory: gbx_inventory.InventoryCategoryData, Quantity: int, MaxQuantity: int): ...
    def OnInventoryItemUpdated(self, ItemHandle: gbx_inventory.InventoryListEntryHandle): ...
    def OnInventoryItemUnequipped(self, ChangedActor: engine.Actor, SlotData: InventorySlotData): ...
    def OnInventoryItemRemoved(self, ItemHandle: gbx_inventory.InventoryListEntryHandle): ...
    def OnInventoryItemEquipped(self, ChangedActor: engine.Actor, SlotData: InventorySlotData): ...
    def OnInventoryItemAdded(self, ItemHandle: gbx_inventory.InventoryListEntryHandle): ...
    def OnBackpackGridItemSelected(self, Item: OakUIInventoryItemDisplayInfo, GridWidget: gbx_ui.GbxGFxObject): ...
    def OnBackpackGridItemClicked(self, Item: OakUIInventoryItemDisplayInfo, GridWidget: gbx_ui.GbxGFxObject, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnAmmoMinMaxValueUpdate(self, ResourcePoolReference: gbx_game_system_core.GameResourcePoolReference, MinValue: float, MaxValue: float): ...
    def OnAmmoCurrentValueUpdate(self, ResourcePoolReference: gbx_game_system_core.GameResourcePoolReference, CurrentValue: float): ...


class GFxVendingMachinePlayerWidget(gbx_ui.GbxGFxObject):
    PurchasedText: str
    SoldText: str
    HealthFullText: str
    AmmoFullText: str
    BagFullText: str
    InsufficientFundsText: str
    VendingPlayerWidgetTopClip: gbx_ui.GbxGFxObject
    VendingPlayerWidgetClip: gbx_ui.GbxGFxObject
    VendingShieldClip: gbx_ui.GbxGFxProgressBar
    VendingHealthClip: gbx_ui.GbxGFxProgressBar
    CurrencyWidgetClip: GFxCurrencyCounterClip



class GFxVendingMachineMenuData(OakGFxMenuData):
    Filters: unreal.WrappedArray[GFxVendingMachineMenuFilter]



class GFxVendingMachinePrompt(gbx_ui.GbxGFxHUDWidget):
    RenderPropertiesForGunThumbnail: OakThumbnailManagerRenderProperties
    SocketLocationAndOffset: VendingMachineSocketLocationAndOffset
    CachedOakPlayerController: OakPlayerController
    CachedScreenSocketLocation: core_uobject.Vector2D
    CachedOriginalTransform: core_uobject.Transform
    FeaturedItemActor: engine.Actor
    IconManager: OakThumbnailManager
    VendingMachineMenuCharacter: OakCharacter
    PlayerShopManager: PlayerShopManagerComponent
    CurrentShopComponent: InventoryShopComponent
    VisibilityDistance: float
    DistanceScaleCurve: engine.CurveFloat
    FlavorTextString: str
    ItemOfTheDayTextString: str
    SocketName: str
    RarityContentID: str
    TimerTextID: str
    IODTextID: str
    ItemScoreID: str
    ManufacturerContentID: str
    RarityTextID: str
    RaysID: str
    FlavorTextID: str
    ElementalIconID: str
    WeaponIconID: str
    WeaponIconShadowID: str
    HeadTypeID: str
    ManufacturerIconID: str
    ManufactrerRarityClipID: str
    ExtRenderClipID: str
    ExtShadowRenderClipID: str
    ViewportBaseScaleFactor: float
    SoldOutText: str
    ItemOfTheDayClip: gbx_ui.GbxGFxObject
    HeadType: gbx_ui.GbxGFxObject
    ElementalIcon: gbx_ui.GbxGFxObject
    RarityContent: gbx_ui.GbxGFxObject
    RarityTextClip: gbx_ui.GbxTextField
    Rays: gbx_ui.GbxGFxObject
    WeaponIcon: gbx_ui.GbxGFxObject
    TimerText: gbx_ui.GbxTextField
    IODText: gbx_ui.GbxTextField
    ItemScore: gbx_ui.GbxTextField
    ManufacturerContent: gbx_ui.GbxGFxObject
    ManufacturerIcon: gbx_ui.GbxGFxObject
    RarityText: gbx_ui.GbxTextField
    FlavorText: gbx_ui.GbxTextField
    WeaponIconShadow: gbx_ui.GbxGFxObject
    ManufacturerRarityClip: gbx_ui.GbxGFxObject
    ExtRenderClip: gbx_ui.GbxGFxObject
    ExtShadowRenderClip: gbx_ui.GbxGFxObject
    SoldOutTextClip: gbx_ui.GbxTextField
    def UpdateWidgetLocation(self, DistVector: core_uobject.Vector): ...
    def UpdateDistanceToVendingMachine(self, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...
    def RefreshIcon(self): ...
    def OnThumbnailLoaded(self): ...
    def OnLookedAwayFromByPlayer(self, NewUsableComponent: gbx_game_system_core.UsableComponent): ...
    def OnLookedAtByPlayer(self, NewUsableComponent: gbx_game_system_core.UsableComponent): ...
    def InitSocketLocation(self, VendingMachine: VendingMachine): ...
    def BuildVendingMachinePrompt(self, VendingMachine: VendingMachine): ...


class OakCharacterAnimInstance(gbx_game_system_core.GbxCharacterAnimInstance):
    IsMantling: bool
    IsSprinting: bool
    bCanUseWeaponWhileSprinting: bool
    IsSliding: bool
    IsUsingLadder: bool
    IsLadderSliding: bool
    IsPerformingUpdwardLadderJump: bool
    IsUsingWeapon: bool
    IsReloading: bool
    IsZoomed: bool
    ZoomDuration: float
    bShouldLowerWeapon: bool
    bDisableIdleToSprintTransition: bool
    HandToWeaponAlpha: float
    DesiredCoverState: gbx_ai.ECoverUserState
    CoverStyle: gbx_ai.CoverStyleData
    CoverView: gbx_ai.CoverViewData
    IsInCover: bool
    WantsToLeaveCover: bool
    IsCoverFlanked: bool
    IsInCoverFireIdle: bool
    IsInCoverFireIdleAndWantsToLeaveCover: bool
    ClothWeightFromCurve: float
    FacialAnimWeight: float
    FacialTeethOffset: core_uobject.Vector
    bCanUpdateClothBlendWeight: bool
    AnimStyle: int
    CurrentVehicle: OakVehicle
    CurrentTurret: TurretSeatPawn
    VehicleSeatComponent: VehicleSeatComponent
    VehicleHoverComponent: gbx_vehicle.VehicleHoverComponent
    InVehicle: bool
    DisableAlphaInVehicle: float
    InMannedTurret: bool
    IsSeatedTurret: bool
    InRollerCoaster: bool
    VehicleArchetype: str
    SeatIndex: int
    VehicleThrottleInput: float
    VehicleSpeed: float
    VehicleSteerAngle: float
    VehicleSteerAngleExplicitTime: float
    VehicleIsInReverse: bool
    bIsVehicleFlipped: bool
    VehicleAcceleration: float
    VehicleTurningDelta: float
    VehicleDampedAccelInterpSpeed: float
    VehicleSmoothedZVelocity: float
    VehicleSlotAlpha: float
    FrontBackWorldAdditive: float
    LeftRightWorldAdditive: float
    DriverAdditiveForwardAccelerationTreshold: float
    DriverAdditiveForwardInterpSpeed: float
    DriverAdditiveLateralAccelerationTreshold: float
    DriverAdditiveLateralInterpSpeed: float
    DriverAdditiveUpwardAccelerationTreshold: float
    DriverAdditiveUpwardInterpSpeed: float
    VehicleArchetypeEnum: EVehicleArchetype
    NegativeSpeedToPlayTurnWheelBackward: float
    VehicleSlotName: str
    AnimNameTurnWheel: str
    AnimSetNameTurnWheel: str
    AnimNameTurnWheelInReverse: str
    AnimSetNameTurnWheelInReverse: str
    AnimNameTurretIdle: str
    AnimSetNameTurretIdle: str
    AnimNameAdditiveFlinchFront: str
    AnimNameAdditiveFlinchBack: str
    AnimNameAdditiveFlinchLeft: str
    AnimNameAdditiveFlinchRight: str
    AdditiveFlinchPlaying: engine.AnimSequenceBase
    ForwardDynamicsAlpha: float
    bWheeledCharacter: bool
    TireRadius: float
    TireRotation: core_uobject.Rotator
    bForceEnableHandIK: bool
    def VehicleHitReaction(self, ImpactTrehsold: core_uobject.Vector2D, NormalImpulse: core_uobject.Vector, Hit: engine.HitResult): ...
    def SetHasWeaponPoses(self, bHasLeft: bool, bHasRight: bool): ...
    def OnWeaponModeChanged_Native(self): ...
    def OnWeaponModeChanged(self): ...
    def OnWeaponChanged_Native(self, NewWeapon: gbx_weapon.Weapon, PrevWeapon: gbx_weapon.Weapon): ...
    def OnWeaponChanged(self, NewWeapon: gbx_weapon.Weapon, PrevWeapon: gbx_weapon.Weapon): ...
    def OnVehicleComponentHit(self, HitComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, NormalImpulse: core_uobject.Vector, Hit: engine.HitResult): ...
    def OnExitVehicleStarted_Native(self, PawnAttachSlotComponent: gbx_game_system_core.PawnAttachSlotComponent): ...
    def OnExitVehicleFinished_Native(self, PawnAttachSlotComponent: gbx_game_system_core.PawnAttachSlotComponent): ...
    def OnExitTurretStarted_Native(self, PawnAttachSlotComponent: gbx_game_system_core.PawnAttachSlotComponent): ...
    def OnExitTurretFinished_Native(self, PawnAttachSlotComponent: gbx_game_system_core.PawnAttachSlotComponent): ...
    def OnEnterVehicleStarted_Native(self, PawnAttachSlotComponent: gbx_game_system_core.PawnAttachSlotComponent): ...
    def OnEnterTurretStarted_Native(self, PawnAttachSlotComponent: gbx_game_system_core.PawnAttachSlotComponent): ...
    def OnChangeVehicleSeat_Native(self, FromSeat: gbx_game_system_core.PawnAttachSlotComponent, ToSeat: gbx_game_system_core.PawnAttachSlotComponent): ...
    def OnAnimStyleChanged(self): ...


class GoliathAnimInstance(OakCharacterAnimInstance):
    bIsEnraged: bool
    LookAtNodeAlpha: float



class GoreAoEDamageData(gbx_runtime.GbxDataAsset):
    Chance: float
    CumulativeChanceModifier: float
    RadiusChanceCurve: engine.CurveFloat
    DamageFilter: gbx_game_system_core.DamageFilter



class GoreDamageData(gbx_runtime.GbxDataAsset):
    RootDamageBone: str
    bIncludeChildBones: bool
    bTriggerOnlyOnDeath: bool
    bTriggeredByAoEDamage: bool
    bOverrideTriggerThreshold: bool
    TriggerThreshold: float
    GoreRegionType: EGoreRegionType
    bOverwriteStumpInstancedMaterialParameters: bool
    bOverwriteLimbInstancedMaterialParameters: bool
    bInheritStumpMaterialParameters: bool
    InheritStumpMaterialParametersMethod: engine.EMaterialParameterCopyMethod
    bInheritLimbMaterialParameters: bool
    InheritLimbMaterialParametersMethod: engine.EMaterialParameterCopyMethod
    bOverrideSourceMaterialIndex: bool
    SourceMaterialIndex: int
    StumpSocket: str
    StumpBoneScale: core_uobject.Vector
    StumpDecalSize: core_uobject.Vector
    bStumpReceivesDecals: bool
    LimbSocket: str
    GoreSizeData: unreal.WrappedArray[GoreSizeSelectionData]
    DeathHitReactionOverride: gbx_game_system_core.HitReactionTag
    StumpMeshes: unreal.WrappedArray[engine.StaticMesh]
    StumpParticles: unreal.WrappedArray[engine.ParticleSystem]
    StumpDecals: unreal.WrappedArray[engine.MaterialInstanceConstant]
    StumpSound: wwise_audio.WwiseEvent
    StumpMaterialOverride: engine.MaterialInstanceConstant
    LimbActorClass: unreal.UClass
    LimbMeshes: unreal.WrappedArray[unreal.UObject]
    LimbParticles: unreal.WrappedArray[engine.ParticleSystem]
    LimbMaterialOverride: engine.MaterialInstanceConstant
    LimbForce: gbx_game_system_core.ForceSelection
    bScaleLimbToStump: bool
    LimbScale: float
    LimbMassScale: float
    bDisableDialog: bool
    GoreDialogEvent: gbx_dialog.DialogEvent
    def GenerateGore(self, Actor: engine.Actor, Results: GoreSelectionResults, StumpSocketOverride: str, LimbSocketOverride: str): ...


class OakProjectile(gbx_weapon.Projectile):
    bIgnoreCollisionWithInstigatorAndChildrens: bool
    bIsGrenade: bool
    bSuppressSpawnModifierEffect: bool
    StatusEffectOverrides: CauseDamageStatusEffectOverrides
    BalanceComponent: gbx_game_system_core.BalanceStateComponent
    ElementalEffectBucketType: EOakElementalStackBucketType
    bRegisterAsTargetable: bool
    bShouldDisplayNameplate: bool
    DamageComponent: gbx_game_system_core.DamageComponent
    TargetableComponent: gbx_game_system_core.TargetableComponent
    def SetIsGrenade(self, bNewIsGrenade: bool): ...
    def OnSkagProjectileStop(self, Hit: engine.HitResult): ...
    def GetBalanceComponent(self, ReturnValue: gbx_game_system_core.BalanceStateComponent) -> gbx_game_system_core.BalanceStateComponent: ...


class Grenade(OakProjectile):
    GrenadeMod: GrenadeMod
    OwningCharacter: OakCharacter
    SphereCollision: engine.SphereComponent
    GrenadeMesh: engine.SkeletalMeshComponent
    DefaultMesh: engine.StaticMeshComponent
    StandMesh: engine.StaticMeshComponent
    StandCapsuleCollision: engine.CapsuleComponent
    ChildMesh: engine.StaticMesh
    GrenadeMovementComponent: GrenadeProjectileMovementComponent
    GrenadeHomingComponent: GrenadeHomingComponent
    RandomMovementComponent: gbx_game_system_core.DrunkenRandomMovementComponent
    WaveMovementComponent: gbx_game_system_core.DrunkenWaveMovementComponent
    AudioComponent: wwise_audio.WwiseAudioComponent
    bHasImpacted: bool
    GrenadeImpactFuseTime: float
    bTriggerFuseOnImpact: bool
    FuseWarningComponent: engine.ParticleSystemComponent
    bCauseDamageOnExplode: bool
    bDestroyOnExplode: bool
    AttachedParticles: unreal.WrappedArray[engine.ParticleSystemComponent]
    AttachedTrail: engine.ParticleSystemComponent
    AttachedTrailStack: unreal.WrappedArray[GrenadeAttachedTrail]
    InitialVelocityZOffset: float
    GrenadeDamage: float
    GrenadeExplosionRadius: float
    GrenadeExplosionForce: float
    ChildGenerationData: GrenadeChildGenerationData
    bStopRotatingWhenNotMoving: bool
    bUseDefaultMesh: bool
    DeliveryMethod: GrenadeBehavior_Delivery
    DeliveryInstanceData: PayloadInstanceData
    GrenadeMeshCollisionOffset: float
    BasicTrailData: unreal.UClass
    FuseTriggeredAudioEvent: wwise_audio.WwiseEvent
    BouncyAimAssistQuery: gbx_game_system_core.EnvQueryParams
    MaxAssistAngle: float
    AssistAngleDot: float
    def UnstickGrenade(self, DamageReceiver: engine.Actor, DamageCauser: engine.Actor): ...
    def TurnAttachedTrailOn(self, bRestartTrail: bool): ...
    def StopAudioEventFromBehavior(self, BehaviorClass: unreal.UClass): ...
    def StopAudioEvent(self, AudioEvent: wwise_audio.WwiseEvent): ...
    def SetLongbowTarget(self, InLocation: core_uobject.Vector): ...
    def SetLingering(self, bIsLingering: bool): ...
    def SetFuseTriggeredAudioEvent(self, NewFuseTriggerEvent: wwise_audio.WwiseEvent): ...
    def SetAttachedTrail(self, NewTrail: engine.ParticleSystem, TrailName: str): ...
    def ResetFuse(self): ...
    def RemoveAttachedTrail(self, bDestroyTrail: bool, bAttachingNewTrail: bool, TrailName: str): ...
    def OnStuckGrenadeActorDestroyed(self, Actor: engine.Actor): ...
    def OnGrenadeStop(self, ImpactResult: engine.HitResult): ...
    def OnGrenadeLastBounce(self, ImpactResult: engine.HitResult): ...
    def OnGrenadeBounce(self, ImpactResult: engine.HitResult, ImpactVelocity: core_uobject.Vector): ...
    def MultiplyRadiusBy(self, RadiusScalar: float): ...
    def MultiplyDamageBy(self, DamageScalar: float): ...
    def IsLingering(self, ReturnValue: bool) -> bool: ...
    def IncrementChildOffset(self, ParentGrenade: Grenade, Payload: GrenadeBehavior_Payload): ...
    def IgnorePayloadMethod(self, PayloadToIgnore: unreal.UClass): ...
    def GrenadeUsesPayload(self, Payload: unreal.UClass, ReturnValue: bool) -> bool: ...
    def GetPayloadChildValue(self, PayloadType: int, ReturnValue: int) -> int: ...
    def GetLongbowTarget(self, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...
    def GetInstanceDataFromPayload(self, Payload: GrenadeBehavior_Payload, ReturnValue: PayloadInstanceData) -> PayloadInstanceData: ...
    def GetHomingComponent(self, ReturnValue: GrenadeHomingComponent) -> GrenadeHomingComponent: ...
    def GetGrenadeRadius(self, ReturnValue: float) -> float: ...
    def GetGrenadeDamage(self, ReturnValue: float) -> float: ...
    def GetDrunkenWaveComponent(self, ReturnValue: gbx_game_system_core.DrunkenWaveMovementComponent) -> gbx_game_system_core.DrunkenWaveMovementComponent: ...
    def GetDrunkenRandomComponent(self, ReturnValue: gbx_game_system_core.DrunkenRandomMovementComponent) -> gbx_game_system_core.DrunkenRandomMovementComponent: ...
    def GetChildOffset(self, ReturnValue: GrenadeChildGenerationData) -> GrenadeChildGenerationData: ...
    def GetAttachedTrail(self, TrailName: str, ReturnValue: engine.ParticleSystemComponent) -> engine.ParticleSystemComponent: ...
    def FuseTriggered(self): ...
    def DisableBasicTrail(self): ...
    def ClearDeliveryMethod(self): ...
    def AIProjectile_Disarm(self): ...
    def AIProjectile_Detonate(self): ...
    def AIProjectile_CanBeStolen(self, ReturnValue: bool) -> bool: ...
    def AIProjectile_Arm(self): ...


class GrenadeBehavior(unreal.UObject): ...


class GrenadeBehavior_Delivery(GrenadeBehavior):
    GrenadeThrownEvent: wwise_audio.WwiseEvent



class GrenadeBehavior_DeliveryBlueprint(GrenadeBehavior_Delivery):

    def SetDelay(self, Grenade: Grenade, GrenadeMod: GrenadeMod, Delay: float, DelayName: str): ...
    def K2_StopBehaviorAudio(self, Grenade: Grenade): ...
    def K2_NativeDelayCallback(self, Grenade: Grenade, GrenadeMod: GrenadeMod, DelayName: str): ...
    def K2_GrenadeLastBounce(self, Grenade: Grenade, GrenadeMod: GrenadeMod): ...
    def K2_GrenadeInitialized(self, Grenade: Grenade, GrenadeMod: GrenadeMod): ...
    def K2_GrenadeImpact(self, Grenade: Grenade, GrenadeMod: GrenadeMod, HitResult: engine.HitResult): ...
    def K2_GrenadeExplode(self, Grenade: Grenade, GrenadeMod: GrenadeMod): ...
    def K2_GrenadeEndPlay(self, Grenade: Grenade, GrenadeMod: GrenadeMod): ...
    def K2_GrenadeBounce(self, Grenade: Grenade, GrenadeMod: GrenadeMod): ...
    def K2_GrenadeBeginPlay(self, Grenade: Grenade, GrenadeMod: GrenadeMod): ...
    def K2_AttachedToGrenadeMod(self, GrenadeMod: GrenadeMod): ...


class GrenadeBehavior_DeliveryFrag(GrenadeBehavior_DeliveryBlueprint):
    FragBounciness: float
    FragFriction: float



class GrenadeBehavior_DeliveryHeavy(GrenadeBehavior_DeliveryBlueprint): ...


class GrenadeBehavior_DeliveryHoming(GrenadeBehavior_DeliveryBlueprint):
    HomingStartDelay: float
    HomingRetryDelay: float
    HomingHitTargetDelay: float
    HomingBounceDelay: float
    HomingTemplate: GrenadeHomingComponent
    HomingMaxSpeed: float
    HomingAcceleration: float
    HomingGravityScale: float
    HomingFriction: float
    HomingBounciness: float
    InitialSearchQuery: gbx_game_system_core.EnvQueryParams
    RetrySearchQuery: gbx_game_system_core.EnvQueryParams
    EQSRetriggerDelay: float
    def K2_HomingTargetLost(self, Grenade: Grenade, GrenadeMod: GrenadeMod): ...
    def K2_FoundHomingTarget(self, Grenade: Grenade, GrenadeMod: GrenadeMod, HomingTarget: engine.Actor): ...


class GrenadeBehavior_DeliveryImpact(GrenadeBehavior_DeliveryBlueprint): ...


class GrenadeBehavior_DeliveryLongbow(GrenadeBehavior_DeliveryBlueprint):
    LongbowInitialVelocity: float
    LongbowFinalVelocity: float
    LongbowTeleportDelay: float
    LongbowTeleportMaxDistance: float
    LongbowTeleportLineParticleTemplate: engine.ParticleSystem
    LongbowStartTeleportingAudioEvent: wwise_audio.WwiseEvent
    LongbowStartTeleportingParticleTemplate: engine.ParticleSystem
    LongbowTeleportTraceChannel: int
    LongbowTeleportProximityTraceRadius: float
    LongbowTeleportProximityTraceChannel: int
    LongbowEndTeleportingAudioEvent: wwise_audio.WwiseEvent
    LongbowRainSplitSpeed: float
    LongbowRainSplitAcceleration: float
    LongbowRainHeightScalar: float
    LongbowEndTeleportingParticleTemplate: engine.ParticleSystem
    DividerLongbowTeleportDelay: float



class GrenadeBehavior_DeliveryRubberized(GrenadeBehavior_DeliveryBlueprint):
    RubberizedBounceCount: int
    RubberizedExplosionData: gbx_game_system_core.ExplosionData
    RubberizedGrenadeEmitterTemplate: engine.ParticleSystem
    RubberizedForwardBounceVelocity: float
    RubberizedUpdwardBounceVelocity: float
    RubberizedBounceEvent: wwise_audio.WwiseEvent
    DamageTypeParticleProperty: DamageTypeParticleProperty
    RubberizedDamageScalePerBounce: float
    RubberizedRadiusScalePerBounce: float



class GrenadeBehavior_Payload(GrenadeBehavior):
    StackValues: unreal.WrappedArray[gbx_game_system_core.AttributeInitializationData]
    def GetValueFromInstanceData(self, InstanceData: PayloadInstanceData, ReturnValue: float) -> float: ...


class GrenadeBehavior_PayloadBlueprint(GrenadeBehavior_Payload):

    def SpawnChildGrenade(self, ParentGrenade: Grenade, SpawnTransform: core_uobject.Transform, ReturnValue: Grenade) -> Grenade: ...
    def SetDelay(self, Grenade: Grenade, GrenadeMod: GrenadeMod, InstanceData: PayloadInstanceData, Delay: float, DelayName: str): ...
    def K2_UpdateChildGeneration(self, InGenerationData: GrenadeChildGenerationData, GenerationData: GrenadeChildGenerationData): ...
    def K2_StopBehaviorAudio(self, Grenade: Grenade): ...
    def K2_NativeDelayCallback(self, Grenade: Grenade, GrenadeMod: GrenadeMod, InstanceData: PayloadInstanceData, DelayName: str): ...
    def K2_GrenadeLastBounce(self, Grenade: Grenade, GrenadeMod: GrenadeMod, InstanceData: PayloadInstanceData): ...
    def K2_GrenadeInitialized(self, Grenade: Grenade, GrenadeMod: GrenadeMod, InstanceData: PayloadInstanceData): ...
    def K2_GrenadeImpact(self, Grenade: Grenade, GrenadeMod: GrenadeMod, HitResult: engine.HitResult, InstanceData: PayloadInstanceData): ...
    def K2_GrenadeExplode(self, Grenade: Grenade, GrenadeMod: GrenadeMod, InstanceData: PayloadInstanceData): ...
    def K2_GrenadeEndPlay(self, Grenade: Grenade, GrenadeMod: GrenadeMod, InstanceData: PayloadInstanceData): ...
    def K2_GrenadeDamageDealt(self, Grenade: Grenade, GrenadeMod: GrenadeMod, InstanceData: PayloadInstanceData, Character: OakCharacter, DamageEvent: gbx_game_system_core.DamageDataEventDetails): ...
    def K2_GrenadeBounce(self, Grenade: Grenade, GrenadeMod: GrenadeMod, InstanceData: PayloadInstanceData): ...
    def K2_GrenadeBeginPlay(self, Grenade: Grenade, GrenadeMod: GrenadeMod, InstanceData: PayloadInstanceData): ...
    def K2_AttachedToGrenadeMod(self, GrenadeMod: GrenadeMod, InstanceData: PayloadInstanceData): ...


class GrenadeBehavior_PayloadArtillery(GrenadeBehavior_PayloadBlueprint):
    ArtilleryDamageData: unreal.UClass
    StatusEffectChance: float
    StatusEffectDuration: float
    StatusEffectDamage: float
    ArtilleryRadius: float
    ArtilleryAdditionalDuration: float
    ArtilleryExplosionRadius: float
    ArtilleryLastBounceVelocity: float
    ArtilleryLastBounceBounciness: float
    ArtilleryLastBounceFriction: float
    bUseCustomMeshOffset: bool
    CustomMeshOffset: float
    CustomOffsetMesh: engine.StaticMesh



class GrenadeBehavior_PayloadBouncy(GrenadeBehavior_PayloadBlueprint):
    TrailSystemTemplate: engine.ParticleSystem
    BouncyForwardBounceVelocity: float
    BouncyUpdwardBounceVelocity: float
    BouncyBounceEvent: wwise_audio.WwiseEvent



class GrenadeBehavior_PayloadDivider(GrenadeBehavior_PayloadBlueprint):
    InitialDivideDelay: float
    MinSpawnOffsetAngle: float
    MaxSpawnOffsetAngle: float
    DivideParticleTemplate: engine.ParticleSystem
    DividerAudioEvent: wwise_audio.WwiseEvent



class GrenadeBehavior_PayloadElementalDamage(GrenadeBehavior_PayloadBlueprint): ...


class GrenadeBehavior_PayloadForce(GrenadeBehavior_PayloadBlueprint):
    ForceWiseEvent: wwise_audio.WwiseEvent
    ForceEmitterTemplate: engine.ParticleSystem



class GrenadeBehavior_PayloadGenerator(GrenadeBehavior_PayloadBlueprint):
    TriggeringHealthType: gbx_game_system_core.HealthTypeData
    HealingDamageData: unreal.UClass
    HealingDamageType: unreal.UClass
    HealingParticles: engine.ParticleSystem
    ValidDamageSources: unreal.WrappedArray[unreal.UClass]
    HealingAudioEvent: wwise_audio.WwiseEvent
    HealingImpactAudioEvent: wwise_audio.WwiseEvent



class GrenadeBehavior_PayloadLarge(GrenadeBehavior_PayloadBlueprint): ...


class GrenadeBehavior_PayloadLingering(GrenadeBehavior_PayloadBlueprint):
    LingeringBurstDuration: float
    LingeringBurstDelay: float
    FinalExplosionRadius: float
    MirvChildFinalExplosionRadius: float
    RainChildFinalExplosionRadius: float
    LingeringBounceVelocity: float
    LingeringNumBounces: int
    LingeringBounciness: float
    bUseCustomMeshOffset: bool
    CustomMeshOffset: float
    CustomOffsetMesh: engine.StaticMesh



class GrenadeBehavior_PayloadLink(GrenadeBehavior_PayloadBlueprint): ...


class GrenadeBehavior_PayloadMiniMirv(GrenadeBehavior_PayloadBlueprint):
    MiniMirvSpeed: float
    MiniMirvGravityScale: float
    MiniMirvSplitAudio: wwise_audio.WwiseEvent



class GrenadeBehavior_PayloadMirv(GrenadeBehavior_PayloadBlueprint):
    MinSpawnOffsetAngle: float
    MaxSpawnOffsetAngle: float
    MirvSpeed: float
    MirvGravityScale: float
    MirvChildSpawnDelay: float
    MirvBeginAudioEvent: wwise_audio.WwiseEvent
    MirvChildSpawnAudioEvent: wwise_audio.WwiseEvent
    bMirvAlongSurfaceHitNormal: bool
    bMirvOnFirstBounce: bool



class GrenadeBehavior_PayloadMoney(GrenadeBehavior_PayloadBlueprint):
    MoneyStackValues: unreal.WrappedArray[MoneyStackValues]
    SpawnLocationOffset: core_uobject.Vector
    SpawningPatternData: LootSpawnPatternData
    SpawningParticles: engine.ParticleSystem



class GrenadeBehavior_PayloadNuke(GrenadeBehavior_PayloadBlueprint):
    DamageScaleIncreasePerGrenade: float
    RadiusScaleIncreasePerGrenade: float
    GrenadeAmmoAttribute: gbx_game_system_core.GbxAttributeData
    NukeExplosionData: gbx_game_system_core.ExplosionData



class GrenadeBehavior_PayloadRain(GrenadeBehavior_PayloadBlueprint):
    RainShotHeight: float
    RainShotAudioEvent: wwise_audio.WwiseEvent
    RainSplitSpeed: float
    RainSplitAcceleration: float
    RainSplitDelay: float
    RainChildExplosionRadiusScale: float
    RainSplitAngleOffset: float
    RainSplitShotDelay: float
    RainSplitShotSpawnDistanceFromSource: float
    RainSplitAudioEvent: wwise_audio.WwiseEvent
    RainSplitEndAudioEvent: wwise_audio.WwiseEvent



class GrenadeBehavior_PayloadRoider(GrenadeBehavior_PayloadBlueprint): ...


class GrenadeBehavior_PayloadSingularity(GrenadeBehavior_PayloadBlueprint):
    SingularityRadiusScale: float
    MinSingularityRadius: float
    MaxSingularityRadius: float
    SingularityRisingSpeed: float
    SingularityInfo: SingularityInitializationInfo
    SingularityExplosionData: gbx_game_system_core.ExplosionData
    FinalExplosionAudioEvent: wwise_audio.WwiseEvent
    RainSingularityEndEffect: engine.ParticleSystem



class GrenadeBehavior_PayloadSpring(GrenadeBehavior_PayloadBlueprint):
    SpringNumBounces: unreal.WrappedArray[gbx_game_system_core.AttributeInitializationData]
    InitialSpringSpeed: float
    SpringGravityScale: float
    SpringTrail: engine.ParticleSystem
    SpringAudioEvent: wwise_audio.WwiseEvent
    LongbowSpringDistance: float
    LongbowHitTeleportOffset: float



class GrenadeBehavior_PayloadSticky(GrenadeBehavior_PayloadBlueprint):
    StickyFuseTimer: float
    MeshCollisionChannel: int
    ProximityTriggerParticleTemplate: engine.ParticleSystem
    TriggerParticleSizePropertyName: str
    ProximityMaxDuration: float
    MinProximityRadius: float
    MaxProximityRadius: float
    TriggerCondition: gbx_runtime.GbxCondition
    StuckDamageData: unreal.UClass
    StickToTargetAudioEvent: wwise_audio.WwiseEvent
    StickToWorldAudioEvent: wwise_audio.WwiseEvent
    StickyProximityTriggeredAudioEvent: wwise_audio.WwiseEvent
    StuckIdleAudioEvent: wwise_audio.WwiseEvent
    def StuckGrenadeUnoverlappedActor(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int): ...
    def StuckGrenadeOverlappedActor(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def K2_StuckGrenadeOverlappedEnded(self, Grenade: Grenade, GrenadeMod: GrenadeMod, OverlappedActor: engine.Actor): ...
    def K2_StuckGrenadeOverlapped(self, Grenade: Grenade, GrenadeMod: GrenadeMod, OverlappedActor: engine.Actor): ...
    def K2_GrenadeStuckTo(self, Grenade: Grenade, GrenadeMod: GrenadeMod, StickTarget: engine.Actor, InstanceData: PayloadInstanceData, HitResult: engine.HitResult): ...


class GrenadeBehavior_PayloadTransfusion(GrenadeBehavior_PayloadBlueprint):
    TriggeringHealthType: gbx_game_system_core.HealthTypeData
    HealingDamageData: unreal.UClass
    HealingDamageType: unreal.UClass
    HealingParticles: engine.ParticleSystem
    ValidDamageSources: unreal.WrappedArray[unreal.UClass]
    HealingAudioEvent: wwise_audio.WwiseEvent
    HealingImpactAudioEvent: wwise_audio.WwiseEvent



class OakDamageData(gbx_game_system_core.DamageData):
    BaseStatusEffectChance: gbx_game_system_core.AttributeInitializationData
    BaseStatusEffectDamage: gbx_game_system_core.AttributeInitializationData
    BaseStatusEffectDuration: gbx_game_system_core.AttributeInitializationData
    CustomStatusEffect: DamageDataCustomStatusEffectApplicationSpec
    bPenetrates: bool
    LightBeamData: unreal.UClass
    BeamTargetSocket: str
    bOnlyDrawParticleIfShieldsAreDepleted: bool
    bRootCharacter: bool
    PresentationModifier: EDamagePresentationModifier



class GrenadeDamageData(OakDamageData): ...


class GrenadeDamageTypeAspectData(gbx_inventory.InventoryAspectData):
    DamageType: unreal.UClass



class GrenadeDeliveryMethodAspectData(gbx_inventory.InventoryAspectData):
    DeliveryBehavior: GrenadeBehavior_Delivery



class GrenadeHealingProjectile(OakProjectile):
    HomingComponent: gbx_game_system_core.ProjectileHomingComponent
    SphereComponent: engine.SphereComponent
    HealingDamageData: unreal.UClass
    HealingDamageType: unreal.UClass
    DamagePercent: float
    TriggeringHealthType: gbx_game_system_core.HealthTypeData
    HealingParticles: engine.ParticleSystem
    AudioComponent: wwise_audio.WwiseAudioComponent
    PersistantAudioEvent: wwise_audio.WwiseEvent
    HealingAudioEvent: wwise_audio.WwiseEvent
    def OnOverlapActor(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def HealHomingTarget(self): ...


class GrenadeHomingComponent(gbx_game_system_core.ProjectileHomingComponent):
    OwnerGrenade: Grenade
    OwnerTedioreProjectile: TedioreProjectile
    HomingResetTimerHandle: engine.TimerHandle
    HomingTrailTemplate: engine.ParticleSystem
    TrailRelativeScale: float
    HomingTrailOffset: core_uobject.Vector
    TargetLockedParameterName: str
    TargetLockedOffValue: float
    TargetLockedOnValue: float
    SearchingForTargetEvent: wwise_audio.WwiseEvent
    TargetFoundEvent: wwise_audio.WwiseEvent
    HomingTrail: engine.ParticleSystemComponent
    LastEQSTime: float
    EQSRetriggerHandle: engine.TimerHandle
    def ResetHoming(self): ...
    def OnHomingTargetDestroyed(self, Actor: engine.Actor): ...


class GrenadeLingeringBeamTriggerComponent(engine.SphereComponent):
    OverlappedActors: unreal.WrappedArray[engine.Actor]
    BeamData: unreal.UClass
    DamageType: unreal.UClass
    DamageSource: unreal.UClass
    RemovedOverlappedActors: unreal.WrappedArray[engine.Actor]
    def OnEndOverlap(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int): ...
    def OnBeginOverlap(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...


class GrenadeBehaviorStackValueResolver(gbx_game_system_core.AttributeValueResolver): ...


class GrenadeBehaviorValueResolver(gbx_game_system_core.AttributeValueResolver):
    Operator: EInstanceDataOperator
    ValueB: gbx_game_system_core.AttributeInitializationData



class GrenadeBehaviorTableResolver(gbx_game_system_core.AttributeValueResolver):
    TableGrenadeBehavior: engine.DataTableRowHandle
    AttributeBehaviorTier: gbx_game_system_core.GbxAttributeData
    AttributeBehaviorPowerScalar: gbx_game_system_core.GbxAttributeData
    bCheckPrimary: bool



class OakInventoryItem(engine.Actor):
    CanBeUsedInInventory: bool
    ConsumeWhenUsed: bool
    OverrideErrorText: str
    InventoryBalanceState: gbx_inventory.InventoryBalanceStateComponent
    def OnPickedUp(self, PickupInstigator: OakCharacter): ...
    def InventoryUsedDelegate__DelegateSignature(self, PickupInstigator: OakCharacter): ...
    def InventoryPickedUpDelegate__DelegateSignature(self, PickupInstigator: OakCharacter): ...
    def HasValidInventoryBalanceState(self, ReturnValue: bool) -> bool: ...
    def GetOverrideErrorText(self, ReturnValue: str) -> str: ...
    def CanBeUsedFromInventory(self, InventoryOwner: OakCharacter, ReturnValue: bool) -> bool: ...
    def CanBePickedUp(self, PickupInstigator: OakCharacter, Quantity: int, UsedByInstigator: bool, WorldPickupActor: gbx_inventory.InventoryItemPickup, ReturnValue: bool) -> bool: ...


class OakInventoryEquippableItem(OakInventoryItem):

    def OnUnequipped(self, EquipInstigator: OakCharacter): ...
    def OnEquipped(self, EquipInstigator: OakCharacter): ...
    def InventoryEquipDelegate__DelegateSignature(self, EquipInstigator: OakCharacter): ...


class GrenadeMod(OakInventoryEquippableItem):
    BalanceStateComponent: GrenadeModBalanceStateComponent
    Mesh3P: engine.SkeletalMeshComponent
    MeshOverride: engine.StaticMeshComponent
    StatusEffectOverrides: CauseDamageStatusEffectOverrides
    GrenadeMod_StatusEffectDamage: engine.GbxAttributeFloat
    GrenadeMod_StatusEffectChance: engine.GbxAttributeFloat
    GrenadeDelivery: GrenadeBehavior_Delivery
    ExplosionDataOverride: gbx_game_system_core.ExplosionData
    GrenadeMod_Damage: engine.GbxAttributeFloat
    GrenadeMod_ExplosionRadius: engine.GbxAttributeFloat
    GrenadeMod_ImpactFuseTime: engine.GbxAttributeFloat
    DefaultGrenadeForce: float
    GrenadeMod_Force: engine.GbxAttributeFloat
    HomingTargets: unreal.WrappedArray[engine.Actor]
    GrenadeThrowAnimationOverride: int



class OakCondition_HasGrenadeThrowAnimationOverride(gbx_runtime.GbxCondition):
    GrenadeThrowAnimationOverride: int



class OakInventoryBalanceStateComponent(gbx_inventory.InventoryBalanceStateComponent):
    bIsInstanced: bool
    AbilityAspects: unreal.WrappedArray[InventoryAbilityAspectData]
    BonusAspectList: unreal.WrappedArray[WeaponBonusAspectData]
    AttachmentAspects: unreal.WrappedArray[InventoryMeshAttachmentAspectData]
    def HandleActorDestroyed(self, Actor: engine.Actor): ...


class GrenadeModBalanceStateComponent(OakInventoryBalanceStateComponent):
    DamageTypeAspect: GrenadeDamageTypeAspectData
    DeliveryAspect: GrenadeDeliveryMethodAspectData
    PayloadAspects: unreal.WrappedArray[GrenadeBehavior_Payload]
    OverrideMesh: GrenadeOverrideMeshAspectData



class GrenadeOverrideMeshAspectData(gbx_inventory.InventoryAspectData):
    OverrideMesh: engine.StaticMesh



class GrenadePayloadMethodAspectData(gbx_inventory.InventoryAspectData):
    PayloadBehavior: GrenadeBehavior_Payload



class GrenadeProjectileMovementComponent(gbx_weapon.GbxProjectileMovementComponent):
    bRotate: bool
    RotationRate: core_uobject.Rotator



class SingularityComponent(engine.SphereComponent):
    OverlappedTargets: unreal.WrappedArray[SingularityTargetInfo]
    PendingRemoveTargets: unreal.WrappedArray[engine.Actor]
    IgnoreActors: unreal.WrappedArray[engine.Actor]
    OwningProjectile: gbx_weapon.Projectile
    OwnerTeam: gbx_game_system_core.TeamComponent
    SingularityParticles: engine.ParticleSystemComponent
    PullTag: gbx_game_system_core.HitReactionTag
    def OnEndOverlap(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int): ...
    def OnBeginOverlap(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def CreateSingularityBurst(self, Instigator: engine.Actor, SingularityInfo: SingularityBurstInfo): ...
    def CreateSingularity(self, Owner: engine.Actor, Radius: float, SingularityInfo: SingularityInitializationInfo, ReturnValue: SingularityComponent) -> SingularityComponent: ...


class GuardianRankAttributePropertyValueResolver(gbx_game_system_core.AttributeValueResolver):
    RewardData: GuardianRankRewardData



class GuardianRankModifierFormulaAttributeValueResolver(gbx_game_system_core.AttributeValueResolver):
    ModifierGrowthRate: gbx_game_system_core.AttributeInitializationData
    ModifierRank: gbx_game_system_core.AttributeInitializationData
    ModifierBaseValue: gbx_game_system_core.AttributeInitializationData



class GuardianRankPerkData(gbx_runtime.GbxDataAsset):
    PerkCategory: GuardianRankRewardCategoryData
    DisplayName: str
    Description: str
    PerkFrameName: str
    PerkAbilityClass: unreal.UClass
    PerkCustomizations: unreal.WrappedArray[OakCustomizationData]
    PerkWeaponSkins: unreal.WrappedArray[WeaponSkinPartData]
    GuardianTokensForPerk: int
    CachedPerkIndex: int



class GuardianRankRewardCategoryData(gbx_runtime.GbxDataAsset):
    DisplayName: str
    Description: str
    IconFrameName: str
    SortPriority: int



class GuardianRankRewardData(gbx_runtime.GbxDataAsset):
    RankCategory: GuardianRankRewardCategoryData
    RewardAttributeEffects: unreal.WrappedArray[gbx_game_system_core.AttributeEffectData]
    DisplayName: str
    Description: str
    RewardUIStat: gbx_game_system_core.UIStatData_Attribute
    CachedRewardIndex: int



class SeatPawn(engine.Pawn):
    MaxWeaponAimAdjustmentAngle: float
    SeatComponent: OakPawnAttachSlotComponent
    InputComponentClass: unreal.UClass
    WeaponsComponent: ActiveWeaponsComponent
    BodyWeaponHoldManager: gbx_weapon.BodyWeaponHoldManagerComponent
    bResetTurretRotationWhenUnoccupied: bool
    def StopZooming(self, bForcedStop: bool): ...
    def StopUsingWeapon(self, Slot: WeaponSlotData, InputChannel: int): ...
    def StopReload(self, Slot: WeaponSlotData): ...
    def StartZooming(self): ...
    def StartUsingWeapon(self, Slot: WeaponSlotData, InputChannel: int): ...
    def SeatAttachStateChanged(self): ...
    def Reload(self, Slot: WeaponSlotData): ...
    def IsOccupied(self, bIncludeDetaching: bool, ReturnValue: bool) -> bool: ...
    def GetOccupant(self, bIncludeDetaching: bool, ReturnValue: engine.Pawn) -> engine.Pawn: ...
    def AttachSeat(self, AttachSocket: str, AttachComponent: engine.SceneComponent): ...


class GunnersNestSeatPawn(SeatPawn):
    BalanceComponent: PassthroughBalanceStateComponent
    CustomizationComponent: gbx_game_system_core.GbxCustomizationComponent



class GunnerStandInComponent(StandInCharacterComponent):
    IronBearBlueprint: unreal.UClass
    IronBearTranslationOffset: core_uobject.Vector
    IronBearSpawnAction: unreal.UClass
    IronCubBlueprint: unreal.UClass
    IronCubTranslationOffset: core_uobject.Vector
    IronCubSpawnAction: unreal.UClass
    GunnerSpawnIronCubAction: unreal.UClass
    IronCubSpawnDelay: float
    IronCubPositionSettingContextOverrideName: str
    IronBear: StandInAuxiliaryActor_IronBear



class OakInventoryItemPickup(gbx_inventory.DroppedInventoryItemPickup):
    ItemCardDelay: float
    bFlyToOnPickup: bool
    FlyToAlignment: gbx_inventory.EPickupFlyToAlignmentType
    FlyToAlignmentOffset: core_uobject.Rotator
    DroppedPickupFlyToSettings: gbx_inventory.PickupFlyToData
    ContainerPickupFlyToSettings: gbx_inventory.PickupFlyToData
    AutoLootContainerPickupFlyToSettings: gbx_inventory.PickupFlyToData
    DefaultPickupItemPool: gbx_inventory.ItemPoolData
    ItemCardSocketName: str
    VaultRewardType: EVaultRewardType
    bTouchPickupOnFoot: bool
    bTouchPickupInVehicle: bool
    CachedUsableComponent: gbx_game_system_core.UsableComponent
    LootBeamComponent: engine.ParticleSystemComponent
    AutoPickupDelay: float
    bMassPickupable: bool
    bCauseMassPickupOnHoldUse: bool
    DesiredFlyToType: EPickupFlyToSettingsType
    bIsInstanced: bool
    bPlayedCallout: bool
    bPickupEquipped: bool
    bNoLootBeam: bool
    AssociatedInventoryRarityData: gbx_inventory.InventoryRarityData
    MissionIconComponent: gbx_mission.MissionIconComponent
    PlayerAlertType: EPlayerAlertType
    def TryMassPickupBy(self, GiveToActor: engine.Actor): ...
    def SetupZoneMapIcon(self): ...
    def SetNoLootBeam(self, bNoBeam: bool): ...
    def OnRep_NoLootBeam(self): ...
    def OnRep_bIsInstanced(self): ...
    def HandleActorDestroyed(self, Actor: engine.Actor): ...


class GunRackDisplayItem(OakInventoryItemPickup):
    AttachedToSlot: int
    AttachedToData: GunRackSlotData
    bLeavePlacedItemInInventory: bool
    PlaceObjectMenuData: gbx_ui.GbxMenuData
    AttachedToComponent: engine.SceneComponent
    DisplayTextComponent: engine.TextRenderComponent
    def IsItemOwnedBy(self, User: OakPlayerController, ReturnValue: bool) -> bool: ...
    def IsEmptyDisplayItem(self, ReturnValue: bool) -> bool: ...


class InventorySlotData(gbx_runtime.GbxDataAsset):
    SocketName: str
    bShowHolsteredOnBody: bool
    InitiallyEnabled: bool
    DisplayName: str
    DisplayDescription: str
    InventoryCategory: gbx_inventory.InventoryCategoryData



class GunRackSlotData(InventorySlotData):
    EmptyPickupActor: unreal.UClass
    WeaponTypeForSlot: gbx_weapon.WeaponTypeData



class HealthBarInfoProviderInterface(core_uobject.Interface): ...


class HealthDamagePassthroughInterface(core_uobject.Interface): ...


class HighlightComponent(engine.ActorComponent):

    def Enable(self): ...
    def Disable(self): ...
    def CreateDecalStaticMeshesComponent(self, MaterialInstanceDynamic: engine.MaterialInstanceDynamic): ...


class HitReactionLayer_OakBase(gbx_game_system_core.HitReactionLayer):
    LaunchChanceScale: float
    StaggerChanceScale: float
    ForceOnlyDamageSource: unreal.UClass
    MassTable: engine.DataTable
    FlinchTag: gbx_game_system_core.HitReactionTag
    StaggerTag: gbx_game_system_core.HitReactionTag
    LaunchTag: gbx_game_system_core.HitReactionTag



class HolsteredGearSlot(engine.Actor):
    Options: HolsteredGearSlotOptions
    AttachmentSlot1P: HolsteredGearAttachmentSlot
    AttachmentSlot3P: HolsteredGearAttachmentSlot
    PendingLikenessActor: engine.Actor
    CurrentLikenessActor: engine.Actor
    ActionComponent: gbx_game_system_core.GbxActionComponent
    CurrentState: EHolsteredGearState



class HomingEffectCollectionData(gbx_game_system_core.EffectCollectionData):
    bHasEffect: bool
    bHasAudio: bool
    DefaultEffect: engine.ParticleSystem
    HomingEffect: engine.ParticleSystem
    DefaultAudio: wwise_audio.WwiseEvent
    HomingAudio: wwise_audio.WwiseEvent



class HUDContainer(gbx_ui.GbxHUDContainer):
    OakPCOwner: OakPlayerController
    OakHUD: OakHUD



class HUDContainer_IronBear(HUDContainer):

    def UpdateManualHoldPanel(self, HoldTime: float): ...
    def TriggerCoreCooldown(self, Duration: float): ...
    def SetupHUD(self, IronBearOwner: OakCharacter_IronBear): ...
    def SetManualExitPanelVisible(self, bVisible: bool): ...


class HUDInWorldIcon(gbx_ui.GbxHUDWidget):
    Stacks: int
    IconData: InWorldIconData
    TargetSocketName: str
    def SetTargetRadius(self, InRadius: float): ...
    def SetTargetLocationOffset(self, InLocationOffset: core_uobject.Vector): ...
    def SetTargetLocationComponent(self, InTargetLocationComponent: engine.SceneComponent): ...
    def SetTargetActor(self, InTarget: engine.Actor): ...
    def SetLifeTimer(self, LifeTime: float): ...
    def SetIconData(self, InIconData: InWorldIconData): ...
    def OnVisibilityChanged(self, bVisible: bool): ...
    def OnTargetOffscreenChanged(self, bOffscreen: bool): ...
    def OnTargetLocationOffsetChanged(self, NewLocationOffset: core_uobject.Vector): ...
    def OnTargetInRangeChanged(self, bTargetInRange: bool): ...
    def OnTargetChanged(self, NewTarget: engine.Actor): ...
    def OnTargetAngleChanged(self, AngleDegrees: float): ...
    def OnNumberOfStacksChanged(self, NewStacksNumber: int): ...
    def OnLocationComponentChanged(self, NewLocationComponent: engine.SceneComponent): ...
    def OnIconDataChanged(self, NewIconData: InWorldIconData): ...
    def IsForTarget(self, Target: HUDInWorldIconTargetInfo, ReturnValue: bool) -> bool: ...
    def HasValidTarget(self, ReturnValue: bool) -> bool: ...
    def HasLifeTimeExpired(self, ReturnValue: bool) -> bool: ...
    def GetTargetRadius(self, ReturnValue: float) -> float: ...
    def GetTargetLocationOffset(self, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...
    def GetTargetLocationComponent(self, ReturnValue: engine.SceneComponent) -> engine.SceneComponent: ...
    def GetTargetLocation(self, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...
    def GetTargetActor(self, ReturnValue: engine.Actor) -> engine.Actor: ...
    def GetIconData(self, ReturnValue: InWorldIconData) -> InWorldIconData: ...


class InWorldIconData(gbx_runtime.GbxDataAsset):
    IconFrameName: str
    IconSize: core_uobject.Vector2D
    bIsAreaWaypoint: bool
    bHasSpecialMinimapVersion: bool
    bClampRadarEdge: bool
    MaxClampDistance: float
    InWorldIconType: EInWorldIconClassType
    EdgeBehavior: EInWorldIconEdgeBehavior
    bUseVisibilityRange: bool
    FadeType: EInWorldIconFadeType
    HiddenDistance: float
    VisibleDistance: float
    LifeTime: float
    MinimapIcon: unreal.UClass
    MinimapAreaIcon: unreal.UClass
    WidgetSize: core_uobject.Vector2D
    WidgetAlignment: core_uobject.Vector2D
    bStackable: bool
    IconOffsetValue: float



class HUDNotificationAsset(gbx_runtime.GbxDataAsset):
    GFxWidgetToDisplay: unreal.UClass
    IconFrame: str
    DefaultPriority: int
    bShouldInterrupt: bool
    bInterruptible: bool
    MinimumDisplayTime: float
    DesiredDisplayTime: float
    TimeoutTime: float
    bStackable: bool
    SpawnAudioOverride: str
    DespawnAudioOverride: str



class HyperHoopVehicle(engine.Actor):
    State: EHyperHoopState
    DistanceFromEndDecelerate: float
    DelayBeforeMove: float
    DelayBeforeExitAnim: float
    SplineFollowerComponent: SplineFollowerComponent
    PawnAttachSlotComponent: OakPawnAttachSlotComponent
    def StartMovement(self): ...
    def StartDetatch(self): ...
    def SetupAndStart_Rep(self, Pawn: engine.Pawn, SplineCompToFollow: engine.Actor, SplineComponentName: str, bIsReverse: bool): ...
    def SetupAndStart(self, Cont: engine.Controller, SplineActorToAttachTo: engine.Actor, SplineComponentName: str, bIsReverse: bool): ...
    def OnReachedEndOfSpline(self, SplineFollowerComponent: SplineFollowerComponent, SplineFollowerOwner: engine.Actor): ...
    def OnReachedCallbackDistance(self, SplineFollowerComponent: SplineFollowerComponent, SplineFollowerOwner: engine.Actor, CheckpointName: str): ...
    def OnDetachFinished(self, Pawn: engine.Pawn, Controller: engine.Controller): ...
    def OnAttachFinished(self, Pawn: engine.Pawn, Controller: engine.Controller): ...


class HyperionProjectedShield(InteractiveObject): ...


class TrapTriggerRenderingComponent(engine.PrimitiveComponent):
    TrapLinks: unreal.WrappedArray[InteractiveObject]



class InventoryAbilityAspectData(gbx_inventory.InventoryAspectData):
    Abilities: unreal.WrappedArray[InventoryAspectAbilityInfo]



class InventoryCustomizationBalanceStateComponent(OakInventoryBalanceStateComponent): ...


class InventoryGlobals(gbx_runtime.GbxDataAsset):
    DefaultDamageType: unreal.UClass
    GrenadeDamageData: unreal.UClass
    GrenadeModSlot: InventorySlotData
    DefaultGrenadeExplosionData: gbx_game_system_core.ExplosionData
    GrenadeCollisionChannel: int
    ThrownGrenadeClass: unreal.UClass
    GrenadeFuseWarningEmitter: engine.ParticleSystem
    DefaultDamage: gbx_game_system_core.AttributeInitializationData
    DefaultForce: gbx_game_system_core.ForceSelection
    WeaponSlot1: InventorySlotData
    WeaponSlot2: InventorySlotData
    WeaponSlot3: InventorySlotData
    WeaponSlot4: InventorySlotData
    ShieldSlot: InventorySlotData
    ClassItemSlot: InventorySlotData
    ArtifactSlot: InventorySlotData
    ManufacturerWeaponSightData: unreal.WrappedArray[ManufacturerWeaponSightData]
    CustomWeaponSightTable: engine.DataTable
    SightTargetCrosshairColors: core_uobject.LinearColor
    WeaponNamingAttributes: unreal.WrappedArray[OakWeaponNamedNamingAttribute]
    EridiumCostFormula: gbx_game_system_core.AttributeInitializationData
    ShieldSkeletalMesh: engine.SkeletalMesh
    ShieldResource: gbx_game_system_core.GameResourceData
    ShieldDamageAttribute: gbx_game_system_core.GbxAttributeData
    ShieldBreakFeedback: gbx_game_system_core.FeedbackData
    RandomDateBasedVendingMachineStrings: unreal.WrappedArray[str]
    VendingMachineRefillAmmoData: unreal.WrappedArray[VendingMachineRefillAmmoData]
    VendingMachineMarkupAttribute: gbx_game_system_core.GbxAttributeData
    PartReRollCurrency: gbx_game_system_core.GbxInventoryCategoryData
    PartReRollCostFormula: gbx_game_system_core.AttributeInitializationData
    PartReRollAttributeEffects: unreal.WrappedArray[gbx_game_system_core.AttributeEffectData]



class InventoryMeshAttachmentAspectData(gbx_inventory.InventoryAspectData):
    GestaltData: engine.GestaltData
    ComponentName: str
    GestaltMeshPartNames: unreal.WrappedArray[str]
    AttachSocket: str
    def EnumerateGestaltMeshPartNames(self, OutPartNameList: unreal.WrappedArray[str]): ...


class InventoryShopComponent(gbx_inventory.InventoryListComponent):
    StandardItemPools: gbx_inventory.ItemPoolCollection
    FeaturedItemPool: gbx_inventory.ItemPoolData
    FeaturedItemGameStage: gbx_game_system_core.AttributeInitializationData
    GameStageVarianceFormula: unreal.UClass
    bGuaranteeEndGamePartForLoot: bool
    StandardItemMarkup: gbx_game_system_core.AttributeInitializationData
    FeaturedItemMarkup: gbx_game_system_core.AttributeInitializationData
    GearSoldByFriendsMarkup: gbx_game_system_core.AttributeInitializationData
    OverridePrimaryCurrency: gbx_inventory.InventoryCategoryData
    InventoryRelevancyDistance: float
    RandomlySelectedItemPools: gbx_inventory.ItemPoolCollection
    FeaturedInventoryList: unreal.WrappedArray[engine.Actor]
    InstancedForPlayers: unreal.WrappedArray[OakPlayerController]
    def OnRep_FeaturedInventory(self): ...
    def HandleOwnerExperienceLevelChanged(self, OldExperienceLevel: int, NewExperienceLevel: int): ...
    def HandleActorDestroyed(self, Actor: engine.Actor): ...


class InventorySlotAttributeContextResolver(gbx_game_system_core.AttributeContextResolver):
    InventorySlot: InventorySlotData



class OakPlayerAnimInstance(OakCharacterAnimInstance):
    PlayerOwner: OakCharacter_Player
    bIsPistol: bool
    FirstPersonData: OakFirstPersonData
    FirstPersonViewModelOffsets: gbx_anim_runtime.InputTransforms
    FirstPersonWeaponOffsetLocation: core_uobject.Vector
    FirstPersonWeaponOffsetRotation: core_uobject.Rotator
    FirstPersonOffsetLocation: core_uobject.Vector
    FirstPersonSpeed2D: float
    FirstPersonZoomEffect: float
    FirstPersonZoomStartPosition: float
    FirstPersonTiltWeight: float
    FirstPersonMuteADSWeight: float
    FirstPersonMantleReachWeight: float
    FirstPersonWeaponAngleAlpha: float
    FirstPersonRAddAlpha: float
    FirstPersonPistolStockAddAlpha: float
    HeadBobMultiplier: float
    FirstPersonFallNoise: core_uobject.Vector
    FirstPersonFingerOverrideWeight: float
    FirstPersonLadderIdleAdditiveAlpha: float
    bFirstPersonUseAimOffset: bool
    bFirstPersonBranchLeftArm: bool
    bFirstPersonBlendMantle: bool
    bFirstPersonWeaponIsLowered: bool
    bFirstPersonBlendLowerWeapon: bool
    bIsEchoDeviceActive: bool
    bShouldPlayEchoAnim1P: bool
    bShouldPlayEchoAnim3P: bool
    bEchoDeviceOutsideOfMenuMode: bool
    bEchoDeviceButton1Pressed: bool
    bEchoDeviceButton2Pressed: bool
    bEchoDeviceButton3Pressed: bool
    EchoDeviceDPadXAxis: float
    EchoDeviceDPadYAxis: float
    JumpStartVelocityZ: float
    StartFallingVelocityZ: float
    JumpStartFromFallMaximumVelocityZ: float
    FallingAnimVelocityZ: float
    CrouchMaxVelocityZ: float
    FirstPersonSprintJumpStartVelocityZ: float
    FirstPersonCrouchMaxVelocityZ: float
    JumpEndMinSpeed2D: float
    SprintMinSpeed2D: float
    IdleMaxSpeed2D: float
    CrouchEndMaxSpeed2D: float
    InjuredSpeedDivider: float
    InjuredPlayRate: float
    FirstPersonSprintJumpExitMaxSpeed: float
    FirstPersonJumpExitMinSpeed: float
    FirstPersonSprintMinSpeed2D: float
    FirstPersonBunnyHopTiming: float
    FirstPersonBunnyHopTiming_Sprint: float
    BaseFrontDirectionMinThreshold: float
    BaseFrontDirectionMaxThreshold: float
    FrontToBackTransitionFrontDirectionMinThreshold: float
    FrontToBackTransitionFrontDirectionMaxThreshold: float
    InjuredFrontDirectionMinThreshold: float
    InjuredFrontDirectionMaxThreshold: float
    InjuredFrontToBackTransitionFrontDirectionMinThreshold: float
    InjuredFrontToBackTransitionFrontDirectionMaxThreshold: float
    InjuredBackToFrontTransitionFrontDirectionMinThreshold: float
    InjuredBackToFrontTransitionFrontDirectionMaxThreshold: float
    SprintFrontDirectionMinThreshold: float
    SprintFrontDirectionMaxThreshold: float
    bIsIdling: bool
    bIsCrouchIdling: bool
    bWasSprinting: bool
    bCanFallJump: bool
    FallingSpeedAlpha: float
    StateChangeBlendTime: float
    bIsJumpEnded: bool
    bIsCrouchMoveEnded: bool
    bIsCrouchMoveNeedEnding: bool
    bIsCrouchEndDone: bool
    bIsCrouchNeedStarting: bool
    bIsCrouchNeedMoving: bool
    bIsCrouchInVehicle: bool
    bIsExitingLadderInAir: bool
    bIsExitingLadderNotInAir: bool
    bIsClimbingLadder: bool
    bIsJumpStart: bool
    bIsSprintJumpStart: bool
    bIsJumpLoop: bool
    bIsSprintJumpLoop: bool
    bIsJumpEndedBySpeed: bool
    bIsBaseLocoGoingForward: bool
    bIsBaseLocoGoingBackward: bool
    bIsBaseLocoGoingFrontToBack: bool
    bIsSprintLocoExitForward: bool
    bIsSprintLocoExitBackward: bool
    bIsSprintLocoExitForwardNoBlend: bool
    bIsSprintLocoExitBackwardNoBlend: bool
    bIsInjuredLocoGoingForward: bool
    bIsInjuredLocoGoingBackward: bool
    bIsInjuredLocoGoingFrontToBack: bool
    bIsInjuredLocoGoingBackToFront: bool
    bCanStartSprinting: bool
    LeftHandIKWhileAimOffset: float
    AimOffsetDefaultBoneSet: engine.GbxBoneSet
    AimOffsetCurrentBoneSet: engine.GbxBoneSet
    bFirstPersonIsJumpLoop: bool
    bFirstPersonIsSprintJumpStart: bool
    bFirstPersonIsCrouchNeedMoving: bool
    bFirstPersonIsCrouchNeedStarting: bool
    bFirstPersonIsCrouchExit: bool
    bFirstPersonCanUseCrouchTransition: bool
    GunnerBockJockBlitzPassiveSkillModifierAlpha: float
    bFirstPersonIsJumpIdle: bool
    bFirstPersonIsSlidingToLocomotion: bool
    bFirstPersonIsIdling: bool
    bFirstPersonToIdleToSprintTransitionState: bool
    bFirstPersonIdleToSprint: bool
    bFirstPersonSprintToIdle: bool
    bFirstPersonSprintToSprintTransition: bool
    bFirstPersonADSJumpEnter: bool
    bFirstPersonADSCrouchStart: bool
    bFirstPersonADSCrouchMove: bool
    bFirstPersonADSJumpLoop: bool
    bFirstPersonADSToHipFire: bool
    bFirstPersonExitLowerWeapon: bool
    bFirstPersonUnarmedIsJumpStarted: bool
    bFirstPersonUnarmedIsSprintJumpStart: bool
    bFirstPersonHardLanded: bool
    RightHandInteractionBottomPressAssetPlayerIndex: int
    RightHandInteractionBottomPressToHoldTransitionIndex: int
    RightHandInteractionMiddlePressAssetPlayerIndex: int
    RightHandInteractionMiddleToNeutralTransitionIndex: int
    RightHandInteractionTopPressAssetPlayerIndex: int
    RightHandInteractionTopPressToHoldTransitionIndex: int
    ADSSetStateMachineIndex: int
    ADSSetJumpExitStateIndex: int
    ADSSetJumpExitToJumpEnterTransitionIndex: int
    HipfireSetStateMachineIndex: int
    HipfireSetJumpExitStateIndex: int
    HipfireSetJumpExitToJumpEnterTransitionIndex: int
    HipfireSetJumpExitToUprightIdleAndMovementTransitionIndex1: int
    HipfireSetSprintExitAssetPlayerIndex: int
    HipfireSetSprintExitToUprightIdleAndMovementTransitionIndex1: int
    HipfireSetSprintJumpExitStateIndex: int
    HipfireSetSprintJumpExitToSprintJumpEnterTransitionIndex: int
    HipfireSetSprintJumpExitToSprintExitTransitionIndex: int
    HipfireSetSprintJumpExitToUprightIdleAndMovementTransitionIndex2: int
    UprightLocomotionStatesStateMachineIndex: int
    UprightLocomotionStatesIdleToSprintAssetPlayerIndex: int
    UprightLocomotionStatesIdleToSprintToIdleTransitionIndex2: int
    UprightLocomotionStatesIdleToSprintStateIndex: int
    UprightLocomotionStatesIdleToSprintToSprintTransitionTransitionIndex: int
    UprightLocomotionStatesSprintTransitionStateIndex: int
    UprightLocomotionStatesSprintTransitionToLocomotionTransitionIndex1: int
    UprightLocomotionStatesSprintExitAssetPlayerIndex: int
    UprightLocomotionStatesSprintTransitionToLocomotionTransitionIndex2: int
    UnarmedSetStateMachineIndex: int
    UnarmedSetJumpExitStateIndex: int
    UnarmedSetJumpExitToJumpEnterTransitionIndex: int
    def OnWeaponReloadStarted(self, Weapon: gbx_weapon.Weapon, bAuto: bool): ...
    def OnWeaponReloadEnded(self, Weapon: gbx_weapon.Weapon, bCompleted: bool): ...
    def AnimNotify_Raised(self): ...
    def AnimNotify_IsLowered(self): ...


class IronBearAnimInstance_FirstPerson(OakPlayerAnimInstance):
    Slot_HPL_Active: bool
    Slot_HPR_Active: bool
    R_Fist_Weight: float
    L_Fist_Weight: float
    L_Fist_Weight_Inv: float
    R_Fist_Weight_Inv: float
    FistTorsoWeight: float



class IronBearAnimInstance_ThirdPerson(OakPlayerAnimInstance):
    R_Fist_Weight: float
    L_Fist_Weight: float
    def IsAugmentSlotted(self, InAugment: OakActionAbilityAugmentData, ReturnValue: bool) -> bool: ...


class IronBearBubbleShieldAnimInstance(engine.AnimInstance):
    FanRotator: core_uobject.Rotator
    BlendPose: int
    RotationAxis: core_uobject.Vector
    SpinDownRateMultiplier: float
    SpinUpRateMultiplier: float
    RailgunHardpoint: OakWeapon_IronBearHardPoint
    bCanBeginSpinning: bool
    NewRotationRate: float
    def OnRailgunStartFiring(self): ...
    def OnRailgunFired_Default(self): ...
    def OnRailgunFinishFiring(self): ...


class IronBearGunnersNestAnimInstance(engine.AnimInstance):
    TurretRotator: core_uobject.Rotator
    SeatPawnActor: SeatPawn
    bDetaching: bool



class IronBearMinigunAnimInstance(engine.AnimInstance):
    UpperBarrelRotation: core_uobject.Rotator
    LowerBarrelRotation: core_uobject.Rotator
    DefaultSpinRate: core_uobject.Vector
    Mod3SpinRate: core_uobject.Vector
    MinigunHardpoint: OakWeapon_IronBearHardPoint



class IronBearMinigunEffectCollectionData(gbx_game_system_core.EffectCollectionData):
    DefaultEffect: engine.ParticleSystem
    CryoEffect: engine.ParticleSystem
    ExplosiveEffect: engine.ParticleSystem
    OverheatEffect: engine.ParticleSystem



class WeaponGenericUseComponent(gbx_weapon.WeaponUseComponent):
    bIsSelfContainedLoopingMontage: bool
    bIsUsing: bool
    def OnRep_bIsUsing(self): ...


class IronBearWeaponUseComponent_Jackhammer(WeaponGenericUseComponent):
    FireRate: engine.GbxAttributeFloat
    AccuracyImpulse: engine.GbxAttributeFloat
    def AnimNotify_OnUsed(self): ...


class JumpPad(InteractiveObject):
    LaunchTouchComponent: engine.PrimitiveComponent
    LaunchTouchComponentName: str
    ControlledMoveClass: unreal.UClass
    LaunchCondition: gbx_runtime.GbxCondition
    bLockInstanceLaunchSpeed: bool
    LaunchSpeed: float
    LaunchAngle: float
    bLinkDestination: bool
    Destination: core_uobject.Vector
    bSpawnUserEdge: bool
    LinkedUserEdge: gbx_nav.HavokUserEdgeActor
    def SetJumpPadEnabled(self, bEnabled: bool): ...
    def OnLaunched(self, Character: OakCharacter): ...
    def OnCharacterTouch(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def Launch(self, Character: OakCharacter): ...
    def GetValidAssociatedComponentNames(self, Array: unreal.WrappedArray[str]): ...


class JumpPadRenderingComponent(engine.PrimitiveComponent): ...


class LargeLiquidBody(engine.Volume):
    LargeLiquidBodyConfiguration: LargeLiquidBodyConfigurationData
    bPlayDefaultPuddleAudio: bool
    UseFloorMesh: bool
    IsSeaLevelActor: bool
    bOverrideColor: bool
    bOverrideOpacity: bool
    bOverrideNormalStrength: bool
    bOverrideMovementSpeed: bool
    bOverrideDepthFade: bool
    FloorMesh_Material: engine.MaterialInterface
    FloorMesh_Offset: float
    SeaLevelMaterialParameterCollection: engine.MaterialParameterCollection
    SeaLevelValue: float
    Color: core_uobject.LinearColor
    ColorHighlights: core_uobject.LinearColor
    Opacity: float
    NormalStrength: float
    MovementSpeed: float
    DepthFade: float
    LiquidAudioComponent: wwise_audio.WwiseAudioComponent
    LiquidSurfaceMesh: procedural_mesh_component.ProceduralMeshComponent
    BalanceState: RegionBalanceStateComponent
    ElementalInteraction: ElementalInteractionComponent
    PainterComponent: gbx_nav.GbxNavMeshPainterComponent
    SurfaceSections: unreal.WrappedArray[LargeLiquidBodySurfaceSection]
    def OnEndOverlapSurfaceMesh(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int): ...
    def OnEndNegateElementalDamage(self, OverlappedActor: engine.Actor, OtherActor: engine.Actor): ...
    def OnElementalReactionDestroyed(self, ElementalReaction: engine.Actor): ...
    def OnBeginOverlapSurfaceMesh(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def OnBeginNegateElementalDamage(self, OverlappedActor: engine.Actor, OtherActor: engine.Actor): ...


class LargeLiquidBodyConfigurationData(gbx_runtime.GbxDataAsset):
    SurfaceParticle: engine.ParticleSystem
    NearbyExplosionData: gbx_game_system_core.ExplosionData
    ElementalInteractionConfiguration: ElementalInteractionConfigurationData
    ElementalReactionConfiguration: ElementalPuddleConfigurationData
    bElementalReactionNegatesDamage: bool
    LocalReactionPuddleClass: unreal.UClass



class LevelActorPersistenceInterface(core_uobject.Interface): ...


class LevelActorPersistenceManager(unreal.UObject): ...


class LevelAssetListData(engine.PrimaryAssetLabel):
    LevelData: unreal.WrappedArray[LevelAssetList]



class LevelMultiplierAttributeValueResolver(gbx_game_system_core.AttributeValueResolver):
    Value: LevelMultiplierDefinedValueRow



class LootableObject(InteractiveObject):
    LootDefinition: gbx_inventory.LootableBalanceData
    SpawnLootTiming: ELootSpawnTiming
    ShouldAttachLoot: bool
    bMaintainStateAcrossMapLoads: bool
    PersistenceData: LootablePersistenceData
    bOptOutOfLevelPersistence: bool
    bOpenInResponseToDamage: bool
    bUseOverlapEventsIfDamageable: bool
    bSimulatePhysicsAfterOpening: bool
    DelayBeforeSimulatePhysics: float
    DamagedOpeningInteractions: unreal.WrappedArray[LootableDirectionalResponse]
    OpeningInteractions: unreal.WrappedArray[LootableInteractionResponse]
    ConditionalOpeningInteractions: unreal.WrappedArray[ConditionalLootableInteractionResponse]
    ClosingInteractions: unreal.WrappedArray[LootableInteractionResponse]
    bIsBonePile: bool
    Bones: unreal.WrappedArray[str]
    DefaultBonePileResponse: LootablePileInteractionResponse
    BonePileDamageResponses: unreal.WrappedArray[LootablePileDamageInteraction]
    bUseMeshSwap: bool
    MeshSwapData: LootableMeshSwapData
    PhysicsBodiesToDisablePawnCollisionWithAfterOpening: unreal.WrappedArray[str]
    bSearchableByEQS: bool
    bControlledByMissionPickupObjective: bool
    MissionDrivenType: EMissionDrivenLootableType
    SelfMissionObjective: gbx_mission.MissionObjectiveReferenceWeak
    PickupMissionObjective: gbx_mission.MissionObjectiveReferenceWeak
    MissionEventToSendOnOpening: gbx_mission.MissionEventReference
    OpenedCondition: gbx_runtime.GbxCondition
    ClosedCondition: gbx_runtime.GbxCondition
    UsableComponent: gbx_game_system_core.UsableComponent
    PlayerThatOpenedMe: engine.PlayerController
    OpenReason: ELootableOpenReason
    OpeningDamageSource: unreal.UClass
    OpeningDamageHitForce: core_uobject.Vector
    OpeningDamageHitLocation: core_uobject.Vector
    AnimState: LootableAnimState
    MeshComponent: engine.SkeletalMeshComponent
    LootableComponent: OakLootableComponent
    MissionIconComponent: OakMissionIconComponent
    MissionObserverComponent: gbx_mission.MissionObserverComponent
    CurrentResponse: LootableInteractionResponse
    CustomResponseIdx: int
    def OnUsedBy(self, UseEvent: gbx_game_system_core.UseEvent): ...
    def OnRep_AnimState(self): ...
    def OnLootableTakeDamage(self, Details: LootableObjectDamageEventDetails): ...
    def DoLootSpawning(self): ...
    def DisassociateSpawnedLootFromThis(self): ...
    def ClearCurrentInteractionResponse(self): ...
    def ChangeBalanceTableRow(self, NewBalanceTableRow: engine.DataTableRowHandle): ...


class LootSpawnPatternData(gbx_game_system_core.PhysicsSpawnPatternData):
    bEnableRadius: bool
    bEnableRadiusRange: bool
    Radius: float
    MaxRadius: float



class LostLootMachine(InteractiveObject):
    CurrentLostLootCount: int
    MaxLostLootSize: int
    def OnSetScreenState(self, UsagePercentage: float): ...
    def OnLostLootChanged(self): ...


class LowGravHoveringComponent(engine.ActorComponent):
    TotalHoveringTime: float
    DisplacementHeightOnHit: float
    TotalOscillation: float
    def OnHit(self, OwnerActor: engine.Actor, OtherActor: engine.Actor, NormalImpulse: core_uobject.Vector, Hit: engine.HitResult): ...


class MainMenuCameraController(engine.Actor):
    MinZoomDistance: float
    MaxZoomDistance: float
    ZoomSpeed: float
    MinOffsetDistance: float
    MaxOffsetDistance: float
    MinFocusDistance: float
    MaxFocusDistance: float
    MinFocalDistance: float
    MaxFocalDistance: float
    MaxPitchAngle: float
    MinPitchAngle: float
    RotationSpeed: float
    LookAtActor: engine.Actor
    SubjectActor: engine.Actor
    CameraActor: engine.CameraActor
    def Setup(self, InLookAtActor: engine.Actor, InSubjectActor: engine.Actor, InCameraActor: engine.CameraActor): ...


class MainMenuCameraManager(gbx_camera_modes.PlayerCameraModesManager):
    DefaultCameraModeSet: gbx_camera_modes.CameraModeSetData
    DefaultCameraMode: str



class ManagedWidget(gbx_ui.GbxHUDWidget):
    IntroAnimation: umg.WidgetAnimation
    IdleAnimation: umg.WidgetAnimation
    ExitAnimation: umg.WidgetAnimation
    WidgetType: EManagedWidgetType



class MatchmakerSettings(unreal.UObject):
    RetryDelaySeconds: float
    RetryJitterSeconds: float
    SearchThresholdSeconds: float
    MatchmakingRoundDuration: float
    BackfillMatchmakingRoundDuration: float
    HostTravelDelaySeconds: float
    InitialAdvertiseChance: float
    ConfirmPlayersCountdownSeconds: float
    ConfirmPlayersQuickStartCountdownSeconds: float



class MatchmakingSearchDefinitions(unreal.UObject):
    CampaignSearchDefinition: MatchmakingSearchDefinition
    SearchDefinitions: unreal.WrappedArray[MatchmakingSearchDefinition]
    DefaultMaxSearchResults: int



class MatchmakingTest(unreal.UObject):

    def StartMatchmaking(self): ...
    def OnMatchmakingUpdated(self, NumPlayers: int): ...
    def OnMatchmakingStarted(self): ...
    def OnMatchmakingError(self, Error: str): ...
    def OnMatchmakingCompleted(self, bSuccess: bool): ...
    def CancelMatchmaking(self): ...


class MayhemModeAbilityStatusEffect(gbx_game_system_core.StatusEffectData):
    AbilityClass: unreal.UClass
    bAllowedToRunOnVehicles: bool



class MayhemModeFunctionLibrary(engine.BlueprintFunctionLibrary):

    def TryMapReloadForMayhemActivityOrLevelChange(self, WorldContextObject: unreal.UObject, OptionalInstigator: OakPlayerController, MayhemLevel: int, RandomSeed: int, ReturnValue: EPOIActivationResult) -> EPOIActivationResult: ...
    def RerollNonCurrent(self, WorldContextObject: unreal.UObject): ...
    def MutateRandomSeed(self, WorldContextObject: unreal.UObject): ...
    def IsMayhemModeAvailable(self, WorldContextObject: unreal.UObject, ReturnValue: bool) -> bool: ...
    def IsMayhemModeActive(self, WorldContextObject: unreal.UObject, ReturnValue: bool) -> bool: ...
    def GetRandomSeed(self, WorldContextObject: unreal.UObject, ReturnValue: int) -> int: ...
    def GetMayhemLevel(self, WorldContextObject: unreal.UObject, ReturnValue: int) -> int: ...
    def GetMaxMayhemLevel(self, WorldContextObject: unreal.UObject, ReturnValue: int) -> int: ...
    def GetConditionallyOverriddenMayhemLevel(self, WorldContextObject: unreal.UObject, ReturnValue: int) -> int: ...
    def DeactivateMayhemMode(self, WorldContextObject: unreal.UObject): ...
    def AssignOptionalOverrides(self, WorldContextObject: unreal.UObject, OptionalOverrides: MayhemDebugOverrides): ...
    def ActivateMayhemMode(self, WorldContextObject: unreal.UObject, MayhemLevel: int, RandomSeed: int): ...


class MayhemModeTwoDataAsset(gbx_runtime.GbxDataAsset):
    MaxMayhemLevel: int
    CoreModifierSet: MayhemCoreModifierSet
    RandomModifierSlots: unreal.WrappedArray[MayhemModifierSlotInterface]
    OverrideData: MayhemOverrideDataAsset
    MapsToExclude: unreal.WrappedArray[str]



class MayhemModifierSlotInterface(gbx_runtime.GbxDataAsset): ...


class MayhemModifierSlotDataAsset(MayhemModifierSlotInterface):
    ModifierSets: unreal.WrappedArray[MayhemModifierSet]



class MayhemModifierSlotCollectionDataAsset(MayhemModifierSlotInterface):
    Collection: unreal.WrappedArray[MayhemModifierSlotDataAsset]



class MayhemOverrideDataAsset(gbx_runtime.GbxDataAsset):
    MaxMayhemLevelOverride: int
    PerLevelOverrides: unreal.WrappedArray[MayhemModeTwoLevelOverride]



class MenuMapCameraData(gbx_runtime.GbxDataAsset):
    DefaultBlendParams: MainMenuCameraBlendParamsSet
    BlendOverrides: unreal.WrappedArray[MainMenuCameraViewpointBlendPair]
    CameraOffsetInterpSpeed: float
    InspectCameraTransitionDuration: float
    DefaultPostProcessSettings: engine.PostProcessSettings
    NewsMenuPostProcessSettings: engine.PostProcessSettings
    NewsMenuPostProcessBlendInTime: float
    NewsMenuPostProcessBlendOutTime: float



class MenuMapClaptrapSkitControl(engine.Actor):

    def OnSkitComplete(self): ...
    def OnAllSkitsComplete(self): ...


class MenuMapMenuFlow(engine.Actor):
    MainMenuMenuData: gbx_ui.GbxMenuData
    TitleScreenMenuData: gbx_ui.GbxMenuData
    LegalScreenMenuData: gbx_ui.GbxMenuData
    SecondsBetweenClaptrapSkits: int
    CameraData: MenuMapCameraData
    CameraViewpoints: MainMenuCameraViewpointGroup
    OakPlayerController: OakPlayerController
    NextMenuData: gbx_ui.GbxMenuData
    CurrentViewpointType: EMainMenuViewpointType
    def Start(self, OutInitialPlayerStatus: int): ...
    def ShowLegalScreen(self): ...
    def OnWorldTransitionCompleted(self): ...
    def OnPlayerControllerLogIn(self, InOakPlayerController: OakPlayerController): ...
    def OnMenuTransitionOutCompleted(self, InMenuTransition: gbx_ui.EMenuTransition, InNextMenuData: gbx_ui.GbxMenuData): ...
    def OnMenuStackPush(self, InMenuPushed: unreal.UObject): ...
    def OnLegalScreenCompleted(self, LegalScreenMenu: GFxOakLegalScreenMenu): ...


class MenuMapScene(engine.Actor):
    ClaptrapSkitSublevels: unreal.WrappedArray[ClaptrapSkitSublevel]
    def OnClaptrapSkitSublevelUnloaded(self): ...
    def OnClaptrapSkitSublevelLoaded(self): ...


class MineCart(engine.Actor):
    SplineMovementComponent: SplineMovementComponentDoubleLinked
    HavokNavObstacleComponent: gbx_nav.HavokNavObstacleComponent
    PrimitiveComponent: engine.PrimitiveComponent
    CharacterImpulse: float
    bCanBePushedByPlayer: bool
    bShouldCheckCollision: bool
    def OnHit(self, HitComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, NormalImpulse: core_uobject.Vector, Hit: engine.HitResult): ...


class MineCart_Skeletal(MineCart): ...


class MineCart_Static(MineCart): ...


class MinimapWorldAnchor(engine.Actor): ...


class Mission_InteractiveObject(InteractiveObject):
    bAutomaticallyControlWaypoint: bool
    bUseComplexConditions: bool
    ObjectiveToCareAbout: gbx_mission.MissionObjectiveReference
    ConditionActiveState: gbx_game_system_core.UserStateEnumValue
    ConditionCompleteState: gbx_game_system_core.UserStateEnumValue
    ObserverComponent: gbx_mission.MissionObserverComponent
    IconComponent: gbx_mission.MissionIconComponent



class MissionPathSubpointWidget(HUDInWorldIcon):
    PathActiveAnimation: umg.WidgetAnimation
    PathSpawnAnimation: umg.WidgetAnimation



class MissionTrackerSlotController(gbx_ui.GbxUserWidget):
    CompleteAnimation: umg.WidgetAnimation
    CheckedAnimation: umg.WidgetAnimation
    AddAnimation: umg.WidgetAnimation
    BaseAnimation: umg.WidgetAnimation
    def SetObjectiveDescription(self, ObjectiveText: str): ...
    def ResetAnimations(self): ...
    def MissionTrackerAnimationEvent__DelegateSignature(self, Widget: umg.UserWidget, WidgetAnimation: umg.WidgetAnimation): ...
    def GetObjectiveDescription(self, ReturnValue: str) -> str: ...


class MissionTrackerTitle(gbx_ui.GbxUserWidget):

    def SetMultipleMissionIconVisibility(self, bIsVisible: bool): ...
    def SetMissionName(self, MissionText: str): ...


class MovableDamageableHISM(DamageableHISM):
    StartLocation: core_uobject.Vector
    EndLocation: core_uobject.Vector
    Speed: float
    NumberbOfSM: int
    MyHISM: engine.HierarchicalInstancedStaticMeshComponent
    def StopMovable(self): ...
    def StartMovable(self): ...


class NameplateInfoProviderInterface(core_uobject.Interface): ...


class NekrobugAnimInstance(OakCharacterAnimInstance):
    bIsGround: bool
    GroundLookAtNodeAlpha: float
    bIsFlyer: bool
    FlyerLookAtNodeAlpha: float



class NewGameFlow(engine.Actor):
    InitialMission: unreal.UClass
    TransitionColor_ToRockNRoll: core_uobject.LinearColor
    TransitionColor_ToCharacterSelect: core_uobject.LinearColor
    TransitionColor_ToBusRide: core_uobject.LinearColor
    TransitionColor_ToGameplay: core_uobject.LinearColor
    TimeOfDay: float
    FadeDuration: float
    RnRInitialSceneViewLocation: core_uobject.Vector
    RnRInitialSceneMaterials: unreal.WrappedArray[engine.MaterialInterface]
    def PushCharacterSelectMenu(self): ...
    def OnRockNRollStarted(self): ...
    def OnRockNRollFinished(self): ...
    def OnBusRideStarted(self): ...
    def OnBusRideFinished(self): ...


class NewGameSettings(unreal.UObject):
    CharacterSelectTimeInSeconds: int
    CharacterSelectQuickStartTimeInSeconds: int
    NewGameMap: str
    CharacterSelectCompletionEvent: str
    IntroMovies: unreal.WrappedArray[str]



class NPCInteractionBlueprintLibrary(engine.BlueprintFunctionLibrary):

    def TakeObjectFromPlayerThenGiveBack(self, TheNPC: engine.Actor, bUseAlternateStance: bool, MissionEvent: gbx_mission.MissionEventReference, LatentInfo: engine.LatentActionInfo): ...
    def TakeObjectFromPlayer(self, TheNPC: engine.Actor, bUseAlternateStance: bool, MissionEvent: gbx_mission.MissionEventReference, LatentInfo: engine.LatentActionInfo): ...
    def SetObjectToHold(self, TheNPC: engine.Actor, TheStaticMeshToHold: engine.StaticMesh, ThePickupToHold: gbx_inventory.ItemPoolInfo, LocationOffset: core_uobject.Vector, RotationOffset: core_uobject.Rotator, ScaleOffset: float, HandSocketName: str, PutAwayTimeOffset: float, TakeOutTimeOffset: float): ...
    def NotifyNPCUsedByPlayer(self, TheNPC: engine.Actor, ReturnValue: bool) -> bool: ...
    def GiveObjectToPlayer(self, TheNPC: engine.Actor, bUseAlternateStance: bool, MissionEvent: gbx_mission.MissionEventReference, LatentInfo: engine.LatentActionInfo): ...


class NPCInteractionComponent(engine.ActorComponent):
    StanceGiveToPlayer: gbx_game_system_core.StanceDataProvider
    StanceGiveToPlayerAlt: gbx_game_system_core.StanceDataProvider
    StanceTakeFromPlayer: gbx_game_system_core.StanceDataProvider
    StanceTakeFromPlayerAlt: gbx_game_system_core.StanceDataProvider
    ExamineItemActionKey: gameplay_tags.GameplayTag
    AttractParticleSystem: engine.ParticleSystem
    GhostMaterialForHeldObjects: engine.MaterialInterface
    AudioEventWhenItemChangesHands: wwise_audio.WwiseEvent
    TagForHeldObjectStaticMeshComponent: str
    DefaultHandSocketName: str
    ReplicatedState: ReplicatedInteractionInfo
    AttractParticleComp: engine.ParticleSystemComponent
    CallbackTarget: unreal.UObject
    def TakeObjectFromPlayerThenGiveBack(self, bUseAlternateStance: bool, InMissionEvent: gbx_mission.MissionEventReference, LatentInfo: engine.LatentActionInfo): ...
    def TakeObjectFromPlayer(self, bUseAlternateStance: bool, InMissionEvent: gbx_mission.MissionEventReference, LatentInfo: engine.LatentActionInfo): ...
    def SpawnedLootCallback(self, Pickup: gbx_inventory.DroppedInventoryItemPickup): ...
    def SetObjectToHold(self, TheStaticMeshToHold: engine.StaticMesh, ThePickupToHold: gbx_inventory.ItemPoolInfo, InOffsetTransform: core_uobject.Transform, InHandSocketName: str, InPutAwayTimeOffset: float, InTakeOutTimeOffset: float): ...
    def OnRep_ReplicatedState(self, OldReplicatedState: ReplicatedInteractionInfo): ...
    def NPCInteractionLootEvent__DelegateSignature(self, Pickup: gbx_inventory.DroppedInventoryItemPickup): ...
    def LootDestroyedCallback(self, DestroyedActor: engine.Actor): ...
    def GiveObjectToPlayer(self, bUseAlternateStance: bool, InMissionEvent: gbx_mission.MissionEventReference, LatentInfo: engine.LatentActionInfo): ...
    def ExamineActionFinishedCallback(self, EndState: gbx_game_system_core.EGbxActionEndState): ...


class OakAbilityContextResolver_PetOwner(gbx_game_system_core.CharacterAttributeContextResolver): ...


class OakAbilityContextResolver_ActionAbility(gbx_game_system_core.AttributeContextResolver):
    ActionAbilityClass: unreal.UClass



class GbxListItemText_CharacterDebugMenu(gbx_ui.GbxListItemText): ...


class OakAbilityDebugMenuCascadingList(gbx_ui.GbxUserWidget):
    DefaultListItemClass: unreal.UClass
    ListViews: unreal.WrappedArray[gbx_ui.GbxGridListWidget]
    ActiveList: gbx_ui.GbxGridListWidget
    def SetActiveList(self, List: gbx_ui.GbxGridListWidget): ...
    def OnItemSelected_Internal(self, Item: gbx_ui.GbxListItem): ...
    def OnItemClicked_Internal(self, Item: gbx_ui.GbxListItem): ...


class OakAbility(gbx_abilities.GbxAbility):
    AbilityTimers: unreal.WrappedArray[OakAbilityTimer]
    def StopTimer(self, Timer: OakAbilityTimerData): ...
    def StopAbilityTimer(self, Timer: OakAbilityTimerData): ...
    def StartTimer(self, InSpec: OakAbilityTimerSpec): ...
    def StartAbilityTimer(self, InSpec: OakAbilityTimerSpec): ...
    def ResetTimer(self, Timer: OakAbilityTimerData): ...
    def ResetAbilityTimer(self, Timer: OakAbilityTimerData): ...
    def OnTimerStopped(self, Spec: OakAbilityTimerSpec): ...
    def OnTimerStarted(self, Spec: OakAbilityTimerSpec): ...
    def OnTimerFinished(self, Spec: OakAbilityTimerSpec): ...
    def OnAbilityTimerStarted(self, Spec: OakAbilityTimerSpec): ...
    def OnAbilityTimerEnded(self, Spec: OakAbilityTimerSpec, Result: OakAbilityTimerResult): ...
    def IsTimerActive(self, TimerData: OakAbilityTimerData, ReturnValue: bool) -> bool: ...
    def IsAbilityTimerActive(self, TimerData: OakAbilityTimerData, ReturnValue: bool) -> bool: ...
    def GetAbilityTimerValue(self, Timer: OakAbilityTimerData, ReturnValue: float) -> float: ...


class OakAbilityCondition_OakAnimActionAbilityActionSucceeded(gbx_runtime.GbxCondition): ...


class OakAbilityEffectTargetResolutionData_Allies(gbx_abilities.GbxAbilityEffectTargetResolutionData): ...


class OakAbilityEffectTargetResolutionData_Custom(gbx_abilities.GbxAbilityEffectTargetResolutionData):
    Planets: unreal.WrappedArray[PlanetData]
    Teams: unreal.WrappedArray[gbx_game_system_core.Team]
    GameplayTags: unreal.WrappedArray[gameplay_tags.GameplayTag]



class OakAbilityEffectTargetResolutionData_Enemies(gbx_abilities.GbxAbilityEffectTargetResolutionData):
    PlayersTeam: gbx_game_system_core.Team



class OakAbilityEffectTargetResolutionData_HasTag(gbx_abilities.GbxAbilityEffectTargetResolutionData):
    GameplayTags: unreal.WrappedArray[gameplay_tags.GameplayTag]



class OakAbilityEffectTargetResolutionData_OnPlanet(gbx_abilities.GbxAbilityEffectTargetResolutionData): ...


class OakAbilityEffectTargetResolutionData_OnTeam(gbx_abilities.GbxAbilityEffectTargetResolutionData):
    Teams: unreal.WrappedArray[gbx_game_system_core.Team]



class OakAbilityEffectTargetResolutionData_Pet(gbx_abilities.GbxAbilityEffectTargetResolutionData):
    bIsClassModResolver: bool



class OakAbilityEffectTargetResolutionData_PetOfOneOnTeam(gbx_abilities.GbxAbilityEffectTargetResolutionData):
    Teams: unreal.WrappedArray[gbx_game_system_core.Team]



class OakAbilityEffectTargetResolutionData_Vehicles(gbx_abilities.GbxAbilityEffectTargetResolutionData): ...


class OakAbilityResourceControllerBlueprintFunctionLibrary(engine.BlueprintFunctionLibrary):

    def UnregisterWeaponShotModifier(self, Controller: OakAbilityResourceController_WeaponShotModifier, Spec: OakAbilityResourceSpec_WeaponShotModifier): ...
    def UnregisterSirenRushStack(self, Controller: OakAbilityResourceController_SirenRushStack, Spec: OakAbilityResourceSpec_SirenRushStack): ...
    def RegisterWeaponShotModifier(self, Controller: OakAbilityResourceController_WeaponShotModifier, Spec: OakAbilityResourceSpec_WeaponShotModifier): ...
    def RegisterSirenRushStack(self, Controller: OakAbilityResourceController_SirenRushStack, Spec: OakAbilityResourceSpec_SirenRushStack): ...


class OakAbilityTimerAttributePropertyValueResolver(gbx_game_system_core.AttributePropertyValueResolver): ...


class OakAbilityTimerData(gbx_runtime.GbxDataAsset):
    TimerName: str



class OakPassiveAbilityTestGradeValueResolver(gbx_game_system_core.AttributeValueResolver): ...


class UIStatData_OakPassiveAbilityAttribute(gbx_game_system_core.UIStatData_Numeric):
    StatusEffectData: gbx_game_system_core.StatusEffectData
    Attribute: gbx_game_system_core.GbxAttributeData



class UIStatData_OakPassiveAbilityAttributeInitializer(gbx_game_system_core.UIStatData_Numeric):
    Initializer: gbx_game_system_core.AttributeInitializationData



class OakAchievementUtility(gbx_game_system_core.AchievementUtility):

    def UpdateAchievementForPlayer(self, pc: gbx_game_system_core.GbxPlayerController, AchievementId: EOakAchievements, ProgressValue: int): ...
    def UnlockAchievementForPlayer(self, pc: gbx_game_system_core.GbxPlayerController, AchievementId: EOakAchievements): ...


class OakAction_Anim(gbx_game_system_core.GbxAction_Anim):
    bBlockWeaponActions: bool
    bInterruptWeaponActions: bool
    WeaponActions: int
    bHideWeapons: bool
    bHideWeaponSlot: bool
    AnimSlotWeap: str
    bHasAnimSlotWeapValue: bool
    BlendInWeap: float
    bHasBlendInWeapValue: bool
    DefaultBlendOutWeap: float
    bHasBlendOutWeapValue: bool
    bBlockSprinting: bool
    bPauseSprinting: bool
    bBlockJumping: bool
    bBlockECHOMenu: bool
    bLockInput: bool
    bLockUsingObjects: bool
    bUseActionSkillCrosshair: bool
    bShowPlayerMeleeWeapon: bool
    bEquipEchoDevice: bool
    bInterruptWhenZoomed: bool
    bOverrideBlendOutWhenInterrupted: bool
    bHideFirstPersonLegs: bool
    bBringUpWeaponAtEnd: bool
    BringUpWeaponBlendInTime: float
    bInterruptBringUpWeaponWhenZoomed: bool
    bPlayBringUpWeaponOnSameSlot: bool
    bBlockEquipAnimation: bool
    bCheckFootDownWhenFreezing: bool
    CameraMode: str
    CameraModeBlendInTimeOverride: float
    CameraModeBlendOutTimeOverride: float
    AnimDefWeap: gbx_game_system_core.AnimActionDef
    AnimationWeap: engine.AnimationAsset
    def OnBeginBringUpWeapon(self, Actor: engine.Actor): ...
    def K2_SetWeaponSlotHidden(self, bHidden: bool): ...
    def K2_SetWeaponsHidden(self, bHidden: bool): ...
    def K2_SetUseActionSkillCrosshair(self, bNewUseActionSkillCrosshair: bool): ...
    def K2_SetPlayerMeleeWeaponVisible(self, bVisible: bool): ...
    def K2_SetPauseSprinting(self, bPaused: bool): ...
    def K2_SetLockObjectUse(self, bLocked: bool): ...
    def K2_SetLockInput(self, bLocked: bool): ...
    def K2_SetFirstPersonLegsHidden(self, bHidden: bool): ...
    def K2_SetEchoDeviceEquipped(self, bEquipped: bool): ...
    def K2_SetCameraMode(self, NewCameraMode: str, BlendTimeOverride: float): ...
    def K2_SetBlockSprinting(self, bBlocked: bool): ...
    def K2_SetBlockJumping(self, bBlocked: bool): ...
    def K2_SetBlockEquipAnimation(self, bBlocked: bool): ...
    def K2_SetBlockedWeaponActions(self, bBlocked: bool, WeaponActionsMask: int): ...
    def K2_SetBlockEchoMenu(self, bBlocked: bool): ...
    def K2_RestoreCameraMode(self, BlendTimeOverride: float): ...
    def K2_GetWeapon(self, ReturnValue: gbx_weapon.Weapon) -> gbx_weapon.Weapon: ...


class OakAction_Anim_ActionAbility(OakAction_Anim):
    ConditionalEndActions: unreal.WrappedArray[OakAnimActionAbilityEndAction]
    UnconditionalEndAction: EOakAnimActionAbilityEndAction
    OwnerPlayer: OakCharacter_Player
    OwnerPlayerController: OakPlayerController
    OwnerActionAbility: OakActionAbility
    bIsShuttingDown: bool
    bBlocksActionAbilityShutdown: bool
    bLockMantling: bool
    bBlockPlayerLandingNotification: bool
    bActionSucceeded: bool
    def StartedOwnedControlledMove(self, ControlledMoveClass: unreal.UClass, SpeedOverride: float, DurationOverride: float, LaunchAngleOverride: float, TargetActor: engine.Actor, TargetLocation: core_uobject.Vector, ReturnValue: bool) -> bool: ...
    def SetActionSucceeded(self, bSucceeded: bool): ...
    def ReleaseActionLock(self): ...
    def OnOwnedControlledMoveEnded(self, ControlledMove: OakControlledMove_ActionAbility): ...
    def JumpToMontageSection(self, SectionName: str): ...
    def IsLocallyControlled(self, ReturnValue: bool) -> bool: ...


class OakActionAbility_AnimNotifyState(engine.AnimNotifyState):
    StartedEventName: str
    EndedEventName: str



class OakAction_Anim_ActionAbility_Operative(OakAction_Anim_ActionAbility):
    bUsesOperativeDevice: bool
    OperativeComponent: OperativeCharacterComponent
    def K2_SetOperativeDeviceVisible(self, bVisible: bool): ...


class OakAction_Anim_ActionAbility_Barrier(OakAction_Anim_ActionAbility_Operative):
    OwnerActionAbility_Barrier: OakActionAbility_Barrier



class OakAction_Anim_ActionAbility_Digiclone(OakAction_Anim_ActionAbility_Operative):
    OwnerActionAbility_Digiclone: OakActionAbility_Digiclone



class OakAction_Anim_ActionAbility_GRMLN(OakAction_Anim_ActionAbility_Operative):
    OwnerActionAbility_GRMLN: OakActionAbility_GRMLN



class OakAction_Anim_ActionAbility_Pet(OakAction_Anim_ActionAbility): ...


class OakAction_Anim_ActionAbility_Pet_Jabbermon(OakAction_Anim_ActionAbility_Pet):
    OwnerActionAbility_Jabbermon: OakActionAbility_HulkOut



class OakAction_Anim_ActionAbility_Pet_Skag(OakAction_Anim_ActionAbility_Pet):
    OwnerActionAbility_Skag: OakActionAbility_RakkAttack



class OakAction_Anim_ActionAbility_Pet_Spiderant(OakAction_Anim_ActionAbility_Pet):
    OwnerActionAbility_Spiderant: OakActionAbility_Cloak



class OakAction_Anim_ActionAbility_PhaseTrance(OakAction_Anim_ActionAbility):
    bRegisterAsGhostArmController: bool
    GhostArmMaterial: engine.MaterialInstance
    bFirstPersonGhostArmsVisible: bool
    bThirdPersonGhostArmsVisible: bool
    bWantsCharacterLandedEvent: bool
    OwnerActionAbility_PhaseTrance: OakActionAbility_PhaseTrance
    ActivationCombo: PhaseTranceActivationComboData
    ArmsSkeletalMeshName: str
    GhostArmsMesh_3rd: engine.SkeletalMeshComponent
    def OnPlayerLanded(self, HitResult: engine.HitResult): ...
    def OnMovementModeChanged(self, Character: engine.Character, PrevMovementMode: int, PreviousCustomMode: int): ...
    def JumpToMontageSection_SirenAndArms(self, SectionName: str): ...
    def JumpToMontageSection_Arms(self, SectionName: str): ...
    def HandlePlayerLanded(self): ...
    def AssembleActivationCombo(self, ReturnValue: PhaseTranceActivationComboData) -> PhaseTranceActivationComboData: ...


class OakAction_Anim_PhaseTranceArms(OakAction_Anim):
    SirenArmMaterialInstance: engine.MaterialInstance
    def ActivateThirdPersonArms(self): ...
    def ActivateFirstPersonArms(self): ...


class OakAction_Anim_PlayerMelee(OakAction_Anim):
    bRegisterAsSirenArmController: bool
    GhostArmMaterial: engine.MaterialInstance



class OakAction_Anim_TedioreReload(OakAction_Anim):
    ActionClassToStopOnEndIfNotSuccessful: unreal.UClass
    UnhideWeaponReason: str



class OakAction_Anim_WeaponReload(OakAction_Anim):
    MagBoneName: str



class OakAction_AttachedAnim(OakAction_Anim):
    InterpolationInfo: PawnInterpolationInfo



class OakAction_CoordinatedEffect(gbx_game_system_core.GbxAction_CoordinatedEffect):
    bHideWeaponParticles: bool
    bApplyToWeapons: bool
    bApplyToAttachedCharacters: bool
    bOnlyApplyToEquippedWeapons: bool
    bApplyToLimbGore: bool
    OnlyApplyToComponentByName: unreal.WrappedArray[str]



class OakAction_CoordinatedEffect_ActionAbility(OakAction_CoordinatedEffect):
    OwnerPlayer: OakCharacter_Player
    OwnerPlayerController: OakPlayerController
    OwnerActionAbility: OakActionAbility
    bBlocksActionAbilityShutdown: bool
    bIsShuttingDown: bool



class OakAction_DetachFromSeat(gbx_game_system_core.GbxAction): ...


class OakAction_Emote(OakAction_Anim): ...


class OakAction_FrozenDeath(gbx_game_system_core.GbxAction):
    bShatter: bool
    Particle: engine.ParticleSystem
    Sound: wwise_audio.WwiseEvent



class OakAction_Gib(gbx_game_system_core.GbxAction_Gib):
    bUseGoreRegionLimbs: bool
    Corrosive: OakElementalGibData
    Cryo: OakElementalGibData
    Fire: OakElementalGibData
    Shock: OakElementalGibData
    Radiation: OakElementalGibData
    ImpulseModifier: float



class OakAction_HostileAttach(gbx_game_system_core.GbxAction_SimpleAnim):
    LoopAnim: gbx_game_system_core.AnimActionDef
    AttackAnim: gbx_game_system_core.AnimActionDef
    GripFeedbackAnim: gbx_game_system_core.AnimActionDef
    EjectedAction: unreal.UClass
    BlendInTime: float
    BlendOutTime: float
    AttackWarmupDelay: gbx_game_system_core.GbxParam
    AttackDelay: gbx_game_system_core.GbxParam
    VelocityDifferenceWeight: gbx_game_system_core.GbxParam
    RecoveryRate: gbx_game_system_core.GbxParam
    ThrowFactor: gbx_game_system_core.GbxParam
    EjectForce: gbx_game_system_core.GbxParam
    NoHostileDetachDelay: gbx_game_system_core.GbxParam
    GripFeedbackValue: gbx_game_system_core.GbxParam
    GripFeedbackDelay: gbx_game_system_core.GbxParam
    CanStopFeedBackCooldown: gbx_game_system_core.GbxParam



class OakAction_LeapOnVehicle(gbx_ai.GbxAction_NavHomingJump):
    FailedAction: unreal.UClass
    DistanceToAttach: float
    ZOffset: float
    NavigationToleranceRadius: float
    MaxLeapDistance: float
    bDoNavigationTest: bool
    SeatType: ELeapOnVehicle_SeatType
    bSearchNearestSeat: bool
    def MakeActionLeapOnVehicleRegisters(self, OakVehicle: OakVehicle, SeatIndex: int, ReturnValue: unreal.WrappedArray[gbx_game_system_core.GbxActionRegister]) -> unreal.WrappedArray[gbx_game_system_core.GbxActionRegister]: ...


class OakAction_RandomAnim(OakAction_Anim):
    RandomAnims: unreal.WrappedArray[gbx_game_system_core.WeightedAnim]
    RandomAnimDefs: unreal.WrappedArray[RandomAnimDef]



class OakAction_PetUltimateAbility(OakAction_RandomAnim):
    OwnerActionAbility: OakActionAbility_Beastmaster
    OwnerPlayer: OakCharacter_Player
    bIsForcedShutdown: bool



class OakAction_PhaseMove(gbx_game_system_core.GbxAction_Loop):
    HoverAltitude: float
    HoverRadius: float
    HoverAccelerationTime: float
    HoverSpeed: float
    def PlayPhaseMove(self, MoveAction: unreal.UClass, Character: engine.Character, MoveTarget: engine.Actor, TargetEndTransform: core_uobject.Transform, Duration: float, HoverTarget: engine.Actor): ...
    def K2_GetMoveTarget(self, ReturnValue: engine.Actor) -> engine.Actor: ...
    def K2_GetHoverTarget(self, ReturnValue: engine.Actor) -> engine.Actor: ...
    def K2_GetCharacter(self, ReturnValue: engine.Character) -> engine.Character: ...


class OakAction_PhysicalDeath(gbx_game_system_core.GbxAction_PhysicalDeath):
    ElementalDeathEffects: EOakElementalDeathEffects
    RagdollWhenGoredRegions: int
    bSkipForcedDeathPhysicsCheck: bool
    def K2_SetRagdollWhenGoredRegions(self, NewRagdollWhenGoredRegions: int): ...


class OakAction_VehicleInteractionAnim(OakAction_Anim):
    bDetachPawnOnBringUpWeapon: bool
    bResetCameraModeOnStart: bool
    bInterpolateRotationToZero: bool
    InterpolateRotationToZeroDuration: float



class OakAction_VehicleMoveTo(gbx_game_system_core.GbxAction):
    ReachRadius: float
    WantedSpeed: float
    bMaxSpeed: bool
    bUseBoost: bool
    Duration: float
    DotDestination: float



class AnimNotify_InterpolateVehicleToGround(engine.AnimNotify): ...


class OakAction_VehicleSpawnAnim(gbx_spawn.GbxAction_SpawnAnim): ...


class OakPlayerAbility(OakAbility):
    bMustBeSlotted: bool
    StatDataItems: unreal.WrappedArray[gbx_game_system_core.UIStatData]
    OakCharacterPlayer: OakCharacter_Player
    OakManager: OakPlayerAbilityManagerComponent
    def IsSlotted(self, ReturnValue: bool) -> bool: ...
    def GetCurrentSlot(self, ReturnValue: OakPlayerAbilitySlotData) -> OakPlayerAbilitySlotData: ...


class OakActionAbility(OakPlayerAbility):
    FailureCodeDescriptions: unreal.WrappedArray[ActionSkillFailureCodeDescription]
    bShouldDisplayDurationBar: bool
    SupportedAugmentSlots: unreal.WrappedArray[OakActionAbilityAugmentSlotData]
    CooldownPoolData: gbx_game_system_core.GameResourcePoolData
    DurationPoolData: gbx_game_system_core.GameResourcePoolData
    DefaultHUDIconFrameName: str
    HUDIcon: scaleform_ui.SwfMovie
    bUsesCharges: bool
    ChargeInitializationData: gbx_game_system_core.AttributeInitializationData
    SecondaryUseActionType: EOakActionAbilitySecondaryUseActionType
    bEndOnDownstate: bool
    bCanBeActivatedWhileAttached: bool
    CooldownPoolRef: gbx_game_system_core.GameResourcePoolReference
    DurationPoolRef: gbx_game_system_core.GameResourcePoolReference
    bIsActive: bool
    OakPlayerController: OakPlayerController
    Charges: int
    MaxCharges: engine.GbxAttributeInteger
    def StopActionAbility(self): ...
    def StartActionAbility(self): ...
    def ShouldStopAbilityOnPawnSlotComponentAttach(self, ReturnValue: bool) -> bool: ...
    def ShouldDisplayDurationBar(self, ReturnValue: bool) -> bool: ...
    def ShouldAbortActivation(self, OutAbortCode: int, ReturnValue: bool) -> bool: ...
    def ServerStopActionAbility(self, StopAction: EOakActionAbilityStopAction): ...
    def ServerStartActionAbility(self): ...
    def ServerResetActionAbilityCooldown(self): ...
    def ResetDurationTimer(self): ...
    def ResetActionAbilityCooldown(self): ...
    def RemoveScriptingLock(self, Reason: str): ...
    def OnStopActionAbility(self): ...
    def OnStartActionAbility(self): ...
    def OnRep_Charges(self): ...
    def OnRep_bIsActive(self): ...
    def OnReady(self): ...
    def OnPlayerDeadOrDying(self): ...
    def OnOwnerCinematicModeChanged(self, bInCinematicMode: bool): ...
    def OnInputHoldTapped(self): ...
    def OnInputHoldReleased(self): ...
    def OnInputHoldPressed(self): ...
    def OnInputHoldHeld(self): ...
    def OnDurationResourceDepleted(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def OnCoolingDown(self): ...
    def OnCooldownResourceFilled(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def OnChargeCountChanged(self, OldCharge: int): ...
    def IsReady(self, ReturnValue: bool) -> bool: ...
    def IsPendingStop(self, ReturnValue: bool) -> bool: ...
    def IsDurationTimerRunning(self, ReturnValue: bool) -> bool: ...
    def IsCoolingDown(self, ReturnValue: bool) -> bool: ...
    def IsAugmentSlotted(self, Augment: OakActionAbilityAugmentData, ReturnValue: bool) -> bool: ...
    def IsAugmentInSlot(self, Augment: OakActionAbilityAugmentData, AugmentSlot: OakActionAbilityAugmentSlotData, ReturnValue: bool) -> bool: ...
    def IsAnyAugmentInSlot(self, AugmentSlot: OakActionAbilityAugmentSlotData, ReturnValue: bool) -> bool: ...
    def IsActive(self, ReturnValue: bool) -> bool: ...
    def HasChargesAvailable(self, ReturnValue: bool) -> bool: ...
    def HandleInputHoldActivationEnd(self): ...
    def HandleInputHoldActivationBegin(self): ...
    def HandleInputActivationRelease(self): ...
    def HandleInputActivationEnd(self): ...
    def HandleInputActivationBegin(self): ...
    def HandleInputActivationAttempt(self): ...
    def GetSlotAugment(self, AugmentSlot: OakActionAbilityAugmentSlotData, ReturnValue: OakActionAbilityAugmentData) -> OakActionAbilityAugmentData: ...
    def GetOakPlayerController(self, ReturnValue: OakPlayerController) -> OakPlayerController: ...
    def GetMaxDurationModifier(self, ModifierType: engine.EGbxAttributeModifierType, Value: float, ReturnValue: bool) -> bool: ...
    def GetMaxCooldownModifier(self, ModifierType: engine.EGbxAttributeModifierType, Value: float, ReturnValue: bool) -> bool: ...
    def GetDurationPercent(self, ReturnValue: float) -> float: ...
    def GetDefaultActivationErrorCode(self, ReturnValue: int) -> int: ...
    def GetCooldownRestartPercent(self, ReturnValue: float) -> float: ...
    def GetCooldownPercent(self, ReturnValue: float) -> float: ...
    def GetActionSkillWidgetKeyframe(self, ReturnValue: str) -> str: ...
    def ClientNotifyActionSkillActivationFailed(self, FailureCode: int): ...
    def CleanupOnActionSkillDeactivation(self): ...
    def AddScriptingLock(self, Reason: str): ...


class OakActionAbility_Barrier(OakActionAbility):
    RuntimeMods: OakActionAbilityEnumMaskHelper
    PassiveMods: unreal.WrappedArray[OakActionAbilityAugmentData_Barrier]
    BarrierActor: OperativeBarrier
    def TryPlaceBarrierAtLocation(self, Transform: core_uobject.Transform, ReturnValue: bool) -> bool: ...
    def TryDropPickup(self): ...
    def SpawnNewBarrier(self, Transform: core_uobject.Transform, ReturnValue: OperativeBarrier) -> OperativeBarrier: ...
    def ServerDoBarrierDropPickup(self): ...
    def OnBarrierDestroyed(self, DestroyedActor: engine.Actor): ...
    def HasRuntimeMod(self, ModType: EOperativeBarrierModType, ReturnValue: bool) -> bool: ...


class OakActionAbility_Beastmaster(OakActionAbility):
    AbilityPetType: EOakActionAbilityPetType
    RuntimeMods: OakActionAbilityEnumMaskHelper
    BeastmasterComponent: BeastmasterCharacterComponent
    def HasRuntimeMod(self, ModType: EOakActionAbilityPetModType, ReturnValue: bool) -> bool: ...
    def GetCurrentPet(self, ReturnValue: OakCharacter) -> OakCharacter: ...


class GbxCondition_IsBeastmasterConsecutiveCritTarget(gbx_runtime.GbxCondition): ...


class OakAction_Cloak(OakAction_CoordinatedEffect):
    OwnerActionAbility: OakActionAbility_Cloak
    OwnerPlayer: OakCharacter_Player
    def GetTrackedTargetEffect(self, TrackedTargetState: OakActionCloak_TrackedTargetState, ReturnValue: unreal.UClass) -> unreal.UClass: ...


class OakActionAbility_Cloak(OakActionAbility_Beastmaster):
    CriticalShotCountInitializer: gbx_game_system_core.AttributeInitializationData
    CriticalShotCountModifier: gbx_weapon.WeaponShotModifier
    ValidShotChainDamageSourceClasses: unreal.WrappedArray[unreal.UClass]
    ValidConsumeShotDamageSourceClasses: unreal.WrappedArray[unreal.UClass]
    TrackedTargetState: OakActionCloak_TrackedTargetState
    def TrackTarget(self, NewTarget: engine.Actor): ...
    def StartInvisibility(self): ...
    def OnTrackedTargetDied(self): ...
    def OnRep_TrackedTargetState(self): ...
    def OnModifiedWeaponShot(self, Weapon: gbx_weapon.Weapon, Data: gbx_weapon.WeaponShotModifierData): ...


class OakActionAbility_Digiclone(OakActionAbility):
    DigicloneCooldownPoolData: gbx_game_system_core.GameResourcePoolData
    DigicloneCooldownPoolRef: gbx_game_system_core.GameResourcePoolReference
    SwapPlacesCooldownPoolData: gbx_game_system_core.GameResourcePoolData
    SwapPlacesCooldownPoolRef: gbx_game_system_core.GameResourcePoolReference
    FindNewSpawnLocationQueryParams: gbx_game_system_core.EnvQueryParams
    PassiveMods: unreal.WrappedArray[OakActionAbilityAugmentData_Digiclone]
    DigicloneSwapRetryCount: int
    JustAcceptCooldownData: gbx_game_system_core.AttributeInitializationData
    JustAcceptDamageSources: unreal.WrappedArray[unreal.UClass]
    RuntimeMods: OakActionAbilityEnumMaskHelper
    CurrentDigiclone: OakCharacter
    def TryJustAcceptRefund(self, Damage: float, HitLocation: core_uobject.Vector, HitDirection: core_uobject.Vector, ReturnValue: bool) -> bool: ...
    def SwapPlaces(self, Reason: ECloneSwapReason): ...
    def StartDigicloneSwapCooldown(self): ...
    def SpawnNewDigiclone(self, Location: core_uobject.Vector, ReturnValue: OakCharacter) -> OakCharacter: ...
    def SpawnDigiclone(self, Location: core_uobject.Vector): ...
    def ServerSwapPlaces(self): ...
    def ServerDetonateClone(self): ...
    def ServerCancelDetonateClone(self): ...
    def ServerBeginDetonateClone(self): ...
    def ReleaseDigiclone(self, Digiclone: OakCharacter): ...
    def OnRep_CurrentDigiclone(self): ...
    def OnPlayerSwapSucceeded(self): ...
    def OnPlayerSwapStarted(self): ...
    def OnPlayerSwapFailed(self): ...
    def OnDigicloneRespawnCooldownFilled(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def OnDigicloneDied(self): ...
    def OnDigicloneDestroyed(self, Digiclone: engine.Actor): ...
    def OnDigicloneDead(self): ...
    def OnCorsicanDamage(self, Damage: float, DamageSource: engine.Pawn): ...
    def OnCloneSwapSucceeded(self): ...
    def OnCloneSwapStarted(self): ...
    def OnCloneSwapFailed(self): ...
    def IsSafeToSwapPlayerWithClone(self, ReturnValue: bool) -> bool: ...
    def HasDigicloneMod(self, InModType: EDigiCloneModType, ReturnValue: bool) -> bool: ...
    def GetSwapCooldownPercent(self, ReturnValue: float) -> float: ...
    def GetQueryParamsForCloneSwapLocationAttempt(self, Attempt: int, Params: gbx_game_system_core.EnvQueryParams, QueryContext: engine.Actor): ...
    def GetCloneRespawnCooldownPercent(self, ReturnValue: float) -> float: ...
    def DoCloneSwap(self): ...
    def DetonateClone(self): ...
    def CancelDetonateClone(self): ...
    def BeginDetonateClone(self): ...


class OakActionAbility_GRMLN(OakActionAbility):
    CommandRingClass: unreal.UClass
    PassiveMods: unreal.WrappedArray[OakActionAbilityAugmentData_GRMLN]
    PrimaryDrone: OakDroneProjectile_GRMLN
    RuntimeMods: OakActionAbilityEnumMaskHelper
    CommandRing: CommandRing_Operative_GRMLN
    def TrySpawnPrimaryDrone(self, ReturnValue: OakDroneProjectile_GRMLN) -> OakDroneProjectile_GRMLN: ...
    def TryFindNewDroneTarget(self): ...
    def SpawnPrimaryDrone(self): ...
    def ServerStopCalledShot(self): ...
    def ServerStartCalledShot(self): ...
    def ServerFindNewDroneTarget(self): ...
    def OnStopCalledShot(self): ...
    def OnStartCalledShot(self): ...
    def OnSafeguardProtocolActivated(self): ...
    def IsSafeguardProtocolActive(self, ReturnValue: bool) -> bool: ...
    def HasGRMLNMod(self, InModType: EGRMLNModType, ReturnValue: bool) -> bool: ...
    def GetGoodMisfortuneRechargeValue(self, TotalKills: int, ReturnValue: float) -> float: ...


class OakActionAbility_HulkOut(OakActionAbility_Beastmaster): ...


class OakActionAbility_IronBear(OakActionAbility):
    CurrentIronBear: OakCharacter_IronBear
    bIronCubActive: bool
    def TryToSpawnIronCub(self): ...
    def StartSummoningIronCub(self): ...
    def OnIronCubDestroyed(self, IronCub: engine.Actor): ...
    def OnIronCubDead(self): ...
    def GetIronBearSpawnRotation(self, ReturnValue: core_uobject.Rotator) -> core_uobject.Rotator: ...
    def GetIronBearSpawnLocation(self, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...
    def GetIronBearClass(self, ReturnValue: unreal.UClass) -> unreal.UClass: ...
    def GetCrouchLocationOffset(self, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...
    def CanSpawnIronBearAtLocation(self, ActorClass: unreal.UClass, Transform: core_uobject.Transform, ReturnValue: bool) -> bool: ...
    def CancelManualExit(self): ...
    def BeginManualExit(self): ...


class PhaseTranceCondition_IsActionComboElementalType(gbx_runtime.GbxCondition):
    DamageType: unreal.UClass



class OakActionAbility_PhaseTrance(OakActionAbility):
    AttackSlot: OakActionAbilityAugmentSlotData
    EffectSlot: OakActionAbilityAugmentSlotData
    ElementSlot: OakActionAbilityAugmentSlotData
    DefaultElementalAugmentData: OakActionAbilityAugmentData_PhaseTrance_Element
    PhasetranceDamageSourceClass: unreal.UClass
    DefaultDamageType: gbx_game_system_core.GbxDamageType
    PhaseGraspDurationPoolData: gbx_game_system_core.GameResourcePoolData
    PhaseGraspDurationPoolRef: gbx_game_system_core.GameResourcePoolReference
    ActivationCombo: PhaseTranceActivationComboData
    bCanActivateDuringCooldown: engine.GbxAttributeInteger
    def UnpackActivationComboDataFromReplication(self, PhaseTranceClass: unreal.UClass, PackedComboData: core_uobject.Vector, ReturnValue: PhaseTranceActivationComboData) -> PhaseTranceActivationComboData: ...
    def TryEffect(self, Spec: OakPhaseTranceEffectSpec, ReturnValue: bool) -> bool: ...
    def SetPhaseGraspTimerRunning(self, bIsRunning: bool): ...
    def SetEffectsLocked(self, Spec: OakPhaseTranceLockEffectSpec): ...
    def ServerRecallOrb(self): ...
    def RecallOrb(self): ...
    def PackActivationComboDataForReplication(self, PhaseTranceClass: unreal.UClass, ComboData: PhaseTranceActivationComboData, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...
    def IsOrbActive(self, ReturnValue: bool) -> bool: ...
    def HasPhaseTranceElementType(self, ElementType: EPhaseTranceElementalType, ComboData: PhaseTranceActivationComboData, ReturnValue: bool) -> bool: ...
    def HasPhaseTranceEffectType(self, EffectType: EPhaseTranceEffectType, ComboData: PhaseTranceActivationComboData, ReturnValue: bool) -> bool: ...
    def GetPhaseTranceElementType(self, ComboData: PhaseTranceActivationComboData, ReturnValue: EPhaseTranceElementalType) -> EPhaseTranceElementalType: ...
    def GetPhaseTranceEffectType(self, ComboData: PhaseTranceActivationComboData, ReturnValue: EPhaseTranceEffectType) -> EPhaseTranceEffectType: ...
    def GetCurrentlyAttunedElementData(self, ReturnValue: OakActionAbilityAugmentData_PhaseTrance_Element) -> OakActionAbilityAugmentData_PhaseTrance_Element: ...
    def GetCurrentlyAttunedElement(self, ReturnValue: EPhaseTranceElementalType) -> EPhaseTranceElementalType: ...
    def DoEffect(self, Spec: OakPhaseTranceEffectSpec, ReturnValue: bool) -> bool: ...
    def BreakPhaseTranceElementData(self, ComboData: PhaseTranceActivationComboData, ElementType: EPhaseTranceElementalType, DamageType: unreal.UClass, DamageCoefficientData: gbx_game_system_core.AttributeInitializationData): ...
    def BreakPhaseTranceEffectData(self, ComboData: PhaseTranceActivationComboData, EffectType: EPhaseTranceEffectType, DamageCoefficientData: gbx_game_system_core.AttributeInitializationData): ...
    def BreakPhaseTranceAttackData(self, ComboData: PhaseTranceActivationComboData, AttackFamilyType: EPhaseTranceAttackFamilyType, AttackClass: unreal.UClass, DamageCoefficientData: gbx_game_system_core.AttributeInitializationData, CooldownCoefficientData: gbx_game_system_core.AttributeInitializationData): ...


class OakProjectile_ActionAbility(OakProjectile):
    OwnerActionAbility: OakActionAbility
    OwnerPlayer: OakCharacter_Player
    CustomizationComponent: gbx_game_system_core.GbxCustomizationComponent
    bBlocksActionAbilityShutdown: bool
    bWasShutDownGracefully: bool
    def ReleaseFromActionAbility(self): ...
    def OnShutdownGracefully(self): ...
    def OnReceivedOwnerPlayer(self): ...


class OakProjectile_RakkAttack_Rakk(OakProjectile_ActionAbility):
    OwnerAbilityRakkAttack: OakActionAbility_RakkAttack
    RakkTeamID: core_uobject.Guid
    RuntimeMods: OakActionAbilityEnumMaskHelper
    def SetupRuntimeMods(self): ...
    def SetNewHomingTarget(self, NewHomingTarget: engine.Actor): ...
    def ReturnToOwner(self): ...
    def OnRep_RuntimeMods(self): ...
    def HasRuntimeMod(self, ModType: EOakActionAbilityPetModType, ReturnValue: bool) -> bool: ...


class OakActionAbility_RakkAttack(OakActionAbility_Beastmaster): ...


class OakActionAbility_ShoulderCannon(OakActionAbility):
    CannonAimAsset: OakAimAssistParameters
    Cannon: InteractiveObject
    def TrySpawnCannon(self, ReturnValue: InteractiveObject) -> InteractiveObject: ...
    def SpawnCannon(self): ...
    def OnRep_Cannon(self): ...
    def GetShotData(self, StartLocation: core_uobject.Vector, ShotData: OakLightProjectileInitializationData, ReturnValue: bool) -> bool: ...
    def CannonRemoved(self): ...


class OakActionAbilityAttributePropertyValueResolver(gbx_game_system_core.AttributePropertyValueResolver): ...


class OakActionAbilityAugmentData(gbx_runtime.GbxDataAsset):
    DisplayName: str
    Description: str
    BarColor: core_uobject.LinearColor
    StatDataItems: unreal.WrappedArray[gbx_game_system_core.UIStatData]
    bIsMutuallyExclusive: bool
    SupportedMods: unreal.WrappedArray[OakActionAbilityAugmentData]
    bIsAlwaysAvailable: bool



class OakActionAbilityAugmentData_Barrier(OakActionAbilityAugmentData):
    ModType: EOperativeBarrierModType



class OakActionAbilityAugmentData_Digiclone(OakActionAbilityAugmentData):
    ModType: EDigiCloneModType



class OakActionAbilityAugmentData_GRMLN(OakActionAbilityAugmentData):
    ModType: EGRMLNModType



class OakActionAbilityAugmentData_IronBear(OakActionAbilityAugmentData):
    HardpointProgressBarFrameName: str
    HardpointIconFrameName: str
    HardpointProgressBarName: str
    HardpointElementalIconName: str
    HardpointBarText: str
    HardpointFallbackElementalIconFrameName: str
    AugmentClass: unreal.UClass
    CoreType: EIronBearCoreType
    ModType: EIronBearModType
    AugmentOverrideClass: unreal.UClass



class PlayerCharacterComponentAugmentData(gbx_runtime.GbxDataAsset):
    DisplayName: str
    Description: str
    StatDataItems: unreal.WrappedArray[gbx_game_system_core.UIStatData]



class OakPlayerCharacterAugmentData_Pet(PlayerCharacterComponentAugmentData):
    PetType: EOakActionAbilityPetType
    EvolutionType: EOakActionAbilityPetEvolutionType
    HUDIconFrameName: str



class OakActionAbilityAugmentData_Pet_Mod(OakActionAbilityAugmentData):
    ModPetType: EOakActionAbilityPetType
    ModType: EOakActionAbilityPetModType



class OakActionAbilityAugmentData_Pet_Ability(OakActionAbilityAugmentData): ...


class OakActionAbilityAugmentData_PhaseTrance_Attack(OakActionAbilityAugmentData):
    AttackFamilyType: EPhaseTranceAttackFamilyType
    AttackActionClass: unreal.UClass
    SingularityEffectActorClass: unreal.UClass
    DamageCoefficientData: gbx_game_system_core.AttributeInitializationData
    CooldownCoefficientData: gbx_game_system_core.AttributeInitializationData
    DamageEffects: int
    bUsesGhostArmsOnActivation: bool



class OakActionAbilityAugmentData_PhaseTrance_Element(OakActionAbilityAugmentData):
    Type: EPhaseTranceElementalType
    DamageType: unreal.UClass
    DamageCoefficientData: gbx_game_system_core.AttributeInitializationData



class OakActionAbilityAugmentData_PhaseTrance_Effect(OakActionAbilityAugmentData):
    Type: EPhaseTranceEffectType
    DamageCoefficientData: gbx_game_system_core.AttributeInitializationData
    TargetType: EPhaseTranceEffectTargetType
    bRejectActorsInAttachSlots: bool
    bOnlyOncePerActorPerActivation: bool
    RejectionTags: gameplay_tags.GameplayTagContainer
    RejectionCondition: gbx_runtime.GbxCondition
    RefireDelayData: gbx_game_system_core.AttributeInitializationData



class OakActionAbilityAugmentSlotData(gbx_runtime.GbxDataAsset):
    DisplayName: str
    Description: str
    bUnlockedByPlayerLevel: bool
    LevelUnlock: int
    SupportedAugments: unreal.WrappedArray[OakActionAbilityAugmentData]
    ParentSlotData: OakActionAbilityAugmentSlotData



class OakActionAbilityBlueprintFunctionLibrary(engine.BlueprintFunctionLibrary):

    def GetOwnedGbxActionRegisters(self, Context: OakActionAbility, ReturnValue: unreal.WrappedArray[gbx_game_system_core.GbxActionRegister]) -> unreal.WrappedArray[gbx_game_system_core.GbxActionRegister]: ...
    def GetObjectOwnerActionRegisters(self, Context: unreal.UObject, ReturnValue: unreal.WrappedArray[gbx_game_system_core.GbxActionRegister]) -> unreal.WrappedArray[gbx_game_system_core.GbxActionRegister]: ...


class OakActionAbilityCooldownPoolValueResolver(gbx_game_system_core.AttributePropertyValueResolver): ...


class OakActionAbilityInputComponent(gbx_input.GbxInputComponent):
    OwnerActionAbility: OakActionAbility



class OakActionAbilityMultiContextResolver(gbx_game_system_core.AttributeContextResolver): ...


class OakActionAbilityOwnedResourceInterface(core_uobject.Interface): ...


class OakActionBlueprintLibrary(engine.BlueprintFunctionLibrary):

    def K2Play(self, ActionClass: unreal.UClass, GbxActionRegisters: unreal.WrappedArray[gbx_game_system_core.GbxActionRegister], NetMode: gbx_game_system_core.EGbxActionNetMode, Target: engine.Actor, WeaponSlot: WeaponSlotData, Duration: float, PlayRate: float, Direction: core_uobject.Vector, MontageLoopCount: int, ReturnValue: gbx_game_system_core.GbxAction) -> gbx_game_system_core.GbxAction: ...


class OakAIActionComponent(gbx_ai.AIActionComponent):
    VehicleDriverAction: unreal.UClass
    VehicleTurretAction: unreal.UClass
    VehiclePassengerAction: unreal.UClass
    VehicleScriptedLeadAction: unreal.UClass
    TurretAction: unreal.UClass



class OakAIBalancedProjectile(OakProjectile): ...


class OakAIController(gbx_ai.GbxAIController):
    OakCharacter: OakCharacter
    AIWeaponUserComp: gbx_ai.AIWeaponUserComponent
    MyVehicle: OakVehicle
    MyVehicleSeatPawn: VehicleSeatPawn
    MyVehicleSeatComponent: VehicleSeatComponent
    TurretSeatPawn: TurretSeatPawn
    TurretMovementComponent: gbx_vehicle.TurretMovementComponent
    OakAIActionComponent: OakAIActionComponent
    OakNavComponent: OakNavComponent
    OakNpcGreetingComponent: OakNpcGreetingComponent
    def OnSeatDetachFinished(self, DetachedPawn: engine.Pawn, DetachedController: engine.Controller): ...
    def GetOakNavComponent(self, ReturnValue: OakNavComponent) -> OakNavComponent: ...
    def GetOakAIActionComponent(self, ReturnValue: OakAIActionComponent) -> OakAIActionComponent: ...
    def GetMyVehicle(self, ReturnValue: OakVehicle) -> OakVehicle: ...
    def GetMyTurret(self, ReturnValue: TurretSeatPawn) -> TurretSeatPawn: ...
    def ExitVehicleEvent__DelegateSignature(self): ...
    def ExitTurretEvent__DelegateSignature(self): ...
    def EnterVehicleEvent__DelegateSignature(self, OakVehicle: OakVehicle, SlotIdx: int): ...
    def EnterVehicle(self, OakVehicle: OakVehicle, SlotIdx: int, bInstant: bool, bSkipAITreeSetup: bool): ...
    def EnterTurretEvent__DelegateSignature(self, TurretPawn: SeatPawn): ...
    def EnterTurret(self, TurrentPawn: TurretSeatPawn, bInstant: bool, bSkipAITreeSetup: bool): ...


class OakAimAssistParameters(gbx_game_system_core.AimAssistParameters):
    Stickiness: float
    ZoomStickiness: float
    ReduceInput: float
    RadiusScaleDistance: float
    MinRadiusScale: float
    MaxRadiusScale: float
    FullStrengthRatio: float
    FarPlaneMinCap: float
    FarPlaneMinDistance: float
    FarPlaneMaxDistance: float
    NearPlaneMaxDistance: float
    NearPlaneMinDistance: float
    NearPlaneMaxScaling: float
    IdleAimAssistSmoothingDuration: float
    NoTargetAimAssistSmoothingDuration: float
    bBulletMagnetismAlwaysOn: bool
    BulletMagnetismOuterAngle: float
    BulletMagnetismInnerAngle: float
    bBulletMagnetismZoomScale: bool
    BulletMagnetismZoomScale: float
    BulletMagnetismCorrectionRate: core_uobject.Vector2D
    MaxBulletMagnetismDeflection: float
    MaxSnapToTargetPitch: float
    MaxSnapToTargetYaw: float
    InitialStickiness: float
    InitialZoomStickiness: float
    InitialReduceInput: float
    InitialRadiusScaleDistance: float
    InitialMinRadiusScale: float
    InitialMaxRadiusScale: float
    InitialFullStrengthRatio: float
    InitialFarPlaneMinCap: float
    InitialFarPlaneMinDistance: float
    InitialFarPlaneMaxDistance: float
    InitialNearPlaneMaxDistance: float
    InitialNearPlaneMinDistance: float
    InitialNearPlaneMaxScaling: float
    InitialIdleAimAssistSmoothingDuration: float
    InitialNoTargetAimAssistSmoothingDuration: float
    InitialbBulletMagnetismAlwaysOn: bool
    InitialBulletMagnetismOuterAngle: float
    InitialBulletMagnetismInnerAngle: float
    InitialbBulletMagnetismZoomScale: bool
    InitialBulletMagnetismZoomScale: float
    InitialBulletMagnetismCorrectionRate: core_uobject.Vector2D
    InitialMaxBulletMagnetismDeflection: float
    InitialMaxSnapToTargetPitch: float
    InitialMaxSnapToTargetYaw: float



class OakAimAssistStrategy(gbx_game_system_core.AimAssistStrategy):
    OakPlayerController: OakPlayerController
    TargetingComponent: gbx_game_system_core.TargetingComponent
    OakGameInstance: OakGameInstance
    AimAssistActor: engine.Actor
    AimAssistSmoothingProperties: gbx_game_system_core.AimAssistSmoothingProperties
    CurrentBestTarget: engine.Actor



class OakAISwarmComponent(engine.BoxComponent):
    DefaultMovement: OakAISwarmMovement
    bLimitToBounds: bool
    ReachedDistance: float
    SwarmActors: unreal.WrappedArray[OakAISwarmActor]
    def SetSwarmMovement(self, Movement: OakAISwarmMovement): ...
    def SetSwarmDestination(self, Destination: engine.SceneComponent): ...
    def SetSwarmActorMovement(self, Actor: engine.Actor, Movement: OakAISwarmMovement): ...
    def SetSwarmActorDestination(self, Actor: engine.Actor, Destination: engine.SceneComponent): ...
    def RemoveSwarmActor(self, Actor: engine.Actor): ...
    def AddSwarmActor(self, Actor: engine.Actor): ...
    def ActorDestroyed(self, Actor: engine.Actor): ...


class OakAIWeaponUserComponent(gbx_ai.AIWeaponUserComponent):
    OakAIController: OakAIController
    WeaponSlot: WeaponSlotData
    AIBurstCount: engine.GbxAttributeInteger
    AIBurstDelay: engine.GbxAttributeFloat



class OakAssetManager(gbx_game_system_core.GbxAssetManager):
    CrossLevelAssets: unreal.WrappedArray[unreal.UObject]
    LevelAssetListData: LevelAssetListData



class OakAssetMappingData(gbx_game_system_core.AssetMappingData): ...


class OakAttachedDrone(engine.Actor):
    StaticMeshComponent: engine.StaticMeshComponent
    Socket: str
    Slot: str
    ExitVehicleBoneAnim: engine.AnimationAsset
    EnterVehicleBoneAnim: engine.AnimationAsset
    IdleFloatCurve: engine.CurveFloat
    FloatCycleTime: float
    FloatHeightDelta: float
    IdleMovementTime: gbx_game_system_core.GbxParam
    MovementCurve: engine.CurveFloat
    MovementTime: float
    MinMovementDistance: float
    MaxMovementDistance: float
    RotationSpeed: float
    OwnerAccelerationEffect: engine.CurveFloat
    DeathTime: float
    ExitBlendTime: float
    EnterBlendTime: float
    bExplodeOnContact: bool
    EllipseOffset: core_uobject.Vector
    EllipseScale: core_uobject.Vector
    bActiveWhenVehicleHasDriver: bool
    bActiveWhenVehicleHasOccupant: bool
    bActiveWhenVehicleIsDamaged: bool
    bActiveWhenOwnerThreatened: bool
    bAlwaysActive: bool
    bDebugDrawEllipse: bool
    SphereComponent: engine.SphereComponent
    WwiseAudioComponent: wwise_audio.WwiseAudioComponent
    DamageComponent: OakDamageComponent
    TeamComponent: gbx_game_system_core.TeamComponent
    LocalOffset: core_uobject.Vector
    WantedLocation: core_uobject.Vector
    bIsInCombat: bool
    bIsAtIdleLocation: bool
    CurrentTargetActor: engine.Actor
    MyVehicle: OakVehicle
    MyVehicleMesh: engine.SkeletalMeshComponent
    MyVehicleAnimInstance: engine.AnimInstance
    def SphereComponent_OnOverlap(self, OverlappedComp: engine.PrimitiveComponent, Other: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def OnStopMoving(self, Vehicle: OakVehicle): ...
    def OnStartMoving(self, Vehicle: OakVehicle): ...
    def OnRep_WantedLocation(self): ...
    def OnExiting(self, Vehicle: OakVehicle): ...
    def OnEntering(self, Vehicle: OakVehicle): ...
    def OnDestroyed(self, Vehicle: OakVehicle): ...
    def GetWwiseAudioComponent(self, ReturnValue: wwise_audio.WwiseAudioComponent) -> wwise_audio.WwiseAudioComponent: ...


class OakAttachedDroneAttacker(OakAttachedDrone):
    LightProjectileData: unreal.UClass
    AttackDelay: float
    BurstCount: int
    ProjectileSpeed: float
    MaxPrediction: float
    DamageType: unreal.UClass
    QueryParams: gbx_game_system_core.EnvQueryParams
    def OnFire(self, Vehicle: OakVehicle, FiringAtTarget: engine.Actor): ...


class OakAttachedDroneHealer(OakAttachedDrone):
    LightBeamData: unreal.UClass
    HealDelay: float
    HealDuration: float
    DamageType: unreal.UClass
    HealingValueInitializer: unreal.UClass
    HealingValueFactor: float
    def OnStopHeal(self, Vehicle: OakVehicle): ...
    def OnStartHeal(self, Vehicle: OakVehicle): ...


class OakAudioGlobalsData(gbx_audio.GbxAudioGlobalsData):
    FakePauseGameAudioEvent: wwise_audio.WwiseEvent
    StopAllOnQuitEvent: wwise_audio.WwiseEvent
    TiredCondition: gbx_runtime.GbxCondition
    FireElementalEffect: OakElementalEffectData
    CorrosiveElementalEffect: OakElementalEffectData
    ShockElementalEffect: OakElementalEffectData
    RadiationElementalEffect: OakElementalEffectData
    CryoPresentation: OakStatusEffectPresentationData
    IncendiarySwitch: wwise_audio.WwiseSwitch
    CorrosiveSwitch: wwise_audio.WwiseSwitch
    ShockSwitch: wwise_audio.WwiseSwitch
    RadiationSwitch: wwise_audio.WwiseSwitch
    CryoSwitch: wwise_audio.WwiseSwitch
    PlayerLocationWindRTPC: wwise_audio.WwiseRtpc
    FireRateInSeconds: wwise_audio.WwiseRtpc
    FireRateRatio: wwise_audio.WwiseRtpc
    WeaponChargeRatio: wwise_audio.WwiseRtpc
    WeaponHeatRatio: wwise_audio.WwiseRtpc
    WeaponJankinessRatio: wwise_audio.WwiseRtpc
    WeaponIsFiring: wwise_audio.WwiseRtpc
    WeaponAmmoCount: wwise_audio.WwiseRtpc
    WeaponAccuracySpreadInDegrees: wwise_audio.WwiseRtpc
    WeaponZoom: wwise_audio.WwiseRtpc
    WeaponRandomVariation: wwise_audio.WwiseRtpc
    WeaponTargetLocked: wwise_audio.WwiseRtpc
    WeaponConditionRatio: wwise_audio.WwiseRtpc
    WeaponItemScore: wwise_audio.WwiseRtpc
    HighResolutionFireRate: float
    SwitchesToAlwaysPrepare: unreal.WrappedArray[wwise_audio.WwiseSwitch]
    GoreAudioScaleRTPC: wwise_audio.WwiseRtpc
    PuddleTransitionRTPC: wwise_audio.WwiseRtpc
    PuddleScaleRTPC: wwise_audio.WwiseRtpc
    PuddleOpacityRTPC: wwise_audio.WwiseRtpc
    VehicleEngineAudioComponentTag: str
    MinDelayBetweenJumpAudioEvents: float
    EngineAttenuationScalingMinValue: float
    EngineAttenuationScalingRefRPMRatio: float
    VehicleHealthRtpc: wwise_audio.WwiseRtpc
    VehicleIsLocallyControlledRtpc: wwise_audio.WwiseRtpc
    EngineRpmRtpc: wwise_audio.WwiseRtpc
    ThrottleRtpc: wwise_audio.WwiseRtpc
    MovementDirectionRtpc: wwise_audio.WwiseRtpc
    HandbrakeRTPC: wwise_audio.WwiseRtpc
    CameraRotationRTPC: wwise_audio.WwiseRtpc
    VehicleApproachSpeedRtpc: wwise_audio.WwiseRtpc
    TimeSpentInAirRTPC: wwise_audio.WwiseRtpc
    ForwardSpeedRtpc: wwise_audio.WwiseRtpc
    HoveringInputRtpc: wwise_audio.WwiseRtpc
    SuspensionCompressionRtpc: wwise_audio.WwiseRtpc
    WheelSuspensionCompressionSpeedRtpc: wwise_audio.WwiseRtpc
    EngineGearRtpc: wwise_audio.WwiseRtpc
    EngineGearIsShifingUpRtpc: wwise_audio.WwiseRtpc
    WheelIsAirborneRtpc: wwise_audio.WwiseRtpc
    WheelSkidAmountRtpc: wwise_audio.WwiseRtpc
    BoostPoolRTPC: wwise_audio.WwiseRtpc
    OverspinRTPC: wwise_audio.WwiseRtpc
    WheelSpinRtpc: wwise_audio.WwiseRtpc
    VehicleAirborneStartEvent: wwise_audio.WwiseEvent
    VehicleAirborneStopEvent: wwise_audio.WwiseEvent
    VehicleHoverStartEvent: wwise_audio.WwiseEvent
    VehicleHoverStopEvent: wwise_audio.WwiseEvent
    MusicDebuggerPrimaryTextColor: core_uobject.Color
    MusicDebuggerErrorTextColor: core_uobject.Color
    MusicDebuggerInfoTextColor: core_uobject.Color
    MusicDebuggerActiveThreatTextColor: core_uobject.Color
    MusicDebuggerStaleThreatTextColor: core_uobject.Color
    MusicDebuggerInterestModifierTextColor: core_uobject.Color
    MinimumLootBeamSoundInterval: float



class OakAudioPatchBeneathTheMeridian(engine.Actor):

    def TryStopVehicleMusic(self): ...
    def TryBeginVehicleMusic(self): ...
    def StopVehicleMusic(self, WwiseEvent: wwise_audio.WwiseEvent): ...
    def OnTouchedTurnOnRadioTrigger(self, TouchingActor: engine.Actor, bIsPlayer: bool, ComponentTouched: engine.ActorComponent): ...
    def OnMissionObjectiveUpdate(self, Objective: gbx_mission.MissionObjectiveReference, ObjectiveEvent: gbx_mission.EMissionObjectiveEvent, ObjectiveCount: int): ...
    def MayaVehicleSpawned(self, MayaVehicle: OakVehicle): ...
    def MayaVehicleDestroyed(self, MayaVehicleActor: engine.Actor): ...
    def BeginVehicleMusic(self, Vehicle: OakVehicle, WwiseEvent: wwise_audio.WwiseEvent, WwiseState: wwise_audio.WwiseState): ...


class OakAutomationActor(engine.Actor): ...


class OakAutomationActorComponent(engine.ActorComponent): ...


class OakAutomationHelper(unreal.UObject):

    def SpawnSerialNumberFromPool(self, Pool: gbx_inventory.ItemPoolListInterface, GameStage: int, Context: engine.Actor, ReturnValue: str) -> str: ...
    def SpawnInventoryFromSerialNumber(self, SerialNumber: str, Context: unreal.UObject, ReturnValue: engine.Actor) -> engine.Actor: ...
    def GetPickupSerialNumber(self, Pickup: OakInventoryItemPickup, ReturnValue: str) -> str: ...
    def GetClassListFromGameConfig(self, Section: str, Key: str, ReturnValue: unreal.WrappedArray[unreal.UClass]) -> unreal.WrappedArray[unreal.UClass]: ...
    def DecodeSerialNumber(self, SerialNumber: str, Manufacturer: gbx_inventory.ManufacturerData, BalanceData: gbx_inventory.InventoryBalanceData, InvData: gbx_inventory.InventoryData, GameStage: int, Parts: unreal.WrappedArray[gbx_inventory.InventoryPartData], GenericParts: unreal.WrappedArray[gbx_inventory.InventoryGenericPartData], CustomParts: unreal.WrappedArray[gbx_inventory.InventoryCustomizationPartData], ReturnValue: bool) -> bool: ...


class OakBaseMissionRewardData(gbx_mission.MissionRewardData):
    CurrencyReward: gbx_game_system_core.AttributeInitializationData
    bIgnoreCreditsRewardFormula: bool
    ExperienceReward: gbx_game_system_core.AttributeInitializationData



class OakBenchmarkGameMode(engine.GameMode): ...


class OakBenchmarkPlayerState(engine.PlayerState): ...


class OakBlueprintLibrary(engine.BlueprintFunctionLibrary):

    def UnregisterModifier(self, WorldContextObject: unreal.UObject, ModifierName: str): ...
    def UnregisterAllModifiers(self, WorldContextObject: unreal.UObject): ...
    def UnlockPhotoMode(self, Actor: engine.Actor, Reason: str): ...
    def UnlockEchoLogForAllPlayers(self, WorldContextObject: unreal.UObject, EchoLog: EchoLogData): ...
    def StartCameraFadeAuthoritative(self, PlayerController: engine.PlayerController, FromAlpha: float, ToAlpha: float, Duration: float, Color: core_uobject.LinearColor, bShouldFadeAudio: bool, bHoldWhenFinished: bool): ...
    def SpawnPickupFromClass(self, ContextActor: engine.Actor, PickupClass: unreal.UClass, SocketName: str, SpawnPattern: LootSpawnPatternData, bAttachPickup: bool, ReturnValue: gbx_inventory.DroppedInventoryItemPickup) -> gbx_inventory.DroppedInventoryItemPickup: ...
    def SpawnLootAsync(self, ContextActor: engine.Actor, Request: SpawnDroppedPickupLootRequest, ReturnValue: int) -> int: ...
    def SpawnLoot(self, ContextActor: engine.Actor, ItemPools: gbx_inventory.ItemPoolListInterface, SocketName: str, SpawnPattern: LootSpawnPatternData, AllDroppedPickups: unreal.WrappedArray[gbx_inventory.DroppedInventoryItemPickup], TimeToSpawnLootOver: float, AttachLoot: bool): ...
    def SetTickableWhenPausedOnHierarchy(self, RootActor: engine.Actor, bTickWhenPaused: bool): ...
    def SetTerritory(self, AIActor: engine.Actor, TerritoryActor: engine.Actor): ...
    def SetHandIkToSocket(self, Actor: engine.Actor, bLeftHandWorld: bool, bRightHandWorld: bool, LeftHandSocket: str, RightHandSocket: str): ...
    def SetEnableTrueTrialsEvent(self, WorldContextObject: unreal.UObject, bSetEnabled: bool): ...
    def SetCoordinatedEffectSwitchState(self, Actor: engine.Actor, State: int): ...
    def SetCoordinatedEffectSwitch(self, Actor: engine.Actor, State: str): ...
    def SetAnimationStyle(self, Actor: engine.Actor, NewStyle: int): ...
    def ResourceUnlockWeaponsRestricted(self, Actor: engine.Actor, Reason: str): ...
    def ResourceUnlockSprinting(self, Actor: engine.Actor, Reason: str): ...
    def ResourceUnlockPlayerInfiniteAmmo(self, Actor: engine.Actor, Reason: str): ...
    def ResourceUnlockPlayerGrenadeThrow(self, Actor: engine.Actor, Reason: str): ...
    def ResourceUnlockMelee(self, Actor: engine.Actor, Reason: str): ...
    def ResourceUnlockForcedSlide(self, Actor: engine.Actor, Reason: str): ...
    def ResourceUnlockAllPlayersWeaponsRestricted(self, WorldContextObject: unreal.UObject, Reason: str): ...
    def ResourceUnlockAllPlayersInfiniteAmmo(self, WorldContextObject: unreal.UObject, Reason: str): ...
    def ResourceLockWeaponsRestricted(self, Actor: engine.Actor, Reason: str): ...
    def ResourceLockSprinting(self, Actor: engine.Actor, Reason: str): ...
    def ResourceLockPlayerInfiniteAmmo(self, Actor: engine.Actor, Reason: str): ...
    def ResourceLockPlayerGrenadeThrow(self, Actor: engine.Actor, Reason: str): ...
    def ResourceLockMelee(self, Actor: engine.Actor, Reason: str): ...
    def ResourceLockForcedSlide(self, Actor: engine.Actor, Reason: str): ...
    def ResourceLockAllPlayersWeaponsRestricted(self, WorldContextObject: unreal.UObject, Reason: str): ...
    def ResourceLockAllPlayersInfiniteAmmo(self, WorldContextObject: unreal.UObject, Reason: str): ...
    def ResolveObjectFromPathString(self, ObjectPathString: str, ReturnValue: unreal.UObject) -> unreal.UObject: ...
    def ResetTerritory(self, AIActor: engine.Actor): ...
    def ReRollInventoryGenericParts(self, InventoryBalanceState: gbx_inventory.InventoryBalanceStateComponent, PreferredGenericParts: unreal.WrappedArray[gbx_inventory.InventoryGenericPartData], ReturnValue: engine.Actor) -> engine.Actor: ...
    def ReplaceDefaultAITree(self, Target: engine.Actor, AIAction: unreal.UClass): ...
    def RemoveGlobalPlayerDemiGodLock(self, WorldContextObject: unreal.UObject, Reason: str): ...
    def RemoveGlobalInputLock(self, WorldContextObject: unreal.UObject, InputLockType: EPlayerInputLockType, Reason: str): ...
    def RegisterModifier(self, WorldContextObject: unreal.UObject, ModifierName: str, ModifierData: OakModifierData): ...
    def RegisterCustomModifier(self, WorldContextObject: unreal.UObject, ModifierName: str, TargetResolverName: str, StatusEffectName: str, Value: float): ...
    def PlayEchoDialogForAllPlayers(self, WorldContextObject: unreal.UObject, EchoLog: EchoLogData, PlayOnSpeaker: gbx_dialog.GbxDialogComponent): ...
    def LockPhotoMode(self, Actor: engine.Actor, Reason: str): ...
    def IsSpawner(self, Spawner: engine.Actor, ReturnValue: bool) -> bool: ...
    def IsPointInPlayerViewFrustum(self, PlayerController: engine.PlayerController, Point: core_uobject.Vector, ReturnValue: bool) -> bool: ...
    def IsInventoryFromLeague(self, Inventory: gbx_inventory.InventoryBalanceStateComponent, RequiredLeague: int, bIncludeParts: bool, ReturnValue: bool) -> bool: ...
    def IsHealthy(self, Actor: engine.Actor, ReturnValue: bool) -> bool: ...
    def IsGameUsingInstancedLoot(self, WorldContextObject: unreal.UObject, ReturnValue: bool) -> bool: ...
    def IsAlive(self, Actor: engine.Actor, ReturnValue: bool) -> bool: ...
    def InstaKillAllPlayerCharacters(self, WorldContextObject: unreal.UObject, SourceLocation: core_uobject.Vector, Range: float): ...
    def InitializeNonAugmentBoosterPickup(self, Pickup: gbx_inventory.DroppedInventoryItemPickup, ShieldChargeModifierValue: float, ManagedActorOwner: engine.Actor): ...
    def GiveRewardItem(self, OakPlayer: OakCharacter_Player, ContextActor: engine.Actor, ItemPool: gbx_inventory.ItemPoolData, LootGameStageVarianceFormula: unreal.UClass): ...
    def GetZoneMapForLevel(self, LevelName: str, WorldContextObject: unreal.UObject, ReturnValue: ZoneMapData) -> ZoneMapData: ...
    def GetTravelStationTracker(self, WorldContextObject: unreal.UObject, ReturnValue: OakTravelStationTracker) -> OakTravelStationTracker: ...
    def GetRandomPlayerCharacter(self, WorldContextObject: unreal.UObject, ReturnValue: OakCharacter_Player) -> OakCharacter_Player: ...
    def GetPlayerShieldInfo(self, Controller: engine.PlayerController, OutHealthType: gbx_game_system_core.HealthType, ReturnValue: bool) -> bool: ...
    def GetKnownZoneMapDisplayList(self, DisplayList: unreal.WrappedArray[ZoneMapDisplayInfo], WorldContextObject: unreal.UObject): ...
    def GetEffectiveLevelDifference(self, ActorA: engine.Actor, ActorB: engine.Actor, bIncludeLevelSync: bool, OutLevelDifference: int, ReturnValue: bool) -> bool: ...
    def GetDialogBlackboard(self, WorldContextObject: unreal.UObject, ReturnValue: OakDialogBlackboard) -> OakDialogBlackboard: ...
    def GetCoordinatedEffectSwitchState(self, Actor: engine.Actor, ReturnValue: int) -> int: ...
    def GetAttitudeTowardPlayer(self, SourceActor: engine.Actor, ReturnValue: int) -> int: ...
    def GetAttitudeTowardActor(self, SourceActor: engine.Actor, TargetActor: engine.Actor, ReturnValue: int) -> int: ...
    def GetAssociatedSpawner(self, Target: engine.Actor, ReturnValue: gbx_spawn.Spawner) -> gbx_spawn.Spawner: ...
    def GetAnimationStyle(self, Actor: engine.Actor, ReturnValue: int) -> int: ...
    def GetAllPlayerPawns(self, WorldContextObject: unreal.UObject, Pawns: unreal.WrappedArray[engine.Pawn]): ...
    def GetAllPlayerCharacters(self, WorldContextObject: unreal.UObject, bLocalOnly: bool, Characters: unreal.WrappedArray[OakCharacter_Player]): ...
    def GenerateProjectedMesh(self, Actor: engine.Actor, ProjectionTransform: core_uobject.Transform, ComponentTransform: core_uobject.Transform, Options: ProjectedMeshOptions, ReturnValue: ProjectedMeshResults) -> ProjectedMeshResults: ...
    def FindOakNavComponent(self, Actor: engine.Actor, ReturnValue: OakNavComponent) -> OakNavComponent: ...
    def FindNearestPlayerCharacters(self, WorldContextObject: unreal.UObject, Location: core_uobject.Vector, ReturnValue: OakCharacter_Player) -> OakCharacter_Player: ...
    def FindNearestActorSpawnedBy(self, SourceLocation: core_uobject.Vector, Spawner: engine.Actor, ReturnValue: engine.Actor) -> engine.Actor: ...
    def FindFarthestPlayerCharacters(self, WorldContextObject: unreal.UObject, Location: core_uobject.Vector, ReturnValue: OakCharacter_Player) -> OakCharacter_Player: ...
    def EnterVehicle(self, Actor: engine.Actor, Vehicle: engine.Actor, SeatIndex: int, bInstant: bool): ...
    def DetachProjectedShield(self, Component: engine.SceneComponent): ...
    def DestroyProjectedShield(self, Component: engine.SceneComponent): ...
    def DeactivateAllModifiers(self, WorldContextObject: unreal.UObject): ...
    def CreateViewAttachmentComponent(self, Owner: engine.Actor, bUpdateLocation: bool, bUpdateRotation: bool, PitchScale: float, ReturnValue: ViewAttachmentComponent) -> ViewAttachmentComponent: ...
    def CreateProjectedShield(self, Owner: engine.Actor, OwnerComponent: engine.SceneComponent, Mesh: engine.StaticMesh, CollisionProfile: str, MeshRelativeTransform: core_uobject.Transform, ParticleSystemTransform: core_uobject.Transform, ReturnValue: OakProjectedShield) -> OakProjectedShield: ...
    def CancelCameraFadeAuthoritative(self, PlayerController: engine.PlayerController): ...
    def CancelAsyncLootSpawnRequest(self, WorldContextObject: unreal.UObject, RequestID: int): ...
    def BuildPathTo(self, OutPoints: unreal.WrappedArray[core_uobject.Vector], Actor: engine.Actor, Destination: core_uobject.Vector, SearchRadius: float, AgentRadiusOverride: float, ReturnValue: bool) -> bool: ...
    def BuildPath(self, OutPoints: unreal.WrappedArray[core_uobject.Vector], Actor: engine.Actor, Start: core_uobject.Vector, Destination: core_uobject.Vector, SearchRadius: float, AgentRadiusOverride: float, ReturnValue: bool) -> bool: ...
    def BroadcastKilledEnemyFriendEvent(self, KilledActor: engine.Actor, KilledEnemyFriendEventType: EKilledEnemyFriendEventType, KillStat: gbx_game_system_core.GameStatData, KillCount: int): ...
    def AwardKillExperienceToParty(self, ContextActor: engine.Actor, OptionalKiller: OakPlayerController): ...
    def AttachProjectedShield(self, Component: engine.SceneComponent, Owner: engine.Actor, AttachSocket: str): ...
    def AreAllPlayerInRangeLookingAtActor(self, LookAtTarget: engine.Actor, MaxRange: float, ConeAngle: float, ReturnValue: bool) -> bool: ...
    def AddGlobalPlayerDemiGodLock(self, WorldContextObject: unreal.UObject, Reason: str): ...
    def AddGlobalInputLock(self, WorldContextObject: unreal.UObject, InputLockType: EPlayerInputLockType, Reason: str): ...
    def ActivateAllModifiers(self, WorldContextObject: unreal.UObject): ...


class OakBodyMeshLinkedParameterData(gbx_runtime.GbxDataAsset):
    OwnerClassesToParameters: unreal.WrappedArray[BodyMeshLinkedParameters]



class OakCameraInputs(gbx_camera_modes.CameraInputs):
    Weapon: gbx_weapon.Weapon
    bResetAutoLook: bool
    bResetAutoLookWaitTimer: bool
    bEchoDeviceActive: bool
    FocusOverridePPSettings: engine.PostProcessSettings



class OakCapsuleComponent(engine.CapsuleComponent):
    bIronBearNoBounce: bool



class OakCARMenuInteractionInterface(core_uobject.Interface): ...


class OakCARVehicleData(gbx_runtime.GbxDataAsset):
    RestrictionType: ECARRestrictionType
    UIInfo: OakCARVehicleUIInfo
    bIsSmallVehicle: bool
    SortPriority: int
    StandInDefault: str
    StandInByPart: str



class OakCARMenuLoadout(gbx_runtime.GbxDataAsset):
    VehicleConfig: OakCARMenuVehicleConfig



class OakCARVehiclePartData(gbx_runtime.GbxDataAsset):
    PartOfVehicle: OakCARVehicleData
    PartType: ECARPartType
    UIInfo: OakCARVehicleUIInfo
    SortPriority: int
    DefaultColor1: core_uobject.Color
    DefaultColor2: core_uobject.Color
    DefaultColor3: core_uobject.Color



class OakCARVehiclePartStat(gbx_game_system_core.UIStatData):
    StatListDisplayPriority: int



class OakChallenge(gbx_game_system_core.Challenge):
    ExperienceReward: gbx_game_system_core.AttributeInitializationData
    CashReward: gbx_game_system_core.AttributeInitializationData
    EridiumReward: gbx_game_system_core.AttributeInitializationData
    RewardItemPool: gbx_inventory.ItemPoolData
    RewardCustomizations: unreal.WrappedArray[OakCustomizationData]
    RewardWeaponSkins: unreal.WrappedArray[WeaponSkinPartData]
    RewardWeaponTrinkets: unreal.WrappedArray[WeaponTrinketPartData]
    TierRewards: unreal.WrappedArray[OakChallengeTierRewards]
    TierRewardsPerInstance: unreal.WrappedArray[OakChallengeTierRewardsPerInstance]
    ActivityFeedReward: ActivityFeedReward
    bIsCrewChallenge: bool
    bManuallyGiveTierRewards: bool
    AssociatedCharacterClass: PlayerClassIdentifier
    bWeeklyVaultCard: bool
    def GetChallengeLevel(self, ReturnValue: int) -> int: ...


class OakChallengeCategoryData(gbx_game_system_core.ChallengeCategoryData):
    LevelActorIcon: InWorldIconData
    CompleteLevelActorIcon: InWorldIconData
    LevelActorMapIconActive: engine.Texture2D
    LevelActorMapIconComplete: engine.Texture2D
    bDontUseScaleformIcon: bool
    ScaleformMapIconActive: str
    ScaleformMapIconComplete: str



class OakChallengeList(gbx_game_system_core.ChallengeList):
    AssociatedSeasonHandle: engine.DataTableRowHandle
    ChallengeListLeague: int



class OakChallengeManager(gbx_game_system_core.ChallengeManager):
    IconContainers: unreal.WrappedArray[GFxInWorldIconContainer]
    MinimapWidgets: unreal.WrappedArray[GFxMinimapWidget]
    ChallengeInWorldIcons: unreal.WrappedArray[ChallengeInWorldIcon]
    ChallengeMinimapIcons: unreal.WrappedArray[ChallengeMinimapIcon]
    QueuedInWorldIcons: unreal.WrappedArray[ChallengeInWorldIconQueueEntry]



class OakCustomChallengePersistentState(gbx_game_system_core.CustomChallengePersistentState):
    RewardTiersClaimed: unreal.WrappedArray[bool]



class OakChallengesComponent(gbx_game_system_core.ChallengesComponent):
    RegisteredDamageChallengeClasses: unreal.WrappedArray[unreal.UClass]
    QueuedDamageChallengeData: unreal.WrappedArray[DamageChallengeData]
    RegisteredKillChallengeClasses: unreal.WrappedArray[unreal.UClass]
    def ServerRequestManualClaimRewards(self, Challenge: OakChallenge, RequestedTier: int): ...
    def DoAsyncWorkComputingCompletionPercentages(self, bForceToFinishNow: bool): ...
    def ClientNotifyManualClaimRewardsComplete(self, Challenge: OakChallenge, ClaimedTier: int): ...
    def BroadcastChallengeUpdateFriendEvent(self, Component: gbx_game_system_core.ChallengesComponent, ChallengeClass: unreal.UClass, NewValue: int, bDisplayNotification: bool, bCompleted: bool): ...
    def BroadcastChallengeCompletedToFriendSystems(self, Component: gbx_game_system_core.ChallengesComponent, ChallengeClass: unreal.UClass): ...


class OakCharacter_CameraMan(OakCharacter):
    BaseTurnRateMultiplier: float
    BaseLookUpRateMultiplier: float
    BaseRollRateMultiplier: float
    MoveRateMultiplier: float
    DetachedMoveRateMultiplier: float
    CraneRateMultiplier: float
    DegreesToMoveMultiplier: float
    bAddDefaultMovementBindings: bool
    MovementComponent: engine.PawnMovementComponent
    AttachedRadius: float



class OakCharacter_IronBear(OakCharacter):
    HardPointSlots: unreal.WrappedArray[IronBearHardPointData]
    CoreSlot: OakActionAbilityAugmentSlotData
    CoreSlots: unreal.WrappedArray[OakActionAbilityAugmentSlotData]
    CoreAugments: unreal.WrappedArray[OakActionAbilityAugmentData_IronBear]
    bDisableIronBearCapsuleCollisionOnExit: bool
    ManualExitTimeSeconds: float
    GundamCoreCooldownTimeSeconds: float
    GunnersNestClass: unreal.UClass
    GunnersNestAttachSocketName: str
    IronBearUberAbilityClass: unreal.UClass
    StartEngineEvent: wwise_audio.WwiseEvent
    StartEngineEventQuick: wwise_audio.WwiseEvent
    StopEngineEvent: wwise_audio.WwiseEvent
    StartManualExitEvent: wwise_audio.WwiseEvent
    StopManualExitEvent: wwise_audio.WwiseEvent
    RtpcManualExit: wwise_audio.WwiseRtpc
    StartTimeLeftEvent: wwise_audio.WwiseEvent
    StopTimeLeftEvent: wwise_audio.WwiseEvent
    RtpcTimeLeft: wwise_audio.WwiseRtpc
    RtpcRelativeSpeed: wwise_audio.WwiseRtpc
    RtpcDamage: wwise_audio.WwiseRtpc
    DriverEffectsBus: wwise_audio.WwiseAuxBus
    DriverEffectBusWetVolume: float
    DriverEffectBusDryVolume: float
    IronBearActionAbility: OakActionAbility_IronBear
    Gunner: OakCharacter_Player
    SpawnStyle: EIronBearSpawnStyle
    ExitReason: EIronBearExitReason
    DurationTimeRemainingOnExit: float
    OakPlayerController: OakPlayerController
    GunnersNest: SeatPawn
    ActiveCoreTypes: unreal.WrappedArray[EIronBearCoreType]
    BubbleShieldResource: gbx_game_system_core.GameResourceData
    EngineLoop: wwise_audio.WwisePlaybackInstance
    ManualExitLoop: wwise_audio.WwisePlaybackInstance
    TimeLeftLoop: wwise_audio.WwisePlaybackInstance
    PrimarySeatComponent: gbx_game_system_core.PawnAttachSlotComponent
    CurrentDamageLevel: EIronBearDamageLevel
    bBubbleShieldEnabled: bool
    bBubbleShieldFiring: bool
    bIsExiting: bool
    BubbleShieldResourcePool: gbx_game_system_core.GameResourcePoolReference
    AppliedAudioEffect: wwise_audio.WwiseAudioEffect
    CustomizationComponent: gbx_game_system_core.GbxCustomizationComponent
    AIWeaponSlotComponents: unreal.WrappedArray[gbx_ai.AIWeaponUserComponent]
    bIronCub: bool
    def StartManualExit(self): ...
    def StartDigistructIn(self): ...
    def OnRep_CurrentDamageLevel(self): ...
    def OnRep_bIsExiting(self): ...
    def OnRep_bBubbleShieldFiring(self): ...
    def OnRep_bBubbleShieldEnabled(self): ...
    def OnPlayerLevelChanged(self, OldLevel: int, NewLevel: int): ...
    def OnHealthMinMaxValueChanged(self, HealthPool: gbx_game_system_core.GameResourcePoolReference, NewMin: float, NewMax: float): ...
    def OnHealthCurrentValueChanged(self, HealthPool: gbx_game_system_core.GameResourcePoolReference, NewValue: float): ...
    def OnHardPointUseStateChanged(self): ...
    def OnExitStarted(self): ...
    def OnExiting(self, bInstantExit: bool): ...
    def OnExited(self, OldController: engine.Controller): ...
    def OnEntering(self, InGunner: OakCharacter_Player): ...
    def OnEntered(self): ...
    def OnDriverDetachFinished(self, InPawn: engine.Pawn, InController: engine.Controller): ...
    def OnDriverAttachFinished(self, InPawn: engine.Pawn, InController: engine.Controller): ...
    def OnDamageLevelChanged(self): ...
    def OnBubbleShieldResourceNowNotDepleted(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def OnBubbleShieldResourceNowDepleted(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def OnBubbleShieldFireStateChanged(self): ...
    def OnBubbleShieldEnabledStateChanged(self): ...
    def ManualExitStarted(self): ...
    def ManualExitCancelled(self): ...
    def IsCoreActive(self, CoreType: EIronBearCoreType, ReturnValue: bool) -> bool: ...
    def IsAugmentInModSlot(self, Slot: OakActionAbilityAugmentSlotData, Augment: OakActionAbilityAugmentData, ReturnValue: bool) -> bool: ...
    def IronBearExitEvent__DelegateSignature(self): ...
    def HasBubbleShield(self, ReturnValue: bool) -> bool: ...
    def HandleOnDead(self): ...
    def GetWeaponUserForWeaponSlot(self, SlotData: WeaponSlotData, ReturnValue: gbx_ai.AIWeaponUserComponent) -> gbx_ai.AIWeaponUserComponent: ...
    def GetPlayerAbilityManagerComponent(self, ReturnValue: OakPlayerAbilityManagerComponent) -> OakPlayerAbilityManagerComponent: ...
    def GetIronBearTimeLeftPercent(self, ReturnValue: float) -> float: ...
    def GetIronBearAutoSlideCooldownRefund(self, ReturnValue: float) -> float: ...
    def GetHardPointWeaponByOrientation(self, Orientation: EIronBearHardPointOrientation, ReturnValue: OakWeapon_IronBearHardPoint) -> OakWeapon_IronBearHardPoint: ...
    def GetHardPointWeapon(self, Slot: OakActionAbilityAugmentSlotData, ReturnValue: OakWeapon_IronBearHardPoint) -> OakWeapon_IronBearHardPoint: ...
    def ExitIronBear(self, InExitReason: EIronBearExitReason): ...
    def EndHardPointAction(self, Slot: OakActionAbilityAugmentSlotData): ...
    def ClientFaceRotation(self, Yaw: float): ...
    def CancelManualExit(self): ...
    def BeginHardPointAction(self, Slot: OakActionAbilityAugmentSlotData): ...
    def ActivateGundamCore(self): ...


class OakCharacter_IronCub(OakCharacter_IronBear):
    IronCubSpawnLocationParams: gbx_game_system_core.EnvQueryParams
    bEnableOutline: bool
    OwnedOutlineColor: core_uobject.LinearColor
    UnownedOutlineColor: core_uobject.LinearColor
    OutlineThickness: int
    def UpdateOutlineOnWeaponChange(self, Weapon: gbx_weapon.Weapon, LastWeapon: gbx_weapon.Weapon): ...


class OakCharacter_Player(OakCharacter_Default):
    bSanctuaryZeroGravity: bool
    ConnectEffectTemplate: engine.ParticleSystem
    ConnectEffectBoneName: str
    DisconnectEffectTemplate: engine.ParticleSystem
    DisconnectEffectBoneName: str
    PhotoModeController: PhotoModeController
    PhotoModeView: GFxPhotoModeMenu
    AdditionalInput: core_uobject.Vector
    AdditionalRoll: float
    bIsRaidSpectating: bool
    bHasMenuOpen_Replicated: bool
    bInterruptFriendlyTargeting: bool
    bIsWeaponLowered: bool
    FriendlyTargetRange: float
    WeaponLowerDelay: float
    WeaponRaiseDelay: float
    FriendlyTarget: engine.Actor
    LadderCameraMode: str
    LadderCameraBlendOutTime: float
    LadderSlidingFeedback: gbx_game_system_core.FeedbackData
    LadderSlideLandingFeedback: gbx_game_system_core.FeedbackData
    LadderSlideAudioLoop: wwise_audio.WwiseEvent
    GrenadeThrowAction: unreal.UClass
    GrenadeThrowCooldown: float
    GrenadeResource: gbx_game_system_core.GameResourceData
    EquippedEmotes: unreal.WrappedArray[OakCustomizationData]
    EchoDeviceState: PlayerEchoDeviceState
    PlayerSDUs: OakSDUContainer
    HeadCustomizationType: gbx_game_system_core.GbxCustomizationTypeData
    BodyCustomizationType: gbx_game_system_core.GbxCustomizationTypeData
    SkinCustomizationType: gbx_game_system_core.GbxCustomizationTypeData
    CustomizationComponent: OakCustomizationComponent
    CharacterIconFrameName: str
    EchoDeviceRepState: ReplicatedPlayerEchoDeviceState
    PendingInsertPlayEchoLog: EchoLogData
    PlayerBalanceComponent: PlayerBalanceStateComponent
    HavokNavObstacleComponent: gbx_nav.HavokNavObstacleComponent
    PlayerAbilityManagerComponent: OakPlayerAbilityManagerComponent
    FFYLCapsuleComponent: engine.CapsuleComponent
    AmmoRegenRate: engine.GbxAttributeFloat
    GrenadeFFYLRestrictionLock: gbx_game_system_core.ResourceLock
    ClientWeaponsRestrictedRestoreSlots: int
    PlayerPainSounds: unreal.WrappedArray[PlayerPainSoundData]
    SprintExhaustionStartThreshold: float
    SprintExhaustionStopThreshold: float
    HUDSkillIconWidgetClass: unreal.UClass
    bTired: bool
    bUsesSecondaryActionSkill: bool
    bUsesActionSkillHoldOverrideAction: bool
    OakPlayerController: OakPlayerController
    HUDSkillIconWidget: OakHUDSkillIconWidget
    GrenadeAmmoAttribute: gbx_game_system_core.GbxAttributeData
    bCanWeaponZoomWhileInjured: bool
    TeleportAction: unreal.UClass
    EquippedInventoryForSaveGame: InventorySlotContainer
    ActiveWeaponsForSaveGame: WeaponSlotContainer
    def WonDuelDelegate__DelegateSignature(self, Classification: EDuelClassification): ...
    def UpdateFriendStatusSystemOfInventoryChange(self, InInventory: engine.Actor, SlotData: InventorySlotData): ...
    def UnlockPlayerFFYLGrenadeRestriction(self, Reason: str): ...
    def UnequipEchoDevice(self, bInstant: bool, Reason: str, bReplicate: bool): ...
    def TryThrowGrenade(self, ReturnValue: bool) -> bool: ...
    def TickFriendlyTarget(self, DeltaSeconds: float): ...
    def SpawnAndThrowGrenade(self, ReturnValue: Grenade) -> Grenade: ...
    def SpawnAmmoOptionalGrenadeFromSource(self, SourceActor: engine.Actor, bUseAmmo: bool, ThrowSocketName: str, ReturnValue: Grenade) -> Grenade: ...
    def SpawnAmmoOptionalGrenade(self, bUseAmmo: bool, ReturnValue: Grenade) -> Grenade: ...
    def SimpleDuelDelegate__DelegateSignature(self): ...
    def ShowDisconnectEffect(self): ...
    def ShowConnectEffect(self): ...
    def SetFriendlyTarget(self, NewFriendly: engine.Actor): ...
    def SetEchoDeviceIdleScreen(self, NewScreenName: str): ...
    def ServerUnequipEchoDevice(self, bInstant: bool): ...
    def ServerTryThrowGrenade(self): ...
    def ServerTryInitiateDuel(self): ...
    def ServerTryExitPhotoMode(self): ...
    def ServerTryEnterPhotoMode(self): ...
    def ServerSetHasMenuOpen(self, bNewValue: bool): ...
    def ServerPlayTeleportEffectsOnly(self): ...
    def ServerPlayEchoDeviceScreen(self, NewScreenName: str): ...
    def ServerNotifyPhotoModeFailed(self): ...
    def ServerInterruptEmote(self): ...
    def ServerEquipEchoDevice(self, EquipType: gbx_weapon.EWeaponEquipType): ...
    def ResumeFriendlyTargeting(self): ...
    def PlayEchoDeviceScreen(self, NewScreenName: str): ...
    def OnStartDead(self): ...
    def OnSDUListUpdated(self, InSDUData: OakSDUData, InSDULevel: int): ...
    def OnRep_EchoDeviceRepState(self): ...
    def OnRep_bSanctuaryZeroGravity(self): ...
    def OnMaxHealthChanged(self, OldValue: float, NewValue: float): ...
    def OnLevelUp(self, OldExperienceLevel: int, NewExperienceLevel: int): ...
    def OnKilledHostile(self): ...
    def OnCinematicStopped_RetryTeleportEffects(self): ...
    def NotifyPickedUpEchoDeviceLog(self, EchoActor: engine.Actor): ...
    def NotifyHitFriendly(self, Details: gbx_game_system_core.HitFriendlyEventDetails): ...
    def NotifyEchoPutDownFinished(self): ...
    def NotifyEchoEquipFinished(self): ...
    def Multicast_PlayEchoDeviceInsert(self, InsertAction: unreal.UClass, EchoLogData: EchoLogData): ...
    def LostDuelDelegate__DelegateSignature(self, LoseReason: EDuelLoseReason, Classification: EDuelClassification): ...
    def LockPlayerFFYLGrenadeRestriction(self, Reason: str): ...
    def IsPlayingEmote(self, ReturnValue: bool) -> bool: ...
    def InterruptFriendlyTargeting(self): ...
    def InterruptEmote(self): ...
    def InterruptAndPlayNewEmote(self, EmoteData: OakCustomizationData): ...
    def HasProjectedShield(self, ReturnValue: bool) -> bool: ...
    def HasEnoughAmmoToThrowGrenade(self, ReturnValue: bool) -> bool: ...
    def GetSecondaryActionAbility(self, ReturnValue: OakActionAbility) -> OakActionAbility: ...
    def GetSDULevel(self, InSDUData: OakSDUData, ReturnValue: int) -> int: ...
    def GetPrimaryActionAbility(self, ReturnValue: OakActionAbility) -> OakActionAbility: ...
    def GetPet(self, ReturnValue: OakCharacter) -> OakCharacter: ...
    def GetNextSDULevelInfo(self, InSDUData: OakSDUData, NextSDULevel: int, OutSDUPrice: int, OutPriceCurrenty: gbx_inventory.InventoryCategoryData, ModifyAmount: float, ReturnValue: bool) -> bool: ...
    def GetEchoDevice(self, ReturnValue: EchoDevice) -> EchoDevice: ...
    def ExecuteTeleport(self): ...
    def EquipEchoDevice(self, EquipType: gbx_weapon.EWeaponEquipType, Reason: str, bOutsideOfMenu: bool, bReplicate: bool): ...
    def EnableComboGuardianRankPerk(self, DamageBonusPerShot: float, Duration: float, MaxStacks: int): ...
    def DuelInstigatorDelegate__DelegateSignature(self, Other: OakCharacter_Player): ...
    def DisableComboGuardianRankPerk(self): ...
    def ClientNotifyVaultRewardGiven(self, VaultRewardType: EVaultRewardType): ...
    def ClientExitPhotoMode(self): ...
    def ClientEnterPhotoMode(self): ...
    def CanStartThrowingGrenade(self, ReturnValue: bool) -> bool: ...
    def CanCurrentlyThrowGrenades(self, ReturnValue: bool) -> bool: ...
    def AnimNotify_SpawnGrenade(self): ...
    def AddSDU(self, InSDUData: OakSDUData): ...
    def AddHUDSkillIconWidget(self, ReturnValue: OakHUDSkillIconWidget) -> OakHUDSkillIconWidget: ...


class OakCharacter_StandIn(OakCharacter):
    CustomizationComponent: OakCustomizationComponent
    HeadMesh: gbx_game_system_core.GbxSkeletalMeshComponent
    CharacterComponent: StandInCharacterComponent
    WeaponHoldComponent: gbx_weapon.BodyWeaponHoldManagerComponent
    StandInWeaponBalanceData: gbx_inventory.InventoryBalanceData
    OverrideWeaponSocketName: str
    EquippedEmote: OakCustomizationData
    InitData: PlayerStandInInitData
    EquippedWeaponTemplate: gbx_weapon.Weapon
    Current_EquippedWeaponInstance: gbx_weapon.Weapon
    Pending_PutDownWeaponInstance: gbx_weapon.Weapon
    Pending_EquipWeaponInstance: gbx_weapon.Weapon
    OwningPlayer: OakCharacter_Player
    def OnCustomizationApplied(self, Customization: gbx_game_system_core.GbxCustomizationData): ...


class OakCharacterAbilityListData(gbx_runtime.GbxDataAsset):
    Abilities: unreal.WrappedArray[unreal.UClass]



class OakCharacterAbilityManagerComponent(gbx_abilities.GbxAbilityManagerComponent):
    DefaultAbilities: OakCharacterAbilityListData
    OakInputAbilities: OakInputAbilityListData



class OakInputAbility(OakAbility):
    bAvailableOnLadders: bool
    bAvailableWhileMantling: bool
    bAvailableWhenReviving: bool
    bPauseWhenInputLocked: bool
    RespectGlobalLockType: EPlayerInputLockType



class OakCharacterInputAbility(OakInputAbility):
    OakCharacter: OakCharacter
    OakProfile: OakProfile
    OakPlayerController: OakPlayerController
    def CancelCrouchToggle(self): ...


class OakCharacterMechAttributeContextResolver(gbx_game_system_core.CharacterAttributeContextResolver): ...


class OakCharacterMovementComponent(gbx_nav.GbxNavCharacterMovementComponent):
    PushAwayFromPlayersMaxAccelBoost: float
    PushAwayFromPlayersRadiusThreshold: float
    MaxInheritedSpeedFromSimulatingPhysicsMovementBase: float
    bUseJumpGoals: bool
    SprintingJumpMaxSpeedPct: float
    SprintingJumpHorizontalSpeedScale: float
    JumpGoal_Default: CharacterJumpGoalSetting
    JumpGoal_Sprinting: CharacterJumpGoalSetting
    JumpHorizontalSpeedScaleWhenNoAcceleration: float
    FallDelayTime: float
    FallDelayGravityScale: float
    JumpQueueTime: float
    MaxSprintSpeed: engine.GbxAttributeFloat
    MaxInjuredSprintSpeed: engine.GbxAttributeFloat
    MaxWalkSpeedInjured: engine.GbxAttributeFloat
    MaxWalkSpeedInjuredBeingRevived: engine.GbxAttributeFloat
    MaxSprintAngle: float
    SprintAnalogInputThreshold: float
    bIgnoreAnalogInputWhenSprinting: bool
    bMantlingCancelsSprint: bool
    MaxLadderSlideDownSpeed: float
    LadderSlideAcceleration: float
    LadderSlideBrakingDeceleration: float
    LadderSlideLandingAnimation: unreal.UClass
    CryoPenaltyCurve: engine.CurveFloat
    SlidingData: CharacterSlidingData
    SlidingImpactTraceDelay: float
    SlidingSlopeAdaptation: core_uobject.Vector
    WheelRollingImpactData: gbx_game_system_core.ImpactData
    WheelRollingAudioStart: wwise_audio.WwiseEvent
    WheelRollingAudioStop: wwise_audio.WwiseEvent
    StartedRollingSound: wwise_audio.WwiseEvent
    StoppedRollingSound: wwise_audio.WwiseEvent
    WheelBone: str
    RollingSpeedParticleParameterName: str
    GroundSlamData: CharacterGroundSlamData
    GroundSlamHeightScalar: engine.GbxAttributeFloat
    bWantsToSprint: bool
    bWantsToStartSprinting: bool
    bIsSprinting: bool
    bWantsToSlide: bool
    bWantsToLadderSlide: bool
    bIsSlidingDownLadder: bool
    GroundSlamGradeIndex: int
    MaxSpeedScaleToUseBrakingBoost: float
    BrakingFrictionBoostWhenExceedingMaxSpeed: float
    BrakingDecelerationWalkingBoostWhenExceedingMaxSpeed: float
    BrakingDecelerationFallingBoostWhenExceedingMaxSpeed: float
    OakLadderInteractData: OakLadderInteractData
    OakCharacterOwner: OakCharacter
    CoverUserComponent: gbx_ai.CoverUserComponent
    StatusEffectComponent: OakStatusEffectManagerComponent
    FFYLComponent: FightForYourLifeComponent
    OakAnimInstance: OakCharacterAnimInstance
    bDeceleratingAfterLadderSlide: bool
    JumpGoalGravityScale: float
    CurrentJumpType: EJumpType
    bPendingSlideJump: bool
    ActorsToPushAwayFrom: unreal.WrappedArray[OakCharacter]
    bRepInDelayedFall: bool
    SlidingFootImpactState: SlidingImpactState
    SlidingBaseImpactState: SlidingImpactState
    RollingImpactState: SlidingImpactState
    OverlappingSlidingVolumes: unreal.WrappedArray[CharacterForcedSlidingVolume]
    CurrentSlidingVolume: CharacterForcedSlidingVolume
    OldMovementBase: engine.PrimitiveComponent
    def TeleportPlayer(self, TargetLocation: core_uobject.Vector, TeleportData: OakPlayerTeleportData, ReturnValue: bool) -> bool: ...
    def SetWantsToLadderSlide(self, bNewWantsToLadderSlide: bool): ...
    def ServerStopSliding(self): ...
    def ServerStartSliding(self): ...
    def ServerAttemptGroundSlam(self, Grade: int): ...
    def OnSlidingImpactParticleSystemFinished(self, PSC: engine.ParticleSystemComponent): ...
    def OnRep_CurrentJumpType(self): ...
    def OnRep_bRepInDelayedFall(self): ...
    def OnRep_bIsSprinting(self): ...
    def OakCharacterMovementEvent__DelegateSignature(self): ...
    def NotifyMantleStarted(self): ...
    def NotifyMantleFinished(self): ...
    def IsSlidingDownLadder(self, ReturnValue: bool) -> bool: ...
    def IsPerformingUpwardLadderJump(self, ReturnValue: bool) -> bool: ...
    def CharacterSlideEndedEvent__DelegateSignature(self, Details: SlideEndedDetails): ...
    def CharacterGroundSlamEndedEvent__DelegateSignature(self, Details: GroundSlamEndedDetails): ...


class OakCharacterSoundData(gbx_audio.CharacterSoundData):
    TiredSoundOverrides: gbx_audio.InheritableSoundMap
    bOverrideFirePainLoop: bool
    FirePainLoop: wwise_audio.WwiseEvent
    FirePainLoopStop: wwise_audio.WwiseEvent
    bOverrideCorrosivePainLoop: bool
    CorrosivePainLoop: wwise_audio.WwiseEvent
    CorrosivePainLoopStop: wwise_audio.WwiseEvent
    bOverrideShockPainLoop: bool
    ShockPainLoop: wwise_audio.WwiseEvent
    ShockPainLoopStop: wwise_audio.WwiseEvent
    bOverrideSlagPainLoop: bool
    SlagPainLoop: wwise_audio.WwiseEvent
    SlagPainLoopStop: wwise_audio.WwiseEvent
    bOverrideCryoPainLoop: bool
    CryoPainLoop: wwise_audio.WwiseEvent
    CryoPainLoopStop: wwise_audio.WwiseEvent
    bOverrideRadiationPainLoop: bool
    RadiationPainLoop: wwise_audio.WwiseEvent
    RadiationPainLoopStop: wwise_audio.WwiseEvent



class OakCharacterSoundLogicComponent(gbx_audio.CharacterSoundLogicComponent):
    CachedDialogComponents: unreal.WrappedArray[gbx_dialog.GbxDialogComponent]



class OakPlayerController(gbx_game_system_core.GbxPlayerController):
    OakCharacter: OakCharacter
    OakFirstPersonComponent: OakFirstPersonComponent
    CurrentSavegame: OakSaveGame
    SaveGameChannel: OakSaveGameChannel
    bClientWaitingForFullSaveGameInitialization: bool
    ExpectedSaveGameValues: ClientExpectedSaveGameValues
    ExperiencePointsLoadedFromSaveGame: int
    CurrentPlayerClass: PlayerClassIdentifier
    SkillTreeSubMenuClassPtr: GFxSkillScreenTree
    PreferredCharacterName: str
    OakHUD: OakHUD
    MenuStack: gbx_ui.GbxMenuStack
    DifficultySetting: EPlayerDifficultySetting
    bHasActivityFeedRequestInFlight: bool
    NextAllowedActivityFeedPostTime: float
    OutstandingActivityFeedQueue: unreal.WrappedArray[OutstandingActivityFeedData]
    NewGameFlow: NewGameFlow
    TradingMenu: GFxItemTradingMenu
    CurrentRaidSpectatorTarget: OakPlayerState
    CachedEchoLogData: EchoLogData
    UseComponent: OakUseComponent
    GameStatsComponent: gbx_game_system_core.GameStatsComponent
    PlayerMissionComponent: OakPlayerMissionComponent
    DiscoveryComponent: DiscoveryComponent
    VehicleSpawnerComponent: VehicleSpawnerComponent
    PlayerGuardianRankComponent: PlayerGuardianRankComponent
    FoDComponent: FogOfDiscoveryComponent
    RecoilControlComponent: gbx_weapon.RecoilControlComponent
    ShopManagerComponent: PlayerShopManagerComponent
    ChallengesComponent: OakChallengesComponent
    WwiseListenerEffectComponent: gbx_audio.WwiseListenerEffectComponent
    MenuInput: gbx_ui.GbxMenuInput
    bBoundaryWarningActive: bool
    CachedUsableTarget: gbx_game_system_core.UsableComponent
    CachedUsabilityInfo: gbx_game_system_core.UsabilityInfo
    CachedUsableImpactPoint: core_uobject.Vector
    CachedUsableDistanceAway: float
    CachedPlayerAlertLocation: core_uobject.Vector
    bAddDefaultBindings: bool
    bJumpingUncrouchesThenJumps: bool
    MantleAnalogInputThreshold: float
    MinPassiveMantleButtonHoldDuration: float
    AutoRespawnDelay: float
    RaidSpectatorCameraMode: str
    RaidSpectatorTarget: OakPlayerController
    RaidSpectatorInputComponent: engine.InputComponent
    SpawnedZoneMap: ZoneMapViewer
    CurrentLevelFogOfDiscovery: engine.TextureRenderTarget2D
    MissionDeliveryMenuData: gbx_ui.GbxMenuData
    NearbyGrenades: unreal.WrappedArray[OakProjectile]
    GearSoldByFriendActor: engine.Actor
    GearSoldByMe: unreal.WrappedArray[engine.Actor]
    OrphanedStandIns: unreal.WrappedArray[OrphanedUIStandIn]
    LateJoinStandIn_DigistructEffect: unreal.UClass
    LateJoinStandIn_DigistructOutEffect: unreal.UClass
    LateJoinStandIn_HoloEffect: unreal.UClass
    LateJoinStandIn: PlayerStandIn
    TriggerFeedbackStates: unreal.WrappedArray[TriggerFeedbackState]
    AimControlParameters: gbx_game_system_core.AimControlParameters
    OakAimAssistStrategy: OakAimAssistStrategy
    AimAssistParameters: OakAimAssistParameters
    DefaultAimAssistParameters: OakAimAssistParameters
    MoveAxialDeadZoneBegin: float
    MoveAxialDeadZoneRatio: float
    SafeFrameScalingMinMax: core_uobject.Vector2D
    HDRBrightnessMinMax: core_uobject.Vector2D
    HDRMenuBrightnessMinMaxTick: core_uobject.Vector
    BrightnessMinMax: core_uobject.Vector2D
    BlackLevelMinMax: core_uobject.Vector2D
    CurrentOakProfile: OakProfile
    WeaponSlotOverrideAimAssistParameters: unreal.WrappedArray[OakAimAssistParameters]
    bFullyAimingAtTarget: bool
    bAimingAtShootableObject: bool
    UIManager: UIManager
    OakPlayerCameraManager: OakPlayerCameraManager
    CrosshairScreenPosition: core_uobject.Vector2D
    MenusToPreserveInDownState: unreal.WrappedArray[unreal.UClass]
    bAllowForegroundFocusEffect: bool
    TradeManager: PlayerTradeManager
    PendingTradeMessage: MessageHandle
    ReplicatedCameraModeState: gbx_camera_modes.ReplicatedCameraModeState
    CurrentFocusObject: FocusableComponent
    GamepadViewScale: float
    GamepadZoomScale: float
    MouseViewScale: float
    MouseZoomScale: float
    PlayerPath: OakPlayerPath
    bInfiniteAmmo: bool
    CombatEncounterEndedDelay: float
    CachedPrimaryCharacter: gbx_game_system_core.GbxCharacter
    bBeingTargeted: bool
    ActiveCombatEncounterData: PlayerCombatEncounterData
    bOverrideCrosshairScreenPosition: bool
    OverrideCrosshairScreenPosition: core_uobject.Vector2D
    LoadingCharacterDialog: GbxGFxDialogBox
    TimeSinceLastMovement: float
    EchoNetParticleBackdrop: engine.ParticleSystemComponent
    CurrentAIO: AdvancedInteractiveObject
    PendingFinalizeAIO: AdvancedInteractiveObject
    UnlockedCustomizationData: unreal.WrappedArray[OakCustomizationInfo]
    UnlockedInventoryCustomizationParts: unreal.WrappedArray[OakInventoryCustomizationPartInfo]
    UnlockedCrewQuartersDecorations: unreal.WrappedArray[CrewQuartersDecorationInfo]
    UnlockedCrewQuartersRooms: unreal.WrappedArray[CrewQuartersRoomInfo]
    WorldSpaceWeatherEffect: engine.ParticleSystemComponent
    UnlockedEchoLogs: unreal.WrappedArray[UnlockedPlayerEchoLogData]
    PendingSwapSeat: MessageHandle
    CustomReplicatedActor: engine.Actor
    MoxxisEventTier: int
    GameStatChannel: gbx_game_system_core.GameStatChannel
    ScreenLiquidParticleTemplate: engine.ParticleSystem
    ScreenLiquidOpacityBlendInTime: float
    ScreenLiquidOpacityBlendOutTime: float
    ScreenLiquidColorTransitionTime: float
    PausedStateInputComponent: engine.InputComponent
    LateJoinFadeDuration: float
    PremiumCurrencyManager: PremiumCurrencyManager
    ZoneMapFODSavedData: engine.GbxZoneMapFODSaveGameData
    ScreenFadeInParticleTemplate: engine.ParticleSystem
    PlayerDiscoveredFastTravel: unreal.WrappedArray[gbx_travel_station.ActiveFastTravelData]
    AutoCenteringAngle: float
    AutoCenteringDelay: float
    AutoCenteringInterpolationSpeed: float
    AutoCenteringMinMovementSpeed: float
    AutoCenteringCurrentDuration: float
    AutoCenteringEaseInDuration: float
    AutoCenteringEaseOutDuration: float
    MinimapRenderTarget: engine.TextureRenderTarget2D
    VaultCardManager: VaultCardManager
    ReRolledInventoryActorSource: engine.Actor
    ReRolledInventoryActor: engine.Actor
    def WriteProfile(self): ...
    def UnregisterSavegameDelegates(self): ...
    def UnlockEchoLog(self, EchoLog: EchoLogData): ...
    def UnlockAllVehiclesAndParts(self): ...
    def TryTradeWithRadialMenuTarget(self): ...
    def TryInitiateDuel(self): ...
    def TriggerDisplayMissionRewardsDelegate(self, Mission: unreal.UClass, Reward: GFxMissionTrackerRewardDisplayData, OptionalReward: GFxMissionTrackerRewardDisplayData): ...
    def ToggleLookingForHelp(self): ...
    def TextChat(self, Msg: str): ...
    def TempGrantActivityFeedChallengeReward(self, Reward: ActivityFeedReward, ChallengeLevelTargetValue: int, ChallengeLevelCompleted: int): ...
    def SpawnZoneMap(self, ReturnValue: ZoneMapViewer) -> ZoneMapViewer: ...
    def SpawnVehicleFromConfig(self, GameStage: int, VehicleConfig: OakCARMenuVehicleConfig, CARConsole: CatchARide): ...
    def SpawnVehicle(self, GameStage: int, Vehicle: OakCARVehicleData, Parts: unreal.WrappedArray[OakCARVehiclePartData], CarMenuInterface: unreal.UObject, Color1: core_uobject.Color, Color2: core_uobject.Color, Color3: core_uobject.Color): ...
    def SpawnMissionVehicle(self, Console: CatchARide): ...
    def SpawnCustomReplicatedActor(self, PlayerOwner: OakPlayerController, ClassToSpawn: unreal.UClass, ActorTransform: core_uobject.Transform): ...
    def ShouldSpectateOnDeath(self, ReturnValue: bool) -> bool: ...
    def SetupCameraForRaidSpectator(self): ...
    def SetReRollSourceInventory(self, InventoryActor: engine.Actor): ...
    def SetPushToTalkState(self, bPushing: bool): ...
    def SetNonMovementInputLocked(self, bLocked: bool, Reason: str): ...
    def SetMoxxiEventTier(self, Tier: int): ...
    def SetLockedCanUseObjects(self, bLocked: bool, Reason: str): ...
    def SetInputLocked(self, bLocked: bool, Reason: str): ...
    def SetHasPlayedSpecialEchoLogInsertAnimationAlready(self, bNewValue: bool): ...
    def SetFocusObject(self, FocusActor: engine.Actor): ...
    def SetFastTravelLocks(self, bLocked: bool): ...
    def SetEchoMenuLocked(self, bLocked: bool, Reason: str): ...
    def SetCustomViewportViewFlags(self, ViewFlags: int, bEnabled: bool): ...
    def ServerUpdatePremiumCurrency(self, Category: gbx_game_system_core.GbxInventoryCategoryData, Quantity: int): ...
    def ServerSwitchPlayerClass(self, NewPlayerClass: PlayerClassIdentifier): ...
    def ServerSpawnLostLoot(self, GearSerialNumber: str, SpawnResult: gbx_game_system_core.SpawnPatternResult): ...
    def ServerSetWaitingForSaveGameInitialization(self, bWaiting: bool): ...
    def ServerSetTradeRequestReceptionType(self, NewTradeRequestReceptionType: ETradeRequestReceptionType): ...
    def ServerSetRemoteViewportInfo(self, ViewportWidth: int, ViewportHeight: int): ...
    def ServerSetRemoteDefaultFOV(self, DefaultFOV: float): ...
    def ServerSetRemoteCrosshairPosition(self, ClientCrosshairPosition: core_uobject.Vector2D): ...
    def ServerSetRemoteCameraInfo(self, bIsFirstPerson: bool): ...
    def ServerSetReadyForSaveGameChannel(self): ...
    def ServerSetReadyForGameStatChannel(self): ...
    def ServerSetMaxSpawnCost(self, InMaxSpawnCost: int): ...
    def ServerSetLateJoinState(self, InLateJoinState: ELateJoinState): ...
    def ServerSetFullyAimingAtTarget(self, bInClientFullyAimingAtTarget: bool): ...
    def ServerSetDuelingEnabled(self, bNewDuelingEnabled: bool): ...
    def ServerSetDifficultySetting(self, NewDifficulty: EPlayerDifficultySetting): ...
    def ServerSetCrewQuartersRoomMood(self, InRoom: CrewQuartersRoom, RoomToLoad: gbx_dynamic_room.DynamicRoomBaseData): ...
    def ServerSetBulletMagnetismSettings(self, bDoBulletMagnetism: bool): ...
    def ServerSendTradeOfferToPlayer(self, PlayerReceivingTradeOffer: OakPlayerState): ...
    def ServerRotateRaidSpectatorTarget(self, bNextTarget: bool): ...
    def ServerRequestSwitchSeats(self, Occupant: engine.Pawn): ...
    def ServerRequestMayhemReload(self, NewMayhemLevel: int, NewRandomSeed: int): ...
    def ServerRequestActivateCustomPOI(self, CustomPOIData: unreal.UObject): ...
    def ServerRemoveSecondaryStreamerBooster(self, EffectIndex: int): ...
    def ServerRemovePrimaryStreamerBooster(self, EffectIndex: int): ...
    def ServerRemoveCitizenScienceBooster(self, EffectIndex: int): ...
    def ServerPlayItemCallout(self, Pickup: OakInventoryItemPickup): ...
    def ServerPlayIdleDialogInMenu(self, MenuData: gbx_ui.GbxMenuData): ...
    def ServerPlayIdleDialog(self): ...
    def ServerPlayerSelectedCharacter(self, TargetPlayerId: engine.UniqueNetIdRepl): ...
    def ServerPlayerOpenedCharacterSelect(self): ...
    def ServerPlaceChosenObject(self, InRoom: CrewQuartersRoom, InIO: unreal.UObject, ChosenObject: unreal.UObject): ...
    def ServerOnUIMenuActivated(self): ...
    def ServerOnPlanetSelected(self, GalaxyMapStation: GalaxyMapStation, PlanetData: PlanetData): ...
    def ServerNotifyTrackedEchoLogPlaybackState(self, SetPlayingTrackedEchoLog: EchoLogData, bPlaying: bool): ...
    def ServerNotifyLoadingMoviesShown_ForSonyRTMP(self): ...
    def ServerNotifyLoadingMoviesHidden_ForSonyRTMP(self): ...
    def ServerLostLootChanged(self): ...
    def ServerJoinedPresenceSession(self, SessionId: str): ...
    def ServerInterruptTravelToStation(self, CancelStatus: gbx_travel_station.ETravelStatus): ...
    def ServerInitializeLostLootMachine(self, Actor: engine.Actor, Current: int, Max: int): ...
    def ServerIncrementSendMailStat(self, Stat: gbx_game_system_core.GameStatData): ...
    def ServerIncrementPhotoModeStylizeStat(self, Stat: gbx_game_system_core.GameStatData): ...
    def ServerIncrementGameStat(self, Stat: gbx_game_system_core.GameStatData, Amount: int): ...
    def ServerHintPlayerForNextDialog(self): ...
    def ServerGearSoldByFriendDataSelected(self, SeletedData: GearSoldByFriendData): ...
    def ServerDumpPlayerDebugInfo(self): ...
    def ServerCreatePlayerAlert(self, InInstigator: engine.UniqueNetIdRepl, InTargetedActor: engine.Actor, InAlertLocation: core_uobject.Vector): ...
    def ServerCreatedPresenceSession(self, SessionId: str): ...
    def ServerClearCurrentAIO(self, bImmediate: bool): ...
    def ServerApplySecondaryStreamerBooster(self, EffectIndex: int, Duration: float): ...
    def ServerApplyPrimaryStreamerBooster(self, EffectIndex: int, Duration: float): ...
    def ServerApplyCitizenScienceBooster(self, EffectIndex: int, Duration: float): ...
    def ServerAddGearToInventoryFromSelectedInfo(self, SelectedInventoryInfo: gbx_inventory.SelectedInventoryInfo): ...
    def ServerAddGearToInventory(self, GearSerialNumber: str, InventoryListType: EInventoryListType): ...
    def ServerAddCurrency(self, Amount: int, CurrencyType: gbx_game_system_core.GbxInventoryCategoryData): ...
    def ServerAcceptVehicleSeatSwapRequest(self, VehicleFrom: OakVehicle, FromSeat: int, ToSeat: int): ...
    def ServerAcceptPendingTradeOffer(self, PlayerOfferingTradeState: OakPlayerState): ...
    def RotateRaidSpectatorTarget(self, bNextTarget: bool): ...
    def ResurrectedDuringCombat(self, bStarted: bool): ...
    def RestoreCameraModeFocus(self, BlendOutTime: float): ...
    def ResourceLockHideFirstPerson(self, bHide: bool, Reason: str): ...
    def ReRollInventoryForNewPart(self, InventoryActor: engine.Actor, DesiredPartTags: gameplay_tags.GameplayTagContainer, bMustHaveAllTags: bool): ...
    def RegisterSavegameDelegates(self): ...
    def ReceiveMissionRewards(self, MissionClass: unreal.UClass, Reward: ProcessedReward, OptionalReward: ProcessedReward): ...
    def ReadProfile(self): ...
    def RaidSpectatorProcessMouseYawInput(self, Val: float): ...
    def RaidSpectatorProcessMouseScrollInput(self, Val: float): ...
    def RaidSpectatorProcessMousePitchInput(self, Val: float): ...
    def RaidSpectatorProcessGamepadYawInput(self, Val: float): ...
    def RaidSpectatorProcessGamepadRightTrigger(self, Val: float): ...
    def RaidSpectatorProcessGamepadPitchInput(self, Val: float): ...
    def RaidSpectatorProcessGamepadLeftTrigger(self, Val: float): ...
    def QuickSave(self): ...
    def QuickLoad(self): ...
    def PlaySwappedSeatDialog(self): ...
    def PlayerStateRemovedEvent__DelegateSignature(self): ...
    def PlayerStateAddedEvent__DelegateSignature(self, EventPlayerState: OakPlayerState): ...
    def PlayEquippedEmote(self, EmoteIndex: int): ...
    def PauseGame(self): ...
    def OverrideCameraModeFocus(self, BlendInTime: float, PPSettings: engine.PostProcessSettings): ...
    def OpenStatusMenu(self, SubMenuId: str, SelectionObject: unreal.UObject): ...
    def OpenShiftFirstBoot(self): ...
    def OpenQuickMenu(self): ...
    def OpenPCTextChatMenu(self): ...
    def OpenMissionLogMenu(self): ...
    def OpenMapMenu(self): ...
    def OpenInventoryMenu(self): ...
    def OpenEchoNetMenu(self, SubmenuName: str): ...
    def OnUIMenuActivated(self, MenuObject: unreal.UObject): ...
    def OnTravelCountdownUpdate__DelegateSignature(self, DestinationTravelStation: gbx_travel_station.TravelStationData, RemainingTime: int, CurrentStatus: gbx_travel_station.ETravelStatus): ...
    def OnTextChatLogChanged(self, TextChatBuffer: GFxPCTextChatBuffer): ...
    def OnSaveGameEvent__DelegateSignature(self, SlotName: str, bSuccess: bool): ...
    def OnRep_TradeManager(self): ...
    def OnRep_ReRolledInventoryActor(self): ...
    def OnRep_ReplicatedCameraModeState(self): ...
    def OnRep_GearSoldByFriendActor(self): ...
    def OnRep_CustomReplicatedActor(self): ...
    def OnPawnChanged__DelegateSignature(self, NewPawn: engine.Pawn, OldPawn: engine.Pawn): ...
    def OnMissionDataChanged(self): ...
    def OnLevelChanged(self, OldLevel: int, NewLevel: int): ...
    def OnJokeEULAClosedByPlayer(self): ...
    def OnExperienceAdded(self, ExperienceAdded: int): ...
    def OnCurrentUsableUsabilityChanged__DelegateSignature(self, CurrentUsable: gbx_game_system_core.UsableComponent, InUsabilityInfo: gbx_game_system_core.UsabilityInfo): ...
    def OnCurrentUsableUsabilityChanged(self, NewUseComponent: gbx_game_system_core.UsableComponent, InUsabilityInfo: gbx_game_system_core.UsabilityInfo): ...
    def OnCurrentUsableImpactDataChanged(self, NewUsableComponent: gbx_game_system_core.UsableComponent, NewUsableImpactPoint: core_uobject.Vector, NewUsableDistanceAway: float): ...
    def OnCurrentUsableChanged__DelegateSignature(self, CurrentUsable: gbx_game_system_core.UsableComponent, InUsabilityInfo: gbx_game_system_core.UsabilityInfo, UsableComponentImpactPoint: core_uobject.Vector, UsableComponentDistanceAway: float): ...
    def OnCurrentUsableChanged(self, NewUsableComponent: gbx_game_system_core.UsableComponent, InUsabilityInfo: gbx_game_system_core.UsabilityInfo, NewUsableComponentImpactPoint: core_uobject.Vector, NewUsableComponentDistanceAway: float): ...
    def OnConfirmSeatSwap(self): ...
    def OnCinematicStopped_RetryFadeIn(self): ...
    def OnCharacterSpawnedInLevel(self, SpawnedAtStation: gbx_travel_station.TravelStationComponentBase): ...
    def OnCharacterDied(self): ...
    def OnChallengeCompleted(self, Component: gbx_game_system_core.ChallengesComponent, ChallengeClass: unreal.UClass): ...
    def OnCameraStyleChanged(self, NewCameraStyle: str): ...
    def OakTextChatOptionChangedDelegate__DelegateSignature(self, bIsActive: bool): ...
    def OakPCUsableLookedAwayFromSignature__DelegateSignature(self, NewUsable: gbx_game_system_core.UsableComponent): ...
    def OakPCUsableLookedAtSignature__DelegateSignature(self, NewUsable: gbx_game_system_core.UsableComponent): ...
    def NotifyUncappedExperienceAdded(self, ExperienceAdded: int, Source: EPlayerExperienceSource, Type: EPlayerExperienceType): ...
    def NotifyPrimaryCharacterChanged(self, NewPrimaryCharacter: gbx_game_system_core.GbxCharacter): ...
    def NotifyNotIdle(self): ...
    def NotifyLevelUp(self, OldExperienceLevel: int, NewExperienceLevel: int): ...
    def NotifyExperienceAdded(self, ExperienceAdded: int, Source: EPlayerExperienceSource, Type: EPlayerExperienceType): ...
    def MarkInventoryCustomizationPartAsViewed(self, CustomizationToTest: OakInventoryCustomizationPartData): ...
    def MarkCustomizationAsViewed(self, CustomizationToTest: OakCustomizationData): ...
    def MantleReleased(self): ...
    def MantlePressed(self): ...
    def LastNearbyGrenadeRemoved__DelegateSignature(self): ...
    def LagStatusChanged__DelegateSignature(self, bIsLagging: bool): ...
    def JumpReleased(self): ...
    def JumpPressed(self): ...
    def IsStreamerBuffActive(self, ReturnValue: bool) -> bool: ...
    def IsItemAnointed(self, InventoryActor: engine.Actor, ReturnValue: bool) -> bool: ...
    def IsInventoryCustomizationPartUnlocked(self, CustomizationToTest: OakInventoryCustomizationPartData, ReturnValue: bool) -> bool: ...
    def IsInventoryCustomizationPartNew(self, CustomizationToTest: OakInventoryCustomizationPartData, ReturnValue: bool) -> bool: ...
    def IsInteractingWithAIO(self, ReturnValue: bool) -> bool: ...
    def IsInMenu(self, ReturnValue: bool) -> bool: ...
    def IsIdle(self, ReturnValue: bool) -> bool: ...
    def IsCustomizationUnlocked(self, CustomizationToTest: OakCustomizationData, ReturnValue: bool) -> bool: ...
    def IsCustomizationNew(self, CustomizationToTest: OakCustomizationData, ReturnValue: bool) -> bool: ...
    def IsCrosshairOffCenter(self, ReturnValue: bool) -> bool: ...
    def IsCrewQuartersRoomUnlocked(self, RoomToTest: CrewQuartersRoomItemData, ReturnValue: bool) -> bool: ...
    def IsCrewQuartersDecorationUnlocked(self, DecorationToTest: CrewQuartersDecorationItemData, ReturnValue: bool) -> bool: ...
    def InventoryCustomizationUnlockedDelegate__DelegateSignature(self, CustomizationPart: OakInventoryCustomizationPartData): ...
    def HasPlayedSpecialEchoLogInsertAnimationAlready(self, ReturnValue: bool) -> bool: ...
    def HasAnySDUs(self, ReturnValue: bool) -> bool: ...
    def GetZoneMapViewer(self, ReturnValue: ZoneMapViewer) -> ZoneMapViewer: ...
    def GetVehicleSpawnerComponent(self, ReturnValue: VehicleSpawnerComponent) -> VehicleSpawnerComponent: ...
    def GetOakHUD(self, ReturnValue: OakHUD) -> OakHUD: ...
    def GetNumberOfDiscoveredEridianWritings(self, ReturnValue: int) -> int: ...
    def GetMenuStack(self, ReturnValue: gbx_ui.GbxMenuStack) -> gbx_ui.GbxMenuStack: ...
    def GetMaxLostLootSize(self, ReturnValue: int) -> int: ...
    def GetFogOfDiscoveryComponent(self, ReturnValue: FogOfDiscoveryComponent) -> FogOfDiscoveryComponent: ...
    def GetDiscoveryComponent(self, ReturnValue: DiscoveryComponent) -> DiscoveryComponent: ...
    def GetCurrentPlayerClass(self, ReturnValue: PlayerClassIdentifier) -> PlayerClassIdentifier: ...
    def GetCurrentLostLootCount(self, ReturnValue: int) -> int: ...
    def GetCurrentAIO(self, ReturnValue: AdvancedInteractiveObject) -> AdvancedInteractiveObject: ...
    def GetCostToReRollInventoryForNewPart(self, InventoryActor: engine.Actor, ReturnValue: int) -> int: ...
    def FirstNearbyGrenadeAdded__DelegateSignature(self): ...
    def EnterPhotoMode(self): ...
    def EnsureValidSpectatorTarget(self): ...
    def DisplayRolloutNotification(self, Title: str, MESSAGE: str, Duration: float): ...
    def DisplayHUDErrorNotification(self, MESSAGE: str): ...
    def DebugLoadGame(self, SlotName: str, ReturnValue: bool) -> bool: ...
    def CreatePlayerAlert(self): ...
    def CombatEncounterEndedDelegate__DelegateSignature(self, CombatEncounterData: PlayerCombatEncounterData): ...
    def ClientVehicleUnlock(self, Vehicle: core_uobject.SoftObjectPath): ...
    def ClientVehicleSpawned(self, CarMenuInterface: unreal.UObject, Platform: CatchARidePlatform, Vehicle: OakVehicle): ...
    def ClientVehiclePartUnlock(self, Part: core_uobject.SoftObjectPath): ...
    def ClientUseClientSideCameraUpdates(self, bEnabled: bool): ...
    def ClientUnlockInventoryCustomizationPart(self, CustomizationToUnlock: OakInventoryCustomizationPartData): ...
    def ClientUnlockEchoLog(self, EchoLog: EchoLogData): ...
    def ClientUnlockCustomization(self, CustomizationToUnlock: OakCustomizationData): ...
    def ClientUnlockCrewQuartersRoom(self, RoomToUnlock: CrewQuartersRoomItemData): ...
    def ClientUnlockCrewQuartersDecoration(self, DecorationToUnlock: CrewQuartersDecorationItemData): ...
    def ClientUnlockAllVehiclesAndParts(self): ...
    def ClientStopWeatherEffects(self): ...
    def ClientStartWeatherEffects(self, Template: gbx_game_system_core.WeatherTemplate): ...
    def ClientStartOnlineSessionInProgress(self): ...
    def ClientStartCameraFadeAuthoritative(self, FromAlpha: float, ToAlpha: float, Duration: float, Color: core_uobject.Color, bShouldFadeAudio: bool, bHoldWhenFinished: bool): ...
    def ClientShowPlaceObjectsMenu(self, MenuData: gbx_ui.GbxMenuData, InRoom: CrewQuartersRoom, InIO: unreal.UObject): ...
    def ClientShowMayhemMenu(self): ...
    def ClientShowGamerCardUI(self, RequesteePS: engine.PlayerState): ...
    def ClientShowFastTravelMenu(self): ...
    def ClientShowCrewQuartersMoodMenu(self, MenuData: gbx_ui.GbxMenuData, InRoom: CrewQuartersRoom): ...
    def ClientShowAllPlayersRequiredMessage(self, bIsAlreadyPresentInArea: bool): ...
    def ClientSetSessionInviteFlags(self, bAllowInvites: bool, bAllowJoinViaPresence: bool, bAllowJoinViaPresenceFriendsOnly: bool): ...
    def ClientSetMenuStackHidden(self, bInStackHidden: bool): ...
    def ClientSetHasSeenFastTravelPrompt(self, HasSeen: bool): ...
    def ClientSetCustomViewportViewFlags(self, ViewFlags: int, bEnabled: bool): ...
    def ClientSetCurrentAIO(self, NewAIO: AdvancedInteractiveObject, bInstant: bool): ...
    def ClientSetBoundaryWarningState(self, bWarningActive: bool): ...
    def ClientSelectGearSoldByFriendData(self): ...
    def ClientResetRegionStage(self, REGION: RegionData): ...
    def ClientRequestVehicleSeatSwap(self, VehicleFrom: OakVehicle, FromSeat: int, ToSeat: int): ...
    def ClientRemoveTutorialMessage(self, MessageData: TutorialMessageDataAsset): ...
    def ClientPushHUDState(self, InCinematicMode: gbx_game_system_core.CinematicModeData): ...
    def ClientProcessLostLoot(self, LostLootComponent: OakLostLootComponent): ...
    def ClientPostChallengeUnlockActivityFeed(self, FeedData: ActivityFeedReward, ChallengeLevelTargetValue: int, ChallengeLevelCompleted: int): ...
    def ClientPlayLocalCallout(self, CalloutEvent: gbx_dialog.DialogEvent): ...
    def ClientPlayerSelectedCharacter(self, TargetPlayerId: engine.UniqueNetIdRepl): ...
    def ClientPlayerJoinedPresenceSession(self, JoinedPlayerId: engine.UniqueNetIdRepl, SessionId: str): ...
    def ClientPlayerDisplayDataChanged(self, InPlayerState: OakPlayerState): ...
    def ClientPlayAndTrackEchoLog(self, EchoLog: EchoLogData, PlayOnSpeaker: gbx_dialog.GbxDialogComponent): ...
    def ClientPartyKick(self, Reason: EKickReason): ...
    def ClientOpenMenu(self, MenuData: gbx_ui.GbxMenuData): ...
    def ClientOpenItemInspect(self, Item: OakInventoryItemPickup, InventoryData: gbx_inventory.InventoryData): ...
    def ClientOnHandleNewPlayer(self): ...
    def ClientNotifyNewGameStarted(self): ...
    def ClientNotifyLoadPlayerClass(self, NewPlayerClass: PlayerClassIdentifier): ...
    def ClientNotifyKilledActor(self): ...
    def ClientNotifyClassSwitch(self, NewPlayerClass: PlayerClassIdentifier): ...
    def ClientMissionVehicleSpawned(self, Platform: CatchARidePlatform, Vehicle: OakVehicle): ...
    def ClientLostLootSpawned(self, GearSerialNumber: str): ...
    def ClientJoinPresenceSession(self, SessionId: str): ...
    def ClientInitializeLostLootMachine(self, Actor: engine.Actor): ...
    def ClientGotoPreviousState(self): ...
    def ClientGoToHUDState(self, State: gbx_ui.GbxHUDStateData): ...
    def ClientDoLateJoinFadeIn(self): ...
    def ClientDisplayTravelFailureMessage(self, TravelFailureMessage: EPOIActivationResult, BlockerPlayerState: OakPlayerState): ...
    def ClientDisplaySentTradeOffer(self, Success: bool, PlayerReceivingTradeOffer: OakPlayerState): ...
    def ClientDisplayPendingTradeOffer(self, PlayerOfferingTradeState: OakPlayerState): ...
    def ClientDisplayHUDErrorNotification(self, MESSAGE: str): ...
    def ClientCreatePresenceSession(self, SparkFriendPasscode: str): ...
    def ClientCreatePlayerAlert(self, InInstigator: engine.UniqueNetIdRepl, InTargetedActor: engine.Actor, InAlertLocation: core_uobject.Vector): ...
    def ClientCloseMenu(self, MenuData: gbx_ui.GbxMenuData): ...
    def ClientCloseAllMenus(self): ...
    def ClientClearToDefaultHUDState(self): ...
    def ClientClearMenus(self): ...
    def ClientCleanCinematicState(self, InCinematicMode: gbx_game_system_core.CinematicModeData): ...
    def ClientCancelCameraFadeAuthoritative(self): ...
    def ClientBroadcastSlotMachineJackpotFriendEvent(self): ...
    def ClientBroadcastOpenedGoldenChestFriendEvent(self): ...
    def ClientBroadcastFriendGearPurchasedFriendEvent(self): ...
    def ClientApplyCachedSaveGame(self, OptionalFadeOutDuration: float): ...
    def ClientAddTutorialMessage(self, MessageData: TutorialMessageDataAsset): ...
    def ClientAddPremiumCurrency(self, Amount: int, CurrencyType: gbx_game_system_core.GbxInventoryCategoryData): ...
    def ClientAddModalTutorialMessage(self, MessageData: GFxModalTutorialDataAsset): ...
    def Client_NotifyCombatEncounterEnded(self, CombatEncounterData: PlayerCombatEncounterData): ...
    def ClearSavegame(self): ...
    def CinematicModeUpdated__DelegateSignature(self, InCinematicMode: gbx_game_system_core.CinematicModeData): ...
    def CinematicModeChanged__DelegateSignature(self, bInCinematicMode: bool): ...
    def CheckDebugMenuIsOpen(self, bIsBeingDestroyed: bool): ...
    def ChallengesRegistered(self): ...
    def CanReRollInventoryForNewPart(self, InventoryActor: engine.Actor, ReturnValue: ECanReRollInventoryResult) -> ECanReRollInventoryResult: ...
    def CanOpenStatusMenu(self, Reason: str, ReturnValue: bool) -> bool: ...
    def CancelReRolledInventory(self): ...
    def BroadcastGearSoldByMe(self, bOverrideDelay: bool): ...
    def AttemptSpottedEnemyCalloutForTargetPerceptionChange(self, Actor: engine.Actor, Stimulus: aimodule.AIStimulus): ...
    def AddUnlockedInventoryCustomizationPart(self, CustomizationToAdd: OakInventoryCustomizationPartData): ...
    def AddUnlockedCustomization(self, CustomizationToAdd: OakCustomizationData): ...
    def AddUnlockedCrewQuartersRoom(self, RoomToAdd: CrewQuartersRoomItemData): ...
    def AddUnlockedCrewQuartersDecoration(self, DecorationToAdd: CrewQuartersDecorationItemData): ...
    def AddNPCMailItemFromTableRowHandle(self, RowHandle: engine.DataTableRowHandle): ...
    def AddNPCMailItemFromTableRow(self, NPCMailData: OakNPCMailDataEntry): ...
    def AcceptReRolledInventory(self): ...


class OakCheatManager(gbx_game_system_core.GbxCheatManager):
    BalanceMeItemPoolList: core_uobject.SoftObjectPath
    PlayerOpposingTeam: gbx_game_system_core.Team
    PlayerTeam: gbx_game_system_core.Team
    VehicleSpawnPoolList: core_uobject.SoftObjectPath
    SimplifiedChineseFontSWF: scaleform_ui.SwfMovie
    PIEBenchmarkManager: PIEBenchmarkManager
    def WipeRecentlyMetPlayers(self): ...
    def ValidateChallenges(self): ...
    def UpdateStatValue(self, StatName: str, StatValue: int): ...
    def UpdateAchievement(self, AchievementId: int, NewValue: int): ...
    def UnregisterModifier(self, ModifierName: str): ...
    def UnregisterAllModifiers(self): ...
    def UnlockVaultCardReward(self, ColumnIndex: int, RowIndex: int): ...
    def UnlockTVHM(self): ...
    def UnlockAllCustomizations(self): ...
    def UnlockAchievement(self, AchievementId: int): ...
    def TriggerMissionFastForward(self): ...
    def TrackPreviousMission(self): ...
    def TrackNextMission(self): ...
    def ToggleWeapon(self): ...
    def ToggleVaultCardKeysRequired(self): ...
    def ToggleRenderingScaleform(self): ...
    def ToggleOnlineActivityFeedsTest(self): ...
    def ToggleDualWieldInputSwap(self): ...
    def TestZeppelinQos(self): ...
    def TestXboxStringFilter(self, UserNum: int, NameToTest: str): ...
    def TestWriteKraken(self): ...
    def TestVoG(self): ...
    def TestUnlockWeaponTrinkets(self): ...
    def TestUnlockWeaponSkins(self): ...
    def TestTutorialWidgetRemove(self): ...
    def TestTutorialWidget(self): ...
    def TestTribe(self): ...
    def TestTravelNotificationMessage(self, TitleString: str, PlayerNameString: str, DescriptionString: str): ...
    def TestSetDifficultySetting(self, NewDifficultySetting: EPlayerDifficultySetting): ...
    def TestSession(self, SessionTemplateName: str): ...
    def TestSaveGameInterface(self): ...
    def TestReadOdyssey(self): ...
    def TestReadKraken(self): ...
    def TestRaidNotification(self, TestAssetPath: str, RaidNotificationId: int, Priority: int): ...
    def TestPreStartDateVaultCard(self): ...
    def TestPresence(self, PresenceKey: str): ...
    def TestPlayThrough(self, PlayThroughOverride: int): ...
    def TestPlayerCount(self, PlayerCountOverride: int): ...
    def TestParty(self): ...
    def TestOnlineTimedMessage(self, TitleString: str, PlayerNameString: str, DescriptionString: str, Duration: float): ...
    def TestOnlinePendingTradeMessage(self, TitleString: str, DescriptionString: str, PlayerIndex: int): ...
    def TestOnlineBlockingMessage(self, TitleString: str, PlayerNameString: str, DescriptionString: str): ...
    def TestOnlineAsyncMessage(self, TitleString: str, PlayerNameString: str, DescriptionString: str): ...
    def TestNotification(self, TestAssetPath: str, MessageText: str, Priority: int): ...
    def TestNetworkTransition(self, NetworkType: ENetworkType, InviteType: EInviteType, bPrompt: bool): ...
    def TestModalTutorial(self): ...
    def TestMatchmakingWidget(self): ...
    def TestMatchmaking(self, HopperName: str, bBackfill: bool): ...
    def TestLootMode(self, NewLootMode: EMultiplayerLootMode): ...
    def TestLoginUI(self): ...
    def TestLevelSyncMessage(self, TitleString: str, DescriptionString: str, Duration: float, Repeat: int): ...
    def TestLevelSyncBroadcast(self, MessageTypeToTest: int): ...
    def TestLevelSync(self, NewPlayerLevel: int): ...
    def TestLeaderboards(self): ...
    def TestInitiateDuel(self): ...
    def TestGuardianRankFriendEvent(self, NewGuardianRank: int, EnforcerPoints: int, SurvivorPoints: int, HunterPoints: int): ...
    def TestGbxRapidjson(self): ...
    def TestGameClip(self, bEnabled: bool): ...
    def TestFriendStatus(self, Command: str): ...
    def TestFriends(self): ...
    def TestFriendEventMessage(self, PlayerDisplayName: str, Level: int, ClassDisplayName: str, DescriptionString: str, ActionString: str): ...
    def TestFriendEvent(self, Level: int): ...
    def TestFileCache(self): ...
    def TestFeed(self): ...
    def TestExternalUI(self, ExternalUIName: str): ...
    def TestExpSyncLevel(self, ExpSyncLevelOverride: int): ...
    def TestExpPointsForLevel(self, StartingLevel: int, EndingLevel: int): ...
    def TestEnableGuardianRankRewards(self, bEnable: bool, RewardIndex: int): ...
    def TestEnableGuardianRankPerks(self, bEnable: bool, PerkIndex: int): ...
    def TestDuelingWidget(self): ...
    def TestDialog(self): ...
    def TestDestroySessionQueue(self): ...
    def TestDeleteAllSaveGames(self): ...
    def TestDamageLevelSync(self, bShouldSyncDamage: bool): ...
    def TestCredits(self): ...
    def TestContentInterface(self): ...
    def TestClearPresence(self): ...
    def TestChallengeProgress(self, bUseRealChallenge: bool, TargetValue: int, MaxValue: int, bShowAsPercent: bool): ...
    def TestAttachWeaponToLootable(self, SocketName: str, AttachMode: gbx_inventory.EPickupLootAttachmentMode): ...
    def TestAchievements(self): ...
    def StopMatchmaking(self): ...
    def StopActiveActionSkills(self): ...
    def StartOnlineActivity(self, ActivityId: str): ...
    def StartMatchmaking(self): ...
    def StartGuardianRankTracking(self): ...
    def StartDandelion(self): ...
    def SpawnWeaponsForCurrentLootRules(self, NumWeapons: int): ...
    def SpawnVehicle(self, VehicleClassName: str, SpawnOffset: float): ...
    def SpawnActorDescription(self, Description: str): ...
    def SpamTextChat(self, NumMessages: int, BaseMessage: str): ...
    def SkipDialog(self, Radius: float): ...
    def SignUpGearboxAccount(self, Email: str, Password: str, PasswordConfirm: str): ...
    def SignInGearboxAccountD(self, Email: str, Password: str, DisplayName: str): ...
    def SignInGearboxAccount(self, Email: str, Password: str): ...
    def ShowNATHelp(self): ...
    def ShowCharacterAccuracyPattern(self, bEnabled: bool, PatternSizeOverride: float): ...
    def SetVaultHunterStatus(self, Val: int): ...
    def SetUse3DVoG(self, bNewUse3DVoG: bool): ...
    def SetSaveGamePlaythroughIndex(self, PlayThroughIndex: int): ...
    def SetPlayerCustomColor(self, ColorIndex: int, ColorR: float, ColorG: float, ColorB: float, bUseDefault: bool): ...
    def SetOnlineActivityPriority(self, ActivityId: str, Priority: int): ...
    def SetOnlineActivityAvailability(self, ActivityId: str, bAvailable: bool): ...
    def SetMinimapPrototypePitch(self, NewPitch: float): ...
    def SetMenuTutorialsEnabled(self, bEnabled: bool, bEnabledInNonGameModes: bool): ...
    def SetLaggingMessageVisible(self, bVisible: bool): ...
    def SetItemInspectView(self, bChromaKeyBackground: bool, bHideUI: bool, bHideHint: bool): ...
    def SetHudScaleMultiplier(self, aHudScaleMultiplier: float): ...
    def SetHasNewMail(self, bHasNewMail: bool): ...
    def SetFriendsMeshEnabled(self, bEnabled: bool): ...
    def SetChallengesInRoomCompleted(self): ...
    def ServerCheatSwitchPlayerClass(self, NewPlayerClass: PlayerClassIdentifier): ...
    def SendTwitchMetadataTestMessage(self, TestMessage: str): ...
    def SendStatusToWhisper(self): ...
    def SendMail(self, PlayerName: str, GeraSerialNumber: str): ...
    def SavePlayerProfileToJsonFile(self, Filename: str): ...
    def ResetVaultCardData(self): ...
    def ResetVaultCardChallengeCheat(self): ...
    def ResetUnlockedCustomizations(self): ...
    def ResetUITrackingInfo(self): ...
    def ResetStatValue(self, InStatName: str): ...
    def ResetSkillScreen(self): ...
    def ResetPreviousVaultCardChallenges(self): ...
    def ResetMissionProgress(self): ...
    def ResetMenuTutorials(self): ...
    def ResetMatchmaking(self): ...
    def ResetGuardianRank(self): ...
    def ResetChallengeProgressByName(self, PartialChallengeNameMatch: str): ...
    def ResetAllStatValues(self): ...
    def ResetActionSkillCooldowns(self): ...
    def RerollVaultCardChallenges(self): ...
    def RenameShiftUser(self, DisplayName: str): ...
    def RemoveAllPlayerAlerts(self): ...
    def RegisterModifierSet(self, ModifierSetName: str): ...
    def RegisterModifier(self, ModifierName: str, TargetResolverName: str, StatusEffectName: str, Value: float): ...
    def RedeemVaultCardReward(self, ColumnIndex: int, RowIndex: int, bUnlock: bool): ...
    def RedeemVaultCardGearReward(self, GearIndex: int): ...
    def ReadProfileImage(self): ...
    def ReadPermissions(self): ...
    def ReadDisplayData(self): ...
    def ProcessMail(self, MailGuid: str, bAccept: bool): ...
    def ProcessLostLoot(self): ...
    def PrintStatValue(self, StatName: str): ...
    def PrintNPCMail(self): ...
    def PrintMicropatchSwitches(self): ...
    def PrintMail(self): ...
    def PrintLostLoot(self): ...
    def PrintGearSoldByMe(self): ...
    def PrintGearSoldByFriends(self): ...
    def PrintFriendStatusesJson(self): ...
    def PrintFriendStatusesInProfile(self): ...
    def PrintFriendStatuses(self): ...
    def PrintFriendEventsInProfile(self): ...
    def PrintFriendEvents(self): ...
    def PrintFriendChallengeInfo(self): ...
    def PrintAllStatValues(self): ...
    def PrintAllInProgressChallengeValues(self): ...
    def PrintAllIncompletedChallengeValues(self): ...
    def PrintAllInactiveChallengeValues(self): ...
    def PrintAllCompletedChallengeValues(self): ...
    def PrintAllChallengeValues(self): ...
    def PrintAllActiveChallengeValues(self): ...
    def PlayMenuTutorial(self, TutorialName: str): ...
    def PlayerDiscoveryUnlock(self): ...
    def PerformWorldReset(self): ...
    def OverrideVaultCardChestInventory(self): ...
    def OverrideVaultCardChestCurrency(self, Amount: int, CurrencyInventoryCategoryData: str): ...
    def OverrideMoxxiMaxDuration(self, NewMaxDurationInSeconds: float): ...
    def OpenVaultCardChest(self): ...
    def OnDialogClicked(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBalanceMe(self, Character: OakCharacter): ...
    def NoMaxInventory(self, bEnable: bool): ...
    def LogMemSorted(self, bFullLog: bool): ...
    def LogDetailedMemForObject(self, ObjectName: str): ...
    def LoadPlayerProfileFromJsonFile(self, Filename: str): ...
    def LoadChineseFont(self): ...
    def LoadAllMissions(self): ...
    def LikeFriendEvent(self, PlayerName: str, EventGuidStr: str): ...
    def LevelRequirementDebug(self): ...
    def LeaveSession(self, SessionName: str): ...
    def KillVehicles(self): ...
    def JoinSessionByName(self, PlayerId: str, InFriendName: str): ...
    def JoinLanGame(self): ...
    def JoinFriendByName(self, InFriendName: str): ...
    def InfiniteFFYL(self): ...
    def IncrementStatValue(self, InStatName: str, Amount: int): ...
    def IncrementRandomStats(self): ...
    def IncrementChallengesByName(self, PartialChallengeNameMatch: str, Amount: int): ...
    def IgnorePlayer(self, PlayerName: str, bIgnorePlayer: bool): ...
    def HideAllOnlineMessages(self): ...
    def GiveForCategory(self, Amount: int, Args: str): ...
    def GetWorstOffenderComponentClass(self, NbToPrint: int): ...
    def GetWorstOffenderActors(self, NbToPrint: int, bFullLog: bool): ...
    def GetWorstOffenderActorClass(self, NbToPrint: int): ...
    def GetTickInformationForClass(self, ClassName: str, bCheckHeritance: bool, bPartialName: bool, bFullLog: bool): ...
    def GetIgnoredPlayers(self): ...
    def GetFarTickingActors(self, DistanceToCheck: float): ...
    def GetEffectivePlayerCount(self): ...
    def GenerateNewGuid(self): ...
    def FriendStatusDebug(self, NumDebugFriends: int, bRandomize: bool): ...
    def ForceTimeoutAllGameClients(self): ...
    def ForceCreateLocalPlayer(self): ...
    def FinishTestVoG(self): ...
    def FetchStatusesFromWhisper(self): ...
    def FetchMail(self): ...
    def FetchFriendEventsFromWhisper(self): ...
    def FastTravelUnlock(self, bBypassDependencies: bool): ...
    def FastTravelLock(self): ...
    def FastTravelBypassDependencies(self, bBypassDependencies: bool): ...
    def FakeStreamingEventPoolResult(self, EventName: str, ActionID: int, ActionValue: int): ...
    def FakeStreamingEvent(self, EventName: str): ...
    def FakeLateJoin(self): ...
    def ExportMatchmakingModifierData(self): ...
    def EnterPhotoMode(self): ...
    def EnterMfaCode(self, str: str): ...
    def EndOnlineActivity(self, ActivityId: str, Outcome: int): ...
    def EnableWatermarkForStreaming(self): ...
    def EnableVoice(self, bEnabled: bool): ...
    def EnableGuardianRankSystem(self, bEnable: bool): ...
    def EnableCameraMan(self): ...
    def DumpTravelStations(self): ...
    def DumpSaveToJson(self): ...
    def DumpPlayerMissionProgress(self, MissionName: str): ...
    def DumpPlayerDebugInfo(self): ...
    def DumpMissionProgress(self, MissionName: str): ...
    def DumpGuardianRankAttributes(self): ...
    def DumpAvailableCustomizations(self): ...
    def DumpAnimMemoryInfo(self, OutputPath: str): ...
    def DisplayActiveBlackMarketMachine(self): ...
    def DiscoverEverything(self, bBypassDependencies: bool): ...
    def DiscoverAllLocalLocations(self): ...
    def DisableEquipSlotsForWeapons(self, bEnable: bool): ...
    def DeleteAllSaves(self): ...
    def DebugVoiceTestStop(self): ...
    def DebugVoiceTestStart(self, OnOffTime: float, inFakeLoadingScreenPartySize: int): ...
    def DebugTriggerFastTravelTutorial(self): ...
    def DebugStartStreamingInteraction(self): ...
    def DebugPlayerStandIn(self, PlayerStandInActorIndex: int, CharacterClass: str): ...
    def DebugOpenPlayerStorage(self): ...
    def DebugOpenModalTutorial(self, AssetPath: str, bAllPlayers: bool): ...
    def DebugMatchmaking(self, Failure: EDebugMatchmakingFailure, bEnabled: bool): ...
    def DebugInitStreamingServiceWithClientID(self, DebugExtensionClientID: str): ...
    def DebugInitStreamingService(self): ...
    def DebugFriends(self): ...
    def DebugFakeIsLiveStreaming(self, bFakeIsLiveStreaming: bool): ...
    def DebugCloseMenus(self): ...
    def DebugClearStreamerBoosters(self): ...
    def DeactivateAllModifiers(self): ...
    def CrosshairOffset(self, NewValue: float): ...
    def CreateDebugSession(self, SessionTemplateName: str): ...
    def CompleteTrackedMission(self): ...
    def CompleteChallengesByName(self, PartialChallengeNameMatch: str): ...
    def CompleteChallengesByCategoryName(self, PartialChallengeCategoryNameMatch: str): ...
    def ClearTextChatBuffer(self): ...
    def ClearSeenNewsItems(self): ...
    def ClearLostLoot(self): ...
    def ClearGearSoldByMe(self): ...
    def ClearGearSoldByFriends(self): ...
    def ClearFriendStatuses(self): ...
    def ClearFriendEvents(self): ...
    def ClearCameraFade(self): ...
    def CheatIncreaseToMaxInventory(self): ...
    def ChangeOnlineActivityLocation(self, LocationName: str): ...
    def CancelMatchmaking(self): ...
    def BuildPlayerPath(self): ...
    def BroadcastGearSoldByMe(self): ...
    def BeaconDumpDebugInfo(self): ...
    def AutomaticStartPlotMission(self): ...
    def AskForHelp(self, bAskForHelp: bool): ...
    def AnimGameplayDebugger_WatchBPVar(self, Arguments: str): ...
    def AnimGameplayDebugger_ClearBPVar(self): ...
    def AllInvTypes(self): ...
    def AllInvPartTypes(self): ...
    def AdvanceVaultCardHour(self): ...
    def AdvanceVaultCardDay(self): ...
    def AdvanceTrackedMission(self): ...
    def AdvanceBlackMarketMachineWeek(self): ...
    def AddWeaponsToLostLootList(self, NumWeapons: int): ...
    def AddVaultCardKeys(self, Amount: int): ...
    def AddNPCMail(self): ...
    def AddHeldWeaponToLostLootList(self): ...
    def AddHeldWeaponToGearSoldByFriendsList(self): ...
    def ActivateTickOptimizations(self, bActivate: bool): ...
    def ActivateRandomFastTravel(self, DelayTime: float): ...
    def ActivateMission(self, MissionName: str): ...
    def ActivateLotsOfMissions(self, Count: int): ...
    def ActivateAutoTravelThrough(self, DelayTime: float): ...
    def ActivateAllModifiers(self): ...
    def ActivateAllChallenges(self): ...
    def AbortActiveActionSkills(self): ...


class OakCinematicBrain(engine.Info):
    CinematicData: OakCinematicBrainData
    SequencePlayer: level_sequence.LevelSequencePlayer
    CinematicState: CinematicState
    MovieTexture: media_assets.MediaTexture
    MovieAudioSinkProvider: wwise_audio.WwiseMediaAudioSinkProvider
    MoviePlayer: media_assets.MediaPlayer
    def PlayCinematic(self, CinematicTag: OakCinematicTag): ...
    def OnSequenceStop(self): ...
    def OnRep_CinematicState(self): ...
    def OnMovieMediaOpenFailed(self, DeviceUrl: str): ...
    def OnMovieMediaOpened(self, DeviceUrl: str): ...
    def OnMovieMediaClosed(self): ...
    def OnMovieEndReached(self): ...
    def OnMovieEndDelayed(self): ...
    def OnMediaAssetLoaded(self, MovieSource: media_assets.MediaSource): ...
    def OnIntroComplete(self): ...


class OakCinematicBrainData(gbx_runtime.GbxDataAsset):
    Cinematics: unreal.WrappedArray[CinematicData]



class OakCinematicModeData(gbx_game_system_core.CinematicModeData):
    bAffectsInputAbilities: bool
    bAffectsStatusMenu: bool
    bAffectsQuickMenu: bool
    bClearMenus: bool
    bRestrictWeapons: bool
    bReapCorpses: bool
    bHideDroppedPickups: bool
    bAffectsWeaponActions: bool
    AffectsWeaponActions: int
    CameraMode: str
    OverrideHUDState: gbx_ui.GbxHUDStateData
    bEnableVOIPIcons: bool
    bAffectsPlayerMovement: bool



class OakCinematicTag(gbx_runtime.GbxDataAsset): ...


class OakClassModInventoryBalanceStateComponent(OakInventoryBalanceStateComponent):
    GeneratedStatsSection: str
    GeneratedStatPriority: float
    CachedUIAbilityStats: unreal.WrappedArray[UIStatData_Ability]



class OakClientFriendBeacon(online_subsystem_utils.OnlineBeaconClient): ...


class OakClientLobbyBeacon(online_subsystem_utils.OnlineBeaconClient): ...


class OakClientMatchmakingBeacon(online_subsystem_utils.OnlineBeaconClient): ...


class OakCondition_Grenade_Element(gbx_runtime.GbxCondition):
    DamageType: unreal.UClass



class OakCondition_IronBearOwner_TestModsSlotted(gbx_runtime.GbxCondition):
    OakActionAbility: unreal.UClass
    AugmentSlot: OakActionAbilityAugmentSlotData
    HardpointSlot: OakActionAbilityAugmentSlotData
    HardpointToTest: OakActionAbilityAugmentData
    AugmentData: unreal.WrappedArray[OakActionAbilityAugmentData]
    bTestNoModsSlotted: bool



class OakCondition_IsCharacterFrozen(gbx_runtime.GbxCondition): ...


class OakCondition_IsInHostileVehicle(gbx_runtime.GbxCondition): ...


class OakCondition_MayhemMode(gbx_runtime.GbxCondition):
    Type: EOakMayhemModeConditionType
    Operator: gbx_game_system_core.EConditionComparisonOperatorType
    OtherOperand: gbx_game_system_core.AttributeInitializationData



class OakCondition_TeamworkDreamwork(gbx_runtime.GbxCondition): ...


class OakCondition_VehicleIsDrivenByAI(gbx_runtime.GbxCondition): ...


class OakControlledMove(gbx_game_system_core.ControlledMove):
    bSpeedAffectedByCryo: bool
    bTriggerOakTriggersAlongTeleport: bool
    bBlockECHOMenu: bool
    bBlockGroundSlam: bool
    bBlockActionAbility: bool



class OakControlledMove_ActionAbility(OakControlledMove):
    ActionOwner: OakAction_Anim_ActionAbility
    def OnReceivedActionOwner(self): ...


class OakControlledMove_PhaseLock(OakControlledMove):
    HeightFromGround: gbx_game_system_core.AttributeInitializationData
    LiftLocationCurve: engine.RuntimeFloatCurve
    PhaseLockTargetBoundsToParticleScaleCurve: engine.RuntimeFloatCurve
    PhaseLockLiftImmunityTag: gameplay_tags.GameplayTag
    BobStartDelay: float
    LiftBobFrequency: float
    LiftBobAmplitude: float
    LiftLocationCollisionEnableTolerance: float
    FXSocketName: str
    bRegisterWithActionAbility: bool
    OwnerActionAbilityClass: unreal.UClass
    bBlocksActionAbilityShutdown: bool
    OwnerActionAbility: OakActionAbility
    TargetParticleScale: float
    LiftStartLocation: core_uobject.Vector
    LiftEndLocation: core_uobject.Vector
    LiftEndFXSocketLocation: core_uobject.Vector
    TargetFXBounds: core_uobject.BoxSphereBounds
    def GetSuperSkunkworksReplicationData(self, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...


class OakControlledMove_Player(OakControlledMove):
    bRegisterAsSirenArmController: bool
    GhostArmMaterial: engine.MaterialInstance



class OakCustomizationComponent(gbx_game_system_core.GbxCustomizationComponent):

    def GetAvailableCustomizationData(self, UnlockedCustomizations: unreal.WrappedArray[OakCustomizationData], LockedCustomizations: unreal.WrappedArray[OakCustomizationData]): ...


class OakCustomizationData(gbx_game_system_core.GbxCustomizationData):
    PlayerClass: PlayerClassIdentifier
    InventorySetup: CustomizationInventoryAssetSetup
    InventoryAspectList: unreal.WrappedArray[gbx_inventory.InventoryAspectData]
    RarityData: gbx_inventory.InventoryRarityData
    BalanceData: CustomizationInventoryBalanceData
    InventoryData: CustomizationInventoryData



class ECHOThemeCustomizationData(OakCustomizationData):
    InitializationText: str
    EquipSound: wwise_audio.WwiseEvent
    UnequipSound: wwise_audio.WwiseEvent
    DPadPressSound: wwise_audio.WwiseEvent
    DPadReleaseSound: wwise_audio.WwiseEvent
    DPadSynthSound: wwise_audio.WwiseEvent
    ConfirmSound: wwise_audio.WwiseEvent
    ErrorSound: wwise_audio.WwiseEvent



class OakCustomizationManager(gbx_game_system_core.GbxCustomizationManager): ...


class OakDamageBasedChallenge(OakChallenge):
    RequiredWeaponType: gbx_weapon.WeaponTypeData
    RequiredManufacturer: gbx_inventory.ManufacturerData
    RequiredDamageTypes: unreal.WrappedArray[unreal.UClass]
    bRequireCrit: bool
    bRequireHostile: bool
    bIncrementBasedOnDamageDealt: bool
    bTreatMultipleHitsAsSingleHit: bool



class OakDamageCauserComponent(gbx_game_system_core.DamageCauserComponent):
    FirstShotInClipDamageMultiplier: engine.GbxAttributeFloat
    LastShotInClipDamageMultiplier: engine.GbxAttributeFloat
    bUsePlayerAsBalanceSourceForLevelSync: bool
    MaxPassOverkillDamageToNextShotMultiplier: float
    WeaponShotModifiers: unreal.WrappedArray[RegisteredWeaponShotModifier]
    def UnregisterWeaponShotModifier(self, Modifier: gbx_weapon.WeaponShotModifier, ModifierOwner: unreal.UObject): ...
    def SetShouldPassOverkillDamageToNextShot(self, bNewValue: bool, Reason: str): ...
    def RegisterWeaponShotModifier(self, Modifier: gbx_weapon.WeaponShotModifier, ContextOverride: unreal.UObject, ModifierOwner: unreal.UObject): ...
    def ModifiedWeaponShotEvent__DelegateSignature(self, Weapon: gbx_weapon.Weapon, Data: gbx_weapon.WeaponShotModifierData): ...


class OakDamageComponent(gbx_game_system_core.DamageComponent):
    ShieldAbsorptionChance: engine.GbxAttributeFloat
    bDamageBlockEnabled: bool
    DamageBlockData: DamageBlockData
    RagdollDeathTag: gbx_game_system_core.HitReactionTag
    bReplenishOnWorldReset: bool
    WeaponShield: WeaponShieldComponent
    ElementalDeathType: EOakElementalType
    bDisableElementalDeaths: bool
    GoreRegionTriggerThreshold: float
    GoreRegionLimbScale: float
    GoreSourceMaterialIndex: int
    AoEGoreData: GoreAoEDamageData
    GoreRegions: unreal.WrappedArray[GoreRegionState]
    GoreDeathOverride: gbx_game_system_core.HitReactionTag
    def TriggerGoreRegions(self, GoreData: GoreAoEDamageData, Origin: core_uobject.Vector, Radius: float): ...
    def TriggerGoreRegion(self, BoneName: str, HitDirection: core_uobject.Vector, bIgnoreRestrictions: bool): ...
    def TriggerDefaultElementalDeath(self): ...
    def TriggerClientGoreRegion(self, EventSummary: GoreRegionEventSummary): ...
    def SetIgnoreShield(self, IgnoreShield: bool): ...
    def SetDamageBlockEnabled(self, bNewDamageBlockEnabled: bool): ...
    def IsElementalDeath(self, ReturnValue: bool) -> bool: ...
    def HasGoredRegionType(self, REGION: EGoreRegionType, ReturnValue: bool) -> bool: ...
    def HasGoredAnyRegionType(self, RegionTypes: int, ReturnValue: bool) -> bool: ...
    def GetValidGoreRegionEventFunctionNames(self, Array: unreal.WrappedArray[str]): ...
    def AddSectionPercentagesAtIndex(self, Index: int, SectionPercentages: unreal.WrappedArray[float]): ...


class OakDamageFilter(gbx_game_system_core.DamageFilter):
    bFilterElementalType: bool
    ElementalTypeFilter: EOakElementalType



class OakDamageGlobalsData(gbx_game_system_core.DamageGlobalsData):
    CrushDamageSource: unreal.UClass
    SkillDamageSourceInstigatorMultiplier: gbx_game_system_core.GbxAttributeData
    LevelSyncPlayerReceivedDamageCalc: gbx_game_system_core.AttributeInitializationData
    LevelSyncPlayerInstigatedDamageCalc: gbx_game_system_core.AttributeInitializationData
    LevelSyncPlayerVersusPlayerDamageCalc: gbx_game_system_core.AttributeInitializationData
    NumPlayersBalanceInfo: unreal.WrappedArray[NumPlayersDamageBalanceInfo]
    DifficultyBalanceInfos: PlayerDifficultyBalanceInfo
    StatusEffectApplicationDefaults: unreal.WrappedArray[StatusEffectApplicationDamageDefaultSettings]
    ImpactElementalDamageTypes: unreal.UClass
    RadiationDamageScalePercent: float
    DamageReceivedSound: wwise_audio.WwiseEvent
    DamageReceivedShieldSound: wwise_audio.WwiseEvent
    DamageReceivedCriticalSound: wwise_audio.WwiseEvent
    DamageDealtSound: wwise_audio.WwiseEvent
    DamageDealtCriticalSound: wwise_audio.WwiseEvent
    DamageDealtImmuneSound: wwise_audio.WwiseEvent
    DamageDealtShieldSound: wwise_audio.WwiseEvent
    HeartbeatWwiseEvent: wwise_audio.WwiseEvent
    HeartbeatIntervalInSecondsRtpc: wwise_audio.WwiseRtpc
    HeartbeatDelayInSecondsRtpc: wwise_audio.WwiseRtpc
    HeartbeatVolumeRtpc: wwise_audio.WwiseRtpc
    LowHealthHeartBPM: float
    VeryLowHealthBPM: float
    VeryLowHealthTransitionValue: float
    HealthPercentRtpc: wwise_audio.WwiseRtpc
    HealthPercentRtpcTransitionDuration: float
    DamageDisplayInfo: DamageDisplayInfo
    IncomingDamageDisplayInfo: IncomingDamageDisplayInfo
    ResistDamageReductionFeedbackThreshold: float
    MinTimeBetweenResistFeedbacks: float
    DamageDealtFlashDuration: float
    DamageDealtHealthFlash: core_uobject.LinearColor
    DamageDealtCriticalFlash: core_uobject.LinearColor
    DamageDealtShieldFlash: core_uobject.LinearColor
    DamageDealtFlashParamName: str
    DamageDealtFlashColorParamName: str
    LowHealthEffectBlendSpeed: float
    LowHealthEffectCurve: engine.CurveFloat
    LowHealthParticle: engine.ParticleSystem
    RevivePercentToLowHealthEffectCurve: engine.CurveFloat
    RevivePercentToCreepingDeathEffectCurve: engine.CurveFloat
    CreepingDeathSecondWindBlendSpeed: float
    CreepingDeathSecondWindBlendCurve: engine.CurveFloat
    CreepingDeathRevivingBlendSpeed: float
    CreepingDeathRevivingBlendCurve: engine.CurveFloat
    CreepingDeathParticle: engine.ParticleSystem
    ShieldHitDuration: float
    MinTimeBetweenShieldHits: float
    ShieldHitCurve: engine.CurveFloat
    ShieldBreakDuration: float
    ShieldBreakAmountCurve: engine.CurveFloat
    ShieldBreakIntensityCurve: engine.CurveFloat
    ElementalInteractionDamageSource: unreal.UClass
    SplatDamage: gbx_game_system_core.AttributeInitializationData
    RecentGoreDamageTime: float
    IncomingDamagePresentationQueueDuration: float
    IncomingDamagePresentations: unreal.WrappedArray[IncomingDamagePresentationSource]
    IncomingPresentationGlobalInfo: IncomingDamagePresentationGlobalInfo



class OakDamageModifierComponent(gbx_game_system_core.DamageModifierComponent):
    BaseStatusEffectChanceOverride: engine.GbxAttributeFloat
    BaseStatusEffectDamageOverride: engine.GbxAttributeFloat
    bStatusEffectDamageIsPercent: bool
    BaseStatusEffectDurationOverride: engine.GbxAttributeFloat
    GoreModifier: engine.GbxAttributeFloat
    GibModifier: engine.GbxAttributeFloat



class OakDamageOverTimeManager(gbx_game_system_core.DamageOverTimeManager): ...


class OakDamageSource(gbx_game_system_core.DamageSource):
    bEligibleForShieldAbsorption: bool
    bPlayHitNotifySounds: bool
    bCanCauseLargeLiquidBodyExplosionSplash: bool
    KillStat: gbx_game_system_core.GameStatData



class OakDamageStatics(engine.BlueprintFunctionLibrary):

    def ResolveDamagingWeapon(self, DamageCauser: engine.Actor, ReturnValue: gbx_weapon.Weapon) -> gbx_weapon.Weapon: ...
    def MakeOakPipelineDamageInput(self, DamageCauser: engine.Actor, DamageReceiver: engine.Actor, DamageType: unreal.UClass, DamageSource: unreal.UClass, HitInfo: engine.HitResult, HitLocation: core_uobject.Vector, HitDirection: core_uobject.Vector, HitForceDirection: core_uobject.Vector, HitForceMagnitude: gbx_game_system_core.ForceSelection, BaseStatusEffectChance: float, BaseStatusEffectDamage: float, BaseStatusEffectDuration: float, GoreModifier: float, GibModifier: float, ReturnValue: OakPipelineDamageInput) -> OakPipelineDamageInput: ...
    def IsElementalType(self, DamageType: engine.DamageType, ElementalType: EOakElementalType, ReturnValue: bool) -> bool: ...
    def IsClassElementalType(self, DamageTypeClass: unreal.UClass, ElementalType: EOakElementalType, ReturnValue: bool) -> bool: ...
    def IsAffectedByElementalType(self, Actor: engine.Actor, Type: EOakElementalType, Threshold: float, ReturnValue: bool) -> bool: ...
    def GetElementalType(self, DamageType: engine.DamageType, ReturnValue: EOakElementalType) -> EOakElementalType: ...
    def GetClassElementalType(self, DamageTypeClass: unreal.UClass, ReturnValue: EOakElementalType) -> EOakElementalType: ...
    def CauseDamage(self, DamageCauser: engine.Actor, DamageData: unreal.UClass, DamageTarget: engine.Actor, DamageOverride: float, TargetedHitInfo: engine.HitResult, TargetedHitDirection: core_uobject.Vector, DamageTypeOverride: unreal.UClass, DamageSourceOverride: unreal.UClass, AdditionalEventListener: engine.Pawn, SourceActorOverride: engine.Actor, SourceSocketOverride: str, SourceLocationOverride: core_uobject.Vector, HitLocationOverride: core_uobject.Vector, HitStartRotationOffsetOverride: core_uobject.Rotator, HitRotationOffsetOverride: core_uobject.Rotator, DamageAreaRadiusOverride: float, DamageAreaBoxExtentOverride: core_uobject.Vector, ImpactForceOverride: gbx_game_system_core.ForceSelection, ExplosionDataOverride: gbx_game_system_core.ExplosionData, ImpactDataOverride: gbx_game_system_core.ImpactData, StatusEffectOverrides: CauseDamageStatusEffectOverrides, CriticalHitOverrides: gbx_game_system_core.CriticalHitDamageOverrides, GoreModifiers: gbx_game_system_core.DamageGoreModifiers, ScreenParticleOverride: engine.ParticleSystem, bRunRadiusDamageOnClient: bool): ...
    def ApplyDamageInRadius(self, WorldContextObject: unreal.UObject, BaseDamage: float, Origin: core_uobject.Vector, Radius: float, DamageType: unreal.UClass, DamageSource: unreal.UClass, IgnoreActors: unreal.WrappedArray[engine.Actor], DamageCauser: engine.Actor, EventInstigator: engine.Controller, BaseImpactForce: gbx_game_system_core.ForceSelection, DamagePreventionChannel: int, BaseStatusEffectChance: float, BaseStatusEffectDamage: float, BaseStatusEffectDuration: float, bDamageFalloff: bool, DamageModifierComponent: gbx_game_system_core.DamageModifierComponent, InstigatorFeedback: gbx_game_system_core.FeedbackData, bUseInstigatorRadiusScale: bool, GoreModifier: float, GibModifier: float, KillStat: gbx_game_system_core.GameStatData): ...
    def ApplyDamageEx(self, PipelineInput: OakPipelineDamageInput, BaseDamage: float): ...
    def AmputateLimb(self, Actor: engine.Actor, Data: AmputateLimbData, HitDirection: core_uobject.Vector, HitForce: float, ReturnValue: engine.Actor) -> engine.Actor: ...


class OakDamageType(gbx_game_system_core.GbxDamageType):
    bAffectedByRadiationMultiplier: bool
    ElementalType: EOakElementalType
    DialogSystemEnumValue: gbx_dialog.DialogEnumValue
    KillStat: gbx_game_system_core.GameStatData
    bForceDamageToHealthType: bool



class DayNightCycleComponent(engine.ActorComponent):
    DayBeginTime: float
    DayEndTime: float
    def GetTimeOfDay(self, ReturnValue: float) -> float: ...


class OakDebugWeaponBuilderButton(gbx_ui.GbxListItem):
    CheckBoxButton: umg.CheckBox
    DescriptionText: umg.TextBlock
    HighlightBackground: umg.Border



class OakDebugWeaponBuilderMenu(gbx_ui.GbxDebugMenuSubmenu):
    BuildButton: umg.BUTTON
    PlayerLevelGradeSpinner: umg.SpinBox
    ErrorText: umg.TextBlock
    ManufacturerList: gbx_ui.GbxScrollBoxList
    AmmoTypesList: gbx_ui.GbxScrollBoxList
    InventoryBalancesList: gbx_ui.GbxScrollBoxList
    PartPickerListLeft: gbx_ui.GbxScrollBoxList
    PartPickerListRight: gbx_ui.GbxScrollBoxList
    OptionButtonClass: unreal.UClass
    AvailableManufacturers: unreal.WrappedArray[AvailableManufacturer]
    AvailableAmmoTypes: unreal.WrappedArray[AvailableAmmoType]
    AvailableInventoryBalances: unreal.WrappedArray[AvailableInventoryBalanceData]
    AvailableParts: unreal.WrappedArray[AvailablePartData]
    CurrentFocusedOptionButton: OakDebugWeaponBuilderButton
    def OnPlayerLevelChange(self, InValue: float, CommitMethod: int): ...
    def OnPartSelectedChanged(self, Widget: gbx_ui.GbxUserWidget, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnOptionListItemFocused(self, Widget: gbx_ui.GbxUserWidget, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnManufacturerSelectedChanged(self, Widget: gbx_ui.GbxUserWidget, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBuildButtonClicked(self): ...
    def OnBalanceDefSelectedChanged(self, Widget: gbx_ui.GbxUserWidget, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnAmmoTypeSelectedChanged(self, Widget: gbx_ui.GbxUserWidget, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class OakDeveloperPerks(engine.ActorComponent):
    Perks: unreal.WrappedArray[DeveloperPerk]
    PerkTypeEnum: unreal.UEnum
    def UnlockWeaponTrinkets(self): ...
    def UnlockWeaponSkins(self): ...
    def UnlockVehicleParts(self): ...
    def UnlockCustomizations(self): ...
    def SpawnItems(self, ItemPools: unreal.WrappedArray[gbx_inventory.ItemPoolData], NumItems: int): ...
    def ServerUnlockVehicleParts(self): ...
    def ServerSpawnItems(self, ItemPools: unreal.WrappedArray[gbx_inventory.ItemPoolData], NumItems: int): ...
    def ServerLoaded(self): ...
    def ServerKillAllEnemies(self): ...
    def ServerGrantLevels(self, NumLevels: int): ...
    def ServerGiveCurrency(self, CurrencyType: gbx_game_system_core.GbxInventoryCategoryData, Amount: int): ...
    def PerkTypeEnumFunc(self, ReturnValue: unreal.UEnum) -> unreal.UEnum: ...
    def OnDeveloperPerkActivated(self, Perk: int): ...
    def Loaded(self): ...
    def KillAllEnemies(self): ...
    def GrantLevels(self, NumLevels: int): ...
    def GiveCurrency(self, CurrencyType: gbx_game_system_core.GbxInventoryCategoryData, Amount: int): ...
    def GetOwnerOakPlayerController(self, ReturnValue: OakPlayerController) -> OakPlayerController: ...


class OakDialogBlackboard(gbx_dialog.DialogBlackboard):
    TrackingEchoLogs: unreal.WrappedArray[EchoLogData]
    PinnedScripts: unreal.WrappedArray[gbx_dialog.DialogScriptPinnedRef]



class OakDialogComponent(gbx_dialog.GbxDialogComponent):
    AutoActivateOnMissionObjective: gbx_mission.MissionObjectiveReference
    AutoDeactivateOnMissionObjective: gbx_mission.MissionObjectiveReference



class OakDialogSettings(gbx_dialog.GbxDialogSettings):
    TargetParam: gbx_dialog.DialogParameter
    InstigatorParam: gbx_dialog.DialogParameter
    MaxItemCalloutDistance: float
    AlwaysActiveDialogScripts: unreal.WrappedArray[gbx_dialog.DialogScriptData]
    EchoLogStyle: gbx_dialog.DialogStyle
    DryFireCalloutEvent: gbx_dialog.DialogEvent
    PlayerIdleTime: float
    PlayerIdleCallout: gbx_dialog.DialogEvent
    SpotEnemyDistanceRange: gbx_runtime.NumericRange
    SpottedEnemyGameplayTag: gameplay_tags.GameplayTag
    SpottedEnemyCallout: gbx_dialog.DialogEvent
    PlayerAlertEvent: gbx_dialog.DialogEvent
    PlayerAlertType: gbx_dialog.DialogParameter
    VehicleSpawnedEvent: gbx_dialog.DialogEvent
    VehicleSwappedSeatEvent: gbx_dialog.DialogEvent
    DialogScriptsToLoadWithLevel: unreal.WrappedArray[DialogScriptToLoadEntry]



class OakDialogSystemCustomization(unreal.UObject): ...


class OakDiscordManager(unreal.UObject): ...


class OakDownloadableContentGlobalsData(engine.DataAsset):
    Currencies: unreal.WrappedArray[OakDownloadableEntitlementCurrencyType]
    SparkEntitlementSourceData: DownloadableEntitlementSourceData
    DLCEntitlementSourceData: DownloadableEntitlementSourceData
    DebugEntitlementSourceData: DownloadableEntitlementSourceData



class OakDownloadableContentLicenseData(online_subsystem_utils.DownloadableContentLicenseData):
    AssetGuid: core_uobject.Guid



class OakDownloadableEntitlementSetData(online_subsystem_utils.DownloadableContentData):
    EntitlementSourceData: DownloadableEntitlementSourceData
    Entitlements: unreal.WrappedArray[DownloadableEntitlementSetItem]



class OakDownloadableInventorySetData(gbx_inventory.DownloadableInventorySetData): ...


class OakDroneProjectile(OakAIBalancedProjectile):
    Sphere: engine.SphereComponent
    DroneMovement: OakDroneProjectileMovementComponent
    OakDamage: OakDamageComponent
    Targetable: gbx_game_system_core.TargetableComponent
    Targeting: gbx_game_system_core.TargetingComponent
    AIPerceptionStimuliSource: aimodule.AIPerceptionStimuliSourceComponent
    bUseTargetOfMovementTarget: bool
    PlayerAlertType: EPlayerAlertType
    def SetMovementTarget(self, MovementTarget: engine.Actor): ...
    def GetMovementTarget(self, ReturnValue: engine.Actor) -> engine.Actor: ...


class OakDroneProjectileMovementComponent(gbx_weapon.GbxProjectileMovementComponent):
    Drone: OakDroneProjectile
    MovementMode: EOakDroneMovementMode
    FacingMode: EOakDroneFacingMode
    RotationInterpSpeed: float
    bDeactiveWhenMovementTargetDies: bool
    bDeactivateWhenInstigatorDies: bool
    MovementTarget: engine.Actor
    FacingTarget: engine.Actor
    DroneSpeed: float
    HoverSpeed: float
    DroneAccelerationTime: float
    HoverAltitude: float
    HoverAltitudeThreshold: float
    HoverRadius: float
    HoverRadiusMin: float
    HoverAngle: gbx_runtime.NumericRange
    bUseHoverAngle: bool
    StopHomingDistance: float
    HoverQuery: gbx_game_system_core.EnvQueryParams
    bUseHoverQuery: bool
    HoverQueryLocation: core_uobject.Vector
    def SetMovementTarget(self, NewMovementTarget: engine.Actor): ...
    def SetMovementMode(self, NewMovementMode: EOakDroneMovementMode, NewMovementTarget: engine.Actor): ...
    def OnRep_MovementMode(self): ...


class OakDroneProjectileMovementComponent_GRMLN(OakDroneProjectileMovementComponent):
    HoverProfiles: unreal.WrappedArray[GRMLNHoverProfile]
    BoostVelocitySquared: float
    HardpointActivationRadius: float
    HardpointDeactivationRadius: float
    DroneDeliveryCooldownData: gbx_game_system_core.AttributeInitializationData
    GRMLNOwner: OakDroneProjectile_GRMLN



class GbxCondition_IsGRMLNBeamTarget(gbx_runtime.GbxCondition): ...


class OakDroneProjectile_GRMLN(OakDroneProjectile):
    CustomizationComponent: gbx_game_system_core.GbxCustomizationComponent
    DroneCollisionComponent: engine.PrimitiveComponent
    PrimaryMeshComponent: engine.MeshComponent
    StaticFieldComponent: engine.ParticleSystemComponent
    AOERadius: gbx_game_system_core.AttributeInitializationData
    StaticFieldDamageSource: unreal.UClass
    CalledShotDamageSource: unreal.UClass
    StaticFieldBeamConfigurationData: GRMLNBeamConfiguration
    BadDoseBeamCount: gbx_game_system_core.AttributeInitializationData
    BadDoseBeamConfigurationData: GRMLNBeamConfiguration
    HUDIconData: InWorldIconData
    HUDIconSocketName: str
    Hardpoints: unreal.WrappedArray[GRMLNHardpointData]
    OwnerActionAbility: OakActionAbility_GRMLN
    OwnerPlayer: OakCharacter_Player
    DroneTarget: engine.Actor
    RuntimeMods: OakActionAbilityEnumMaskHelper
    HUDIconInfo: HUDInWorldIconTargetInfo
    bIsBoostEnabled: bool
    bIsStaticFieldSearching: bool
    StaticFieldData: GRMLNStaticFieldData
    BadDoseBeams: unreal.WrappedArray[GRMLNBadDoseData]
    def UpdateActiveTarget(self): ...
    def SetupMods(self): ...
    def SetManualTarget(self, NewDroneTarget: engine.Actor): ...
    def SetDronePhasing(self, bPhasing: bool): ...
    def SetActiveTargetingEnabled(self, bEnabled: bool): ...
    def ServerActivateCalledShot(self, Location: core_uobject.Vector): ...
    def RegisterParticleSystemComponent(self, SocketName: str, InComponent: engine.ParticleSystemComponent): ...
    def OnTargetDied(self): ...
    def OnTargetDestroyed(self, DestroyedActor: engine.Actor): ...
    def OnTargetChanged(self): ...
    def OnShutdownGracefully(self): ...
    def OnRep_RuntimeMods(self): ...
    def OnRep_DroneTarget(self): ...
    def OnRep_bIsStaticFieldSearching(self): ...
    def OnDroneBoostStateChanged(self): ...
    def OnCinematicModeChanged(self, CinematicMode: gbx_game_system_core.CinematicModeData): ...
    def OnCalledShotKill(self, KilledActor: engine.Actor): ...
    def OnCalledShotActivated(self, Location: core_uobject.Vector): ...
    def NotifyActorComponentEndOverlap(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int): ...
    def NotifyActorComponentBeginOverlap(self, OverlappedComp: engine.PrimitiveComponent, Other: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def IsInMovementMode(self, Mode: EOakDroneMovementMode, ReturnValue: bool) -> bool: ...
    def HasValidDroneTarget(self, ReturnValue: bool) -> bool: ...
    def HasGRMLNMod(self, ModType: EGRMLNModType, ReturnValue: bool) -> bool: ...
    def FindNewTargetAutonomous(self, ReturnValue: engine.Actor) -> engine.Actor: ...
    def DoDroneDelivery(self): ...
    def CreateStaticFieldBeamToTarget(self, TargetActor: engine.Actor, BeamName: str): ...
    def CreateBadDoseBeamToTarget(self, TargetActor: engine.Actor, BeamName: str): ...
    def ClientNotifyLightProjectileFire(self, Source: gbx_weapon.LightProjectile): ...
    def ApplyShieldDamageRefund(self, CurrentTarget: engine.Actor, LastDamageLocation: core_uobject.Vector, TotalRefund: float): ...
    def ApplyCollisionDamageToTarget(self, Target: engine.Actor): ...
    def ActivateCalledShot(self, Location: core_uobject.Vector): ...


class EnvQueryContext_Drone_MovementTarget(gbx_game_system_core.EnvQueryContext_EnvQueryParam): ...


class EnvQueryContext_Drone_HoverTargetPos(gbx_game_system_core.EnvQueryContext_EnvQueryParam): ...


class OakPresentableStatusEffectData(gbx_game_system_core.StatusEffectData):
    FXData: OakStatusEffectPresentationData
    PresentationData: OakStatusEffectPresentationData
    ValueStrategy: EPresentableStatusEffectValueStrategy



class OakElementalEffectData(OakPresentableStatusEffectData): ...


class OakElementalEffectBucketProviderInterface(core_uobject.Interface): ...


class OakFirstPersonComponent(gbx_game_system_core.FirstPersonComponent):
    CenterCrosshairAdjustedZ: float



class OakFreezeData(gbx_runtime.GbxDataAsset):
    DestructibleComponent: unreal.UClass
    FreezeCE: unreal.UClass
    ThawCE: unreal.UClass
    FreezeTime: float
    ThawTime: float
    ThawScaleDelay: float
    ImpactPhysicalMaterial: engine.PhysicalMaterial
    DestructibleSupportMesh: apex_destruction.DestructibleMesh
    StaticSupportMesh: engine.StaticMesh
    SupportMeshTransform: core_uobject.Transform
    GroundSupportMaxOffset: float
    GroundDecalMaterial: engine.MaterialInterface
    GroundDecalSize: core_uobject.Vector
    GroundDecalDuration: float
    GroundDecalFadeDuration: float
    FreezeFallingDamageType: unreal.UClass
    FreezeFallingDamageSource: unreal.UClass
    FreezeFallingDamageScale: gbx_game_system_core.AttributeInitializationData
    FreezeFallingForce: gbx_game_system_core.ForceSelection
    FreezeFallingImpactData: gbx_game_system_core.ImpactData
    bBlockVehicle: bool



class OakGameActivityAdapter(unreal.UObject): ...


class OakGameEngine(engine.GameEngine): ...


class OakGameInstance(gbx_game_system_core.GbxGameInstance):
    OakSingletons: OakSingletons
    GbxMenuInput: gbx_ui.GbxMenuInput
    UIControllerDisconnectManager: OakUIControllerDisconnectManager
    PCTextChatBuffer: GFxPCTextChatBuffer
    AlwaysLoadedMenuInstances: unreal.WrappedArray[gbx_ui.GbxGFxMenu]
    DevMapToMapIds: unreal.WrappedArray[DevMapToMapId]
    PlayerClassToClassIds: unreal.WrappedArray[PlayerClassToClassId]
    LoadingScreenFadeTime: float
    AllPlayerClasses: unreal.WrappedArray[PlayerClassIdentifier]
    DefaultSaveGameEvaluator: unreal.WrappedArray[ConditionalSavegameExpression]
    LobbyBeaconTemplateName: str
    MatchmakingBeaconTemplateName: str
    FallbackLaunchSaveGameMapName: str
    bHideShiftUsersWhenCrossplayIsToggledOff: bool
    bRestrictShiftSessionInvitesWhenCrossplayIsToggledOff: bool
    bRestrictCrossPlatformJoinsWhenCrossplayIsToggledOff: bool
    ManagedActorManager: OakManagedActorManager
    bIsPlayerVersusPlayerCollisionEnabled: bool
    OakDialogSystemCustomization: OakDialogSystemCustomization
    bHasSelectedInitialPlayer: bool
    MatchmakingTest: MatchmakingTest
    OnlineStatsHelper: unreal.UClass
    StatsHelperInst: OakOnlineStatsHelper
    ModifierManagers: unreal.WrappedArray[OakModifierManager]
    DiscordManager: OakDiscordManager
    PresenceUpdateTimerSeconds: float
    bRefreshPresenceOnSessionUpdates: bool
    LootAudioStingers: unreal.WrappedArray[LootAudioStinger]
    CooldownBeforeNextLootAudioStinger: float
    TempMenuDataReferences: unreal.WrappedArray[gbx_ui.GbxMenuData]
    def UpdateMainMenuPlayerStandIns(self): ...
    def StopMatchmakingTest(self): ...
    def StartMatchmakingTest(self, InMatchmakingTest: unreal.UClass): ...
    def ShouldStartNewGameFlow(self, WorldContextObject: unreal.UObject, ReturnValue: bool) -> bool: ...
    def SetSplitscreenViewportEnabled(self, bEnabled: bool): ...
    def ServerPartyListenToECHOData(self, EchoLogData: EchoLogData, PlayOnSpeaker: gbx_dialog.GbxDialogComponent): ...
    def SendPlayerAreaObjectStartedEvent(self, WorldContextObject: unreal.UObject): ...
    def ResetRegionStage(self, REGION: RegionData): ...
    def RemovePlayerAlert(self, TargetedActor: engine.Actor): ...
    def RemoveManagedActor(self, TheActor: engine.Actor, bDestroyActor: bool): ...
    def OnTrialErrorMessageClicked(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnSplitscreenDialogDismissed(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnShiftReportReasonSelected(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnRemoveShiftFriendConfirmed(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnRemoveFriendConfirmed(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnProfileErrorMessageClicked(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnNATHelpChoiceMade(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnModalDialogChoiceMade(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnHandleUnpairedMenuInput(self, InputEvent: gbx_ui.GbxMenuInputEvent): ...
    def OnControllerDisconnectClicked(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnConfirmSplitscreenLeave(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnConfirmSignIntoAccount(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnConfirmMatchClicked(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnConfirmKickPlayer(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnConfirmKickNetworkedPlayersForJoin(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnConfirmDisconnect(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnConfirmApplyMicropatches(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBlockUserConfirmed(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def IsMenuLevel(self, ReturnValue: bool) -> bool: ...
    def GetManagedActorCount(self, Type: OakManagedActorDefinition, TheOwner: engine.Actor, ReturnValue: int) -> int: ...
    def AddPickupAudioStinger(self, Pickup: OakInventoryItemPickup, Sound: wwise_audio.WwiseEvent): ...
    def AddPickupAudioCue(self, SoundActor: engine.Actor, Sound: wwise_audio.WwiseEvent): ...
    def AddManagedActor(self, TheActor: engine.Actor, Type: OakManagedActorDefinition, TheOwner: engine.Actor): ...


class OakGameSession(engine.GameSession): ...


class OakGameUserSettings(engine.GameUserSettings):
    ResolutionScale: EResolutionScale
    FrameRateLimitMode: EFrameRateLimit
    CustomFrameRateLimit: int
    bEnableCameraMotionBlur: bool
    bEnablePerObjectMotionBlur: bool
    bEnableCAS: bool
    GraphicsQualityMode: EGraphicsQuality
    RecommendedGraphicsQualityMode: EGraphicsQuality
    TextureStreamingQuality: ETextureStreamingQuality
    MaterialQuality: EMaterialQuality
    AntiAliasingModeIndex: int
    AnisotropicFilteringMode: EAnisotropicFilteringType
    ShadowQualityMode: EShadowQuality
    PerformanceStatsLevel: int
    EnvironmentTextureDetailMode: EEnvironmentTextureDetail
    DrawDistanceMode: EDrawDistance
    EnvironmentDetailMode: EEnvironmentDetail
    TerrainMode: ETerrainType
    FoliageMode: EFoliageDensity
    VolumetricFogMode: EVolumetricFogType
    ScreenSpaceReflectionsMode: EScreenSpaceReflections
    CharacterTextureDetailMode: ECharacterTextureDetail
    CharacterDetailMode: ECharacterDetail
    AmbientOcclusionQualityMode: EAmbientOcclusionQuality
    EdgeDetectionTexelOffset: float
    BenchmarkDataOutputMode: EBenchmarkDataOutputMode
    UISafeFrameScaling: float
    HDRBrightness: float
    Brightness: float
    BlackLevel: float
    HdrUIBrightness: float
    TwoPlayerSplitscreenLayout: int
    LastBenchmarkDateTime: str
    LastBenchmarkDataOutputPath: str
    LastBenchmarkAvgFPS: float
    LastBenchmarkAvgFrameTime: float
    LastBenchmarkAvgCPU: float
    LastBenchmarkAvgGPU: float
    LastBenchmarkLoadTimeSeconds: float
    AnalyticsTag: str
    OverrideGraphicsQualityMode: EGraphicsQuality
    TextureStreamingViewBoostScale: float
    TextureStreamingViewBoostScaleOverride: float
    TextureStreamingAdaptiveBoostScale: float
    TextureStreamingAdaptiveBoostScaleOverride: float
    TextureStreamingPoolSizeMB: int
    TextureStreamingPoolSizeMBOverride: int
    bHasPerformedDirectXBetaUpgrade: bool
    def SetVolumetricFogMode(self, NewMode: EVolumetricFogType): ...
    def SetTextureStreamingQuality(self, NewMode: ETextureStreamingQuality): ...
    def SetTerrainDetailMode(self, NewMode: ETerrainType): ...
    def SetShadowQualityMode(self, NewMode: EShadowQuality): ...
    def SetScreenSpaceReflectionsMode(self, NewMode: EScreenSpaceReflections): ...
    def SetResolutionScalePercentage(self, NewMode: EResolutionScale): ...
    def SetMaterialQuality(self, NewMode: EMaterialQuality): ...
    def SetGraphicsQualityMode(self, NewMode: EGraphicsQuality, bForce: bool): ...
    def SetFrameRateLimitMode(self, NewMode: EFrameRateLimit): ...
    def SetFoliageMode(self, NewMode: EFoliageDensity): ...
    def SetEnvironmentDetailMode(self, NewMode: EEnvironmentDetail): ...
    def SetEnablePerObjectMotionBlur(self, NewMode: bool): ...
    def SetEnableCAS(self, bNewValue: bool): ...
    def SetEnableCameraMotionBlur(self, bNewValue: bool): ...
    def SetEdgeDetectionTexelOffset(self, NewOffset: float): ...
    def SetDrawDistanceMode(self, NewMode: EDrawDistance): ...
    def SetDisplayPerformanceStatsMode(self, NewMode: int): ...
    def SetCustomFrameRateLimit(self, NewLimit: int): ...
    def SetCharacterDetailMode(self, NewMode: ECharacterDetail): ...
    def SetBenchmarkDataOutputMode(self, NewMode: EBenchmarkDataOutputMode): ...
    def SetAntiAliasingMode(self, bNewValue: int): ...
    def SetAnisotropicFilteringMode(self, NewMode: EAnisotropicFilteringType): ...
    def SetAmbientOcclusionQualityMode(self, NewMode: EAmbientOcclusionQuality): ...
    def GetVolumetricFogMode(self, ReturnValue: EVolumetricFogType) -> EVolumetricFogType: ...
    def GetTextureStreamingQuality(self, ReturnValue: ETextureStreamingQuality) -> ETextureStreamingQuality: ...
    def GetTerrainDetailMode(self, ReturnValue: ETerrainType) -> ETerrainType: ...
    def GetShadowQualityMode(self, ReturnValue: EShadowQuality) -> EShadowQuality: ...
    def GetScreenSpaceReflectionsMode(self, ReturnValue: EScreenSpaceReflections) -> EScreenSpaceReflections: ...
    def GetResolutionScalePercentage(self, ReturnValue: EResolutionScale) -> EResolutionScale: ...
    def GetRecommendedGraphicsQualityMode(self, ReturnValue: EGraphicsQuality) -> EGraphicsQuality: ...
    def GetOverrideGraphicsQualityMode(self, ReturnValue: EGraphicsQuality) -> EGraphicsQuality: ...
    def GetNumAntiAliasingModes(self, ReturnValue: int) -> int: ...
    def GetMaterialQuality(self, ReturnValue: EMaterialQuality) -> EMaterialQuality: ...
    def GetGraphicsQualityMode(self, ReturnValue: EGraphicsQuality) -> EGraphicsQuality: ...
    def GetFrameRateLimitMode(self, ReturnValue: EFrameRateLimit) -> EFrameRateLimit: ...
    def GetFoliageMode(self, ReturnValue: EFoliageDensity) -> EFoliageDensity: ...
    def GetEnvironmentDetailMode(self, ReturnValue: EEnvironmentDetail) -> EEnvironmentDetail: ...
    def GetEnablePerObjectMotionBlur(self, ReturnValue: bool) -> bool: ...
    def GetEnableCAS(self, ReturnValue: bool) -> bool: ...
    def GetEnableCameraMotionBlur(self, ReturnValue: bool) -> bool: ...
    def GetEdgeDetectionTexelOffset(self, ReturnValue: float) -> float: ...
    def GetDrawDistanceMode(self, ReturnValue: EDrawDistance) -> EDrawDistance: ...
    def GetDisplayPerformanceStatsMode(self, ReturnValue: int) -> int: ...
    def GetDefaultVolumetricFogMode(self, ReturnValue: EVolumetricFogType) -> EVolumetricFogType: ...
    def GetDefaultTextureStreamingQuality(self, ReturnValue: ETextureStreamingQuality) -> ETextureStreamingQuality: ...
    def GetDefaultTerrainDetailLevel(self, ReturnValue: ETerrainType) -> ETerrainType: ...
    def GetDefaultShadowQualityMode(self, ReturnValue: EShadowQuality) -> EShadowQuality: ...
    def GetDefaultScreenSpaceReflectionsMode(self, ReturnValue: EScreenSpaceReflections) -> EScreenSpaceReflections: ...
    def GetDefaultResolutionScalePercentage(self, ReturnValue: EResolutionScale) -> EResolutionScale: ...
    def GetDefaultPerObjectMotionBlurEnabled(self, ReturnValue: bool) -> bool: ...
    def GetDefaultMaterialQuality(self, ReturnValue: EMaterialQuality) -> EMaterialQuality: ...
    def GetDefaultGraphicsQualityMode(self, ReturnValue: EGraphicsQuality) -> EGraphicsQuality: ...
    def GetDefaultFrameRateLimitMode(self, ReturnValue: EFrameRateLimit) -> EFrameRateLimit: ...
    def GetDefaultFoliageMode(self, ReturnValue: EFoliageDensity) -> EFoliageDensity: ...
    def GetDefaultEnvironmentDetailMode(self, ReturnValue: EEnvironmentDetail) -> EEnvironmentDetail: ...
    def GetDefaultEdgeDetectionTexelOffset(self, ReturnValue: float) -> float: ...
    def GetDefaultDrawDistanceMode(self, ReturnValue: EDrawDistance) -> EDrawDistance: ...
    def GetDefaultDisplayPerformanceStatsMode(self, ReturnValue: int) -> int: ...
    def GetDefaultCustomFrameRateLimit(self, ReturnValue: int) -> int: ...
    def GetDefaultCharacterDetailMode(self, ReturnValue: ECharacterDetail) -> ECharacterDetail: ...
    def GetDefaultCAS(self, ReturnValue: bool) -> bool: ...
    def GetDefaultCameraMotionBlurEnabled(self, ReturnValue: bool) -> bool: ...
    def GetDefaultBenchmarkDataOutputMode(self, ReturnValue: EBenchmarkDataOutputMode) -> EBenchmarkDataOutputMode: ...
    def GetDefaultAntiAliasingMode(self, ReturnValue: int) -> int: ...
    def GetDefaultAnisotropicFilteringMode(self, ReturnValue: EAnisotropicFilteringType) -> EAnisotropicFilteringType: ...
    def GetDefaultAmbientOcclusionQualityMode(self, ReturnValue: EAmbientOcclusionQuality) -> EAmbientOcclusionQuality: ...
    def GetCustomFrameRateLimit(self, ReturnValue: int) -> int: ...
    def GetCharacterDetailMode(self, ReturnValue: ECharacterDetail) -> ECharacterDetail: ...
    def GetBenchmarkDataOutputMode(self, ReturnValue: EBenchmarkDataOutputMode) -> EBenchmarkDataOutputMode: ...
    def GetAntiAliasingModeName(self, Mode: int, ReturnValue: str) -> str: ...
    def GetAntiAliasingMode(self, ReturnValue: int) -> int: ...
    def GetAnisotropicFilteringMode(self, ReturnValue: EAnisotropicFilteringType) -> EAnisotropicFilteringType: ...
    def GetAmbientOcclusionQualityMode(self, ReturnValue: EAmbientOcclusionQuality) -> EAmbientOcclusionQuality: ...


class OakGameViewportClient(engine.GameViewportClient):

    def SetTwoPlayerSplitScreenType(self, SplitScreenType: str): ...


class OakGFxHUDContainer(gbx_ui.GbxGFxHUDContainer): ...


class OakGlobalAIData(gbx_game_system_core.GlobalAIData):
    DownerDistance: float
    DownerDisabledTag: gameplay_tags.GameplayTag
    AIAccuracyMaxScalePT1: gbx_game_system_core.AttributeInitializationData
    AIAccuracyMinScalePT1: gbx_game_system_core.AttributeInitializationData
    AIAccuracyMinScalePT2: gbx_game_system_core.AttributeInitializationData
    AIAccuracyMaxScalePT2: gbx_game_system_core.AttributeInitializationData



class OakGlobalMissionGraph(gbx_mission.GlobalMissionGraph): ...


class OakGlobalsData(gbx_game_system_core.GbxGlobalsData):
    UIGlobals: gbx_ui.GbxUIGlobals
    FriendGlobals: FriendGlobals
    ExperienceGlobals: ExperienceGlobals
    StandInGlobals: StandInGlobals
    DialogSettings: OakDialogSettings
    StreamingInteractionGlobals: OakStreamingInteractionGlobals
    LoadingScreenGlobals: OakLoadingScreenGlobals
    AllPlayerClasses: unreal.WrappedArray[PlayerClassIdentifier]
    MicroPatchSwitchesTable: engine.DataTable
    DLCGlobalsData: OakDownloadableContentGlobalsData
    DeveloperPerks: unreal.UClass
    DeveloperSkins: unreal.WrappedArray[OakCustomizationData]
    WeaponsGlobals: OakWeaponGlobalsData



class OakGlobalTravelGraph(gbx_travel_station.GlobalTravelGraph): ...


class OakHitRegionComponent(gbx_game_system_core.HitRegionComponent):

    def TriggerAoEGore(self, GoreData: GoreAoEDamageData, Origin: core_uobject.Vector, Radius: float): ...


class OakHitRegionData(gbx_game_system_core.HitRegionData):
    bUseStatusEffectChanceScale: bool
    StatusEffectChanceScale: gbx_game_system_core.AttributeInitializationData
    DamageModifiers: unreal.WrappedArray[OakHitRegionModifierData]



class OakHostFriendBeacon(online_subsystem_utils.OnlineBeaconHost): ...


class OakHostLobbyBeacon(online_subsystem_utils.OnlineBeaconHost): ...


class OakHostMatchmakingBeacon(online_subsystem_utils.OnlineBeaconHost): ...


class OakHUD(gbx_ui.GbxHUD):
    OakPlayerOwner: OakPlayerController
    DeathFadeToBlackTime: float
    TimeSinceDeath: float
    AvailableActionSkillWidgets: unreal.WrappedArray[GFxActionSkillWidget]
    ChallengeProgressWidget: GFxChallengeProgressWidget
    TutorialMessageWidget: GFxTutorialMessageWidget
    HUDInitializationMovie: GFxHUDInitializationMovie
    ContextSensitivePromptOrder: unreal.WrappedArray[unreal.UClass]
    AvailableContextSensitivePromptWidgets: unreal.WrappedArray[gbx_ui.GbxGFxHUDWidget]
    CutsceneSkipFont: engine.Font
    GFxBossBar: GFxBossBar
    CachedHealthBar: GFxHealthBar
    CachedExperienceBar: GFxExperienceBar
    CachedMinimap: GFxMinimapWidget
    CachedInWorldIconWidget: GFxInWorldIconContainer
    CachedAmmoBar: GFxAmmoBar
    CachedShieldBar: GFxShieldBar
    CachedMissionTrackerWidget: GFxMissionTrackerHUDWidget
    CachedGrenadeWidget: GFxGrenadeWidget
    bSuppressAllNotifications: bool
    bListenForDisplayedNotificationMenu: bool
    AnimWidgetTargetQueue: unreal.WrappedArray[gbx_ui.EHUDInitializationAnimationSet]
    def TriggerContextualPrompt(self): ...
    def StateChanged(self, OldState: gbx_ui.GbxHUDStateData, NewState: gbx_ui.GbxHUDStateData): ...
    def SetWeaponAsDebugTarget(self, Slot: int): ...
    def SetHUDVisible(self, OakPlayerController: OakPlayerController, bVisible: bool): ...
    def RegisterGFxBossBar(self, NewBossBar: GFxBossBar): ...
    def PopCurrentHUDStateForAllPlayers(self, GameInstance: engine.GameInstance): ...
    def OnWeaponChanged(self, Weapon: gbx_weapon.Weapon, LastWeapon: gbx_weapon.Weapon): ...
    def OnVaultRewardReceived(self, VaultRewardType: EVaultRewardType): ...
    def OnPlayerAbilitySlotChanged(self, SlotData: OakPlayerAbilitySlotData): ...
    def OnHUDPawnChanged__DelegateSignature(self, NewPawn: engine.Pawn, OldPawn: engine.Pawn): ...
    def OnFFYLStopped(self): ...
    def OnAreaEntered(self, DisplayText: str, DiscoverySound: wwise_audio.WwiseEvent): ...
    def OnAreaDiscovered(self, DisplayText: str, DiscoverySound: wwise_audio.WwiseEvent): ...
    def OnAbilityRemoved(self, Ability: gbx_abilities.GbxAbility): ...
    def OnAbilityAdded(self, Ability: gbx_abilities.GbxAbility): ...
    def LoadDisplayedNotificationMenu(self): ...
    def IsContextSensitivePromptActive(self, ReturnValue: bool) -> bool: ...
    def GotoHUDStateForAllPlayers(self, GameInstance: engine.GameInstance, State: gbx_ui.GbxHUDStateData, bSetForLateJoin: bool): ...
    def DisplayRolloutNotification(self, Title: str, MESSAGE: str, Duration: float): ...
    def DisplayNotificationWithId(self, Asset: HUDNotificationAsset, RaidNotificationId: int, MessageText: str, NotificationPriority: int, TrackedNotificationTarget: unreal.UClass, bMakeActiveImmediately: bool, bAbortIfNotImmediatelyActive: bool): ...
    def DisplayNotification(self, Asset: HUDNotificationAsset, MessageText: str, NotificationPriority: int, TracketNotificationTarget: unreal.UClass, bMakeActiveImmediately: bool): ...
    def DisplayErrorNotification(self, MessageText: str): ...
    def DisplayCurrencyWidget(self, CurrencyType: gbx_game_system_core.GbxInventoryCategoryData): ...
    def DebugShowNotification(self, NotificationType: str, Text: str): ...
    def ClearNotifications(self): ...
    def BeginContextSensitivePromptHeld(self): ...
    def ActivateCheckpoint(self): ...
    def AbortContextSensitivePromptHeld(self): ...


class OakHUDSkillIconWidget(umg.UserWidget):

    def StartTriggeredAbilityTimer(self, InSlotData: OakPlayerAbilitySlotData, Duration: float): ...


class OakInputAbility_Player_Common(OakCharacterInputAbility):
    LookActionData: gbx_input.GbxInputActionData_Continuous_Vector
    MoveActionData: gbx_input.GbxInputActionData_Continuous_Vector
    def PlayerMove(self, ActionData: gbx_input.GbxInputActionData_Continuous_Vector, Val: core_uobject.Vector): ...
    def PlayerLook(self, ActionData: gbx_input.GbxInputActionData_Continuous_Vector, Val: core_uobject.Vector): ...


class OakInputAbilityListData(gbx_runtime.GbxDataAsset):
    InputAbilityClasses: unreal.WrappedArray[unreal.UClass]



class OakInputActionEventInterpreter(gbx_input.GbxInputActionEventInterpreter): ...


class OakInputEventHelpers(unreal.UObject):

    def SigFunc_OakMoveLookAxis(self, Val: core_uobject.Vector, bGamePad: bool): ...


class OakInputRebindContext(gbx_input.GbxInputRebindContext): ...


class OakInventoryConsumableItem(OakInventoryItem):
    ItemMeshComponent: engine.StaticMeshComponent



class OakInventoryAmmoItem(OakInventoryConsumableItem): ...


class OakInventoryBalanceData(gbx_inventory.InventoryBalanceData):
    SourceLeague: int



class OakInventoryCurrencyItem(OakInventoryConsumableItem):
    CurrencyCategory: gbx_inventory.InventoryCategoryData
    CurrencyValueScale: gbx_game_system_core.AttributeInitializationData
    CurrencyStat: gbx_game_system_core.GameStatData



class OakInventoryCustomizationPartData(gbx_inventory.InventoryCustomizationPartData):
    ManufacturerData: gbx_inventory.ManufacturerData
    InventoryCategory: gbx_inventory.InventoryCategoryData
    InventoryActorClass: unreal.UClass
    bEnforceRarityRestriction: bool
    InventoryAspectList: unreal.WrappedArray[gbx_inventory.InventoryAspectData]
    RarityData: gbx_inventory.InventoryRarityData
    BalanceData: CustomizationInventoryBalanceData
    InventoryData: CustomizationInventoryData



class OakInventoryCustomizationPartItem(OakInventoryItem):
    ItemMeshComponent: engine.StaticMeshComponent



class OakInventoryData(gbx_inventory.InventoryData):
    RequiredPlayerClass: PlayerClassIdentifier



class OakInventoryDisplayItem(OakInventoryItemPickup):
    ItemCardDisplayLifetime: float



class OakInventoryGenericPartData(gbx_inventory.InventoryGenericPartData):
    SourceLeague: int



class OakInventoryHealthItem(OakInventoryConsumableItem):
    HealthStat: gbx_game_system_core.GameStatData



class OakInventoryNamingStrategyData(gbx_inventory.InventoryNamingStrategyData):
    NamingStrategyToExpand: OakInventoryNamingStrategyData
    MaxContributingParts: int
    TripleNames: unreal.WrappedArray[OakInventoryNameData]
    ExtractedCombinationNames: unreal.WrappedArray[ExtractedOakInventoryCombinationNameData]
    SingleNames: unreal.WrappedArray[OakInventoryNameData]
    RelevantPartTypes: unreal.WrappedArray[int]
    def ForceExtractCombinationNamingData(self): ...
    def EnumerateInventoryParts(self, OutInventoryParts: unreal.WrappedArray[gbx_inventory.InventoryPartData]): ...


class OakInventoryRarityData(gbx_inventory.InventoryRarityData):
    WeaponDataTableRow: engine.DataTableRowHandle
    ZoneMapPOIType: ZoneMapPOITypeData



class OakInventoryRarityDataTableAttributeValueResolver(gbx_game_system_core.DataTableFunctionAttributeValueResolver):
    DataTableFromRarity: EOakInventoryRarityBalanceTableType



class OakIronBearHardpointSelectMenu(gbx_ui.GbxUmgMenu):
    CurrentLeftHardpointIndex: int
    CurrentRightHardpointIndex: int
    CurrentCoreIndex: int
    LeftHardpointComboBox: umg.ComboBoxString
    RightHardpointComboBox: umg.ComboBoxString
    CoreComboBox: umg.ComboBoxString
    def RightHardpointSelectionChanged(self, SelectedItem: str, SelectionType: int): ...
    def LeftHardpointSelectionChanged(self, SelectedItem: str, SelectionType: int): ...
    def CoreSelectionChanged(self, SelectedItem: str, SelectionType: int): ...


class OakLightProjectile(gbx_weapon.LightProjectile):
    BaseStatusEffectChance: float
    BaseStatusEffectDamage: float
    BaseStatusEffectDuration: float
    StatusEffectChanceScalar: float
    StatusEffectDamageScalar: float
    StatusEffectDurationScalar: float
    OakData: OakLightProjectileData
    def InitOakChildData(self, InitData: OakLightProjectileInitializationData): ...


class OakJAKLightProjectile(OakLightProjectile):
    JAKData: OakJAKLightProjectileData
    def PlayFeedback(self, FeedbackData: OakJAKFeedbackData, EffectLocation: core_uobject.Vector): ...


class OakLightProjectileData(gbx_weapon.LightProjectileData):
    bSuppressAmpedTracerFX: bool
    bDamageElementalInteractionsOnBounce: bool
    KillStat: gbx_game_system_core.GameStatData



class OakJAKLightProjectileData(OakLightProjectileData):
    ModCooldownTime: float
    StackLevelFeedback: unreal.WrappedArray[OakJAKFeedbackData]
    RefundAmmoFeedback: OakJAKFeedbackData
    RicochetQueryParams: gbx_game_system_core.EnvQueryParams
    bRandomizeRicochetQueryResults: bool
    NoTargetRicochetDirection: gbx_game_system_core.RelativeDirectionData
    RicochetFeedback: OakJAKFeedbackData
    RicochetProjectileData: unreal.UClass



class OakKillBasedChallenge(OakChallenge):
    RequiredWeaponType: gbx_weapon.WeaponTypeData
    RequiredManufacturer: gbx_inventory.ManufacturerData
    bRequireHostile: bool
    bRequireCrit: bool
    bRequireZoom: bool
    bRequireNoZoom: bool
    bRequireCloseRange: bool
    CloseRangeMaxDistance: float
    bRequireLongRange: bool
    LongRangeMinDistance: float
    bRequireCrouch: bool
    bRequireUnaware: bool
    bRequireMovingFullSpeed: bool
    bRequireSliding: bool
    bRequireDirectHit: bool
    bRequireIndirectHit: bool
    bRequireOneShotHealth: bool
    bRequireOneShotShield: bool
    bRequireWeaponKill: bool
    bRequireGrenadeKill: bool
    RequiredGrenadePayloadType: unreal.UClass



class OakLadderInteractData(gbx_game_system_core.LadderInteractData):
    UpwardJumpGoal: CharacterJumpGoalSetting
    UpwardJumpFinishVelocityThreshold: float
    InputDirectionalVerticalityThreshold: float



class OakCondition_League(gbx_runtime.GbxCondition):
    League: int



class OakLeagueLootChanceScaleAttributeValueResolver(gbx_game_system_core.AttributeValueResolver):
    League: int



class OakLeagueTravelStation(TravelStationObject):
    LeagueEnterTravelStationData: gbx_travel_station.LevelTravelStationData



class OakLeagueTravelStationExit(TravelStationObject):
    LeagueExitTravelStationData: gbx_travel_station.LevelTravelStationData



class OakLevelMinimapDataAsset(engine.DataAsset):
    MinimapImage: engine.Texture2D
    AppearanceScale: float



class OakLevelScriptActor(engine.LevelScriptActor):
    LevelMissionObserver: gbx_mission.MissionObserverComponent



class OakLevelStreaming(engine.GbxLevelStreamingBase):
    MapNameEnumIdx: int
    ZoneNameEnumIdx: int
    MapIndexesForCurrentZone: unreal.WrappedArray[int]
    def OnLevelLoadedChanged(self): ...


class OakMessage(engine.LocalMessage): ...


class OakLevelSyncMessage(OakMessage): ...


class OakLightBeam(gbx_weapon.LightBeam):
    BaseStatusEffectChance: float
    BaseStatusEffectDamage: float
    BaseStatusEffectDuration: float
    ModifierComponent: engine.ParticleSystemComponent
    def OnModifierParticleSystemFinished(self, PSC: engine.ParticleSystemComponent): ...
    def InitOakChildData(self, InitData: OakLightBeamInitializationData): ...


class OakLightBeamData(gbx_weapon.LightBeamData): ...


class OakLightBeamStatics(engine.BlueprintFunctionLibrary):

    def CreateOakLightBeamFromData(self, InitData: OakLightBeamInitializationData): ...


class OakLightProjectileStatics(engine.BlueprintFunctionLibrary):

    def ThrowLightProjectileFromData(self, Thrower: engine.Actor, Data: OakLightProjectileInitializationData, SourceSocket: str, MaxPredication: float, Speed: float, AnglePercent: float, DirectionOffset: core_uobject.Rotator, TargetOverride: engine.Actor, LocalTargetOffset: core_uobject.Vector, TargetSocket: str, bSpawnAsync: bool): ...
    def ThrowLightProjectile(self, Thrower: engine.Actor, Data: unreal.UClass, Flags: int, SourceSocket: str, MaxPredication: float, Speed: float, AnglePercent: float, DirectionOffset: core_uobject.Rotator, TargetOverride: engine.Actor, LocalTargetOffset: core_uobject.Vector, TargetSocket: str, bSpawnAsync: bool): ...
    def CreateOakLightProjectileFromDataAsync(self, InitData: OakLightProjectileInitializationData, ForceSpawnTimer: float): ...
    def CreateOakLightProjectileFromData(self, InitData: OakLightProjectileInitializationData): ...


class OakLoadingSceneCaptureActor(engine.Actor):
    CaptureComponent: engine.SceneCaptureComponent2D



class OakLoadingSceneMeshActor(engine.Actor):
    StaticMeshComponent: engine.StaticMeshComponent



class OakLoadingScreenExpansionData(gbx_runtime.GbxDataAsset):
    LoadingTooltips: unreal.WrappedArray[WeightedLoadingTooltip]



class OakLoadingScreenGlobals(gbx_runtime.GbxDataAsset):
    MeshOffset: core_uobject.Vector2D
    MeshScale: core_uobject.Vector2D
    MeshRotation: core_uobject.Rotator
    MeshRotationRate: core_uobject.Rotator
    CameraDistance: float
    FOVAngle: float
    BackgroundDistance: float
    TooltipSize: int
    TooltipDistanceFromEdge: float
    TooltipDuration: float
    LoadingText: str
    LoadingTooltips: unreal.WrappedArray[str]
    bAppendGearUpModeTooltipsInsteadOfReplacing: bool
    GearUpModeTooltipWeight: float
    GearUpLoadingTooltips: unreal.WrappedArray[str]
    VoiceTextColor: core_uobject.LinearColor
    VoiceTextSize: int
    VoiceWidthMarginPercentage: float
    VoiceHeightPositionPercentage: float
    SubtitlesSize: int
    SubtitlesDistanceFromEdge: float
    HideLoadingScreenDelay: float



class OakLocalPlayer(engine.LocalPlayer):

    def OnConfirmSignIntoAccount(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class OakLootableComponent(gbx_inventory.LootableComponent):
    bForceNoInstancedLoot: bool
    bNoLootBeam: bool
    SpawnLootAttributeEffects: unreal.WrappedArray[gbx_game_system_core.AttributeEffectData]
    DropLootSocketName: str
    DropLootPattern: LootSpawnPatternData
    TimeToSpawnLootOver: float
    bSpawnAttachedLootHidden: bool
    LootEnabledDelay: float
    LootAutoPickupPlayerTriggerRadius: float
    bOverrideAutoLootDelay: bool
    AutoLootDelayOverride: float
    MaxDeferredSpawnDelay: float
    def HandlePickupSpawned(self, Pickup: gbx_inventory.DroppedInventoryItemPickup): ...
    def DetachAttachedLoot(self, Pickup: gbx_inventory.DroppedInventoryItemPickup, DropPattern: LootSpawnPatternData): ...
    def DetachAllAttachedLoot(self, DropPattern: LootSpawnPatternData): ...


class OakLostLootComponent(engine.ActorComponent):
    SpawnDirectionComponent: engine.PrimitiveComponent
    InitialDropLootMassScale: float
    LootSpawnActions: unreal.WrappedArray[unreal.UClass]
    DropLootPattern: LootSpawnPatternData
    SpawnDirectionComponentName: str
    DelayBetweenSpawningItem: float
    def SpawnAndDropLoot(self, OwnerController: OakPlayerController): ...


class OakMapData(engine.MapData):
    NorthDegreeOffset: float
    bForceNormalDifficultySetting: bool
    MapNameEnumIdx: int
    ZoneNameEnumIdx: int
    MapNameEnum: unreal.UEnum
    ZoneNameEnum: unreal.UEnum
    CharacterPhysicsSettings: MapCharacterPhysicsSettings
    bDisableCombatExperienceGains: bool
    EchoDeviceScreenDataTable: engine.DataTable
    LocalZoneMapMeshData: ZoneMapMeshData
    ImpactExpansions: unreal.WrappedArray[gbx_game_system_core.ImpactExpansionData]
    def ZoneNameEnumFunc(self, ReturnValue: unreal.UEnum) -> unreal.UEnum: ...
    def MapNameEnumFunc(self, ReturnValue: unreal.UEnum) -> unreal.UEnum: ...


class OakMainMenuMapData(OakMapData):
    CharacterSelectStandIn: PlayerStandIn
    PostProcessVolume: engine.PostProcessVolume



class OakManagedActorDefinition(gbx_runtime.GbxDataAsset):
    MaxCount: gbx_game_system_core.AttributeInitializationData
    bDestroyOnOwnerDath: bool
    bDisplayInUI: bool
    DeathReapOrder: EReapOrder
    DeathReapPercent: gbx_game_system_core.AttributeInitializationData



class OakManagedActorManager(unreal.UObject):

    def NotifyActorDestroyed(self, TheActor: engine.Actor): ...


class OakManufacturerData(gbx_inventory.ManufacturerData):
    WeaponDataTableRow: engine.DataTableRowHandle
    KillStat: gbx_game_system_core.GameStatData



class OakManufacturerDataTableAttributeValueResolver(gbx_game_system_core.DataTableFunctionAttributeValueResolver):
    DataTableFromManufactuer: EOakManufacturerBalanceTableType



class MapDataFunctionLibrary(engine.BlueprintFunctionLibrary):

    def GetZoneNameEnumValue(self, WorldContextObject: unreal.UObject, ReturnValue: int) -> int: ...
    def GetZoneName(self, WorldContextObject: unreal.UObject, ReturnValue: str) -> str: ...
    def GetMapNameEnumValue(self, WorldContextObject: unreal.UObject, ReturnValue: int) -> int: ...
    def GetMapName(self, WorldContextObject: unreal.UObject, ReturnValue: str) -> str: ...


class OakMayhemModifiersDataAsset(gbx_runtime.GbxDataAsset):
    ModifierDifficultyLevels: unreal.WrappedArray[MayhemModifierDifficultyLevel]
    DifficultyLevelBaseIndex: int
    MapsToExclude: unreal.WrappedArray[str]



class OakMayhemUIDataAsset(gbx_runtime.GbxDataAsset):
    LevelUIData: unreal.WrappedArray[MayhemUILevelData]



class OakMenuGameMode(engine.GameMode): ...


class OakPlayerState(engine.PlayerState):
    ShiftUniqueId: engine.UniqueNetIdRepl
    HealthInformation: unreal.WrappedArray[gbx_game_system_core.HealthType]
    Level: int
    PlayerClass: PlayerClassIdentifier
    bIsRaidSpectating: bool
    HealthState: EHealthState
    bHasShieldEquipped: bool
    MusicThreatLevel: float
    bDuelingEnabled: bool
    TradeRequestReceptionType: ETradeRequestReceptionType
    bHasPossessionOfPawn: bool
    bHasFullControlOfPawn_ForSonyRTMP: bool
    LevelSyncMessageClass: unreal.UClass
    bPhotoModeActive: bool
    PlayerCharacterGuid: core_uobject.Guid
    bIsHeadsetPresent: bool
    PlayerLocation: core_uobject.Vector
    PlayerRotation: core_uobject.Rotator
    def ServerSetShiftUniqueId(self, InShiftUniqueId: engine.UniqueNetIdRepl): ...
    def ServerSetPlayerClass(self, InPlayerClass: PlayerClassIdentifier): ...
    def ServerSetIsHeadsetPresent(self, InHeadsetPresent: bool): ...
    def ServerReportClientMatchmakingError(self, Error: EMatchmakingError): ...
    def ServerPlayerDisplayDataChanged(self): ...
    def OnRep_ShiftUniqueId(self): ...
    def OnRep_PlayerLocation(self): ...
    def OnRep_PlayerLevel(self): ...
    def OnRep_PlayerHeadsetPresent(self): ...
    def OnRep_PlayerDownStateExitReason(self): ...
    def OnRep_PlayerClass(self): ...
    def OnRep_IsRaidSpectating(self): ...
    def GetTargetActorRotation(self, ReturnValue: core_uobject.Rotator) -> core_uobject.Rotator: ...
    def GetTargetActorLocation(self, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...
    def ClientMatchmakingConfirmPendingReservation(self, NewBeaconName: str, NewBeaconURL: str, ActivityGuid: str, bBackfillOnly: bool): ...


class OakMenuPlayerState(OakPlayerState): ...


class OakMenuSwitcherTest(gbx_ui.GbxGFxMenuSwitcher):
    TabWidget: gbx_ui.GbxGFxObject



class OakMenuSwitcherTestSubmenu(gbx_ui.GbxGFxMenuSwitcherSubmenu): ...


class OakMinimapElement(gbx_ui.GbxUserWidget):
    InRangeAlpha: float
    OutOfRangeAlpha: float
    bClampRadarEdge: bool
    MaxClampDistance: float
    bShouldDisplay: bool
    TargetActor: engine.Actor
    ElementImage: umg.Image
    ElementScale: umg.ScaleBox



class OakMinimapIconComponent(engine.ActorComponent):
    MinimapComponentType: EOakMinimapIconComponentType
    MinimapIconProperties: GFxMinimapWidgetIcon
    bBeginTrackinOnPlay: bool
    InstancedPlayerOwnerInfo: InstancedPlayerOwnerInfo
    bIsTracking: bool
    bIsTrackingInternal: bool
    bIsInControl: bool
    OakCharacterOwner: OakCharacter
    def UpdateTracking(self): ...
    def SetupTargetting(self): ...
    def SetTracking(self, bInTracking: bool): ...
    def OnRep_IsTracking(self): ...
    def OnRep_InstancedPlayerOwnerInfo(self): ...
    def OnCharacterDied(self): ...
    def DelayedUpdateIsTracking(self): ...


class OakMinimapIconTracker(unreal.UObject):
    TrackedComponents: unreal.WrappedArray[OakMinimapIconComponent]



class OakMission(gbx_mission.Mission):
    MissionLeague: int
    bAutoActivateLeagueMission: bool
    MapTravelID: int
    StarterGear: unreal.WrappedArray[MissionStarterGear]
    MissionType: EOakMissionType
    GiveWeaponObjective: gbx_mission.MissionObjective
    MissionWeaponObjectives: unreal.WrappedArray[gbx_mission.MissionObjective]
    bRequireMissionSpawnerActor: bool
    bBroadcastMissionCompletionFriendEvent: bool
    MissionDialogEnumValue: gbx_dialog.DialogEnumValue
    bSuppressDiscoveryAfterFailure: bool
    def GetNumberOfCompletedMissionChallenges(self, ReturnValue: int) -> int: ...
    def GetCurrentGameMode(self, ReturnValue: OakGameMode) -> OakGameMode: ...


class OakMissionActorComponent(engine.ActorComponent): ...


class OakAutoplayComponent(engine.SceneComponent):
    PathingData: gbx_nav.GbxNavPathingData
    MissionState: AutoplayMissionState
    CombatState: AutoplayCombatState



class OakMissionCircleOfSlaughter(OakMission):
    ActivityDisplayName: str



class OakMissionDirectorComponent(gbx_mission.MissionDirectorComponent):
    IconData: InWorldIconData
    def TriggerMissionDeliveryPlacard(self, InitiatingPlayer: OakPlayerController, bMissionAvailable: bool): ...


class OakMissionIconComponent(gbx_mission.MissionIconComponent):
    IconData: InWorldIconData
    VisibleDistanceOverride: float
    HiddenDistanceOverride: float
    bDrawIconVisibilityDistance: bool
    bDoNotOverrideCondition: bool



class OakMissionInventoryBalanceStateComponent(OakInventoryBalanceStateComponent): ...


class OakMissionItem(engine.Actor):
    ObjectiveRef: gbx_mission.MissionObjectiveReferenceWeak
    DisplayName: str
    UIStats: unreal.WrappedArray[gbx_game_system_core.UIStatPriorityData]
    MissionNameUIStatData: gbx_game_system_core.UIStatData
    FormattedDisplayName: gbx_game_system_core.GbxUIFormattedText
    bHideUntilActivated: bool
    bUniquePickup: bool
    bCreateWaypoint: bool
    LikenessInventoryBalanceData: gbx_inventory.InventoryBalanceData
    LikenessInventoryGameStage: int
    EchoLogData: unreal.WrappedArray[EchoLogData]
    RotationInContainer: core_uobject.Rotator
    BalanceStateComponent: OakMissionInventoryBalanceStateComponent
    InventoryBalanceData: gbx_inventory.InventoryBalanceData
    InventoryData: gbx_inventory.InventoryData
    Pickup: OakInventoryItemPickup
    def OnRep_BalanceStateComponent(self): ...


class OakMissionItem_Vehicle(OakMissionItem): ...


class OakMissionItemPoolData(gbx_inventory.ItemPoolData):
    PickupClass: unreal.UClass



class OakMissionPickup(OakInventoryItemPickup): ...


class OakMissionProvingGrounds(OakMission):
    ActivityDisplayName: str



class OakMissionRaid(OakMission):
    ActivityDisplayName: str



class OakMissionRareSpawn(OakMission):
    StatData: gbx_game_system_core.GameStatData
    EnemyDisplayName: str



class OakSpawner(gbx_ai.GbxSpawner):
    RegionComponent: RegionBalanceStateComponent
    TerritoryOverrideActor: engine.Actor
    TerritoryComponent: gbx_game_system_core.TerritoryComponent
    CurrentTerritory: gbx_game_system_core.TerritoryComponent
    def SetTerritoryActor(self, TerritoryActor: engine.Actor): ...
    def SetTerritory(self, Territory: gbx_game_system_core.TerritoryComponent): ...
    def ResetTerritoryToDefault(self): ...
    def GetTerritory(self, ReturnValue: gbx_game_system_core.TerritoryComponent) -> gbx_game_system_core.TerritoryComponent: ...


class OakMissionSpawner(OakSpawner):
    EnabledCondition: gbx_runtime.GbxCondition
    ObjectiveActiveEnabledCondition: gbx_mission.MissionObjectiveReference
    ObjectiveToUpdateOnDeath: gbx_mission.MissionObjectiveReference
    ResetObjective: gbx_mission.MissionObjectiveReference
    bTriggerDeathWhenRemovedFromSpawnSystem: bool
    DefendMissionObjective: gbx_mission.MissionObjectiveReference
    bOnlyAssignObjectiveBitForSelf: bool
    MissionCustomEvent: gbx_mission.MissionEventReference
    MissionEventOptionalContext: unreal.UObject
    SpawnerIconComponent: OakSpawnerIconComponent
    bSpawnerFailsafe: bool
    bPickupFailsafe: bool
    bFailsafeRequiresCompletedObjectives: bool
    NoLongerCriticalCondition: gbx_mission.MissionObjectiveReference
    bPickupFailsafeChecked: bool
    SpawnerFailsafeData: unreal.WrappedArray[MissionSpawnerFailsafeData]
    TheOneEnabledSpawnPoint: OakSpawnPointComponent
    def SendOnAllDiedMissionEvent(self, Spawner: gbx_spawn.Spawner): ...
    def OnMissionFailsafeActorDeath(self, Spawner: gbx_spawn.Spawner, Actor: engine.Actor): ...
    def OnMissionActorSuspendData(self, Spawner: gbx_spawn.Spawner, ActorData: gbx_spawn.SpawnerActorData): ...
    def OnMissionActorSpawnedOrUnsuspend(self, Spawner: gbx_spawn.Spawner, Actor: engine.Actor): ...
    def OnMissionActorFakeDeath(self, Spawner: gbx_spawn.Spawner, Actor: engine.Actor): ...


class OakMissionRareSpawner(OakMissionSpawner):
    StatData: gbx_game_system_core.GameStatData
    PercentChanceToSpawn: gbx_game_system_core.AttributeInitializationData
    def DoRareSpawnSocialLogic(self, Spawner: gbx_spawn.Spawner): ...


class OakMissionRareSpawner_WantedPoster(OakMissionSpawner):
    MissionClass: unreal.UClass
    StatData: gbx_game_system_core.GameStatData
    PrerequisiteMissions: unreal.WrappedArray[unreal.UClass]
    def OnStatChanged(self, StatContext: engine.Actor, InStatData: gbx_game_system_core.GameStatData, Amount: int): ...


class OakMissionRewardData(OakBaseMissionRewardData):
    AssociatedCompletionAchievementId: int



class OakMissionSpawnerFailsafeComponent(engine.SceneComponent):
    ArrowComponent: engine.ArrowComponent
    SpriteComponent: engine.BillboardComponent



class OakMissionTracker(gbx_mission.MissionTracker):
    CompletedMissionLevelSyncs: unreal.WrappedArray[LevelSyncCompletedMission]
    ActiveLeagueMissionGraph: gbx_mission.MissionGraph
    MissionNPCTag: gameplay_tags.GameplayTag
    CurrentOutOfMapWaypoints: unreal.WrappedArray[OutOfMapWaypointComponent]
    def OnTravelIDsChanged(self): ...
    def GetMissionCharacterSoft(self, WorldContextObject: unreal.UObject, CharacterClass: core_uobject.SoftClassPath, ReturnValue: OakCharacter) -> OakCharacter: ...
    def GetMissionCharacter(self, WorldContextObject: unreal.UObject, CharacterClass: unreal.UClass, ReturnValue: OakCharacter) -> OakCharacter: ...
    def EnumerateNPCCharactersSoft(self, CharacterClasses: unreal.WrappedArray[core_uobject.SoftClassPath]): ...
    def EnumerateNPCCharacters(self, CharacterClasses: unreal.WrappedArray[unreal.UClass]): ...
    def BroadcastFriendEventForCompletion(self, MissionClass: unreal.UClass): ...


class OakMissionVehicleSpawner(OakMissionSpawner):

    def OnActorDiedEvent(self, Spawner: gbx_spawn.Spawner, ActorData: gbx_spawn.SpawnerActorData): ...


class OakTriggerSphere(engine.TriggerSphere):
    TriggerComponent: OakTriggerComponent
    def NotifyTriggerUntouched(self, OtherActor: engine.Actor, bIsPlayer: bool): ...
    def NotifyTriggerTouched(self, OtherActor: engine.Actor, bIsPlayer: bool): ...


class OakMissionWaypoint(OakTriggerSphere):
    MissionIconComponent: OakMissionIconComponent
    MissionEventReference: gbx_mission.MissionEventReference
    MissionEventReferences: unreal.WrappedArray[gbx_mission.MissionEventReference]
    bUsePlayerAsContext: bool
    def WaypointTriggerTouched(self, OtherActor: engine.Actor, bIsPlayer: bool, ComponentTouched: engine.ActorComponent): ...


class OakTriggerBox(engine.TriggerBox):
    TriggerComponent: OakTriggerComponent
    def NotifyTriggerUntouched(self, OtherActor: engine.Actor, bIsPlayer: bool): ...
    def NotifyTriggerTouched(self, OtherActor: engine.Actor, bIsPlayer: bool): ...


class OakMissionWaypointBox(OakTriggerBox):
    MissionIconComponent: OakMissionIconComponent
    MissionEventReference: gbx_mission.MissionEventReference
    MissionEventReferences: unreal.WrappedArray[gbx_mission.MissionEventReference]
    bUsePlayerAsContext: bool
    def WaypointTriggerTouched(self, OtherActor: engine.Actor, bIsPlayer: bool, ComponentTouched: engine.ActorComponent): ...


class OakMissionWeaponComponent(engine.ActorComponent):
    MissionClass: unreal.UClass
    Objectives: unreal.WrappedArray[gbx_mission.MissionObjective]



class OakModifierAbility(OakAbility):
    bPauseModifiers: bool



class OakModifierAbility_Matchmaking(OakModifierAbility): ...


class OakModifierAbility_Mayhem(OakModifierAbility): ...


class OakModifierLists(unreal.UObject):
    MayhemModeDataPaths: unreal.WrappedArray[core_uobject.SoftObjectPath]



class OakModifierManager(unreal.UObject): ...


class OakModifierManager_Matchmaking(OakModifierManager): ...


class OakModifierManager_Mayhem(OakModifierManager):
    ActiveModifierSets: unreal.WrappedArray[MayhemModifierSet]



class OakModifierManagerActor(engine.Actor):
    EnemyHealthScalar: engine.GbxAttributeFloat
    EnemyShieldScalar: engine.GbxAttributeFloat
    EnemyArmorScalar: engine.GbxAttributeFloat
    MayhemLootMultiplier: engine.GbxAttributeFloat
    MayhemEridiumMultiplier: engine.GbxAttributeFloat
    MayhemSkillScalar: engine.GbxAttributeFloat
    MayhemEnvironmentScalar: engine.GbxAttributeFloat
    GlobalRarityWeightLevelBias: engine.GbxAttributeFloat
    GlobalCommonRarityWeightModifier: engine.GbxAttributeFloat
    GlobalUncommonRarityWeightModifier: engine.GbxAttributeFloat
    GlobalRareRarityWeightModifier: engine.GbxAttributeFloat
    GlobalVeryRareRarityWeightModifier: engine.GbxAttributeFloat
    GlobalLegendaryRarityWeightModifier: engine.GbxAttributeFloat



class OakModifierManagerAttributeContextResolver(gbx_game_system_core.AttributeContextResolver): ...


class OakModifierSetListDataAsset(gbx_runtime.GbxDataAsset):
    ModifierSets: unreal.WrappedArray[OakModifierSet]



class OakMusicSystemConfiguration(gbx_runtime.GbxDataAsset):
    ThreatLevelRtpc: wwise_audio.WwiseRtpc
    InterestLevelRtpc: wwise_audio.WwiseRtpc
    ParamSmoothingAttackCoeff: float
    ParamSmoothingDecayCoeff: float
    ThreatSummingDistance: float
    ThreatScaleByLevelDifference: engine.RuntimeFloatCurve
    StaleThreatDuration: float
    MaxInactiveDuration: float
    InterestLevelLFODurationInSeconds: float
    InterestLevelLFOAmplitude: float
    InterestBumpOnCombatIntensify: MusicInterestASR
    InterestBumpOnNewMapArea: MusicInterestASR



class OakMusicAmbientPerformer(unreal.UObject):
    ThreatLevel: float
    InterestLevel: float
    def Tick(self, AudioTimeSeconds: float): ...
    def StopAmbientMusic(self): ...
    def BeginAmbientMusic(self, MusicProvider: OakMusicProvider, AudioTimeSeconds: float): ...


class OakMusicData(gbx_runtime.GbxDataAsset):
    SystemConfiguration: OakMusicSystemConfiguration
    StartMusicEvent: wwise_audio.WwiseEvent
    StopMusicEvent: wwise_audio.WwiseEvent
    LayerUpdateFrequencyInBars: int
    NumPickupBeats: int
    AmbientMusicPerformerClass: unreal.UClass



class OakMusicProvider(engine.Actor):
    MusicAudioComponent: wwise_audio.WwiseAudioComponent
    CurrentThreatLevel: float
    CurrentInterestLevel: float
    AssociatedMusicData: OakMusicData
    AmbientMusicPerformer: OakMusicAmbientPerformer
    bManualMode: bool
    bForceLegacyCompatibility: bool
    ArtificialMinimumThreat: float
    def StopMusic(self): ...
    def SetInterestLevel(self, NewInterestLevel: float): ...
    def SetCombatLevel(self, NewCombatLevel: float): ...
    def PlayMusic(self, MusicData: OakMusicData): ...
    def OnMusicBeat(self, MusicTiming: wwise_audio.WwiseMusicTiming): ...
    def NotifyMapAreaDiscovered(self): ...
    def NotifyItemSpotted(self, InventoryItemPickup: OakInventoryItemPickup): ...
    def NotifyCombatIntensifies(self): ...
    def GetSectionName(self, ReturnValue: str) -> str: ...
    def GetPartName(self, ReturnValue: str) -> str: ...
    def GetOakMusicProvider(self, WorldContextObject: unreal.UObject, ReturnValue: OakMusicProvider) -> OakMusicProvider: ...
    def GetLayerList(self, ReturnValue: str) -> str: ...
    def GetInterestLevel(self, ReturnValue: float) -> float: ...
    def GetCurrentBeatDurationInSeconds(self, ReturnValue: float) -> float: ...
    def GetCombatLevel(self, ReturnValue: float) -> float: ...
    def GetAudioTimeOfNextBeat(self, ReturnValue: float) -> float: ...
    def GetAudioTimeOfNextBar(self, ReturnValue: float) -> float: ...
    def ApplyInterestModifier(self, ModifierAmount: float, ModifierDuration: float): ...


class OakNavComponent(gbx_nav.GbxNavComponent):
    DrivingData: VehicleDrivingDataAsset
    MyVehicle: OakVehicle
    MyVehicleFlight: gbx_nav.AIVehicleFlightComponent
    MyTurret: SeatPawn
    MyOakAIController: OakAIController
    ReverseState: OakNavReverseState
    OakVehicleNavCorrecter: OakVehicleNavCorrecter
    def TeleportVehicleToGoal(self, ReturnValue: bool) -> bool: ...
    def ShowDebugVehicleNav(self, bEnable: bool): ...
    def SetStuckTeleport(self, Actor: engine.Actor, StuckTeleport: StuckTeleport): ...
    def SetScriptedMoveTo(self, Location: core_uobject.Vector, EntryLocation: core_uobject.Vector, ReachRadius: float, WantedSpeed: float, bMaxSpeed: bool, bUseBoost: bool, Duration: float, DotDestination: float, bGoBackward: bool): ...
    def GetDesiredSpeed(self, ReturnValue: float) -> float: ...
    def ClearSpeedOverride(self, Priority: ESpeedModifierOverridePriority): ...
    def ClearScriptedMoveTo(self): ...
    def ClearDrivingOverride(self, Priority: EDrivingOverridePriority): ...
    def AddSpeedRubberbandOverride(self, InRubberbandSpeedData: RubberbandSpeedData, Priority: ESpeedModifierOverridePriority, WantedSpeed: float, bUseBoost: bool, bForceReverse: bool, bForceHandbrake: bool, SteeringValue: float, Duration: float, SpeedHack: float, bGoBackward: bool): ...
    def AddSpeedOverride(self, Priority: ESpeedModifierOverridePriority, WantedSpeed: float, bMaxSpeed: bool, bUseBoost: bool, bForceReverse: bool, bForceHandbrake: bool, SteeringValue: float, Duration: float, SpeedHack: float, bGoBackward: bool): ...
    def AddDrivingOverride(self, Priority: EDrivingOverridePriority, bDisableTurnHandBrake: bool): ...


class OakNavWorld(gbx_nav.GbxNavWorld): ...


class OakNogDroneContainerComponent(gbx_game_system_core.GbxSkeletalMeshComponent):
    DroneDigistructTime: float
    DroneHealthPercentOfNog: float
    bDronesDieOnHealthDepleted: bool
    DroneReplenishThreshold: int
    DroneReplenishMin: int
    ShouldReplenishDronesKey: gbx_game_system_core.GbxBlackboardKeySelector
    DroneShieldEnabledKey: gbx_game_system_core.GbxBlackboardKeySelector
    DroneDeathFX: engine.ParticleSystem
    DroneScatterCount: int
    ScatterDroneClass: unreal.UClass
    HealDroneClass: unreal.UClass
    DefendDroneClass: unreal.UClass
    AttackDroneClass: unreal.UClass
    DroneAliveCount: int
    Nog: gbx_game_system_core.GbxCharacter
    def ToggleDroneBone(self, DroneIndex: int, bToggleOn: bool, bInstant: bool): ...
    def ToggleDrone(self, DroneIndex: int, bToggleOn: bool, bInstant: bool): ...
    def ToggleAllDrones(self, bToggleOn: bool, bInstant: bool): ...
    def StopReplenishingDrones(self): ...
    def ReplenishDrones(self, TotalNeeded: int, DelayBetweenSpawn: float, bInstant: bool, DroneListOverrideCSV: str): ...
    def KillDrone(self, DroneIndex: int): ...
    def KillAllDrones(self, bScatterDrones: bool): ...
    def IsDroneEnabled(self, DroneIndex: int, ReturnValue: bool) -> bool: ...
    def GetDroneTransform(self, DroneIndex: int, ReturnValue: core_uobject.Transform) -> core_uobject.Transform: ...
    def GetDroneName(self, DroneIndex: int, ReturnValue: str) -> str: ...
    def FindDroneIndexByBoneName(self, BoneName: str, ReturnValue: int) -> int: ...
    def DroneInitialization(self): ...
    def DeployRandomDrones(self, DroneCount: int, DroneClass: unreal.UClass, Target: engine.Actor): ...
    def DeployRandomDrone(self, DroneClass: unreal.UClass, Target: engine.Actor): ...
    def DeployDrone(self, DroneIndex: int, DroneClass: unreal.UClass, Target: engine.Actor): ...
    def ApplyDamageToDrones(self, Damage: float, HitLocation: core_uobject.Vector): ...
    def ApplyDamageToDrone(self, DroneIndex: int, Damage: float): ...


class TrooperAnimInstance(OakCharacterAnimInstance):
    LeftHandWeaponIKOffsetLocationX: float



class OakNPCAnimInstance(TrooperAnimInstance):
    NPCEmoteWeightModifier: float
    AddPoseSlotWeight: float
    FullEmoteWeight: float
    FullEmoteWeightWithSlot: float
    FullBodySlotWeight: float



class OakNpcGreetingComponent(engine.ActorComponent):
    GreetingDistance: gbx_game_system_core.GbxParam
    HelloCooldown: gbx_game_system_core.GbxParam
    GoodbyeCooldown: gbx_game_system_core.GbxParam
    IdleCooldown: gbx_game_system_core.GbxParam
    InUseCooldown: gbx_game_system_core.GbxParam
    ForgetActorTime: gbx_game_system_core.GbxParam
    PerceptionComponent: aimodule.AIPerceptionComponent
    DialogComponent: gbx_dialog.GbxDialogComponent
    MissionObserverComponent: gbx_mission.MissionObserverComponent
    MissionDirectorComponent: OakMissionDirectorComponent
    def OnPerceptionUpdated(self, UpdatedActors: unreal.WrappedArray[engine.Actor]): ...
    def OnDialogStarted(self): ...


class OakNPCMailData(gbx_runtime.GbxDataAsset):
    SenderDisplayName: str
    Subject: str
    Body: str
    ItemPoolReward: gbx_inventory.ItemPoolData



class OakOnlineNetworkOptionsMenu(gbx_ui.GbxUmgMenu):
    NetworkOptionList: gbx_ui.GbxGridListWidget
    OptionItemData: unreal.WrappedArray[OnlineNetworkOptionData]
    def OnOptionSelected(self, SelectedItem: gbx_ui.GbxListItem): ...
    def OnOptionClicked(self, ClickedItem: gbx_ui.GbxListItem): ...
    def HandleOptionSelected(self, SelectedItem: gbx_ui.GbxListItem, Data: OnlineNetworkOptionData): ...


class OakOnlineNetworkOptionsItemWidget(gbx_ui.GbxListItem):

    def HandleDataChanged(self, Data: OnlineNetworkOptionData): ...


class OakOnlinePlayerDetailsMenu(gbx_ui.GbxUmgMenu):
    ChoiceList: gbx_ui.GbxScrollBoxList
    HintText: umg.TextBlock
    ChoiceIds: unreal.WrappedArray[str]
    def SetupDetailsWidget(self, PlayerInfo: OakOnlineLobbyPlayerInfo): ...
    def OnChoiceClicked(self, ListItem: gbx_ui.GbxListItem): ...


class OakOnlineSessionClient(online_subsystem_utils.OnlineSessionClient): ...


class OakOnlineStatsHelper(unreal.UObject):
    ManufacturerStats: unreal.WrappedArray[gbx_game_system_core.GameStatData]
    GunTypeStats: unreal.WrappedArray[gbx_game_system_core.GameStatData]
    PlaytimeStat: gbx_game_system_core.GameStatData
    SlotMachineWinsStat: gbx_game_system_core.GameStatData
    GuardianRankStat: gbx_game_system_core.GameStatData
    BadassesKilledStat: gbx_game_system_core.GameStatData
    def OnStatIncrement(self, StatContext: engine.Actor, StatId: gbx_game_system_core.GameStatData, Amount: int): ...


class OakOptionalObjectiveRewardData(OakBaseMissionRewardData): ...


class OakPassiveAbility(OakPlayerAbility):
    Grade: int
    TriggeredEffect: TriggeredPassiveAbilityEffect
    bRegisterAsHUDPassiveAbility: bool
    Icon: engine.Texture
    HUDIconData: OakPassiveAbilityHUDIconData
    def TriggerPassiveAbilityEffect(self): ...
    def OnTriggeredEffectEnded(self): ...
    def OnGradeChanged(self): ...
    def IsTriggeredEffectActive(self, ReturnValue: bool) -> bool: ...
    def GetManualHUDIconValues(self, outStackCount: int, outDuration: float, outTimeRemaining: float): ...


class OakPassiveAbility_Siren(OakPassiveAbility):
    bIsElementallyAttunedPassive: bool
    AttunedElementData: OakActionAbilityAugmentData_PhaseTrance_Element
    CurrentGhostArmControllerSpec: OakPassiveAbilitySirenGhostArmControllerSpec
    def OnAttunedElementChanged(self): ...
    def GetAttunedType(self, ReturnValue: EPhaseTranceElementalType) -> EPhaseTranceElementalType: ...
    def ActivateSirenGhostArms(self, InSpec: OakPassiveAbilitySirenGhostArmControllerSpec): ...


class OakPassiveAbilityAttributeEffectMutatorData(gbx_game_system_core.AttributeEffectMutatorData):
    GradeToStartApplyingEffect: int
    PerGradeUpgradeInterval: int
    PerGradeUpgrade: gbx_game_system_core.AttributeInitializationData
    BonusUpgrades: unreal.WrappedArray[BonusAttributeModifierUpgrade]



class OakPassiveAbilityBuffAspectData(gbx_inventory.InventoryAspectData):
    Buffs: unreal.WrappedArray[PassiveAbilityBuffData]



class OakPassiveAbilityBuffProviderInterface(core_uobject.Interface): ...


class OakPatchHelperBlueprintFunctionLibrary(engine.BlueprintFunctionLibrary):

    def BlueprintFix_OAKLIVE_4119(self, WorldContextObject: unreal.UObject, ToLayer: str, TransitionDuration: float): ...
    def BlueprintFix_OAKLIVE_1578(self, Target: engine.Actor, LookAtActor: engine.Actor, bAimAtActor: bool, bFireWeaponAtActor: bool, OptionalStance: gbx_game_system_core.StanceDataProvider): ...
    def BlueprintFix_OAK_216536_OnScriptedMoveComplete2(self): ...
    def BlueprintFix_OAK_216536_OnScriptedMoveComplete1(self): ...
    def BlueprintFix_OAK_216536_MRE_MoxxiTokenDone(self): ...
    def BlueprintFix_OAK_216536_MRE_GivePiecesComplete(self): ...


class OakPawnAttachSlotComponent(gbx_game_system_core.PawnAttachSlotComponent):
    bLockInputDuringAttach: bool
    bLockInputDuringDetach: bool
    bTransferInventory: bool
    bCanUseWhileNotPossessingPrimaryCharacter: bool
    bModifyHUD: bool
    bHideHUDWhileAttaching: bool
    bHideHUDWhileDetaching: bool
    bClearSelfElementalEffectsOnAttach: bool
    bClearPawnElementalEffectsOnAttach: bool
    bBlockPawnElementalEffectsWhileAttached: bool
    bAllowPetsWhileAttached: bool
    bAllowEchoDeviceEquipping: bool
    bHidePrimaryWeaponWhileAttached: bool
    bHideHolsteredWeaponWhileAttached: bool
    bMustMatchDuelTeamOfInstigator: bool
    bUseStatusMenuCameraMode: bool
    CameraModeOptions: PawnAttachCameraModeOptions
    CameraModesSet: gbx_camera_modes.CameraModeSetData
    bOverrideCrosshairScreenPosition: bool
    CrosshairScreenPosition: core_uobject.Vector2D
    bPlayOccupiedIdleAudioOnLocalPlayerOnly: bool
    OccupiedIdleAudioEvent: wwise_audio.WwiseEvent
    OccupiedIdleStopAudioEvent: wwise_audio.WwiseEvent
    bTransitionIsHijacked: bool
    HijackerController: engine.Controller
    bIsAllowedToDetachWhenHiJack: bool
    bIsLeapOnTarget: bool
    bIsSeatSwap: bool
    HijackAttachSlot: OakPawnAttachSlotComponent
    def GetWeaponRotation(self, bWorldSpace: bool, ReturnValue: core_uobject.Rotator) -> core_uobject.Rotator: ...
    def GetHijackedOccupant(self, ReturnValue: engine.Pawn) -> engine.Pawn: ...


class OwnedActionAbilityActor(engine.Actor):
    bBlocksActionAbilityShutdown: bool
    OwnerActionAbility: OakActionAbility
    OwnerPlayer: OakCharacter_Player
    bIsShuttingDown: bool
    def ReleaseFromActionAbility(self): ...
    def OnShutdownRequested(self, bForced: bool): ...
    def OnRep_IsShuttingDown(self): ...
    def GetMaxTime(self, ReturnValue: float) -> float: ...


class OakPhaseWebSphere(OwnedActionAbilityActor):
    ActivationComboData: PhaseTranceActivationComboData
    IgnoredLinkDamageSourceClasses: unreal.WrappedArray[unreal.UClass]
    SapDamageReturnRate: float
    SphereOutOfBoundsBuffer: float
    CachedOwnerActionAbilityPhaseTrance: OakActionAbility_PhaseTrance
    OwnerTeam: gbx_game_system_core.TeamComponent
    LinkedTargetList: OakPhaseWebSphereLinkedTargetList
    ListLock: OakPhaseWebSphereListLock
    def RemoveAllWebTargets(self): ...
    def OnWebTargetRemoved(self, Target: OakCharacter): ...
    def OnWebTargetAdded(self, Target: OakCharacter): ...
    def OnEndActorOverlap(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int): ...
    def OnBeginActorOverlap(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def GetWebTargets(self, ReturnValue: unreal.WrappedArray[OakPhaseWebSphereLinkedTargetItem]) -> unreal.WrappedArray[OakPhaseWebSphereLinkedTargetItem]: ...
    def GetSharedDamageData(self, LinkedTarget: OakCharacter, Damage: float, DamageSourceClass: unreal.UClass, SharedDamageData: OakPhaseWebSphere_SharedDamageData, ReturnValue: bool) -> bool: ...
    def GetOwnerActionAbilityPhaseTrance(self, ReturnValue: OakActionAbility_PhaseTrance) -> OakActionAbility_PhaseTrance: ...
    def GetBeamDataForLinkedTarget(self, LinkedTarget: OakCharacter, outBeamData: OakPhaseWebSphereBeamData): ...
    def ApplySapRefund(self, RawAccumulateDamage: float): ...


class OakPlayerAbilityData(gbx_runtime.GbxDataAsset):
    AbilityTreeData: OakPlayerAbilityTreeData
    PlayerAbilitySlots: unreal.WrappedArray[OakPlayerAbilitySlotData]



class OakPlayerAbilityEventHub(unreal.UObject): ...


class OakPlayerAbilityEventHub_Beastmaster(OakPlayerAbilityEventHub): ...


class OakPlayerAbilityEventHub_Gunner(OakPlayerAbilityEventHub):
    IronCubIconFrameName: str



class OakPlayerAbilityEventHub_Operative(OakPlayerAbilityEventHub):
    DigicloneIconFrameName: str



class OakPlayerAbilityEventHub_Siren(OakPlayerAbilityEventHub): ...


class OakPlayerAbilityEventHubStatics(engine.BlueprintFunctionLibrary): ...


class OakPlayerAbilityEventHubStatics_Gunner(OakPlayerAbilityEventHubStatics):

    def FireIronBearExitedAndPlayerReady(self, Player: OakCharacter_Player, IronBear: OakCharacter_IronBear): ...
    def FireIronBearEnteredAndPlayerReady(self, Player: OakCharacter_Player, IronBear: OakCharacter_IronBear): ...


class OakPlayerAbilityEventHubStatics_Operative(OakPlayerAbilityEventHubStatics):

    def FireOperativeGotKill(self, Player: OakCharacter_Player): ...
    def FireOperativeDigicloneDestroyed(self, Player: OakCharacter_Player, Digiclone: OakCharacter): ...
    def FireOperativeCalledShotActivated(self, Player: OakCharacter_Player): ...
    def FireNewOperativeDigicloneSpawned(self, Player: OakCharacter_Player, Digiclone: OakCharacter): ...


class OakPlayerAbilityEventHubStatics_Beastmaster(OakPlayerAbilityEventHubStatics):

    def FireBeastmasterPetSummonStarted(self, Player: OakCharacter_Player): ...
    def FireBeastmasterPetSpawned(self, Player: OakCharacter_Player, NewPet: OakCharacter): ...
    def FireBeastmasterPetReleased(self, Player: OakCharacter_Player, NewPet: OakCharacter): ...


class OakPlayerAbilityEventHubStatics_Siren(OakPlayerAbilityEventHubStatics):

    def FirePhaseTranceGraspMissed(self, Player: OakCharacter_Player): ...
    def FirePhaseTranceGraspedTarget(self, Player: OakCharacter_Player, GraspTarget: gbx_game_system_core.GbxCharacter): ...
    def FirePhaseTranceActivated(self, Player: OakCharacter_Player): ...
    def FirePhaseGraspTargetKilled(self, Player: OakCharacter_Player, Killer: engine.Actor, GraspTarget: gbx_game_system_core.GbxCharacter): ...


class OakPlayerAbilityHUDItemData(engine.DataAsset):
    Icon: engine.Texture
    StartAudioEvent: wwise_audio.WwiseEvent
    StopAudioEvent: wwise_audio.WwiseEvent



class OakPlayerAbilityHUDItemValueProviderInterface(core_uobject.Interface): ...


class OakPlayerAbilityManagerComponent(OakCharacterAbilityManagerComponent):
    BaseOakPlayerAbilities: OakPlayerAbilityData
    PlayerAbilityEventHubClass: unreal.UClass
    FirstAbilityPointLevel: int
    PlayerAbilityTree: OakPlayerAbilityTree
    PlayerAbilityEventHub: OakPlayerAbilityEventHub
    AbilitySlotList: OakPlayerAbilitySlotList
    AugmentSlotList: OakActionAbilityAugmentSlotList
    ActionAbilities: unreal.WrappedArray[OakActionAbility]
    PlayerAbilityHUDItemList: OakPlayerAbilityHUDItemList
    SlotConfigurationList: OakActionAbilityAugmentSlotConfigurationList
    LockedSkillBranches: unreal.WrappedArray[OakPlayerAbilityTreeBranchData]
    bAbilityDataForSaveGameSet: bool
    AbilityDataForSaveGame: OakPlayerAbilitySaveGameData
    OriginalSavedGrade: int
    OriginalSavedAbilityPoints: int
    def SetSlotAugment(self, AbilityClass: unreal.UClass, AugmentSlot: OakActionAbilityAugmentSlotData, Augment: OakActionAbilityAugmentData): ...
    def SetSlotAbilityClass(self, AbilitySlot: OakPlayerAbilitySlotData, AbilityClass: unreal.UClass): ...
    def PurchaseAbilityRespec(self): ...
    def OnRep_AbilityDataForSaveGameSet(self): ...
    def OnPlayerLevelUp(self, OldExperienceLevel: int, NewExperienceLevel: int): ...
    def OnPlayerAbilityTreeReset(self): ...
    def OnPlayerAbilityTreePointsChanged(self, NewPoints: int): ...
    def OnPlayerAbilityTreeGradeChanged(self, NewGrade: int): ...
    def IsAbilitySlotted(self, AbilityClass: unreal.UClass, ReturnValue: bool) -> bool: ...
    def IsAbilityAugmentSlotted(self, AbilityClass: unreal.UClass, Augment: OakActionAbilityAugmentData, ReturnValue: bool) -> bool: ...
    def IsAbilityAugmentInSlot(self, AbilityClass: unreal.UClass, Augment: OakActionAbilityAugmentData, AugmentSlot: OakActionAbilityAugmentSlotData, ReturnValue: bool) -> bool: ...
    def HasPurchasedPlayerAbility(self, AbilityClass: unreal.UClass, ReturnValue: bool) -> bool: ...
    def GetSlotAbilityClass(self, AbilitySlot: OakPlayerAbilitySlotData, ReturnValue: unreal.UClass) -> unreal.UClass: ...
    def GetSlotAbility(self, AbilitySlot: OakPlayerAbilitySlotData, ReturnValue: OakPlayerAbility) -> OakPlayerAbility: ...
    def GetAbilitySlot(self, AbilityClass: unreal.UClass, ReturnValue: OakPlayerAbilitySlotData) -> OakPlayerAbilitySlotData: ...
    def GetAbilityAugmentInSlot(self, AbilityClass: unreal.UClass, AugmentSlot: OakActionAbilityAugmentSlotData, ReturnValue: OakActionAbilityAugmentData) -> OakActionAbilityAugmentData: ...
    def FindActionAbility(self, ActionAbilityClass: unreal.UClass, ReturnValue: OakActionAbility) -> OakActionAbility: ...
    def ClientUpgradeAbilityTreeItem(self, ItemData: OakPlayerAbilityTreeItemData): ...
    def ClientResetAbilities(self): ...
    def ClientRecordModSlotChange(self, AbilityClass: unreal.UClass, ModSlotData: OakActionAbilityAugmentSlotData, ModAugmentData: OakActionAbilityAugmentData, AugmentData: OakActionAbilityAugmentData): ...
    def CanAugmentBeUsed(self, InAugmentData: OakActionAbilityAugmentData, ReturnValue: bool) -> bool: ...


class OakPlayerAbilitySlotData(gbx_runtime.GbxDataAsset):
    DisplayName: str
    Description: str
    LevelUnlock: int
    SupportedAbilityClasses: unreal.WrappedArray[unreal.UClass]
    UISlotNumber: int
    UISlot: ESkillWidgetSlot



class OakPlayerAbilitySlotsData(gbx_runtime.GbxDataAsset):
    ActionAbilitySlots: unreal.WrappedArray[OakActionAbilitySlot]
    PassiveAbilitySlots: unreal.WrappedArray[OakAbilitySlot]



class OakPlayerAbilityStatics(engine.BlueprintFunctionLibrary):

    def QueryAllies(self, SourcePlayer: OakCharacter_Player, Spec: OakPlayerAbilityAllyQuerySpec, ReturnValue: OakPlayerAbilityAllyQueryResult) -> OakPlayerAbilityAllyQueryResult: ...


class OakPlayerAbilityTree(unreal.UObject):
    Owner: OakPlayerAbilityManagerComponent
    TreeActionAbilityClass: unreal.UClass
    TreeData: OakPlayerAbilityTreeData
    Branches: unreal.WrappedArray[AbilityTreeBranch]
    Tiers: unreal.WrappedArray[AbilityTreeTier]
    Items: unreal.WrappedArray[AbilityTreeItem]
    AbilityPoints: int
    def OnRep_AbilityPoints(self): ...
    def GiveAbilityPoints(self, Points: int): ...
    def DEBUG_AddPointToAbilityTreeItem(self, ItemData: OakPlayerAbilityTreeItemData): ...
    def ClientSetTreeGrade(self, NewTreeGrade: int): ...
    def ClientAddItemPoint(self, ItemData: OakPlayerAbilityTreeItemData): ...
    def AddPointToAbilityTreeItem(self, ItemData: OakPlayerAbilityTreeItemData): ...


class OakPlayerAbilityTreeBranchData(gbx_runtime.GbxDataAsset):
    BranchName: str
    BranchColorInfo: BranchColorInfo
    Tiers: unreal.WrappedArray[OakPlayerAbilityTreeTierData]



class OakPlayerAbilityTreeData(gbx_runtime.GbxDataAsset):
    GradePointsToUnlockFirstTier: int
    Branches: unreal.WrappedArray[OakPlayerAbilityTreeBranchData]
    bUsesTreeActionAbility: bool
    TreeActionAbilityClass: unreal.UClass



class OakPlayerAbilityTreeTierData(gbx_runtime.GbxDataAsset):
    BranchPointsToUnlock: int
    Items: unreal.WrappedArray[OakPlayerAbilityTreeItemData]
    WingItems: unreal.WrappedArray[OakPlayerAbilityTreeItemData]



class OakPlayerAbilityTreeItemData(gbx_runtime.GbxDataAsset):
    MaxPoints: int
    LayoutInfo: ESkillItemLayoutInfo
    ItemFrameName: str
    ItemDisplayType: ESkillItemDisplayType
    ParentSkillName: str
    FlavorText: str
    EquipVO: str



class OakPlayerAbilityTreeItemData_Ability(OakPlayerAbilityTreeItemData):
    AbilityClass: unreal.UClass



class OakPlayerAbilityTreeItemData_GbxDataAsset(OakPlayerAbilityTreeItemData): ...


class OakPlayerAbilityTreeItemData_ActionAbilityAugment(OakPlayerAbilityTreeItemData_GbxDataAsset):
    AugmentData: OakActionAbilityAugmentData



class OakPlayerAbilityTreeItemData_ActionAbilityAugmentSlot(OakPlayerAbilityTreeItemData_GbxDataAsset):
    AugmentSlotData: OakActionAbilityAugmentSlotData



class OakPlayerAbilityTreeItemData_PlayerCharacterAugment(OakPlayerAbilityTreeItemData_GbxDataAsset):
    AugmentData: PlayerCharacterComponentAugmentData



class OakFirstPersonData(unreal.UObject):
    LeadingInfo: unreal.WrappedArray[ViewLeadingInfo]
    MinSpeed2DWhenTryingToMove: float
    WeaponAngleAlphaExp: float
    RAddAlphaInterpSpeed: float
    PistolStockAddAlphaInterpSpeed: float
    MantleReachInterpInSpeed: float
    MantleReachInterpOutSpeed: float
    MantleReachOutMaximumUpwardVelocity: float
    MantleReachOutMinimumHeightOffGround: float
    ReloadVariationTranslationMin: core_uobject.Vector
    ReloadVariationTranslationMax: core_uobject.Vector
    ReloadVariationRotationMin: core_uobject.Rotator
    ReloadVariationRotationMax: core_uobject.Rotator
    BringHandsDownReturnRate: float
    BringHandsDownLocationOffset: core_uobject.Vector
    BringHandsDownRotationOffset: core_uobject.Rotator
    BringHandsDownCurveExponent: float



class OakPlayerCameraManager(gbx_camera_modes.PlayerCameraModesManager):
    CustomLightingSettings: unreal.WrappedArray[engine.PostProcessSettings]
    CustomActorContainerStack: unreal.WrappedArray[OakUIActorContainer]



class OakPlayerInput(gbx_input.GbxPlayerInput): ...


class OakPlayerMissionComponent(gbx_mission.PlayerMissionComponent):
    CurrentMissionDelivery: MissionDeliveryData
    CachedPlaythroughIndex: int
    PlaythroughsCompleted: int
    bShowNewPlaythroughNotification: bool
    def ServerRequestMissionData(self): ...
    def ServerNotifyMissionDeliveryChoice(self, bMissionAccepted: bool, Mission: unreal.UClass, MissionGiver: engine.Actor): ...
    def ServerGrantStarterGear(self, MissionObjective: gbx_mission.MissionObjective, MissionClass: unreal.UClass): ...
    def ServerGrantMissionWeapon(self, MissionClass: unreal.UClass): ...
    def ServerApplyMissionRewards(self, MissionClass: unreal.UClass): ...
    def OnWeaponChanged(self, Weapon: gbx_weapon.Weapon, LastWeapon: gbx_weapon.Weapon): ...
    def OnPawnChanged(self, Pawn: engine.Pawn, OldPawn: engine.Pawn): ...
    def OnMissionFastForwardPossible(self): ...
    def OnMissionDeliveryChoice(self, bMissionAccepted: bool, bEmergencyExit: bool, MissionIndex: int, MissionGiver: engine.Actor): ...
    def OnFastForwardDialogClicked(self, SourceDialog: GbxGFxDialogBox, ChoiceNameId: str, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def ClientUnlockAssociatedAchievement(self, OakPC: OakPlayerController, AchievementId: int): ...
    def ClientReceiveMissionData(self, MissionData: gbx_mission.ReplicatedMissionData): ...
    def ClientMissionKickoffPlayed(self, MissionClass: unreal.UClass): ...
    def ClientInitiateMissionDelivery(self, DeliveryData: MissionDeliveryData): ...


class OakPlayerTeleportData(engine.DataAsset):
    TransitionDurationData: gbx_game_system_core.AttributeInitializationData
    bTriggerOakTriggersAlongTeleport: bool
    HorizontalCurve: engine.RuntimeFloatCurve
    VerticalCurve: engine.RuntimeFloatCurve
    AnimationClass: unreal.UClass



class OakProfile(gbx_game_system_core.GbxProfile):
    GamepadHipSensitivityLevel: int
    GamepadZoomedSensitivityLevel: int
    GamepadVehicleSensitivityLevel: int
    GamepadMovementDeadZoneX: float
    GamepadMovementDeadZoneY: float
    GamepadLookDeadZoneInnerX: float
    GamepadLookDeadZoneOuterX: float
    GamepadLookDeadZoneInnerY: float
    GamepadLookDeadZoneOuterY: float
    GamepadVehicleMovementDeadZoneX: float
    GamepadVehicleMovementDeadZoneY: float
    GamepadVehicleLookDeadZoneInnerX: float
    GamepadVehicleLookDeadZoneOuterX: float
    GamepadVehicleLookDeadZoneInnerY: float
    GamepadVehicleLookDeadZoneOuterY: float
    GamepadLeftDeadZoneInner: float
    GamepadLeftDeadZoneOuter: float
    GamepadRightDeadZoneInner: float
    GamepadRightDeadZoneOuter: float
    bDefaultDeadZoneInnerUpdated: bool
    GamepadLookAxialDeadZoneScale: float
    GamepadMoveAxialDeadZoneScale: float
    bGamepadUseAdvancedHipAimSettings: bool
    bGamepadUseAdvancedZoomedAimSettings: bool
    bGamepadUseAdvancedVehicleAimSettings: bool
    GamepadHipYawRate: float
    GamepadHipPitchRate: float
    GamepadHipExtraYaw: float
    GamepadHipExtraPitch: float
    GamepadHipRampUpTime: float
    GamepadHipRampUpDelay: float
    GamepadZoomedYawRate: float
    GamepadZoomedPitchRate: float
    GamepadZoomedExtraYaw: float
    GamepadZoomedExtraPitch: float
    GamepadZoomedRampUpTime: float
    GamepadZoomedRampUpDelay: float
    GamepadVehicleYawRate: float
    GamepadVehiclePitchRate: float
    GamepadVehicleExtraYaw: float
    GamepadVehicleExtraPitch: float
    GamepadVehicleRampUpTime: float
    GamepadVehicleRampUpDelay: float
    bIronsightAimAssist: bool
    WalkingButtonScheme: EWalkingButtonScheme
    WalkingJoystickScheme: EJoystickScheme
    DrivingButtonScheme: EDrivingButtonScheme
    DrivingJoystickScheme: EJoystickScheme
    MouseADSScale: float
    MouseVehicleScale: float
    bMouseIronsightAimAssist: bool
    VehicleInputMode: EVehicleInputMode
    bWeaponAimToggle: bool
    bMantleRequiresButton: bool
    bFixedMinimapRotation: bool
    bFixedInitialZoneMapRotation: bool
    bCombatNumberLongFormat: bool
    bShowMinimapLegendaries: bool
    bMapInvertPitch: bool
    bMapInvertYaw: bool
    Difficulty: EPlayerDifficultySetting
    bSwapDualWieldControls: bool
    bUsePlayerCallouts: bool
    LastStatusMenuPage: str
    InventoryScreenLastFilter: unreal.WrappedArray[OakProfileLastInventoryFilterInfo]
    TutorialInfo: OakProfileMenuTutorialInfo
    bHasSeenFirstBoot: bool
    SubsAndCCSize: float
    CCAndSubsBackgroundOpacity: float
    SeenNewsItems: unreal.WrappedArray[str]
    DefaultNetworkType: ENetworkType
    DefaultInviteType: EInviteType
    DesiredCrossplayState: ECrossplayState
    DesiredFriendSyncState: EFriendSyncState
    MatchmakingRegion: str
    StreamingService: gbx_streaming_interaction.EStreamingService
    bShiftFirstBoot: bool
    bShiftFirstBootPrimary: bool
    bIncreasedChanceForSubscribers: bool
    bRareChestEventEnabled: bool
    bBadassEventEnabled: bool
    MinTimeBetweenBadassEvents: int
    bPinataEventEnabled: bool
    bMoxxisDrinkEventEnabled: bool
    MoxxisDrinkEventBitsProductId: int
    bExtractionEventEnabled: bool
    CitizenScienceLevelProgression: unreal.WrappedArray[int]
    CitizenScienceActiveBoosterIndex: int
    CitizenScienceActiveBoosterRemainingTime: float
    CitizenScienceActiveBoosterTotalTime: float
    CitizenScienceCSBucksAmount: int
    bCitizenScienceHasSeenIntroVideo: bool
    bCitizenScienceTutorialDone: bool
    StreamerPrimaryActiveBoosterIndex: int
    StreamerPrimaryActiveBoosterRemainingTime: float
    StreamerPrimaryActiveBoosterTotalTime: float
    StreamerSecondaryActiveBoosterIndex: int
    StreamerSecondaryActiveBoosterRemainingTime: float
    StreamerSecondaryActiveBoosterTotalTime: float
    StreamerBoosterTier: int
    FriendEventNotificationLifetime: EFriendEventNotificationLifetime
    FriendEventNotificationFrequency: EFriendEventNotificationFrequency
    TradeRequestReceptionType: ETradeRequestReceptionType
    MaxCachedFriendEvents: int
    MaxCachedFriendStatuses: int
    FriendEvents: unreal.WrappedArray[str]
    FriendStatuses: unreal.WrappedArray[str]
    LastWhisperFetchEventsTime: core_uobject.DateTime
    LastWhisperFetchStatusesTime: core_uobject.DateTime
    bHasSeenNonStadiaControllerDisclaimer: bool
    bEnableSubtitles: bool
    bEnableClosedCaptions: bool
    bEnableAutoCentering: bool
    CrosshairNeutralColorFrame: ECrosshairColorsEnum
    CrosshairEnemyColorFrame: ECrosshairColorsEnum
    CrosshairAllyColorFrame: ECrosshairColorsEnum
    HeadBobScale: float
    RecentlyMetPlayers: unreal.WrappedArray[gbx_game_system_core.RecentlyMetPlayer]
    MaxFriendEncounterSize: int
    ProfileStatsData: unreal.WrappedArray[GameStatSaveGameData]
    BankInventoryCategoryList: unreal.WrappedArray[gbx_inventory.InventoryCategorySaveData]
    BankInventoryList: unreal.WrappedArray[gbx_inventory.InventorySaveGameData]
    LostLootInventoryList: unreal.WrappedArray[gbx_inventory.InventorySaveGameData]
    NPCMailItems: unreal.WrappedArray[OakMailItem]
    MailGuids: unreal.WrappedArray[str]
    UnreadMailGuids: unreal.WrappedArray[str]
    GearSoldByFriends: unreal.WrappedArray[GearSoldByFriendData]
    ProfileSDUList: unreal.WrappedArray[OakSDUSaveGameData]
    UnlockedCustomizations: unreal.WrappedArray[OakCustomizationSaveGameData]
    UnlockedInventoryCustomizationParts: unreal.WrappedArray[OakInventoryCustomizationPartInfo]
    GuardianRank: GuardianRankProfileData
    UnlockedCrewQuartersDecorations: unreal.WrappedArray[CrewQuartersDecorationItemSaveGameData]
    UnlockedCrewQuartersRooms: unreal.WrappedArray[CrewQuartersRoomItemSaveGameData]
    CurrentVaultCardDaySeed: int
    CurrentVaultCardWeekSeed: int
    VaultCardRewards: unreal.WrappedArray[VaultCardRewardList]
    VaultCardPreviousChallenges: unreal.WrappedArray[OakVaultCardPreviousChallengeData]
    TotalPlaytimeSeconds: int
    OakProfileChallengeData: unreal.WrappedArray[OakChallengeSaveGameData]
    ProfileStats: unreal.WrappedArray[gbx_game_system_core.GameStat]



class OakProjectile_FalconStrikeRocket(OakProjectile): ...


class OakProjectile_PhaseTrance(OakProjectile_ActionAbility):
    bWantsOverlappedEvents: bool
    bWantsOverlappedEnemyEvents: bool
    bWantsOverlappedFriendlyEvents: bool
    bWantsOverlappedNeutralEvents: bool
    ActivationComboData: PhaseTranceActivationComboData
    def OnOverlappedNeutral(self, HitResult: engine.HitResult): ...
    def OnOverlappedFriendly(self, HitResult: engine.HitResult): ...
    def OnOverlappedEnemy(self, HitResult: engine.HitResult): ...
    def OnOverlapBegin(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, HitResult: engine.HitResult): ...
    def GetOverlapComponent(self, ReturnValue: engine.PrimitiveComponent) -> engine.PrimitiveComponent: ...


class OakProjectileBalanceStateComponent(gbx_game_system_core.BalanceStateComponent): ...


class OakPublicAPIUpdater(unreal.UObject):
    ModifiedChallengeClasses: unreal.WrappedArray[unreal.UClass]
    GameInstanceRef: OakGameInstance
    def OnChallengeUpdated(self, Component: gbx_game_system_core.ChallengesComponent, ChallengeClass: unreal.UClass, NewValue: int, bDisplayNotification: bool, bCompleted: bool): ...
    def OnChallengeCompleted(self, Component: gbx_game_system_core.ChallengesComponent, ChallengeClass: unreal.UClass): ...
    def OnChallengeActivated(self, Component: gbx_game_system_core.ChallengesComponent, ChallengeClass: unreal.UClass): ...


class OakRadiateDamageActor(engine.Actor):
    QueryParams: gbx_game_system_core.EnvQueryParams
    DamageData: unreal.UClass
    Duration: gbx_game_system_core.AttributeInitializationData
    Rate: gbx_game_system_core.AttributeInitializationData
    RadiateMethod: ERadiateMethod
    Velocity: gbx_game_system_core.AttributeInitializationData
    MinDistance: gbx_game_system_core.AttributeInitializationData
    MaxDistance: gbx_game_system_core.AttributeInitializationData
    RadiateMovementType: ERadiateMovementType
    MaxStepUpHeight: gbx_game_system_core.AttributeInitializationData
    MaxStepDownHeight: gbx_game_system_core.AttributeInitializationData
    InitialStepDownHeight: gbx_game_system_core.AttributeInitializationData
    TraceZOffset: float
    TraceChannel: int
    bOnlyTraceStaticMobility: bool
    ExtraIgnoreTraceChannels: unreal.WrappedArray[int]
    bUseContextRotation: bool
    EffectTraceExtent: core_uobject.Vector
    EffectZOffset: float
    ElementalPuddleSpawnData: ElementalPuddleSimpleSpawnData
    SplatData: SplatData
    def OnSnapToGroundFailed(self, bIsInitialStepDown: bool): ...
    def OnPerformRadiateDamageTasks(self): ...
    def InitialSnapToGroundWouldFail(self, ContextObj: unreal.UObject, Template: unreal.UClass, TransformActor: engine.Actor, TraceChannel: int, ReturnValue: bool) -> bool: ...


class OakRadiateDamageActor_ActionAbility(OakRadiateDamageActor):
    CollisionPrimitive: engine.PrimitiveComponent
    bBlocksActionAbilityShutdown: bool
    bIsShuttingDown: bool
    OwnerTeam: gbx_game_system_core.Team
    def OnHitEnemy(self, EnemyActor: engine.Actor): ...
    def OnBeginOverlap(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def K2_GetOwnedActionAbility(self, ReturnValue: OakActionAbility) -> OakActionAbility: ...


class OakRadiateDamageMovementComponent(engine.MovementComponent): ...


class OakRadiusDamageReplicationManager(gbx_game_system_core.RadiusDamageReplicationManager): ...


class OakRecentDamageTrackingComponent(gbx_game_system_core.RecentDamageTrackingComponent):
    Globals: OakDamageGlobalsData
    DamageNumberParticleComponent: engine.ParticleSystemComponent
    ScreenParticleManagerComponent: gbx_game_system_core.ScreenParticleManagerComponent
    IncomingDamageParticleComponent_Health: engine.ParticleSystemComponent
    IncomingDamageParticleComponent_Shield: engine.ParticleSystemComponent
    IncomingDamageParticleComponent_Armor: engine.ParticleSystemComponent
    RecentlyResistedAttacks: RecentlyResistedAttackData
    ServerRecentIncomingDamageData: unreal.WrappedArray[RecentIncomingDamageData]
    ClientRecentIncomingDamageData: unreal.WrappedArray[RecentIncomingDamageData]
    RecentIncomingHealthDamageComponents: unreal.WrappedArray[engine.StaticMeshComponent]
    RecentIncomingShieldDamageComponents: unreal.WrappedArray[engine.StaticMeshComponent]
    RecentIncomingArmorDamageComponents: unreal.WrappedArray[engine.StaticMeshComponent]
    def OnRep_RecentIncomingDamageData(self): ...
    def ClientPlayDamagePresentation(self, Presentation: TriggeredDamagePresentation): ...


class OakReplicationGraph(replication_graph.ReplicationGraph):
    GridNode: replication_graph.ReplicationGraphNode_GridSpatialization2D
    AlwaysRelevantNode: OakReplicationGraphNode_AlwaysRelevant
    ActorsPendingAddToGraph: unreal.WrappedArray[engine.Actor]



class OakReplicationGraphNode_AlwaysRelevant_ForConnection(replication_graph.ReplicationGraphNode_ActorList): ...


class OakReplicationGraphNode_AlwaysRelevant(replication_graph.ReplicationGraphNode_ActorList):
    DormancyNode: replication_graph.ReplicationGraphNode_DormancyNode



class OakNetReplicationGraphConnection(replication_graph.NetReplicationGraphConnection):
    GridNode: replication_graph.ReplicationGraphNode_GridSpatialization2D
    AlwaysRelevantNode: OakReplicationGraphNode_AlwaysRelevant_ForConnection
    OnlyRelevantToConnectionActors: unreal.WrappedArray[engine.Actor]



class OakReticleFeedbackWidget(gbx_ui.GbxGFxObject):
    MaxDamageCausedDuration: float
    MaxDeathCausedDuration: float
    CurrentGameEvent: EOakReticleFeedbackGameEvent
    CurrentGameEventDuration: float
    OakPCOwner: OakPlayerController
    def OnGameEventComplete(self, GameEvent: EOakReticleFeedbackGameEvent): ...
    def OnGameEventCallback(self, GameEvent: EOakReticleFeedbackGameEvent): ...
    def OnGameEvent(self, GameEvent: EOakReticleFeedbackGameEvent): ...


class OakSaveGame(gbx_game_system_core.GbxSaveGame):
    bLevelledSaveNeedsFixup: bool
    LastSaveTimestamp: int
    LevelPersistenceData: unreal.WrappedArray[LevelPersistence_Level_SaveGameData]
    PlayerClassData: PlayerClassSaveGameData
    ResourcePools: unreal.WrappedArray[ResourcePoolSavegameData]
    SavedRegions: unreal.WrappedArray[RegionSaveGameData]
    ExperiencePoints: int
    GameStatsData: unreal.WrappedArray[GameStatSaveGameData]
    InventoryCategoryList: unreal.WrappedArray[gbx_inventory.InventoryCategorySaveData]
    InventoryItems: unreal.WrappedArray[OakInventoryItemSaveGameData]
    EquippedInventoryList: unreal.WrappedArray[EquippedInventorySaveGameData]
    ActiveWeaponList: unreal.WrappedArray[int]
    AbilityData: OakPlayerAbilitySaveGameData
    LastPlayThroughIndex: int
    PlaythroughsCompleted: int
    bShowNewPlaythroughNotification: bool
    MissionPlaythroughsData: unreal.WrappedArray[MissionPlaythroughSaveGameData]
    ActiveTravelStationsForPlaythrough: unreal.WrappedArray[PlaythroughActiveFastTravelSaveData]
    DiscoveryData: DiscoverySaveData
    LastActiveTravelStationForPlaythrough: unreal.WrappedArray[str]
    VehiclesUnlockedData: unreal.WrappedArray[VehicleUnlockedSaveGameData]
    VehiclePartsUnlocked: unreal.WrappedArray[str]
    VehicleLoadouts: unreal.WrappedArray[OakCARMenuVehicleConfigSaveData]
    VehicleLastLoadoutIndex: int
    OakChallengeData: unreal.WrappedArray[OakChallengeSaveGameData]
    SDUList: unreal.WrappedArray[OakSDUSaveGameData]
    SelectedCustomizations: unreal.WrappedArray[str]
    EquippedEmoteCustomizations: unreal.WrappedArray[int]
    SelectedColorCustomizations: unreal.WrappedArray[CustomPlayerColorSaveGameData]
    CrewQuartersRoom: CrewQuartersSaveData
    CrewQuartersGunRack: CrewQuartersGunRackSaveData
    UnlockedEchoLogs: unreal.WrappedArray[EchoLogSaveGameData]
    bHasPlayedSpecialEchoLogInsertAlready: bool
    GameStateSaveDataForPlaythrough: unreal.WrappedArray[GameStateSaveData]
    ChallengeCategoryCompletionPcts: ChallengeCategoryProgressSaveData
    CharacterSlotSaveGameData: OakPlayerCharacterSlotSaveGameData
    UITrackingSaveGameData: UITrackingSaveGameData
    PreferredGroupMode: EOakGameStateUIGroupMode
    TimeOfDayData: gbx_time_of_day.TimeOfDaySaveGameData
    ZoneMapFODSavedData: engine.GbxZoneMapFODSaveGameData
    bIsNetReplicating: bool
    CharacterGuardianRank: GuardianRankCharacterSaveGameData
    ProfileChallengeDataForSerialization: unreal.WrappedArray[OakChallengeSaveGameData]
    bOptionalObjectiveRewardFixupApplied: bool
    bVehiclePartRewardsFixupApplied: bool
    bLevelledSaveVehiclePartRewardsFixupApplied: bool
    CurrentVaultCardDaySeed: int
    CurrentVaultCardWeekSeed: int
    PreferredCharacterName: str
    NameCharacterLimit: int
    GuardianRank: GuardianRankSaveGameData
    LastActiveTravelStation: str
    GameStateSaveData: GameStateSaveData
    ActiveTravelStations: unreal.WrappedArray[gbx_travel_station.ActiveFastTravelSaveData]



class OakSaveGameChannel(gbx_game_system_core.SaveGameChannel): ...


class OakScreenLiquidArea(engine.Actor):
    LiquidColorAndIntensity: core_uobject.LinearColor



class OakSDUData(gbx_runtime.GbxDataAsset):
    SDUBonusTable: engine.DataTable
    SDUDisplayName: str
    bProfileSDU: bool
    bClientSDU: bool
    bGrenadeSDU: bool
    UIVendorContextData: engine.DataAsset
    ManufacturerData: gbx_inventory.ManufacturerData
    def GetSDULevelInfo(self, SDULevel: int, OutSDUPrice: int, OutPriceCurrenty: gbx_inventory.InventoryCategoryData, OutAttributeModifyInfo: gbx_game_system_core.AttributeEffectData, ReturnValue: bool) -> bool: ...


class OakSignificanceManager(gbx_game_system_core.GbxSignificanceManager): ...


class OakSingletons(gbx_game_system_core.GbxSingletons):
    EchoManager: EchoManager
    OakVehicleManager: OakVehicleManager
    CorpseManager: CorpseManager
    RegionManager: RegionManager
    MinimapIconTracker: OakMinimapIconTracker
    SubtitleManager: OakSubtitleManager
    RadiusDamageReplicationManager: gbx_game_system_core.RadiusDamageReplicationManager
    SpawnLootManager: SpawnLootManager
    ClothManager: gbx_destruction.ClothManager
    DamageAsyncManager: gbx_game_system_core.DamageAsyncManager
    DamageOverTimeManager: gbx_game_system_core.DamageOverTimeManager
    ActorCullingManager: PerPlayerActorCullingManager
    LevelActorPersistenceManager: LevelActorPersistenceManager
    ActivityAdapter: OakGameActivityAdapter



class OakSpawnerComponent(gbx_ai.GbxSpawnerComponent):
    RandomItemDropped: bool
    bPlayableAreaAssist: bool
    CorpseRemovalOverrideTime: float
    CorpseRemovalOverrideAction: unreal.UClass
    def OnWaveWarmupCallback(self, SpawnerComponent: gbx_spawn.SpawnerComponent, WaveIndex: int): ...


class OakSpawnerDefinition(gbx_runtime.GbxDataAsset):
    SpawnerStyle: gbx_spawn.SpawnerStyle
    SpawnDetails: gbx_spawn.SpawnDetails
    Limits: unreal.WrappedArray[gbx_spawn.SpawnLimitData]
    SpawnActionTag: gameplay_tags.GameplayTag
    SpecialEffect: unreal.UClass
    ConditionalSpecialEffects: unreal.WrappedArray[SpawnPointEffect]
    def SpawnOakSpawnerFromDefinitionUsingTransforms(self, WorldContextObject: unreal.UObject, Owner: engine.Actor, SourceSpawnerComponent: gbx_spawn.SpawnerComponent, Definition: OakSpawnerDefinition, SpawnOption: gbx_spawn.SpawnOptionData, Transform: core_uobject.Transform, SpawnTransforms: unreal.WrappedArray[core_uobject.Transform], ReturnValue: OakSpawner) -> OakSpawner: ...
    def SpawnOakSpawnerFromDefinition(self, WorldContextObject: unreal.UObject, Owner: engine.Actor, SourceSpawnerComponent: gbx_spawn.SpawnerComponent, Definition: OakSpawnerDefinition, SpawnOption: gbx_spawn.SpawnOptionData, Transform: core_uobject.Transform, SpawnPoints: unreal.WrappedArray[core_uobject.Vector], ReturnValue: OakSpawner) -> OakSpawner: ...


class OakSpawnerIconComponent(OakMissionIconComponent):
    bAddMissionIconToSpawnedActors: bool
    bDisplayIconWhenActorsSuspended: bool
    bAlwaysDisplayIcon: bool
    def OnVehicleActorSpawnedEvent(self, Spawner: gbx_spawn.Spawner, ActorData: gbx_spawn.SpawnerActorData): ...
    def OnSpawnedActorDiedOrSuspend(self, SpawnerComponent: gbx_spawn.SpawnerComponent, Actor: engine.Actor): ...
    def OnActorSpawnedOrUnsuspend(self, SpawnerComponent: gbx_spawn.SpawnerComponent, Actor: engine.Actor): ...
    def GetMySpawnerComponent(self, ReturnValue: gbx_spawn.SpawnerComponent) -> gbx_spawn.SpawnerComponent: ...
    def AddMissionIconComponentToActor(self, Actor: engine.Actor): ...


class OakSpawnerMissionDirectorComponent(OakMissionDirectorComponent):

    def OnSpawnerEnabled(self): ...
    def OnSpawnerDisabled(self): ...
    def OnSpawnedActorDiedOrSuspend(self, SpawnerComponent: gbx_spawn.SpawnerComponent, Actor: engine.Actor): ...
    def OnActorSpawnedOrUnsuspend(self, SpawnerComponent: gbx_spawn.SpawnerComponent, Actor: engine.Actor): ...


class OakSpawnerStyle_PlayerInstanced(gbx_spawn.SpawnerStyle):
    SpawnerStyle: gbx_spawn.SpawnerStyle



class OakSpawnPoint(gbx_ai.GbxSpawnPoint): ...


class OakSpawnPointComponent(gbx_spawn.SpawnPointComponent):
    OnMissionLoadedEnabledCondition: gbx_runtime.GbxCondition
    SpecialEffect: unreal.UClass
    ConditionalSpecialEffects: unreal.WrappedArray[SpawnPointEffect]
    def GetRequiredInterface(self, ReturnValue: unreal.UClass) -> unreal.UClass: ...


class OakStanceData(gbx_ai.AIStanceData): ...


class OakStanceSelector(gbx_game_system_core.StanceDataSelector):
    AICombatStanceProvider: gbx_game_system_core.StanceDataProvider
    AICombatStanceKey: gbx_game_system_core.GbxBlackboardKeySelector
    AIAlertStanceProvider: gbx_game_system_core.StanceDataProvider
    UseAIAlertStance: gbx_game_system_core.GbxParam
    AIFriendlyTargetStanceProvider: gbx_game_system_core.StanceDataProvider
    AIFriendlyTargetStanceKey: gbx_game_system_core.GbxBlackboardKeySelector
    AIFlyingStanceProvider: gbx_game_system_core.StanceDataProvider
    AIFlyingStanceKey: gbx_game_system_core.GbxBlackboardKeySelector
    CrouchingStanceProvider: gbx_game_system_core.StanceDataProvider
    SprintingStanceProvider: gbx_game_system_core.StanceDataProvider
    InjuredStanceProvider: gbx_game_system_core.StanceDataProvider
    InjuredSprintStanceProvider: gbx_game_system_core.StanceDataProvider
    AIAngryPatrolStanceProvider: gbx_game_system_core.StanceDataProvider



class OakStatusEffectGlobalsData(gbx_game_system_core.StatusEffectGlobalsData):
    OakResourceEffects: unreal.WrappedArray[OakResourceEffectData]
    ElementalFXMaxHealthScalar: float
    FireElementalEffectData: OakElementalEffectData
    ShockElementalEffectData: OakElementalEffectData
    CorrosiveElementalEffectData: OakElementalEffectData
    RadiationElementalEffectData: OakElementalEffectData
    ElementalDeathSelectionThreshold: float
    ElementalAuraEffects: unreal.WrappedArray[OakElementalAuraEffectData]
    FreezeTypes: OakFreezeData
    NonTransientStatusEffectTag: gameplay_tags.GameplayTag
    StatusEffectParticleSystem: engine.ParticleSystem



class OakStatusEffectManagerComponent(gbx_game_system_core.StatusEffectManagerComponent):
    bResistCryoFreeze: bool
    CryoFreezeAssets: unreal.WrappedArray[CryoFreezeAssetData]
    FreezeFallingDamageScale: gbx_game_system_core.AttributeInitializationData
    FreezeNoDamageImpactThreshold: float
    FreezeFootDownThreshold: float
    FreezeSupportMeshScale: float
    FreezeSupportBones: unreal.WrappedArray[str]
    RepFreezeData: int
    bSupportCryoFreezeAssets: bool
    bCanBuildFreezeSupportMesh: bool
    bCanCreateFreezeGroundEffect: bool
    bFallOnFrozenDeath: bool
    bFreezePauseAnims: bool
    FreezeState: EFreezeState
    FreezeType: EFreezeType
    FreezeInstigator: engine.Actor
    bSupportShieldStatusEffects: bool
    ShieldEffectState: ShieldEffectStateData
    CSBoosterStatusState: CSBoosterStatus
    StreamerBoosterStatusState: StreamerBoosterStatus
    bShouldShowThirdPersonEffects: bool
    bClearAllStatusEffectsOnOwnerDeath: bool
    UpdatedEffects: unreal.WrappedArray[OakPresentableStatusEffectData]
    ActiveResourceEffects: unreal.WrappedArray[ActiveOakResourceEffect]
    ElementalAuraEffects: unreal.WrappedArray[OakElementalAuraEffectInstance]
    PresentationManager: OakEffectPresentationManager
    def UnlockFreezePauseState(self, Reason: str): ...
    def UnlockElementalEffects(self, Reason: str): ...
    def UnlockElementalEffectByType(self, Type: EOakStatusEffectResourceEffectType, Reason: str): ...
    def UnlockElementalEffectByDamageType(self, DamageTypeClass: unreal.UClass, Reason: str): ...
    def UnlockCryoFreezePauseState(self, Reason: str): ...
    def TryToFreezeOnActionEnd(self, EndState: gbx_game_system_core.EGbxActionEndState): ...
    def Thawed(self): ...
    def Thaw(self): ...
    def Shatter(self, Origin: core_uobject.Vector, Force: float, bReplicate: bool): ...
    def SetPrimaryFreezeMesh(self, Mesh: apex_destruction.DestructibleMesh): ...
    def SetPrimaryCryoFreezeMesh(self, Mesh: apex_destruction.DestructibleMesh): ...
    def OnShieldNowNotFull(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def OnShieldNowNotDepleted(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def OnShieldNowFull(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def OnShieldNowDepleted(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def OnResourceNowNotFilled(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def OnResourceNowNotDepleted(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def OnResourceNowFilled(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def OnResourceNowDepleted(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def OnRep_ShieldEffectState(self, OldState: ShieldEffectStateData): ...
    def OnRep_FreezeData(self): ...
    def OnOwnerInjured(self): ...
    def OnOwnerHealthy(self): ...
    def OnOwnerDied(self): ...
    def LockFreezePauseState(self, Reason: str): ...
    def LockElementalEffects(self, Reason: str): ...
    def LockElementalEffectByType(self, Type: EOakStatusEffectResourceEffectType, Reason: str): ...
    def LockElementalEffectByDamageType(self, DamageTypeClass: unreal.UClass, Reason: str): ...
    def LockCryoFreezePauseState(self, Reason: str): ...
    def IsFrozen(self, bIncludeTransition: bool, ReturnValue: bool) -> bool: ...
    def IsCryoFrozen(self, ReturnValue: bool) -> bool: ...
    def IsAffectedByElementalType(self, Type: EOakElementalType, Threshold: float, ReturnValue: bool) -> bool: ...
    def GetValidFreezePrimitiveComponentNames(self, Array: unreal.WrappedArray[str]): ...
    def GetThawPercent(self, ReturnValue: float) -> float: ...
    def GetFreezePercent(self, ReturnValue: float) -> float: ...
    def GetCryoThawPercent(self, ReturnValue: float) -> float: ...
    def GetCryoFreezePercent(self, ReturnValue: float) -> float: ...
    def FrozenDeath(self, Momentum: core_uobject.Vector, HitLocation: core_uobject.Vector, HitDirection: core_uobject.Vector, Force: float, Radius: float, BoneIndex: int): ...
    def Frozen(self): ...
    def Freeze(self, bInstant: bool, Type: EFreezeType): ...
    def CryoThaw(self): ...
    def CryoShatter(self, Origin: core_uobject.Vector, Force: float, bReplicate: bool): ...
    def CryoFrozenDeath(self, Momentum: core_uobject.Vector, HitLocation: core_uobject.Vector, HitDirection: core_uobject.Vector, Force: float, Radius: float, BoneIndex: int): ...
    def CryoFreezeEvent__DelegateSignature(self): ...
    def CryoFreeze(self, bInstant: bool): ...
    def ClientUpdateFreezePauseState(self): ...
    def ClearAllTransientEffects(self): ...
    def ClearAllElementalEffects(self): ...
    def BroadcastShatter(self, Origin: core_uobject.Vector, Force: float): ...
    def ApplyResourceEffectValue(self, Instigator: engine.Controller, Type: EOakStatusEffectResourceEffectType, InValue: float): ...
    def ApplyFreezeFallDamage(self, Hit: engine.HitResult): ...


class OakStatusEffectPresentationData(gbx_runtime.GbxDataAsset):
    bUsesThirdPersonParticles: bool
    ParticlePresentation: OakStatusEffectPresentation_Particle
    bUsesScreenParticle: bool
    ScreenParticlePresentation: OakStatusEffectPresentation_ScreenParticle
    bUsesMaterialParameter: bool
    MaterialPresentation: OakStatusEffectPresentation_Material
    bUsesAudioEvents: bool
    AudioPresentation: OakStatusEffectPresentation_Audio



class OakStatusEffectsStatics(gbx_game_system_core.StatusEffectsStatics):

    def TriggerElementalEffect(self, Target: engine.Actor, DamageType: unreal.UClass, DamageCauser: engine.Actor, InstigatorController: engine.Controller, DamagePerSecond: float, ResourceEffectValue: float, bInfiniteDuration: bool, ReturnValue: gbx_game_system_core.StatusEffectInstanceReference) -> gbx_game_system_core.StatusEffectInstanceReference: ...
    def ClearAllTransientStatusEffects(self, Target: engine.Actor): ...
    def ClearAllElementalEffects(self, Target: engine.Actor): ...


class OakStreamerItemPickup(OakInventoryItemPickup):
    FirstDonor: str
    LargestDonor: DonorInfo
    FirstDonorStatData: gbx_game_system_core.UIStatData
    LargestDonorStatData: gbx_game_system_core.UIStatData
    DonorTextHTMLColor: str



class OakStreamingInteractionDirector(unreal.UObject):
    StreamingManager: OakStreamingInteractionManager
    EventsPool: unreal.WrappedArray[OakStreamingInteractionEvent]
    EventsQueue: unreal.WrappedArray[OakStreamingInteractionEvent]
    EventsHistory: unreal.WrappedArray[OakStreamingInteractionEvent]
    DirectorTriggeredEventsPool: unreal.WrappedArray[OakStreamingInteractionEvent]
    CurrentEvents: unreal.WrappedArray[OakStreamingInteractionEvent]
    def RegisterStreamingEvent(self, EventToRegister: OakStreamingInteractionEvent): ...


class OakStreamingInteractionEvent(gbx_runtime.GbxDataAsset):
    EVENTTYPE: str
    EventTriggerType: EEventTriggerType
    EventCooldownTime: float
    EventTitle: str
    EventDescription: str
    BeginEventMessage: str
    BeginEventDialog: gbx_dialog.DialogTimeSlotReference
    EndEventMessage: str
    EndEventDialog: gbx_dialog.DialogTimeSlotReference
    FallbackTimerDuration: float
    FallbackTimer: float
    InitializeTimestamp: int
    LastActivationTimestamp: int
    EventStartedTimestampEBS: int
    bBackendAcknowledged: bool
    EndEventReason: EEndEventReasons
    StreamingMgr: OakStreamingInteractionManager
    def EndEventFallback(self): ...


class OakStreamingInteractionEvent_EnemySpawn(OakStreamingInteractionEvent):
    AllowedTags: gameplay_tags.GameplayTagContainer
    DisallowedTags: gameplay_tags.GameplayTagContainer
    NbOfKillsBeforeActivation: int
    MaxEventDuration: float
    JoinTimerDuration: float
    EnemyInfoUpdateTimer: float
    EnemyWorldIconData: InWorldIconData
    SpawnAction: PollActionInfo
    PlayerWonEndEvent: str
    PlayerWonEndEventDialog: gbx_dialog.DialogTimeSlotReference
    NeutralEndEvent: str
    NeutralEndEventDialog: gbx_dialog.DialogTimeSlotReference
    PlayerLostEndEvent: str
    PlayerLostEventDialog: gbx_dialog.DialogTimeSlotReference
    PollTimerDuration: float
    TimeBetweenPollsTimerDuration: float
    MaxItemInPoll: int
    PollAvailableActions: unreal.WrappedArray[PollActionInfo]
    SpawnWait: str
    PollStarted: str
    PollSelected: str
    PollEnded: str
    EventWin: str
    EventLose: str
    EventDraw: str
    EventMapExited: str
    EventTimeout: str
    NbSpawner: int
    LastActivationKillCount: int
    EventEnemy: gbx_game_system_core.GbxCharacter
    EnemyViewerName: str
    SpawnerRefArray: unreal.WrappedArray[engine.Actor]
    DebugSpawnerWaypoints: unreal.WrappedArray[OakMissionIconComponent]
    PollID: int
    def SetEnemy(self, Enemy: gbx_game_system_core.GbxCharacter): ...
    def OnPlayerDead(self): ...
    def OnEnemySuspend(self, SpawnerComponent: gbx_spawn.SpawnerComponent, Actor: engine.Actor): ...
    def OnEnemySpawned(self, SpawnerComponent: gbx_spawn.SpawnerComponent, Actor: engine.Actor): ...
    def OnEnemyDied(self, SpawnerComponent: gbx_spawn.SpawnerComponent, Actor: engine.Actor): ...


class OakStreamingInteractionEvent_Lootable(OakStreamingInteractionEvent):
    SweepstakesDuration: float
    PrizeSelectionDuration: float
    FallbackTimerAdditionalTime: float
    PrizeSelectionWin: str
    PrizeSelectionLose: str
    PrizeSelectionTimeout: str
    PrizeSelectionSent: str
    PrizeSelectionEnd: str
    bEnabledInGearUpGameMode: bool
    ThumbnailMgrConfig: OakThumbnailManagerConfig
    LootItems: unreal.WrappedArray[LootableEventResultItem]
    UIGlobals: UIGlobals
    ThumbnailMgr: OakThumbnailManager
    ThumbnailInfo: unreal.WrappedArray[MinimalInventoryInfo]
    ThumbnailGenerationIdx: int
    def OnThumbnailLoaded(self): ...
    def OnLootableSpawned(self, SpawnerComponent: gbx_spawn.SpawnerComponent, Actor: engine.Actor): ...
    def OnLootableObjectEventOpened(self, LootableObject: LootableObject): ...
    def OnLootableDied(self, SpawnerComponent: gbx_spawn.SpawnerComponent, Actor: engine.Actor): ...


class OakStreamingInteractionEvent_Extraction(OakStreamingInteractionEvent_Lootable):

    def OnExtractorUnavailable(self, Extractor: OakUIGearUpExtractionAIO): ...
    def OnExtractionInitiated(self, Extractor: OakUIGearUpExtractionAIO, ItemsToExtract: unreal.WrappedArray[engine.Actor]): ...


class OakStreamingInteractionEvent_MoxxisDrink(OakStreamingInteractionEvent):
    MsgWhenReceivingDonation: str
    DrinkSelectInfo: str
    DonationDialog: gbx_dialog.DialogTimeSlotReference
    TopTierDonationDialog: gbx_dialog.DialogTimeSlotReference
    FirstDonator: str
    BiggestDonator: str
    LatestDonator: str
    GiveTip: str
    TotalTip: str
    DisplayTip: str
    TipJarTitle: str
    EventInitiatorDesc: str
    EventRunningDesc: str
    EventOverclockText: str
    DrinkSpawnLocationParams: gbx_game_system_core.EnvQueryParams
    MaxSpawnAttempt: int
    DigistructDuration: float
    MoxxiEventDataTable: engine.DataTable
    MaxEventDuration: float
    TimeBetweenEventInfoUpdate: float
    MaximumTimeBetweenDonations: float
    DefaultTimeBetweenDonations: float
    EventHardCooldownDuration: float
    EventTiers: unreal.WrappedArray[DonationTier]
    BitProducts: unreal.WrappedArray[BitProduct]
    StreamerBoosterData: StreamerBoosterData
    PollTimerDuration: float
    MaxItemInPoll: int
    PollAvailableActions: unreal.WrappedArray[PollActionInfo]
    PollStarted: str
    PollSelected: str
    PollEnded: str
    DrinkClassRef: unreal.UClass
    MoxxisChestActor: StreamerLootableObject
    NumberOfDonations: int
    DonationTotalBits: int
    EndOfDonationTimer: float
    TierDuration: float
    TierStartedTimestampGame: int
    HardEventCooldownTimer: float
    bDonationDone: bool
    MinBitProductToStart: BitProduct
    EventTiersBits: unreal.WrappedArray[float]
    Donators: unreal.WrappedArray[Donator]
    LatestDonatorName: str
    def FakeSpawnMoxxisDrink(self): ...


class OakStreamingInteractionEvent_Pinata(OakStreamingInteractionEvent):
    PinataSpawnLocationParams: gbx_game_system_core.EnvQueryParams
    MaxSpawnAttempt: int
    MaxEventDuration: float
    PollTimerDuration: float
    MaxItemInPoll: int
    PollAvailableActions: unreal.WrappedArray[PollActionInfo]
    NoViewersAction: PollActionInfo
    PollStarted: str
    PollSelected: str
    PollEnded: str
    PinataClassRef: unreal.UClass
    PinataActor: engine.Actor
    def SetPinata(self, NewPinataActor: engine.Actor): ...
    def HandleLevelChanged(self, OldLevel: int, NewLevel: int): ...


class OakStreamingInteractionGlobals(gbx_runtime.GbxDataAsset):
    GeneralEvents: unreal.WrappedArray[OakStreamingInteractionEvent]
    TimeBetweenCharacterProfileUpdateSteps: float
    AddedTimeForUpdateStepsDuringEvents: float
    MaxInventoryItemsPerUpdate: int
    InteractionStartDialog: gbx_dialog.DialogTimeSlotReference
    StartInteractionTitle: str
    StartInteractionDesc: str
    PoolResultFormat: str
    ThumbnailMgrConfig: OakThumbnailManagerConfig
    DirectorTriggeredEventsCheckTimer: float
    MoxxiBuffDurationSeconds: float
    bForceMoxxiEventDisabled: bool



class OakStreamingInteractionManager(unreal.UObject):
    bMoxxiEventHardCooldown: bool
    GameInstance: OakGameInstance
    StreamingInteractionDirector: OakStreamingInteractionDirector
    StreamingEventDispatcher: StreamingEventDispatcher
    ThumbnailMgr: OakThumbnailManager
    ThumbnailNeededArray: unreal.WrappedArray[int]
    ThumbnailGenerationIdx: int
    UIGlobals: UIGlobals
    StreamingGlobals: OakStreamingInteractionGlobals
    TimeBetweenCharacterProfileUpdateSteps: float
    AddedTimeForUpdateStepsDuringEvents: float
    MaxInventoryItemsPerUpdate: int
    CharacterProfileUpdateTimer: float
    SharedCharacterInfo: MinimalCharacterInfo
    bIncreasedChanceForSubscribers: bool
    UpdateID: int
    InventoryUpdateID: int
    SkillTreeUpdateID: int
    def OnThumbnailLoaded(self): ...
    def OnStreamingSessionStatsUpdated(self, UpdatedSessionStats: OakInteractiveSessionStats): ...
    def GetStreamingInteractionManager(self, ReturnValue: OakStreamingInteractionManager) -> OakStreamingInteractionManager: ...
    def DisplayTimedMessageBPCall(self, Title: str, Description: str, Duration: float, OwnerPC: OakPlayerController): ...
    def DebugStartStreamingInteraction(self): ...
    def DebugInitStreamingService(self, DebugExtensionClientID: str): ...
    def DebugFakeStreamingEventPoolResult(self, EventName: str, ActionID: int, ActionValue: int): ...
    def DebugFakeStreamingEvent(self, EventName: str): ...
    def DebugFakeIsStreaming(self, bFakeIsStreaming: bool): ...


class OakSubtitleManager(unreal.UObject): ...


class OakThroughCollisionHandlerInterface(core_uobject.Interface): ...


class OakThumbnailManager(unreal.UObject):
    ReusableRenderTargets: unreal.WrappedArray[engine.TextureRenderTarget2D]
    Config: OakThumbnailManagerConfig
    def OnStreamedTextureLoaded(self): ...


class OakTravelStationTracker(gbx_travel_station.TravelStationTracker):
    HostDiscoveredPlanets: unreal.WrappedArray[PlanetData]
    bFastTravelAvailable: bool
    def UnlockFastTravelStation(self, WorldContextObject: unreal.UObject, UnlockPlayer: OakPlayerController, TravelStation: gbx_travel_station.FastTravelStationData, bBypassDependencies: bool): ...
    def SetFastTravelAvailable(self, bAvailable: bool): ...
    def OnRep_HostDiscoveredPlanets(self): ...
    def OnRep_FastTravelAvailable(self): ...
    def OnFastTravelLockoutTimer(self): ...
    def LockOutFastTravelAvailable(self, WorldContextObject: unreal.UObject, LockOutTime: float): ...


class OakTriggerCapsule(engine.TriggerCapsule):
    TriggerComponent: OakTriggerComponent
    def NotifyTriggerUntouched(self, OtherActor: engine.Actor, bIsPlayer: bool): ...
    def NotifyTriggerTouched(self, OtherActor: engine.Actor, bIsPlayer: bool): ...


class OakTriggerComponent(engine.ActorComponent):
    MaxTriggerEvents: int
    TriggerDelay: float
    EnabledCondition: gbx_runtime.GbxCondition
    bPlayerInstigatedEventsOnly: bool
    bUseSelfAsSecondContext: bool
    ActorCanTriggerCondition: gbx_runtime.GbxCondition
    bEnabled: bool
    ValidComponentNames: unreal.WrappedArray[str]
    TrackedTouchPrimitives: unreal.WrappedArray[engine.PrimitiveComponent]
    def ResetTrigger(self): ...
    def NotifyActorComponentEndOverlap(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int): ...
    def NotifyActorComponentBeginOverlap(self, OverlappedComp: engine.PrimitiveComponent, Other: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def HandleTriggerEvents(self, OtherActor: engine.Actor, EVENTTYPE: EOakTriggerComponentEventType, OptionalTouchedComponent: engine.PrimitiveComponent): ...
    def GetValidComponentNames(self, ComponentNames: unreal.WrappedArray[str]): ...
    def EnableTrigger(self, bEnableTrigger: bool): ...


class OakTriggerKillIronBearComponent(engine.ActorComponent):

    def OwnerTriggerTouched(self, TouchingActor: engine.Actor, bIsPlayer: bool, ComponentTouched: engine.ActorComponent): ...


class OakTurretMovementComponent(gbx_vehicle.TurretMovementComponent): ...


class OakUIActorContainer(engine.Actor):
    SceneComponent: engine.SceneComponent
    PreviewActorSocket: gbx_game_system_core.SocketComponent
    PreviewCubeMap: engine.TextureCube
    DefaultAmbientCubeMapIntensity: float
    bHideFirstPersonMesh: bool
    bDrawPreviewInForeground: bool
    bDrawForOwnerOnly: bool
    bTickWhilePaused: bool
    bForceDisableURO: bool
    bHideWhenMenuStackHidden: bool
    SelfBoundsScale: float
    PreviewActor: engine.Actor



class OakUIChallengeDataProvider(unreal.UObject):
    CompletedChallengeColor: str
    FallbackDisplaySortCategory: gbx_game_system_core.ChallengeCategoryData
    GalacticChallengesCategory: gbx_game_system_core.ChallengeCategoryData
    OakPCOwner: OakPlayerController
    ChallengeManager: gbx_game_system_core.ChallengeManager
    ChallengesComponent: gbx_game_system_core.ChallengesComponent
    ChallengeListData: unreal.WrappedArray[OakUIChallengeListData]
    CurrentPlanetData: PlanetData
    CurrentZoneData: ZoneMapData
    bShowDiscoveredLocationsOnly: bool
    CurrentPopulateType: EOakUIChallengeDataProviderPopulateType
    def OnChallengeUpdated(self, Component: gbx_game_system_core.ChallengesComponent, ChallengeClass: unreal.UClass, NewValue: int, bDisplayNotification: bool, bCompleted: bool): ...
    def OnChallengeCompleted(self, Component: gbx_game_system_core.ChallengesComponent, ChallengeClass: unreal.UClass): ...
    def OnChallengeChildCompleted(self, Component: gbx_game_system_core.ChallengesComponent, ChallengeClass: unreal.UClass): ...
    def OnChallengeActivated(self, Component: gbx_game_system_core.ChallengesComponent, ChallengeClass: unreal.UClass): ...


class GFxChallengeMenuCell(gbx_ui.GbxGFxListCell):
    ChallengeListData: OakUIChallengeListData
    CompletedCheck: gbx_ui.GbxGFxObject
    ProgressBar: gbx_ui.GbxGFxProgressBar
    ProgressText: gbx_ui.GbxTextField
    RankText: gbx_ui.GbxTextField



class OakUIGearUpInterface(engine.BlueprintFunctionLibrary): ...


class OakUIGearUpExtractionAIO(AdvancedInteractiveObject):
    NumOfferingsLeft: int



class OakUIGearUpExtractionAIOProxy(AdvancedInteractiveObjectProxy): ...


class OakUILibrary(gbx_ui.GbxUILibrary):

    def TriggerFastTravelTutorial(self, GameInstance: engine.GameInstance): ...
    def SetGamePaused(self, ContextObject: unreal.UObject, bPause: bool, ReturnValue: bool) -> bool: ...
    def RemoveTutorialMessageForPlayer(self, GameInstance: engine.GameInstance, TargetPlayer: OakPlayerController, MessageData: TutorialMessageDataAsset): ...
    def RemoveTutorialMessageForAllPlayers(self, GameInstance: engine.GameInstance, MessageData: TutorialMessageDataAsset): ...
    def PushMenuForAllPlayers(self, GameInstance: engine.GameInstance, MenuData: gbx_ui.GbxMenuData): ...
    def PopulateInventoryListFromInventoryList(self, ListToPopulate: unreal.WrappedArray[OakUIInventoryItemDisplayInfo], InventoryList: gbx_inventory.InventoryListComponent, InventoryFilter: gbx_inventory.InventoryCategoryData): ...
    def PopulateInventoryListFromCharacter(self, ListToPopulate: unreal.WrappedArray[OakUIInventoryItemDisplayInfo], OakCharacter: OakCharacter, InventoryFilter: gbx_inventory.InventoryCategoryData): ...
    def IsGamePaused(self, ContextObject: unreal.UObject, ReturnValue: bool) -> bool: ...
    def GetInventoryDisplayInfoForActor(self, InActor: engine.Actor, Inventory: gbx_inventory.InventoryListComponent, ReturnValue: OakUIInventoryItemDisplayInfo) -> OakUIInventoryItemDisplayInfo: ...
    def CloseMenuForAllPlayers(self, GameInstance: engine.GameInstance, MenuData: gbx_ui.GbxMenuData): ...
    def CloseAllMenusForAllPlayers(self, GameInstance: engine.GameInstance): ...
    def AddTutorialMessageForPlayer(self, GameInstance: engine.GameInstance, TargetPlayer: OakPlayerController, MessageData: TutorialMessageDataAsset): ...
    def AddTutorialMessageForAllPlayers(self, GameInstance: engine.GameInstance, MessageData: TutorialMessageDataAsset): ...
    def AddModalTutorialMessageForPlayer(self, GameInstance: engine.GameInstance, TargetPlayer: OakPlayerController, MessageData: GFxModalTutorialDataAsset): ...
    def AddModalTutorialMessageForAllPlayers(self, GameInstance: engine.GameInstance, MessageData: GFxModalTutorialDataAsset): ...


class OakUISDUVendorInventoryType(gbx_runtime.GbxDataAsset):
    InventoryType: EInventoryListType
    ItemCardIconFrameName: str



class OakUIVirtualBackpackCell(GFxInventoryItemWidget): ...


class OakUsableComponent(gbx_game_system_core.UsableComponent):
    bForDisplayOnly: bool



class OakUseComponent(gbx_game_system_core.UseComponent):
    PickupInteractionDistance: float
    TouchPickupInteractDistance: float
    VehicleTouchPickupInteractDistance: float
    CurrentlySelectedPickup: OakInventoryItemPickup
    LastPickupResult: PickupEvaluationResult
    LastTouchPickupResult: TouchPickupEvaluationResult
    def CanRouteInputToCurrentUsable(self, Type: gbx_game_system_core.EUsabilityType, ReturnValue: bool) -> bool: ...


class OakUseTrigger(engine.TriggerSphere):
    UsableComponent: gbx_game_system_core.UsableComponent
    def NotifyTriggerUsed(self, UsingActor: engine.Controller): ...


class OakVaultCardRewardData(gbx_runtime.GbxDataAsset):
    VaultCardDisplayName: str
    VaultCardNavBarFrameName: str
    ActiveCardTint: core_uobject.Color
    InactiveCardTint: core_uobject.Color
    ChestItemPool: gbx_inventory.ItemPoolData
    VaultCardKey: gbx_inventory.InventoryCategoryData
    VaultCardGearRewards: unreal.WrappedArray[VaultCardGearRewardData]
    VaultCardRewardColumns: unreal.WrappedArray[VaultCardColumnData]
    VaultCardChallengeLists: unreal.WrappedArray[gbx_game_system_core.ChallengeList]
    VaultCardExpansionData: DownloadableExpansionData



class OakVehicle(gbx_vehicle.Vehicle):
    TargetableComponent: gbx_game_system_core.TargetableComponent
    DamageComponent: OakDamageComponent
    DamageCauserComponent: OakDamageCauserComponent
    StatusEffectManagerComponent: OakStatusEffectManagerComponent
    MinimapIconComponent: OakMinimapIconComponent
    ResourcePoolComponent: gbx_game_system_core.GameResourcePoolManagerComponent
    PrimarySeatComponent: VehicleSeatComponent
    InputComponentClass: unreal.UClass
    ClassicModeInputComponentClass: unreal.UClass
    VehicleInputModes: unreal.WrappedArray[VehicleInputParams]
    VehicleEffectsComponent: VehicleEffectsComponent
    WheeledMovementComponent: phys_xvehicles.WheeledVehicleMovementComponent
    WheeledMovementComponentNW: gbx_vehicle.WheeledVehicleMovementComponentNW
    VehicleAirControlComponent: gbx_vehicle.VehicleAirControlComponent
    VehicleHoverComponent: gbx_vehicle.VehicleHoverComponent
    BoostComponent: gbx_vehicle.VehicleBoostComponent
    DigiThrustComponent: gbx_vehicle.VehicleDigiThrustComponent
    PowerSlideComponent: gbx_vehicle.VehiclePowerSlideComponent
    WeaponsComponent: ActiveWeaponsComponent
    BodyWeaponHoldManager: gbx_weapon.BodyWeaponHoldManagerComponent
    SeatComponents: unreal.WrappedArray[VehicleSeatComponent]
    LoopingFeedback: unreal.WrappedArray[VehicleOccupantLoopingFeedback]
    SpeedometerMaxSpeedToDisplayMPH: float
    SkelAndPSCompOptimDistance: float
    bDisableAIUseSlot: bool
    bDebugDrift: bool
    DriftSocketName: str
    MinSpeedToDrift: float
    LeftDriftMinAngle: float
    RightDriftMinAngle: float
    KillStat: gbx_game_system_core.GameStatData
    RPMCurve: engine.CurveFloat
    MaxSpeed: float
    RPMCutoffIncreasePerSec: float
    TimeDriftingToActivateRPMCutoff: float
    bBypassAirborneBlendedRPM: bool
    RPMInAirBlendTime: float
    RPMBlendTime: float
    RPMTresholdStartBlend: float
    OnBoostEndRPMDecreasePercent: float
    TimeDrifting: float
    RPMCutoffAddedValue: float
    GearShiftingRPMThreshold: unreal.WrappedArray[float]
    bIsInReverse: bool
    bIsUpsideDown: bool
    Speed: float
    LateralSpeed: float
    PlanarSpeed: float
    AngularVelocityRad: core_uobject.Vector
    RPM: float
    BlendedRPM: float
    CurrentGear: int
    Accel: float
    bIsDriftingLeft: bool
    bIsDriftingRight: bool
    LastFrameSpeed: float
    VehicleArchetype: str
    VehicleClassID: VehicleClassIdentifier
    VehicleWheelInvData: core_uobject.SoftObjectPath
    BaseAdditiveSettings: OakVehicleAdditiveData
    SteeringAngleInterpSpeed: float
    SeatMeshOffset: float
    Health: gbx_game_system_core.GameResourcePoolReference
    HealthState: EVehicleHealthState
    DeathType: EVehicleDeathType
    LowHealthPercent: float
    VeryLowHealthPercent: float
    bResetCameraAutoLook: bool
    VehicleSpawnByCatchARideOwner: engine.Actor
    CatchARidePlatform: CatchARidePlatform
    CatchARideInterface: unreal.UObject
    HUDInfo: gbx_ui.GbxHUDData
    DamageToApplyWhenVehicleIsDead: unreal.UClass
    bDigistructOnSpawn: bool
    bIsVehicleScannable: bool
    bIsMissionVehicle: bool
    DigistructInActionClass: unreal.UClass
    DigistructInCatchARideActionClass: unreal.UClass
    UINameOverride: gbx_game_system_core.GbxUIName
    DigistructOutActionClass: unreal.UClass
    DigistructTime: float
    VehicleTeamCollisionChannel: gbx_game_system_core.ETeamCollisionChannel
    bShouldClearInput: bool
    LastThrottleInput: float
    LastLookInputTime: float
    MaxWeaponAimAdjustmentAngle: float
    EBrakeFeedback: gbx_game_system_core.FeedbackData
    EBrakeFeedbackScaleCurve: engine.RuntimeFloatCurve
    EBrakeFeedbackUpdateFrequency: float
    FlippedThreshold: float
    bCanBeFlippedOver: bool
    bCanEnterWhenFlipped: bool
    bEjectOccupantsWhenFlipped: bool
    FlippedEjectionTime: float
    FlipOverLiftStrength: float
    FlipOverTorqueStrength: float
    FlipOverAttemptFrequency: float
    DrivingData: VehicleDrivingDataAsset
    OverlappedBoundaryTurrets: unreal.WrappedArray[BoundaryTurret]
    AdditionalSecondaryWeapons: unreal.WrappedArray[WeaponSlotData]
    AdditionalPrimaryWeapons: unreal.WrappedArray[WeaponSlotData]
    bIsEBraking: bool
    bIsFlipped: bool
    ShockStunCooldownDuration: engine.GbxAttributeFloat
    BalanceStateComponent: OakVehicleBalanceStateComponent
    DefaultUIName: gbx_inventory.InventoryNamePartData
    SightSenseConfig: aimodule.AISenseConfig_Sight
    SpawnerComponent: gbx_spawn.SpawnerComponent
    SpawnPointComponent: gbx_spawn.SpawnPointComponent
    AIPathRadius: float
    AIPathHeight: float
    AISearchHeight: float
    AIMaxSpeed: float
    AIMaxTurnAngle: float
    AIPathFindingData: gbx_nav.HavokPathFindingData
    PermissiveAIPathFindingData: gbx_nav.HavokPathFindingData
    AIPathingData: gbx_nav.GbxNavPathingData
    PermissiveAIPathingData: gbx_nav.GbxNavPathingData
    OverrideAIPathingData: gbx_nav.GbxNavPathingData
    AvoidanceProperties: gbx_nav.GbxAvoidanceProperties
    NavCorrectionSetting: ENavCorrectionSetting
    NavMeshPainterComponent: gbx_nav.GbxNavMeshPainterComponent
    bCanSiege: bool
    bAlwaysHover: bool
    bCanDisableDrivingInput: bool
    RevolverWheelRadius: float
    RevolverChassisWidthOffset: float
    RevolverRaycastGroundOffset: float
    bIsDrivingInputDisabled: bool
    bDespawnWhenNoOccupant: bool
    bKeepAssociatedToSpawner: bool
    VehicleOwners: unreal.WrappedArray[engine.Actor]
    DefaultVehicleDriverAction: unreal.UClass
    DefaultVehicleTurretAction: unreal.UClass
    DefaultVehiclePassengerAction: unreal.UClass
    SpawnCostSelection: gbx_game_system_core.SpawnCostSelection
    bCollisionPreventsActorsFromSpawning: bool
    AdditionalGroundOffset: float
    OwnedChildActors: unreal.WrappedArray[engine.Actor]
    CustomColor: unreal.WrappedArray[core_uobject.Color]
    HijackProtectionDamageToApply: unreal.UClass
    VehicleAudioProvider: VehicleAudioProviderComponent
    OverlappingLLBs: unreal.WrappedArray[LargeLiquidBody]
    ZoneMapPOIMesh: engine.StaticMesh
    DigistructingIn: bool
    AbilityManagerComponent: gbx_abilities.GbxAbilityManagerComponent
    def VehicleCharacterEvent__DelegateSignature(self, Seat: VehicleSeatComponent, Character: OakCharacter): ...
    def UnlockWorldTravel(self, Reason: str): ...
    def TestTeleportFailSafeLocation(self): ...
    def TeleportVehicle(self, Location: core_uobject.Vector, Rotation: core_uobject.Rotator): ...
    def StopZooming(self, bForcedStop: bool): ...
    def StopUsingWeapon(self, Slot: WeaponSlotData, InputChannel: int): ...
    def StopUsingSecondaryWeapons(self): ...
    def StopUsingSecondarySeatWeapon(self): ...
    def StopUsingPrimaryWeapons(self, InputChannel: int): ...
    def StopReload(self, Slot: WeaponSlotData): ...
    def StopHover(self): ...
    def StopHornSequence(self): ...
    def StopHorn(self): ...
    def StopFeedbackOnOccupants(self, FeedbackData: gbx_game_system_core.FeedbackData, bOnlyLocalPlayers: bool): ...
    def StopEffects(self, EffectType: EVehicleEffectEvent): ...
    def StopEBrakeFeedback(self): ...
    def StopEBrake(self, bTriggerPowerSlide: bool): ...
    def StopBoost(self, bForce: bool): ...
    def StartZooming(self): ...
    def StartUsingWeapon(self, Slot: WeaponSlotData, InputChannel: int): ...
    def StartUsingSecondaryWeapons(self): ...
    def StartUsingSecondarySeatWeapon(self, ReturnValue: bool) -> bool: ...
    def StartUsingPrimaryWeapons(self, InputChannel: int): ...
    def StartHover(self): ...
    def StartHornSequence(self, HornSequenceIn: unreal.WrappedArray[HornSequenceEntry]): ...
    def StartHorn(self): ...
    def StartEBrake(self, bTriggerPowerSlide: bool): ...
    def StartBoost(self): ...
    def SpawnVehicleFromItemPool(self, WorldContextObject: unreal.UObject, ItemPoolData: gbx_inventory.ItemPoolData, Position: core_uobject.Vector, Rotation: core_uobject.Rotator, ReturnValue: OakVehicle) -> OakVehicle: ...
    def SetVehicleSpawnByCatchARideOwner(self, NewCAROwner: engine.Actor): ...
    def SetVehicleDisable(self, bDisable: bool, bEvictOccupant: bool): ...
    def SetThrottleInput(self, Throttle: float): ...
    def SetSteeringInput(self, Steering: float): ...
    def SetNavPainterLayerEnabled(self, Layer: ENavPainterLayer, bEnable: bool): ...
    def SetLockSeatForPlayers(self, bIsSeatLock: bool): ...
    def SetInSiegeMode(self, bWantedInSiegeMode: bool): ...
    def SetHoverInput(self, WantedInput: core_uobject.Vector): ...
    def SetHijackProtectionEnabled(self, bEnable: bool): ...
    def SetHandbrake(self, bHandBrake: bool): ...
    def SetDrivingInputDisabled(self, bDrivingInputDisabled: bool): ...
    def SetDead(self, InDeathType: EVehicleDeathType): ...
    def SetBoost(self, bBoosting: bool): ...
    def SetAirControlInput(self, PitchInput: float, RollInput: float): ...
    def SetAIPathFindingData(self, PathFindingData: gbx_nav.HavokPathFindingData): ...
    def ServerStopEBrake(self, bTriggerPowerSlide: bool): ...
    def ServerStartEBrake(self, bTriggerPowerSlide: bool): ...
    def ResetAIPathFindingData(self): ...
    def Reload(self, Slot: WeaponSlotData): ...
    def RegisterSeatComponent(self, SeatComponent: VehicleSeatComponent): ...
    def ReceiveOnVehicleDestroyWithPlayerIn(self, Seat: VehicleSeatComponent, Character: OakCharacter): ...
    def ReceiveOnPlayerHijacksVehicle(self, Seat: VehicleSeatComponent, Character: OakCharacter): ...
    def ReceiveOnPlayerExitsVehicle(self, Seat: VehicleSeatComponent, Character: OakCharacter): ...
    def ReceiveOnPlayerEntersVehicle(self, Seat: VehicleSeatComponent, Character: OakCharacter): ...
    def ReceiveOnExitVehicleStarted(self, Seat: VehicleSeatComponent, Character: OakCharacter): ...
    def ReceiveOnExitVehicle(self, Seat: VehicleSeatComponent, Character: OakCharacter): ...
    def ReceiveOnEnterVehicle(self, Seat: VehicleSeatComponent, Character: OakCharacter): ...
    def PlayEffects(self, EffectType: EVehicleEffectEvent): ...
    def PerformFeedbackOnOccupants(self, FeedbackData: gbx_game_system_core.FeedbackData, Scale: float, bLoop: bool, bOnlyLocalPlayers: bool): ...
    def OnScanningSuccess(self): ...
    def OnScanningStarted(self): ...
    def OnScanningCancelled(self): ...
    def OnRep_VehicleTeamCollisionChannel(self): ...
    def OnRep_SpawnByCatchARide(self): ...
    def OnRep_Seats(self): ...
    def OnRep_IsEBraking(self): ...
    def OnRep_HealthState(self): ...
    def OnRep_DrivingInputDisabled(self): ...
    def OnRep_Color(self): ...
    def OnReceivedElementalEffect(self, Receiver: engine.Actor, Spec: gbx_game_system_core.StatusEffectSpec, ElementalType: EOakElementalType): ...
    def OnPrimaryOccupantLevelChange(self, OldExperienceLevel: int, NewExperienceLevel: int): ...
    def OnLanded(self, TimeSpentInAir: float, LandAngle: float, NumWheelsOnGround: int, bAllWheelsLanded: bool): ...
    def OnHijackProtectionTriggeredSignature__DelegateSignature(self, Hijacker: engine.Controller, HijackedSeat: VehicleSeatComponent): ...
    def OnHealthResourceDepleted(self, DamageReceiver: gbx_game_system_core.DamageComponent, DamageCauser: gbx_game_system_core.DamageCauserComponent): ...
    def OnGearShifted(self, Gear: int, bIsUpShifting: bool): ...
    def OnDriverAttachStateChanged(self): ...
    def OnBoostEnd(self): ...
    def OnBecameAirborn(self): ...
    def OakVehicleHornEvent__DelegateSignature(self): ...
    def OakVehicleGearShiftEvent__DelegateSignature(self, Gear: int, bIsShiftingUp: bool): ...
    def OakVehicleEvent__DelegateSignature(self): ...
    def OakVehicleBoostComponentChangedEvent__DelegateSignature(self, Current: OakVehicleBoostComponent, Previous: OakVehicleBoostComponent): ...
    def LockWorldTravel(self, Reason: str): ...
    def LockAllSeat(self, bLock: bool): ...
    def K2_OnEBrakeReleased(self): ...
    def K2_OnEBrakePressed(self): ...
    def K2_InitializeSeats(self): ...
    def IsWorldTravelLocked(self, ReturnValue: bool) -> bool: ...
    def IsVehicleScannable(self, ReturnValue: bool) -> bool: ...
    def IsVehicleOwnedSolelyBy(self, Actor: engine.Actor, ReturnValue: bool) -> bool: ...
    def IsVehicleOwnedByPlayer(self, ReturnValue: bool) -> bool: ...
    def IsVehicleOwnedBy(self, Actor: engine.Actor, ReturnValue: bool) -> bool: ...
    def IsVehicleOwned(self, ReturnValue: bool) -> bool: ...
    def IsVehicleOccupant(self, Occupant: engine.Pawn, bIncludeDetaching: bool, ReturnValue: bool) -> bool: ...
    def IsPrimarySeatOccupied(self, bIncludeDetaching: bool, ReturnValue: bool) -> bool: ...
    def IsPreviewModel(self, ReturnValue: bool) -> bool: ...
    def IsPhysicsDisabled(self, ReturnValue: bool) -> bool: ...
    def IsInSiegeMode(self, ReturnValue: bool) -> bool: ...
    def IsInPowerSlideBoost(self, ReturnValue: bool) -> bool: ...
    def IsHovering(self, ReturnValue: bool) -> bool: ...
    def IsEBraking(self, ReturnValue: bool) -> bool: ...
    def IsDrivingInputDisabled(self, ReturnValue: bool) -> bool: ...
    def IsDrifting(self, ReturnValue: bool) -> bool: ...
    def IsDigiThrusting(self, ReturnValue: bool) -> bool: ...
    def IsControllerInVehicle(self, ControllerToCheck: engine.Controller, ReturnValue: bool) -> bool: ...
    def IsBraking(self, ReturnValue: bool) -> bool: ...
    def IsBoosting(self, ReturnValue: bool) -> bool: ...
    def InterpolateToGround(self, InterpolationSpeed: float): ...
    def IgnoreVehicleCollision(self, TargetToIgnore: engine.Actor, AllChilds: bool): ...
    def HasShieldEquipped(self, ReturnValue: bool) -> bool: ...
    def HasPlayerOccupants(self, ReturnValue: bool) -> bool: ...
    def HasOccupants(self, bIncludeDetaching: bool, ReturnValue: bool) -> bool: ...
    def HasHealthOfType(self, HealthTypeToFind: gbx_game_system_core.HealthTypeData, ReturnValue: bool) -> bool: ...
    def HasFriendySeatReserved(self, ReturnValue: bool) -> bool: ...
    def HasAnyDuelingOccupants(self, ReturnValue: bool) -> bool: ...
    def GetVehicleWeapon(self, WantedSlot: WeaponSlotData, ReturnValue: gbx_weapon.Weapon) -> gbx_weapon.Weapon: ...
    def GetThrottleInput(self, ReturnValue: float) -> float: ...
    def GetTeamAttitudeTowardsActor(self, Actor: engine.Actor, ReturnValue: int) -> int: ...
    def GetTargetActorLocation(self, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...
    def GetSteeringInput(self, ReturnValue: float) -> float: ...
    def GetSpeedInMPH(self, ReturnValue: float) -> float: ...
    def GetSpeedInKPH(self, ReturnValue: float) -> float: ...
    def GetSecondaryWeaponSeatPawn(self, bMustBeUnoccupied: bool, ReturnValue: VehicleSeatPawn) -> VehicleSeatPawn: ...
    def GetSeatWeaponRotation(self, Slot: int, bWorldSpace: bool, ReturnValue: core_uobject.Rotator) -> core_uobject.Rotator: ...
    def GetSeatOccupant(self, SeatSlot: int, bIncludeDetaching: bool, ReturnValue: engine.Pawn) -> engine.Pawn: ...
    def GetSeatCountUse(self, ReturnValue: int) -> int: ...
    def GetSeatCount(self, ReturnValue: int) -> int: ...
    def GetSeatComponent(self, Slot: int, ReturnValue: VehicleSeatComponent) -> VehicleSeatComponent: ...
    def GetRotationDelta(self, ReturnValue: core_uobject.Rotator) -> core_uobject.Rotator: ...
    def GetPrimaryOccupant(self, bIncludeDetaching: bool, ReturnValue: engine.Pawn) -> engine.Pawn: ...
    def GetPlanarSpeedInMPH(self, ReturnValue: float) -> float: ...
    def GetOccupantSeatSlot(self, Occupant: engine.Pawn, bIncludeDetaching: bool, ReturnValue: int) -> int: ...
    def GetOccupantSeat(self, Occupant: engine.Pawn, bIncludeDetaching: bool, ReturnValue: VehicleSeatComponent) -> VehicleSeatComponent: ...
    def GetOakDamageComponent(self, ReturnValue: OakDamageComponent) -> OakDamageComponent: ...
    def GetOakAIController(self, ReturnValue: OakAIController) -> OakAIController: ...
    def GetMass(self, ReturnValue: float) -> float: ...
    def GetLocalPlayer(self, Controllers: unreal.WrappedArray[engine.PlayerController], ReturnValue: int) -> int: ...
    def GetLastFrameVelocity(self, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...
    def GetGroundAjustement(self, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...
    def GetGearsCount(self, ReturnValue: int) -> int: ...
    def GetFirstHealthInformationByType(self, HealthTypeToFind: gbx_game_system_core.HealthTypeData, OutHealthType: gbx_game_system_core.HealthType, ReturnValue: bool) -> bool: ...
    def GetAvailableSeatsForPlayers(self, ReturnValue: unreal.WrappedArray[VehicleSeatComponent]) -> unreal.WrappedArray[VehicleSeatComponent]: ...
    def GetAllOccupants(self, bIncludeDetaching: bool, ReturnValue: unreal.WrappedArray[engine.Pawn]) -> unreal.WrappedArray[engine.Pawn]: ...
    def GetActiveWeapon(self, Slot: int, ReturnValue: gbx_weapon.Weapon) -> gbx_weapon.Weapon: ...
    def FlipOver(self, AwayFromActor: engine.Actor): ...
    def FindNearestSeatComponent(self, SearchActor: engine.Actor, MaxDistance: float, bIsHostile: bool, bSearchNearestSeat: bool, ReturnValue: VehicleSeatComponent) -> VehicleSeatComponent: ...
    def FindAssociatedOakVehicle(self, Object: unreal.UObject, ReturnValue: OakVehicle) -> OakVehicle: ...
    def EnableVehiclePhysics(self, Reason: str): ...
    def EnableTransitionControl(self, bEnable: bool): ...
    def EnableDoorTeleportFailSafe(self, Offset: core_uobject.Vector, TestDelay: float): ...
    def EnableAIUseSlot(self, bEnable: bool): ...
    def EjectOccupants(self, bKillOccupants: bool, bForceResurrectKilledPlayers: bool, bInstantKill: bool, bFellOutOfWorld: bool, bInstantDetach: bool): ...
    def DisableVehiclePhysics(self, Reason: str): ...
    def DigistructOutTeleport(self): ...
    def DigistructOutEffectOnly(self): ...
    def DigistructIn(self): ...
    def DebugBraking(self): ...
    def DamageReaction_DetachBreakable(self, Summary: gbx_game_system_core.DamageReactionEventSummary): ...
    def CopyVehicleInertiaTensor(self): ...
    def ClientVehicleSpawnedFromCatchARide(self): ...
    def ClearNavPainterLayer(self, Layer: ENavPainterLayer): ...
    def ClearInputWithFilter(self, Filter: int): ...
    def ClearAllInput(self): ...
    def CanVehicleBeControlled(self, ReturnValue: bool) -> bool: ...
    def CanHover(self, ReturnValue: bool) -> bool: ...
    def CanDrive(self, ReturnValue: bool) -> bool: ...
    def CanBeFlippedOver(self, bMustBeUnoccupied: bool, ReturnValue: bool) -> bool: ...
    def BroadcastHornStoppedEvent(self): ...
    def BroadcastHornStartedEvent(self): ...
    def BlendedRPMAttenuation(self): ...
    def BeforeVehicleDestroyedEvent(self, VehicleDeathType: EVehicleDeathType): ...
    def AddVehicleForce(self, ForceToAdd: core_uobject.Vector, ForceSource: str): ...
    def AddImpulseFromMelee(self, ImpulseStrength: float, UpRatio: float, InstigatedBy: engine.Controller): ...


class OakVehicleAspectData(gbx_inventory.InventoryAspectData): ...


class OakVehicleAdditionalWwiseConfigurationEventsAspectData(OakVehicleAspectData):
    AdditionalWwiseConfigurationEvents: unreal.WrappedArray[wwise_audio.WwiseEvent]



class OakVehicleBalanceStateComponent(gbx_vehicle.VehicleInventoryBalanceStateComponent):
    VehicleAspectList: unreal.WrappedArray[OakVehicleAspectData]
    def OnShieldsFilled(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def OnShieldsDepleted(self, ShieldPool: gbx_game_system_core.GameResourcePoolReference): ...
    def OnShieldCurrentValueUpdate(self, ResourcePoolReference: gbx_game_system_core.GameResourcePoolReference, CurrentValue: float): ...
    def OnHealthTypeVeryLow(self, HealthType: gbx_game_system_core.HealthType, Index: int): ...
    def OnHealthTypeNormal(self, HealthType: gbx_game_system_core.HealthType, Index: int): ...
    def OnHealthTypeLow(self, HealthType: gbx_game_system_core.HealthType, Index: int): ...
    def OnHealthTypeAdded(self, HealthType: gbx_game_system_core.HealthType, Index: int): ...
    def OnBoostStarted(self): ...
    def OnBoostFinished(self): ...


class OakVehicleBoostData(gbx_vehicle.VehicleBoostData):
    StartBoostFeedback: gbx_game_system_core.FeedbackData
    BoostLoopFeedback: gbx_game_system_core.FeedbackData
    BoostStatusEffectData: gbx_game_system_core.StatusEffectData
    BoostDamageData: unreal.UClass
    BoostDamageTickInterval: float
    DamagePrimCompTag: str
    BoostCollisionDamageData: unreal.UClass



class OakVehicleBoostComponent(gbx_vehicle.VehicleBoostComponent):

    def OnDamageCompOverlap(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...


class OakVehicleContextResolver(gbx_game_system_core.AttributeContextResolver):
    ComponentTag: str



class OakVehicleDamageComponent(OakDamageComponent):
    OverrideByParts: unreal.WrappedArray[VehicleOverrideData]



class OakVehicleEffectAspectData(OakVehicleAspectData):
    Effects: unreal.WrappedArray[VehicleEffectData]
    EffectsData: unreal.WrappedArray[BaseVehicleEffectData]
    ComparisonTag: str



class OakVehicleEffectAspectDataCollection(OakVehicleAspectData):
    EffectAspectDataList: unreal.WrappedArray[OakVehicleEffectAspectData]



class OakVehicleInputComponent(gbx_input.GbxInputComponent):
    SteerActionData: gbx_input.GbxInputActionData_Continuous_Vector
    ThrottleActionData: gbx_input.GbxInputActionData_Continuous_Vector
    LookActionData: gbx_input.GbxInputActionData_Continuous_Vector
    AirControlActionData: gbx_input.GbxInputActionData_Continuous_Vector
    OwningVehicle: OakVehicle
    bAirControlNeedsNeutralStick: bool
    bUseCameraRelativeSteeringMode: bool
    CameraRelativeDrivingMode: gbx_vehicle.EVehicleCameraRelativeDrivingMode
    CameraRelativeAngleToSteeringCurve: engine.RuntimeFloatCurve
    bUseAutoEBrake: bool
    AutoEBrakeSpeedThresholdKPH: float
    AutoEBrakeSteeringThreshold: float
    AutoEBrakeWantedDirAngleThreshold: float
    bUseStickLengthAsThrottle: bool
    ForwardInputAngleThreshold: float
    def OnVehicleAirborne(self): ...


class OakVehicleManager(unreal.UObject): ...


class OakVehicleMaterialAspectData(gbx_inventory.InventoryMaterialAspectData):
    SkinParameters: SkinParameterData



class OakVehicleMovementComponentContextResolver(gbx_game_system_core.AttributeContextResolver): ...


class OakVehiclePartData(gbx_vehicle.VehiclePartData):
    VehicleClassID: VehicleClassIdentifier



class OakProjectileVehicleData(gbx_runtime.GbxDataAsset):
    Mesh: engine.StaticMesh
    DamageInfo: gbx_game_system_core.DamageInfo



class OakVehicleProjectile(OakProjectile):
    FuseTime: float
    InitOverlapTime: float
    Vehicle: OakVehicle
    MeshProjectile: engine.StaticMeshComponent
    ProjectileMovement: gbx_weapon.GbxProjectileMovementComponent
    ProximityDetector: engine.SphereComponent
    MainCollision: engine.SphereComponent
    ProjectileData: OakProjectileVehicleData
    def ProximityDetectorOverlap(self, OverlappedComp: engine.PrimitiveComponent, Other: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def ProximityDetectorHit(self, HitComp: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, NormalImpulse: core_uobject.Vector, Hit: engine.HitResult): ...
    def OnHit(self, HitComp: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, NormalImpulse: core_uobject.Vector, Hit: engine.HitResult): ...


class OakVehiclePropertyValueResolver(gbx_game_system_core.AttributeValueResolver):
    ValueToResolve: EVehiclePropertyValueType



class OakVehicleSettings(engine.DeveloperSettings):
    MaximumAoeDamageDistance: float
    DefaultVehicleManufacturer: core_uobject.SoftObjectPath
    DefaultVehicleCategory: core_uobject.SoftObjectPath
    DefaultVehicleManufacturerData: gbx_inventory.InventoryManufacturerBalanceData
    DefaultVehiclePartDataClass: unreal.UClass
    AlwaysUnlockedDLCParts: unreal.WrappedArray[str]
    AlwaysUnlockedDLCVehicles: unreal.WrappedArray[str]
    bAlwaysDestroyOtherCARVehicle: bool
    bNeverDespawnCARVehicle: bool
    EnumerationSources: unreal.WrappedArray[str]
    def EnumerateValidPartAndWheel(self, PartAndWheels: unreal.WrappedArray[str]): ...
    def EnumeratePropertiesByType(self, Data: unreal.UObject, Properties: unreal.WrappedArray[str]): ...
    def CleanVehiclePartName(self, Name: str, ReturnValue: str) -> str: ...


class OakVehicleShieldAspectData(OakVehicleAspectData):
    ShieldHealth: gbx_game_system_core.HealthType
    ComparisonTag: str



class OakVehicleSpawner(OakSpawner): ...


class OakVehicleSpawnPoint(OakSpawnPoint):
    bDigistructOnSpawn: bool
    bSpawnAttached: bool
    bAllowInterpolationToGround: bool
    IntroSpline: engine.Actor
    IntroSplineOffset: float
    IntroSplineAIAction: unreal.UClass
    PatrolSpline: engine.Actor
    PatrolSplineOffset: float
    bPatrolSpline: bool
    PatrolSplineAIAction: unreal.UClass
    ReplaceDefaultAITree: unreal.UClass
    RubberbandWantedSpeed: float
    RubberbandSpeedData: RubberbandSpeedData
    bApplyRubberbandOnIntro: bool
    def TriggerOnVehicleSpawned(self, SpawnerComponent: gbx_spawn.SpawnPointComponent, Actor: engine.Actor): ...
    def PostSpawnIntro(self, Actor: engine.Actor): ...


class OakVehicleSpeedTriggerBox(OakTriggerBox):
    WantedSpeed: float
    WantedSteering: float
    bMaxSpeed: bool
    bUseBoost: bool
    bForceReverse: bool
    bUseHandbrake: bool
    Duration: float
    def VehicleTouched(self, OtherActor: engine.Actor, bIsPlayer: bool, OptionalTouchedComponent: engine.PrimitiveComponent): ...


class OakVehicleWeaponFireProjectileComponent(gbx_weapon.WeaponFireProjectileComponent):
    DummyProjectiles: unreal.WrappedArray[DummyProjectileInfo]
    DelayDummyProjectile: float
    ProjectileData: gbx_runtime.GbxDataAsset
    ProjectileTypes: unreal.WrappedArray[unreal.UClass]
    def SpawnDummyProjectile(self, Index: int): ...
    def SpawnAllDummyProjectiles(self): ...
    def SetCurrentFiredProjectileIndex(self, NewIndex: int): ...
    def PlayDummyProjectileTransitOut(self, Index: int, PlayRate: float): ...
    def PlayDummyProjectileTransitIn(self, Index: int, PlayRate: float): ...
    def NotifyHiddenDummyProjectile(self, Hidden: bool): ...
    def HideDummyProjectile(self): ...
    def GetDummyProjectile(self, Index: int, ReturnValue: engine.Actor) -> engine.Actor: ...
    def GetCurrentFiredProjectileIndex(self, ReturnValue: int) -> int: ...
    def CycleCurrentFiredProjectileIndex(self, Step: int, ReturnValue: int) -> int: ...


class OakVehicleWeaponMultiInputFireProjectileComponent(OakVehicleWeaponFireProjectileComponent):
    AltProjectileTemplate: unreal.UClass
    AltLightProjectileData: unreal.UClass
    AltFiringPatternData: gbx_weapon.FiringPattern



class OakVoiceOfGodComponent(engine.StaticMeshComponent):
    VoGTextureParamName: str
    VoGSpeakerParamName: str
    VoGFadeName: str
    VoGMaterialName: str
    MaxFadeTime: float
    ParticleDepth: float
    MaxRotationLag: core_uobject.Rotator
    LilithMaterial: engine.MaterialInstance
    TannisMaterial: engine.MaterialInstance
    ScreenParticle: engine.ParticleSystem
    MediaData: gbx_game_system_core.GbxMediaData
    MediaPlayer: media_assets.MediaPlayer
    ScreenParticleManagerComponent: gbx_game_system_core.ScreenParticleManagerComponent
    LilithMaterialInstanceDynamic: engine.MaterialInstanceDynamic
    TannisMaterialInstanceDynamic: engine.MaterialInstanceDynamic
    def OnEchoStarted(self, CharacterData: CharacterEchoData, PerformanceData: PerformanceEchoData, MoodKeyframe: str, VoGMoodKey: str, VoGSpeakerID: gbx_dialog.EVoiceOfGodSpeaker, bIsNewEcho: bool): ...
    def OnEchoFinished(self, CharacterData: CharacterEchoData, PerformanceData: PerformanceEchoData, bCompleted: bool): ...


class OakWeapon_IronBearHardPoint(OakWeapon):
    UIHardpointType: EIronBearUIHardpointType
    HardPointAugment: OakActionAbilityAugmentData_IronBear
    CustomizationComponent: OakCustomizationComponent
    CoreStrengthReductionCoefficientData: gbx_game_system_core.AttributeInitializationData
    IronBear: OakCharacter_IronBear
    HardPointData: IronBearHardPointData
    HardPointAugmentMod: OakActionAbilityAugmentData_IronBear
    HUDWidget: GFxIronbearWeaponWidget
    IronBearDurationPoolReference: gbx_game_system_core.GameResourcePoolReference
    def SetHUDWidget(self, InHUDWidget: GFxIronbearWeaponWidget): ...
    def OnWeaponUsed(self): ...
    def OnRep_IronBear(self): ...
    def OnRep_HardPointData(self): ...
    def OnRep_HardPointAugmentMod(self): ...
    def OnFirstPersonCreated(self): ...
    def NotifyPlayerLeaving(self): ...
    def NotifyBubbleShieldEnabledChanged(self, bEnabled: bool): ...
    def K2_InitializeMod1P(self): ...
    def K2_InitializeMod(self): ...
    def K2_Initialize1P(self): ...
    def K2_Initialize(self): ...
    def InitializeAugments(self, InAugmentMod: OakActionAbilityAugmentData): ...
    def HasMod(self, ModType: EIronBearModType, ReturnValue: bool) -> bool: ...
    def GetWeaponAmmoPool(self, ReturnValue: gbx_game_system_core.GameResourcePoolReference) -> gbx_game_system_core.GameResourcePoolReference: ...
    def GetMod(self, ReturnValue: EIronBearModType) -> EIronBearModType: ...
    def EndHardPointAction(self): ...
    def BeginHardPointAction(self): ...


class OakWeaponVehicleData(gbx_runtime.GbxDataAsset):
    AspectList: unreal.WrappedArray[gbx_inventory.InventoryAspectData]
    SkeletalMesh: engine.SkeletalMesh
    Scale: core_uobject.Vector
    bNeverDistanceCull: bool
    bMeshUseAttachParentBound: bool
    bUseDualWeaponMesh: bool
    bChildMeshUseAttachParentBound: bool
    LeftParentSocket: str
    LeftMeshComponentName: str
    LeftSkeletalMesh: engine.SkeletalMesh
    LeftScale: core_uobject.Vector
    LeftOffset: core_uobject.Vector
    RightParentSocket: str
    RightMeshComponentName: str
    RightSkeletalMesh: engine.SkeletalMesh
    RightScale: core_uobject.Vector
    RightOffset: core_uobject.Vector
    bUsePhysicAsset: bool
    PhysicAsset: engine.PhysicsAsset
    AnimClass: unreal.UClass
    ShotAnimation: engine.AnimSequenceBase
    ShotAnimationBlendInTime: float
    ShotAnimationBlendOutTime: float
    ShotAnimationPlayRate: float
    SlotName: str
    DualWeaponAnimClass: unreal.UClass
    DualWeaponShotAnimation: engine.AnimSequenceBase
    DualWeaponShotAnimationBlendInTime: float
    DualWeaponShotAnimationBlendOutTime: float
    DualWeaponShotAnimationPlayRate: float
    DualWeaponSlotName: str
    VehicleWeaponsSwf: scaleform_ui.SwfMovie
    WeaponFrameName: str
    bEnableSecondaryAction: bool
    SecondaryActionUseMode: int
    bUseIdleVFX: bool
    IdleVFXType: int
    bUseLinkedSlotDualWield: bool
    LinkedSlotSocketName: str



class OakWeapon_Vehicle(OakWeapon):
    PreferredSlotId: int
    VehicleWeapon: VehicleWeapons
    DataAsset: OakWeaponVehicleData
    def OnPawnDetachedFromWeapon(self, Pawn: engine.Pawn, Controller: engine.Controller): ...


class OakWeaponAnimInstance(gbx_weapon.WeaponAnimInstance):
    GripPoses: unreal.WrappedArray[engine.AnimSequence]
    OakWeapon: OakWeapon
    GripPose: engine.AnimSequence
    ForegripPose: engine.AnimSequence
    def UpdateGripPoses(self): ...


class OakWeaponAttributeMultiContextResolver(gbx_game_system_core.AttributeContextResolver):
    Slots: unreal.WrappedArray[WeaponSlotData]



class OakWeaponAudioProviderBase(gbx_weapon.WeaponAudioProviderComponent):
    PrimaryConfigurationEvent: wwise_audio.WwiseEvent
    WeaponFirePlaybackSocket: str
    WeaponPlaybackOffset: core_uobject.Vector
    DefaultAudioPlaybackSocket: str
    DefaultAudioRadius: float
    AdditionalBodyLoops: unreal.WrappedArray[WeaponAudioBodyLoop]
    BodyLoopPlaybackStates: int
    PreFireEvent: wwise_audio.WwiseEvent
    PostFireEvent: wwise_audio.WwiseEvent
    PostFireMechEvent: wwise_audio.WwiseEvent
    ModeSwitchFailEvent: wwise_audio.WwiseEvent
    DryFireEvent: wwise_audio.WwiseEvent
    ChargeStartEvent: wwise_audio.WwiseEvent
    ChargeStopEvent: wwise_audio.WwiseEvent
    ConfigurationWwiseEvents: unreal.WrappedArray[WeaponConfigurationEvent]
    ConfigurationRtpcs: unreal.WrappedArray[WeaponConfigurationRtpc]
    AttachedFoleyAccessories: unreal.WrappedArray[gbx_audio.FoleyAccessoryComponent]
    CachedAudioGlobals: OakAudioGlobalsData
    AdditionalEventsToPrepare: unreal.WrappedArray[wwise_audio.WwiseEvent]
    CachedDefaultAudioComponent: wwise_audio.WwiseAudioComponent
    WeaponPrivate: gbx_weapon.Weapon
    OwningOakCharacter: OakCharacter
    PreparedEvents: unreal.WrappedArray[wwise_audio.WwiseEvent]
    PreparedSwitches: unreal.WrappedArray[wwise_audio.WwiseSwitch]
    def OnDetachWeapon(self): ...
    def OnAttachWeapon(self): ...
    def NotifyReloadStarted(self): ...
    def NotifyReloadEnded(self): ...
    def NotifyPutDown(self): ...
    def NotifyHidden(self, bIsHidden: bool): ...
    def NotifyEquipped(self): ...
    def ChargeStarted(self): ...
    def ChargedStopped(self): ...


class OakWeaponAudioProviderComponent(OakWeaponAudioProviderBase):
    bWantsShellCasingAudio: bool
    ShellCasingParams: WeaponShellCasingAudioParameters
    GunshotEvent: wwise_audio.WwiseEvent
    TargetLockedEvent: wwise_audio.WwiseEvent
    TargetUnlockedEvent: wwise_audio.WwiseEvent
    CachedWeaponHeatComp: gbx_weapon.WeaponHeatComponent
    def OnTargetLockedStateChange(self, EventWeapon: gbx_weapon.Weapon, bLockedOn: bool): ...


class OakBeamWeaponAudioProviderComponent(OakWeaponAudioProviderBase):
    BeamStartEvent: wwise_audio.WwiseEvent
    BeamBreakEvent: wwise_audio.WwiseEvent



class GbxCondition_WeaponPartType(gbx_runtime.GbxCondition):
    PartType: EOakWeaponPartType
    PartValue: int



class OakWeaponGlobalsData(gbx_runtime.GbxDataAsset):
    TriggerFeedback: unreal.WrappedArray[OakWeaponTriggerFeedbackDefinitionData]
    ZoomFeedback: unreal.WrappedArray[OakWeaponTriggerFeedbackDefinitionData]
    VehicleTriggerFeedback: unreal.WrappedArray[OakVehicleWeaponTriggerFeedbackDefinitionData]



class OakWeaponMayhemGlobalsData(gbx_runtime.GbxDataAsset):
    LevelUIStatFormatText: str
    ExperienceLevelBoostCurve: engine.RuntimeFloatCurve
    PartMonetaryValueModifierCurve: engine.RuntimeFloatCurve
    PartInventoryScoreModifierCurve: engine.RuntimeFloatCurve



class OakWeaponMayhemPartData(gbx_inventory.InventoryGenericPartData):
    MayhemLevel: int
    MayhemLevelStat: gbx_game_system_core.UIStatData_Text



class OakWeaponMayhemExperienceLevelAttributeValueResolver(gbx_game_system_core.AttributeValueResolver): ...


class GrenadeModMayhemExperienceLevelAttributeValueResolver(gbx_game_system_core.AttributeValueResolver): ...


class OakWeaponNamingStrategyData(gbx_inventory.InventoryNamingStrategyData):
    NamingData: unreal.WrappedArray[OakWeaponAttributeNamingData]
    NamingAttributeThresholds: unreal.WrappedArray[OakWeaponNamingAttributeThresholdData]
    SingleNames: unreal.WrappedArray[OakWeaponNamingAttributePair]
    DoubleNames: unreal.WrappedArray[OakWeaponNamingAttributePair]
    CombinationNames: unreal.WrappedArray[OakWeaponNamingAttributePair]



class WeaponDataTelemetryCommandlet(engine.Commandlet): ...


class OakWeaponVehicleByDataAsset(OakWeapon_Vehicle):
    WeaponMesh3P: engine.SkeletalMeshComponent
    OakDamage: OakDamageComponent
    LeftWeaponMesh3P: engine.SkeletalMeshComponent
    RightWeaponMesh3P: engine.SkeletalMeshComponent
    Vehicle: OakVehicle
    bIsSecondaryInUse: bool
    def StopIdleEffects(self): ...
    def StartIdleEffects(self): ...
    def OnRep_SecondaryUse(self): ...
    def IsSecondaryInUse(self, ReturnValue: bool) -> bool: ...


class OakWindActor(engine.GbxWindActor):
    MaxVariationAngleBetweenGusts: float
    MaxVariationAngle: float
    DirectionChangeDuration: gbx_runtime.NumericRange
    DelayBetweenGusts: gbx_runtime.NumericRange
    GustBuildupDuration: gbx_runtime.NumericRange
    GustFalloffDurationPercent: float
    ChanceToReGust: float
    MinWindSpeed: float
    MaxWindSpeed: float
    PreviewStrength: float
    BaseWindSpeed: float
    BaseMinGust: float
    BaseMaxGust: float
    bUseYawJitter: bool
    RotationJitterAngle: float
    RotationJitterFrequency: float
    UniversalMaterialParameterCollection: engine.MaterialParameterCollection
    WindStrength_MaterialParameterName: str
    WindSpeed_MaterialParameterName: str
    WindDirection_MaterialParameterName: str
    MinGustAmount_MaterialParameterName: str
    MaxGustAmount_MaterialParameterName: str
    BaseRotation: core_uobject.Rotator
    RepDirection: RepWindDirection
    RepGust: RepWindGust
    CurrentWindRotation: core_uobject.Rotator
    CurrentWindSpeed: float
    VectorField: WindVectorField
    def OnRep_RepGust(self): ...
    def OnRep_RepDirection(self): ...
    def GetWindVectorFieldAtLocation(self, WorldContextObject: unreal.UObject, InLocation: core_uobject.Vector, ReturnValue: core_uobject.LinearColor) -> core_uobject.LinearColor: ...
    def GetWindDirectionAtLocation(self, WorldContextObject: unreal.UObject, InLocation: core_uobject.Vector, Speed: float, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...


class OakWorldAudioProvider(engine.Actor):
    GlobalEfx: wwise_audio.WwiseAuxBus
    WetPercent: float
    WetPercentMin: float
    ReverbScaleDistance: float
    ReverbTransitionTime: float
    ChildAuxBusses: unreal.WrappedArray[wwise_audio.WwiseAuxBus]
    OutdoornessOcclusionStrengthCurve: engine.CurveFloat
    OutdoornessDistanceReverbFactorCurve: engine.CurveFloat
    ReverbOverDistanceShapeCurve: engine.CurveFloat
    ReverbOverDistanceMaxRange: float
    GlobalWetnessScaleDB: float
    InteriorShort: wwise_audio.WwiseAuxBus
    InteriorShortDuration: float
    InteriorShortWetnessScaleDB: float
    InteriorLong: wwise_audio.WwiseAuxBus
    InteriorLongDuration: float
    InteriorLongWetnessScaleDB: float
    OutdoorShort: wwise_audio.WwiseAuxBus
    OutdoorShortDuration: float
    OutdoorShortWetnessScaleDB: float
    OutdoorLong: wwise_audio.WwiseAuxBus
    OutdoorLongDuration: float
    OutdoorLongWetnessScaleDB: float
    CachedAudioGlobals: OakAudioGlobalsData
    def PushEffect(self, Efx: wwise_audio.WwiseAuxBus): ...
    def PopEffect(self, Efx: wwise_audio.WwiseAuxBus): ...


class OakWorldDiscoveryArea(engine.Actor):
    DiscoveryComponent: DiscoveryAreaComponent



class MapIconAnchor(engine.SceneComponent):
    IconInfo: ZoneMapIconInfo
    AssociatedMapIcon: OakZoneMapIcon



class OakZoneMapIcon(gbx_ui.GbxGFxButton):
    OwningAnchor: MapIconAnchor
    OwningContainer: gbx_ui.GbxGFxObject



class OakZoneMapFriendIcon(gbx_ui.GbxGFxButton): ...


class OakZoneMapMissionWaypointIcon(OakZoneMapIcon):
    WaypointEntry: ZoneMapMissionWaypointEntry



class OakZoneMapSettings(engine.DeveloperSettings):
    ZoneMapLists: unreal.WrappedArray[core_uobject.SoftObjectPath]
    ZoneMapGlobalData: core_uobject.SoftObjectPath
    bMiniMapFacePlayerDirection: bool
    bShowLegendariesOnMiniMap: bool
    MiniMapPitchAngle: float
    bGenerateFogTexture: bool



class OnlineMessageAnimationWidget(ManagedWidget):
    TitleField: gbx_ui.GbxRichTextBlock
    PlayerNameField: gbx_ui.GbxRichTextBlock
    DescriptionField: gbx_ui.GbxRichTextBlock
    UserPic: umg.Image
    SpinnerWidget: umg.Image
    OnlineMessageInputComponent: engine.InputComponent
    OnSpawnAudioEventName: str
    OnDespawnAudioEventName: str
    SpinnerAnimation: umg.WidgetAnimation



class OperativeBarrier(InteractiveObject):
    FindNewDeployLocationParams: gbx_game_system_core.EnvQueryParams
    BarrierMod1EffectData: gbx_game_system_core.StatusEffectData
    BarrierMod5EffectData: gbx_game_system_core.StatusEffectData
    BarrierMod5DecayDuration: gbx_game_system_core.DataTableValueHandle
    TurboDuration: gbx_game_system_core.DataTableValueHandle
    TurbochargeDefault: gbx_game_system_core.StatusEffectData
    DamageScalarFormula: gbx_game_system_core.AttributeInitializationData
    BeginAuraBuffDurationFormula: gbx_game_system_core.AttributeInitializationData
    EndAuraBuffDurationFormula: gbx_game_system_core.AttributeInitializationData
    OwningCharacterBuffMagnitudeScale: gbx_game_system_core.AttributeInitializationData
    DamageComponent: OakDamageComponent
    CustomizationComponent: gbx_game_system_core.GbxCustomizationComponent
    AuraOverlapPrimitive: engine.PrimitiveComponent
    UsableComponent: gbx_game_system_core.UsableComponent
    BarrierTouchComponent: engine.PrimitiveComponent
    TrackedBuffTargets: unreal.WrappedArray[ShieldBarrierTrackedBuffTarget]
    PersistentAuraAttributeEffects_Owner: unreal.WrappedArray[gbx_game_system_core.AttributeEffectData]
    PersistentAuraAttributeEffects_Default: unreal.WrappedArray[gbx_game_system_core.AttributeEffectData]
    BeginAuraStatusEffect: OperativeBarrierStatusEffectInfo
    EndAuraStatusEffect: OperativeBarrierStatusEffectInfo
    Shield: Shield
    DamageScalar: engine.GbxAttributeFloat
    ProjectileOverlapComponents: unreal.WrappedArray[engine.PrimitiveComponent]
    OwnerActionAbility: OakActionAbility_Barrier
    RuntimeMods: OakActionAbilityEnumMaskHelper
    bIsTurbocharged: bool
    CarriedShotModifier: gbx_weapon.WeaponShotModifier
    bIsShuttingDown: bool
    BarrierState: OperativeBarrierState
    def UnregisterProjectileOverlapComponent(self, Component: engine.PrimitiveComponent): ...
    def ToggleBarrierState(self, ReturnValue: bool) -> bool: ...
    def SetupBarrierMods(self): ...
    def SetIsTransitioningStates(self, InbIsTransitioningStates: bool): ...
    def RegisterProjectileOverlapComponent(self, Component: engine.PrimitiveComponent): ...
    def OnTurbochargedStateChanged(self, InbIsTurbocharged: bool): ...
    def OnRep_RuntimeMods(self): ...
    def OnRep_bIsTurbocharged(self): ...
    def OnRep_BarrierState(self): ...
    def OnDamageScalarChanged(self, OldValue: float, NewValue: float): ...
    def OnBarrierAbsorbedDamage(self, DamageSource: gbx_game_system_core.DamageSource, InDamageType: gbx_game_system_core.GbxDamageType): ...
    def NotifyActorComponentEndOverlap(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int): ...
    def NotifyActorComponentBeginOverlap(self, OverlappedComp: engine.PrimitiveComponent, Other: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def Multicast_PlayEffectsOnAugment(self, AugmentClass: unreal.UClass, AugmentName: str, AdditionalContext: unreal.UObject): ...
    def HasBarrierMod(self, ModType: EOperativeBarrierModType, ReturnValue: bool) -> bool: ...
    def HandleProjectileOverlap(self, OverlappedComp: engine.PrimitiveComponent, Other: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def HandleBarrierStateChange(self, OldState: EOperativeBarrierState, NewState: EOperativeBarrierState): ...
    def ApplyDeterrenceFieldToEnemy(self, Enemy: engine.Actor): ...


class OperativeCannonAnimInstance(gbx_game_system_core.GbxAnimInstance):
    GbxCharacterOwner: gbx_game_system_core.GbxCharacter
    Pitch: float
    Yaw: float
    AimFacingLocation: core_uobject.Vector



class OperativeCharacterComponent(PlayerCharacterComponent):

    def SetOperativeDeviceVisible(self, bVisible: bool): ...


class OperativeStandInComponent(StandInCharacterComponent):
    ActionAbilities: unreal.WrappedArray[OperativeStandInActionAbility]
    ActionSkillDeviceComponent: engine.MeshComponent
    CurrentActionSkillSlot: CurrentOperativeStandInAbilitySlotInfo
    CurrentGrenadeSlot: CurrentOperativeStandInAbilitySlotInfo
    LastAbilitySlotSlotted: OakPlayerAbilitySlotData
    def SetActionSkillDeviceVisible(self, bVisible: bool): ...


class OptionDescriptionData(gbx_runtime.GbxDataAsset):
    AudioOptionDescription: unreal.WrappedArray[OptionDescriptionItem]
    NetworkOptionDescription: unreal.WrappedArray[OptionDescriptionItem]
    ControlsOptionDescription: unreal.WrappedArray[OptionDescriptionItem]
    AdvancedControlsOptionDescription: unreal.WrappedArray[OptionDescriptionItem]
    GameplayOptionDescription: unreal.WrappedArray[OptionDescriptionItem]
    GraphicsOptionDescription: unreal.WrappedArray[OptionDescriptionItem]
    GraphicsAdvancedOptionDescription: unreal.WrappedArray[OptionDescriptionItem]
    GraphicsBenchmarkOptionsDescription: unreal.WrappedArray[OptionDescriptionItem]
    AccessibilityOptionsDescription: unreal.WrappedArray[OptionDescriptionItem]
    KeyboardCommonControlSchemes: unreal.WrappedArray[RebindContextAndDescription]
    KeyboardWalkingControlSchemes: unreal.WrappedArray[RebindContextAndDescription]
    KeyboardVehicleControlSchemes: unreal.WrappedArray[RebindContextAndDescription]
    GamepadCommonControlScheme: RebindContextAndDescription
    GamepadWalkingStickTypeToSchemesMap: unreal.WrappedArray[GamepadStickTypeToSchemes]
    GamepadDrivingStickTypeToSchemesMap: unreal.WrappedArray[GamepadStickTypeToSchemes]
    WalkingThumbstickSchemeDescription: OptionDescriptionItem
    WalkingButtonSchemeDescription: OptionDescriptionItem
    DrivingThumbstickSchemeDescription: OptionDescriptionItem
    DrivingButtonSchemeDescription: OptionDescriptionItem



class OutOfMapWaypointComponent(gbx_mission.MissionIconComponent):
    IconData: InWorldIconData
    VisibleDistanceOverride: float
    HiddenDistanceOverride: float
    MissionClass: unreal.UClass
    IconGuid: core_uobject.Guid



class OutrunnerVehicleAnimInstance(OakVehicleAnimInstance):
    bOverrideParentAnimInstance: bool
    BodyCycleFromEngineCycleRatio: float
    IdleRPM: float
    EngineRunningAmplitude: float
    EngineIdleAmplitude: float
    MufflerAmplitudeMutliplier: float
    EngineRunningFrequency: float
    EngineIdleFrequency: float
    MufflerFrequencyMutliplier: float
    AnimCharacterEnter: engine.AnimSequence
    AnimCharacterExit: engine.AnimSequence
    AnimHoodDown: engine.AnimSequence
    AnimBrakeBounceA: engine.AnimSequence
    AnimBrakeBounceB: engine.AnimSequence
    BlendBodyAlpha: float
    BlendAccelAlpha: float
    def OnPrimaryOccupantExit(self): ...
    def OnPrimaryOccupantEnter(self): ...


class ParticleModuleLocationProceduralMeshSurface(engine.ParticleModuleLocationBase):
    ProceduralMeshActorName: str
    ProceduralMeshComponentName: str



class PassthroughBalanceStateComponent(gbx_game_system_core.BalanceStateComponent):
    PassthroughTarget: gbx_game_system_core.BalanceStateComponent
    def OnPassthroughTargetLevelChanged(self, OldLevel: int, NewLevel: int): ...


class PatchExpansionData(gbx_runtime.GbxDataAsset):
    RegionManagerData: RegionManagerData
    ChallengeLists: unreal.WrappedArray[gbx_game_system_core.ChallengeList]
    GameStatLists: unreal.WrappedArray[gbx_game_system_core.GameStatList]
    LoadingScreenData: OakLoadingScreenExpansionData
    MayhemModeData: unreal.WrappedArray[OakMayhemModifiersDataAsset]
    MayhemModeUIData: unreal.WrappedArray[OakMayhemUIDataAsset]
    MayhemModeTwoData: unreal.WrappedArray[MayhemOverrideDataAsset]
    SourceLeague: int
    LeagueTravelStationTransform: core_uobject.Transform
    LeagueExitTravelStationTransform: core_uobject.Transform
    AdditionalStreamingEvents: unreal.WrappedArray[OakStreamingInteractionEvent]
    BadassEventBlackListedStrings: unreal.WrappedArray[str]
    BadassEventBlackListedNameStrings: unreal.WrappedArray[str]
    RareChestLootDefsStrings: unreal.WrappedArray[str]
    LeagueName: str
    LeagueDescription: str
    LeagueOverviewPanelButtonTexture: engine.Texture2D
    LeagueChallengesPanelButtonTexture: engine.Texture2D
    LeagueOverviewPanelButtonTextureSplit: engine.Texture2D
    LeagueChallengesPanelButtonTextureSplit: engine.Texture2D
    LeagueActiveText: str
    LeagueFinalDay: int
    ZoneMapList: ZoneMapListData
    LevelTravelDataLists: unreal.WrappedArray[LevelTravelDataListStationPatch]
    ProgressChallengeCategories: unreal.WrappedArray[gbx_game_system_core.ChallengeCategoryData]
    AvailableZoneChallengeFilters: unreal.WrappedArray[ChallengeFilterType]
    AvailableGalaxyChallengeFilters: unreal.WrappedArray[ChallengeFilterType]
    CrewQuartersDecorations: unreal.WrappedArray[CrewQuartersDecorationData]
    ZoneMapAdditions: unreal.WrappedArray[AdditionalZoneMapData]
    POIDynamicTypeAdditions: unreal.WrappedArray[ZoneMapPOITypeData]
    GuardianRankRewards: unreal.WrappedArray[GuardianRankRewardData]
    GuardianRankPerks: unreal.WrappedArray[GuardianRankPerkData]
    VaultCardRewards: unreal.WrappedArray[OakVaultCardRewardData]
    GlobalVaultCardData: VaultCardGeneralData
    ItemPoolToReplaceWithRandomItemPool: gbx_inventory.ItemPoolData
    RandomDateBasedItemPools: unreal.WrappedArray[gbx_inventory.ItemPoolCollection]



class PerceptiveActiveAmbientSound(gbx_audio.ActiveAmbientSound):
    AIPerception: aimodule.AIPerceptionComponent
    StartleRadius: float
    def OnTargetPerceptionUpdated(self, Actor: engine.Actor, Stimulus: aimodule.AIStimulus): ...


class PerformanceEchoData(gbx_dialog.PerformanceEchoDataBase):
    Mode: EEchoPerformanceMode



class PerPlayerActorCullingManager(unreal.UObject):
    AllCullables: unreal.WrappedArray[PerPlayerCullable]



class PetEnrageRift(OwnedActionAbilityActor):
    BeastmasterComponent: BeastmasterCharacterComponent
    PetActor: OakCharacter
    CachedTeamComponent: gbx_game_system_core.TeamComponent
    def TeleportPetToCurrentLocation(self, ReturnValue: bool) -> bool: ...
    def StartPetSummon(self): ...
    def OnRep_PetActor(self): ...
    def OnPetTeleported(self): ...
    def OnPetSummonStarted(self): ...
    def OnPetResurrected(self): ...
    def OnLinkedTargetRemoved(self, InLinkedTarget: OakCharacter): ...
    def OnLinkedTargetAdded(self, InLinkedTarget: OakCharacter): ...
    def OnCinematicModeChanged(self, CinematicMode: gbx_game_system_core.CinematicModeData): ...
    def OnActorExitedSphere(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int): ...
    def OnActorEnteredSphere(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def NotifyServerWaitingOnTeleport(self): ...
    def NotifyClientTeleport(self): ...
    def GetOverlapComponent(self, ReturnValue: engine.PrimitiveComponent) -> engine.PrimitiveComponent: ...


class PetSpiderantAnimInstance(OakCharacterAnimInstance):
    RollSprintSpeedStart: float
    bStartRollSprint: bool
    RollSprintSpeedStop: float
    bStopRollSprint: bool



class PhaseTranceSingularityActor(OwnedActionAbilityActor):
    SingularityInfo: SingularityInitializationInfo
    ImpulseRadius: gbx_game_system_core.DataTableValueHandle
    AscendantImpulseRadius: gbx_game_system_core.DataTableValueHandle
    IgnoreActor: engine.Actor
    SingularityRadius: float
    def OnRep_SingularityRadius(self): ...
    def ConfigureSingularity(self): ...


class PhotoModeAdjustmentsWidget(gbx_ui.GbxUmgMenu):
    PhotoModeController: PhotoModeController
    PhotoModeGlobals: PhotoModeGlobals
    def OnVignetteIntensityChanged(self, NewVignetteIntensity: float): ...
    def OnVignetteFeatheringChanged(self, NewVignetteFeathering: float): ...
    def OnViewRollChanged(self, NewViewRoll: float): ...
    def OnToeChanged(self, NewToe: float): ...
    def OnTimeOfDayChanged(self, NewTimeOfDay: float): ...
    def OnSuperSharpModeStateChanged(self, bNewSuperSharpModeState: bool): ...
    def OnSlopeChanged(self, NewSlope: float): ...
    def OnShoulderChanged(self, NewShoulder: float): ...
    def OnSaturationChanged(self, NewSaturation: float): ...
    def OnQualityChanged(self, NewQuality: float): ...
    def OnPhotoModeUIVisiblityChanged(self, bNewVisibleState: bool): ...
    def OnOverrideFocusStateChanged(self, bNewOverrideFocusState: bool): ...
    def OnHUDVisibilityChanged(self, bNewVisibleState: bool): ...
    def OnHidePlayerStateChanged(self, bNewHidePlayerState: bool): ...
    def OnHideDamageNumbersStateChanged(self, bNewHideDamageNumbersState: bool): ...
    def OnGrainIntensityChanged(self, NewGrainIntensity: float): ...
    def OnGammaChanged(self, NewGamma: float): ...
    def OnGamePausedStateChangeRequested(self): ...
    def OnGainChanged(self, NewGain: float): ...
    def OnFringeIntensityChanged(self, NewFringeIntensity: float): ...
    def OnFOVChanged(self, NewFOV: float): ...
    def OnFocalRegionChanged(self, NewFocalRegion: float): ...
    def OnFocalDistanceChanged(self, NewFocalDistance: float): ...
    def OnFilterIntensityChanged(self, NewFilterIntensity: float): ...
    def OnFilterIndexChanged(self, NewFilterIndex: int): ...
    def OnFilmToneMapperStateChanged(self, bNewFileToneMapperState: bool): ...
    def OnExitPhotoModeRequested(self): ...
    def OnExitPhotoMode(self, Player: OakCharacter_Player, PlayerController: OakPlayerController): ...
    def OnEnterPhotoMode(self, Player: OakCharacter_Player, PlayerController: OakPlayerController): ...
    def OnDOFIntensityChanged(self, NewDOFIntensity: float): ...
    def OnContrastChanged(self, NewConstrast: float): ...
    def OnAutoFocusStateChanged(self, bNewFocusState: bool): ...
    def HandleGameSoloPlayStateChanged(self, bSoloPlay: bool): ...
    def HandleGamePauseStateChanged(self, bNewPauseState: bool): ...
    def ConvertSliderViewRollToGameViewRoll(self, SliderValue: float, ReturnValue: float) -> float: ...
    def ConvertSliderTimeToGameTime(self, SliderValue: float, ReturnValue: float) -> float: ...
    def ConvertSliderSaturationToGameSaturation(self, SliderValue: float, ReturnValue: float) -> float: ...
    def ConvertSliderQualityToGameQuality(self, SliderValue: float, ReturnValue: float) -> float: ...
    def ConvertSliderGammaToGameGamma(self, SliderValue: float, ReturnValue: float) -> float: ...
    def ConvertSliderGainToGameGain(self, SliderValue: float, ReturnValue: float) -> float: ...
    def ConvertSliderFringeIntensityToGameFringeIntensity(self, SliderValue: float, ReturnValue: float) -> float: ...
    def ConvertSliderFOVToGameFOV(self, SliderValue: float, ReturnValue: float) -> float: ...
    def ConvertSliderFocalRegionToGameFocalRegion(self, SliderValue: float, ReturnValue: float) -> float: ...
    def ConvertSliderFocalDistanceToGameFocalDistance(self, SliderValue: float, ReturnValue: float) -> float: ...
    def ConvertSliderDOFIntensityToGameDOFIntensity(self, SliderValue: float, ReturnValue: float) -> float: ...
    def ConvertSliderContrastToGameContrast(self, SliderValue: float, ReturnValue: float) -> float: ...
    def ConvertMinutesToHourMinutesString(self, Minutes: int, OutTimeString: str): ...
    def ConvertGameViewRollToSliderViewRoll(self, ReturnValue: float) -> float: ...
    def ConvertGameSaturationToSliderSaturation(self, ReturnValue: float) -> float: ...
    def ConvertGameQualityToSliderQuality(self, ReturnValue: float) -> float: ...
    def ConvertGameGammaToSliderGamma(self, ReturnValue: float) -> float: ...
    def ConvertGameGainToSliderGain(self, ReturnValue: float) -> float: ...
    def ConvertGameFringeIntensityToSliderFringeIntensity(self, ReturnValue: float) -> float: ...
    def ConvertGameFOVToSliderFOV(self, ReturnValue: float) -> float: ...
    def ConvertGameFocalRegionToSliderFocalRegion(self, ReturnValue: float) -> float: ...
    def ConvertGameFocalDistanceToSliderGain(self, ReturnValue: float) -> float: ...
    def ConvertGameDOFIntensityToSliderDOFIntensity(self, ReturnValue: float) -> float: ...
    def ConvertGameContrastToSliderContrast(self, ReturnValue: float) -> float: ...
    def ConvertBoolToCheckBoxState(self, bBooleanState: bool, ReturnValue: slate_core.ECheckBoxState) -> slate_core.ECheckBoxState: ...


class PhotoModeController(engine.Actor):
    PostProcessComponent: engine.PostProcessComponent
    PhotoPawn: OakCharacter_Player
    PhotoController: OakPlayerController
    bPhotoModeActive: bool
    PhotoModeState: PhotoModeState
    StylizeStat: gbx_game_system_core.GameStatData
    def TakeScreenshot(self): ...
    def SetVignetteIntensity(self, VignetteIntensity: float): ...
    def SetVignetteFeathering(self, VignetteFeathering: float): ...
    def SetViewRoll(self, ViewRoll: float): ...
    def SetToe(self, Toe: float): ...
    def SetTimeOfDay(self, TimeOfDay: float): ...
    def SetSuperSharpModeState(self, bEnable: bool): ...
    def SetSlope(self, Slope: float): ...
    def SetShoulder(self, Shoulder: float): ...
    def SetSaturation(self, SaturationSlider: float): ...
    def SetQuality(self, Quality: float): ...
    def SetPhotoModeUIVisibility(self, bVisible: bool): ...
    def SetOverrideFocusState(self, bOverrideFocusState: bool): ...
    def SetHUDVisibilityChanged(self, bVisible: bool): ...
    def SetHidePlayerState(self, bHidePlayerState: bool): ...
    def SetHideDamageNumbersState(self, bHideDamageNumbersState: bool): ...
    def SetGrainIntensity(self, GrainIntensity: float): ...
    def SetGamma(self, Gamma: float): ...
    def SetGamePausedState(self, bPaused: bool): ...
    def SetGain(self, Gain: float): ...
    def SetFringeIntensity(self, FringeIntensity: float): ...
    def SetFOV(self, FOV: float): ...
    def SetFocalRegion(self, FocalRegion: float): ...
    def SetFocalDistance(self, FocalDistance: float): ...
    def SetFilterIntensity(self, FilterIntensity: float): ...
    def SetFilterIndex(self, FilterIndex: int): ...
    def SetFilmToneMapperState(self, bEnable: bool): ...
    def SetDOFIntensity(self, DOFIntensity: float): ...
    def SetContrast(self, ConstrastSlider: float): ...
    def SetAutoFocusState(self, bEnable: bool): ...
    def ResetAllSettings(self): ...
    def OnNumPlayersChanged(self, NewNumPlayers: int): ...
    def OnExitPhotoMode(self): ...
    def OnEnterPhotoMode(self): ...
    def IsPhotoModeActive(self, ReturnValue: bool) -> bool: ...
    def IsCinematicPhoto(self, ReturnValue: bool) -> bool: ...
    def GetVignetteIntensity(self, ReturnValue: float) -> float: ...
    def GetVignetteFeathering(self, ReturnValue: float) -> float: ...
    def GetViewRoll(self, ReturnValue: float) -> float: ...
    def GetToe(self, ReturnValue: float) -> float: ...
    def GetTimeOfDay(self, ReturnValue: float) -> float: ...
    def GetSuperSharpModeState(self, ReturnValue: bool) -> bool: ...
    def GetSlope(self, ReturnValue: float) -> float: ...
    def GetShoulder(self, ReturnValue: float) -> float: ...
    def GetSaturation(self, ReturnValue: float) -> float: ...
    def GetQuality(self, ReturnValue: float) -> float: ...
    def GetPhotoModeUIVisibility(self, ReturnValue: bool) -> bool: ...
    def GetPhotoModeState(self, ReturnValue: PhotoModeState) -> PhotoModeState: ...
    def GetOverrideFocusState(self, ReturnValue: bool) -> bool: ...
    def GetHUDVisibility(self, ReturnValue: bool) -> bool: ...
    def GetHidePlayerState(self, ReturnValue: bool) -> bool: ...
    def GetHideDamageNumbersState(self, ReturnValue: bool) -> bool: ...
    def GetGrainIntensity(self, ReturnValue: float) -> float: ...
    def GetGamma(self, ReturnValue: float) -> float: ...
    def GetGamePausedState(self, ReturnValue: bool) -> bool: ...
    def GetGain(self, ReturnValue: float) -> float: ...
    def GetFringeIntensity(self, ReturnValue: float) -> float: ...
    def GetFOV(self, ReturnValue: float) -> float: ...
    def GetFocalRegion(self, ReturnValue: float) -> float: ...
    def GetFocalDistance(self, ReturnValue: float) -> float: ...
    def GetFilterIntensity(self, ReturnValue: float) -> float: ...
    def GetFilterIndex(self, ReturnValue: int) -> int: ...
    def GetFilmToneMapperState(self, ReturnValue: bool) -> bool: ...
    def GetDOFIntensity(self, ReturnValue: float) -> float: ...
    def GetContrast(self, ReturnValue: float) -> float: ...
    def GetAutoFocusState(self, ReturnValue: bool) -> bool: ...
    def DeactivateSlomo(self): ...
    def ActivateSlomo(self): ...


class PhotoModeGlobals(gbx_runtime.GbxDataAsset):
    PhotoModeMenuData: gbx_ui.GbxMenuData
    PhotoModeControllerType: unreal.UClass
    PhotoModeOptions: unreal.WrappedArray[PhotoModeOptionSet]
    MinFOV: float
    MaxFOV: float
    MinDOFIntensity: float
    MaxDOFIntensity: float
    MinFocalDistance: float
    MaxFocalDistance: float
    MinFocalRegion: float
    MaxFocalRegion: float
    MinContrast: float
    MaxContrast: float
    MinSaturation: float
    MaxSaturation: float
    MinGamma: float
    MaxGamma: float
    MinGain: float
    MaxGain: float
    MinQuality: float
    MaxQuality: float
    MinRoll: float
    MaxRoll: float
    CameraModeBlendInTime: float
    CameraModeBlendOutTime: float
    CameraForwardBackScale: float
    CameraForwardBackClamp: float
    CameraLeftRightScale: float
    CameraLeftRightClamp: float
    CameraUpDownScale: float
    CameraUpDownClamp: float
    CameraDeadZone: float
    CameraInputPitchScale: float
    CameraInputYawScale: float
    MinFringeIntensity: float
    MaxFringeIntensity: float
    FilterList: unreal.WrappedArray[engine.Texture]
    StylizeStat: gbx_game_system_core.GameStatData



class PhotoModeViewInterface(core_uobject.Interface): ...


class PIEBenchmarkManager(unreal.UObject): ...


class PlanetData(gbx_game_system_core.LevelGroupData):
    PlanetMeshDataReference: core_uobject.SoftObjectPath
    PlanetClassReference: core_uobject.SoftClassPath
    GalaxyMapTransform: core_uobject.Transform
    bIsTrialPlanetoid: bool
    bNoPlanetDisplay: bool
    bNotAvailableForHyperspaceTravel: bool
    ConceptArtToDisplay: engine.Texture2D
    def ShouldHighlight(self, WorldContextObject: unreal.UObject, ReturnValue: bool) -> bool: ...
    def OnPlanetMeshDataLoaded(self): ...
    def OnPlanetClassLoaded(self): ...
    def GetZoneMapForTrackedMission(self, WorldContextObject: unreal.UObject, ReturnValue: ZoneMapData) -> ZoneMapData: ...
    def GetWorldDiscoveryAreaCounts(self, ViewingPlayer: OakPlayerController, TotalWorldDiscoveryAreas: int, FoundWorldDiscoveryAreas: int, InAssociatedLeague: int, InAssociatedPatch: PatchExpansionData, InAssociatedDLC: online_subsystem_utils.DownloadableContentData): ...
    def GetWorldChallengeCounts(self, ViewingPlayer: OakPlayerController, ChallengeCategory: gbx_game_system_core.ChallengeCategoryData, TotalCount: int, CompletedCount: int): ...
    def GetPlanetZoneMaps(self, PlayerController: OakPlayerController, Planet: PlanetData, OutZoneMaps: unreal.WrappedArray[ZoneMapData], FindOnlyDiscovered: bool, FindOnlyLicensed: bool, ReturnValue: bool) -> bool: ...
    def GetPlanetZoneMapFilenames(self, PlayerController: OakPlayerController, Planet: PlanetData, OutZoneMapFilenames: unreal.WrappedArray[str], FindOnlyDiscovered: bool): ...
    def GetPlanetMeshData(self, ReturnValue: PlanetMeshData) -> PlanetMeshData: ...
    def GetPlanetForObjective(self, WorldContextObject: unreal.UObject, MissionToTrack: unreal.UClass, ReturnValue: PlanetData) -> PlanetData: ...
    def GetPlanetFastTravelStations(self, WorldContextObject: unreal.UObject, Planet: PlanetData, OutFastTravelStations: unreal.WrappedArray[gbx_travel_station.FastTravelStationData], FindOnlyDiscovered: bool, ViewingPlayer: engine.PlayerController): ...
    def GetPlanetDataForCurrentLevel(self, WorldContextObject: unreal.UObject, ReturnValue: PlanetData) -> PlanetData: ...
    def GetPlanetClass(self, ReturnValue: unreal.UClass) -> unreal.UClass: ...
    def GetGalaxyDiscoveryAreaCounts(self, ViewingPlayer: OakPlayerController, TotalWorldDiscoveryAreas: int, FoundWorldDiscoveryAreas: int, InAssociatedLeague: int, InAssociatedPatch: PatchExpansionData, InAssociatedDLC: online_subsystem_utils.DownloadableContentData): ...
    def GetGalaxyChallengeCounts(self, ViewingPlayer: OakPlayerController, ChallengeCategory: gbx_game_system_core.ChallengeCategoryData, TotalCount: int, CompletedCount: int): ...
    def GetClosestFastTravelStationToObjective(self, WorldContextObject: unreal.UObject, MissionToTrack: unreal.UClass, ReturnValue: gbx_travel_station.FastTravelStationData) -> gbx_travel_station.FastTravelStationData: ...


class PlanetMeshData(gbx_runtime.GbxDataAsset):
    PlanetMesh: engine.StaticMesh
    DecoMesh: engine.StaticMesh
    RingDecoMesh: engine.StaticMesh
    GalaxyTable_PlanetMesh: engine.StaticMesh
    ZoneMapPOIMeshs: unreal.WrappedArray[ZoneMapPOIMeshListEntry]
    PlanetMaterial: engine.MaterialInterface
    GalaxyTable_PlanetShader: engine.MaterialInterface
    GalaxyTable_AtmosphereShader: engine.MaterialInterface
    LandTexture: engine.Texture2D



class PlayerAlertableInterface(core_uobject.Interface): ...


class PlayerAlertData(gbx_runtime.GbxDataAsset):
    PlayerAlertType: EPlayerAlertType
    PlayerAlertEvent: gbx_dialog.DialogEvent
    PlayerAlertLifetime: float
    ApplyOutlineEffect: bool
    AttachAlertIcon: bool
    PlayerAlertIconData: InWorldIconData
    OutlineColor: core_uobject.LinearColor
    CustomStencilValue: int
    bPlaySound: bool



class PlayerBalanceStateComponent(gbx_game_system_core.BalanceStateComponent):
    Experience: int
    CombatExperienceScale: engine.GbxAttributeFloat
    MissionExperienceScale: engine.GbxAttributeFloat
    AllExperienceScale: engine.GbxAttributeFloat
    def SimplePlayerBalanceEvent__DelegateSignature(self): ...
    def PlayerUncappedExpAddedEvent__DelegateSignature(self, ExperienceAdded: int, Source: EPlayerExperienceSource, Type: EPlayerExperienceType): ...
    def PlayerExpAddedEvent__DelegateSignature(self, ExperienceAdded: int, Source: EPlayerExperienceSource, Type: EPlayerExperienceType): ...
    def PlayerBalanceEvent__DelegateSignature(self, OldExperienceLevel: int, NewExperienceLevel: int): ...
    def OnRep_Experience(self): ...
    def GetExperience(self, ReturnValue: int) -> int: ...
    def Client_OnLevelUp(self, OldExperienceLevel: int, NewExperienceLevel: int): ...
    def Client_NotifyCheatSetExperienceLevel(self): ...
    def AddExperience(self, Amount: int, Source: EPlayerExperienceSource, Type: EPlayerExperienceType): ...


class PlayerCharacterComponentSlotData(gbx_runtime.GbxDataAsset):
    DisplayName: str
    Description: str
    SupportedAugments: unreal.WrappedArray[PlayerCharacterComponentAugmentData]



class PlayerClassCountAttributeValueResolver(gbx_game_system_core.AttributeValueResolver):
    PlayerClass: PlayerClassIdentifier
    bNormalizeValue: bool



class PlayerClassIdentifier(engine.PrimaryAssetLabel):
    CharacterBlueprint: core_uobject.SoftClassPath
    ShortName: str
    DisplayName: str
    CharacterName: str
    ClassDescription: str
    bCameraPlayer: bool
    DlcExpansion: DownloadableExpansionData
    bAvailableForDataExtraction: bool



class PlayerClassMissionRewardWeightValueResolver(gbx_game_system_core.AttributeValueResolver):
    PlayerClass: PlayerClassIdentifier



class PlayerGuardianRankComponent(engine.ActorComponent):
    GuardianRank: int
    AvailableTokens: int
    GuardianExperience: int
    RankRewards: unreal.WrappedArray[GuardianRankRewardEntry]
    RankRewardsEnabledBits: GuardianRankEnabledIndexTracker
    RankPerks: unreal.WrappedArray[GuardianRankPerkEntry]
    RankPerksEnabledBits: GuardianRankEnabledIndexTracker
    RankRewardRandomSeed: int
    RankRewardCategories: unreal.WrappedArray[GuardianRankRewardCategoryEntry]
    CurrentTokenRedemptionOptions: unreal.WrappedArray[GuardianRankRewardData]
    bGuardianRankSystemEnabled: bool
    bDisabledForGameMode: bool
    OwnerBalanceState: PlayerBalanceStateComponent
    AbilityInstance: gbx_abilities.GbxAbility
    OakCharacterOwner: OakCharacter
    def SetGuardianRank(self, NewGuardianRank: int): ...
    def ServerStartGuardianRankTracking(self): ...
    def ServerSetAvailableTokens(self, InAvailableTokens: int): ...
    def ServerPurchaseReward(self, RewardToPurchase: GuardianRankRewardData): ...
    def ServerEnableReward(self, RewardToChange: GuardianRankRewardData, bEnable: bool): ...
    def ServerEnablePerkAbility(self, PerkToChange: GuardianRankPerkData, bEnable: bool): ...
    def ServerEnableGuardianRankSystem(self, bEnabled: bool): ...
    def OnRep_RankRewardsEnabledBits(self, OldEnabledIndexTracker: GuardianRankEnabledIndexTracker): ...
    def OnRep_RankRewards(self): ...
    def OnRep_RankPerksEnabledBits(self, OldEnabledIndexTracker: GuardianRankEnabledIndexTracker): ...
    def OnRep_GuardianRank(self, OldGuardianRank: int): ...
    def OnRep_GuardianExperience(self, OldGuardianExperience: int): ...
    def OnRep_AvailableTokens(self, OldAvailableTokens: int): ...
    def NotifyUncappedExperienceAdded(self, ExperienceAdded: int, Source: EPlayerExperienceSource, Type: EPlayerExperienceType): ...
    def NotifyPrimaryCharacterChanged(self, NewPrimaryCharacter: gbx_game_system_core.GbxCharacter): ...
    def IsGuardianRankSystemEnabled(self, ReturnValue: bool) -> bool: ...
    def GetGuardianRankRewardStatsString(self, ReturnValue: str) -> str: ...
    def GetGuardianRankExperience(self, ReturnValue: int) -> int: ...
    def GetGuardianRank(self, ReturnValue: int) -> int: ...
    def DebugResetGuardianRank(self): ...


class PlayerIdentityWidget(unreal.UObject):
    OwningMovie: gbx_ui.GbxGFxMovie



class PlayerMeleeData(gbx_runtime.GbxDataAsset):
    OverrideCondition: gbx_runtime.GbxCondition
    OverridePriority: int
    bOnlyOverrideOnSuccess: bool
    bCanHitUntargetables: bool
    bUseTargetHoming: bool
    TargetMaxDistance: float
    ImpactDistance: float
    TargetMaxAngleYaw: float
    TargetMaxAngleUpPitch: float
    TargetMaxAngleDownPitch: float
    MaxPitchUpAngle: float
    RotateInterpSpeed: float
    MaxYawRate: float
    MaxPitchRate: float
    SocketProxomity: float
    DistanceFormula: gbx_game_system_core.AttributeInitializationData
    MaxSuccessMeleeHeightOffsetWhenEnemyBelow: float
    MaxSuccessMeleeHeightOffsetWhenEnemyAbove: float
    SuccessAction: unreal.UClass
    FailureAction: unreal.UClass
    DamageData: unreal.UClass
    SuccessDamageData: unreal.UClass
    MeleeCooldown: float
    MeleeMissCooldown: float
    MeleeImpact: gbx_game_system_core.ImpactData
    SuccessMeleeFeedback: gbx_game_system_core.FeedbackData
    FailMeleeFeedback: gbx_game_system_core.FeedbackData
    ImpactRange: gbx_game_system_core.AttributeInitializationData
    bReverseImpact: bool
    DefaultReverseImpactForce: float
    Thresholds: unreal.WrappedArray[MeleeReverseImpactEntry]
    UntargetableTraceChannel: int
    UntargetableTraceRadius: float



class PlayerMeleeStateComponent(engine.ActorComponent):
    PlayerMeleeData: PlayerMeleeData
    PlayerMeleeDataList: unreal.WrappedArray[PlayerMeleeData]
    FirstPersonMeleeWeapon: MeleeWeaponAttachmentData
    ThirdPersonMeleeWeapon: MeleeWeaponAttachmentData
    MeleeWeaponBoneModifyStateName: str
    MeleeWeaponBoneModifyBlendTime: float
    ActivePlayerMeleeData: PlayerMeleeData
    ReplicatedMeleeData: ReplicatedMeleeActionData
    MeleeHitTime: float
    EndMeleeDuration: float
    MeleeCooldownEndTime: float
    CurrentMeleeTarget: engine.Actor
    CurrentTargetSocket: str
    DamageTypeOverride: gbx_game_system_core.GbxDamageType
    def SetMeleeDamageType(self, InDamageType: unreal.UClass): ...
    def SetEnableMeleeWeaponCFX(self, bEnableEffect: bool): ...
    def Server_PerformSirenOverrunMelee(self, Target: engine.Actor): ...
    def Server_PerformPlayerMelee(self): ...
    def ResourceUnlockPlayerMeleeWeaponVisible(self, PlayerActor: engine.Actor, Reason: str): ...
    def ResourceLockPlayerMeleeWeaponVisible(self, PlayerActor: engine.Actor, Reason: str): ...
    def PerformPlayerMelee(self, ReturnValue: bool) -> bool: ...
    def OnRep_ReplicatedMeleeData(self): ...
    def OnMeleeActionEnd(self, EndState: gbx_game_system_core.EGbxActionEndState): ...
    def MeleeStatePerformMelee__DelegateSignature(self, MeleeData: PlayerMeleeData, bSuccess: bool, MeleeTarget: engine.Actor): ...
    def MeleeStateChangeEvent__DelegateSignature(self, bCanMelee: bool): ...
    def IsPerformingMelee(self, ReturnValue: bool) -> bool: ...
    def HandleFirstPersonCreated(self, bArmsCreated: bool): ...
    def ClearMeleeDamageType(self): ...
    def CharacterTransported(self): ...


class PlayerShopManagerComponent(engine.ActorComponent):
    MaxBuyBackSize: int
    BuyBackList: unreal.WrappedArray[PlayerBuyBackableInventory]
    PlayerController: OakPlayerController
    def ServerSellInventory(self, InventoryActor: engine.Actor): ...
    def ServerSellAllJunk(self): ...
    def ServerPurchaseSDU(self, SDU: OakSDUData): ...
    def ServerPurchaseInventoryFromShop(self, InventoryActor: engine.Actor, Shop: InventoryShopComponent): ...
    def ServerPurchaseCustomization(self, Customization: gbx_game_system_core.GbxCustomizationData): ...
    def ServerOnPurchaseCrazyEarl(self, PurchasedItem: OakCustomizationData): ...
    def ServerOnExitMenuCrazyEarl(self): ...
    def ServerNotifyStablyVendingMachineSelectedInventory(self, Type: EVendingMachineTrayTileType, InventoryActor: engine.Actor): ...
    def ServerBuyBackInventory(self, InventoryActor: engine.Actor): ...
    def OnRep_BuyBackList(self): ...
    def ClientSDUTransactionFinished(self, SDU: OakSDUData, bPurchased: bool, NewSDULevel: int): ...
    def ClientInventoryTransactionFinished(self, TransactionType: ETransactionType, InventoryActor: unreal.WrappedArray[engine.Actor]): ...
    def ClientCustomizationTransactionFinished(self, CustomizationData: gbx_game_system_core.GbxCustomizationData): ...


class PlayerStandIn(engine.Actor):
    StandInType: EPlayerStandInType
    InitData: PlayerStandInInitData
    StandInData: PlayerStandInData
    LoadOutInfo: LobbyPlayerStandInLoadOutInfo
    PendingLoadOut: LobbyPlayerStandInLoadOutInfo
    PendingAbilityData: OakPlayerAbilitySaveGameData
    PendingCharacterData: OakPlayerCharacterSlotSaveGameData
    CustomizationsAwaitingApplication: unreal.WrappedArray[gbx_game_system_core.GbxCustomizationData]
    PendingCoordinatedEffect: unreal.UClass
    CharacterInstance: OakCharacter_StandIn
    AuxiliaryActors: unreal.WrappedArray[StandInAuxiliaryState]
    SlotIndex: int
    PlayerStandInDigistructEffect: unreal.UClass
    PlayerStandInDigistructOutEffect: unreal.UClass
    FrontendStandInHoloEffect: unreal.UClass
    def PlayGbxAction(self, Action: unreal.UClass): ...
    def HandleCustomizationApplied(self, Customization: gbx_game_system_core.GbxCustomizationData): ...


class PlayerStandInData(gbx_runtime.GbxDataAsset):
    StandInBlueprint: unreal.UClass
    SkillScreenStandInBlueprint: unreal.UClass
    StandInAnimBlueprint: unreal.UClass
    FrontendAnimBlueprint: unreal.UClass
    CharacterSelectAnimSets: unreal.WrappedArray[engine.GbxAnimSet]
    ExtraFrontendAnimationData: unreal.WrappedArray[ExtraStandInAnimationMeshData]
    FrontendSpecialAnimations: FrontendStandInSpecialAnimationData
    CharacterSelectPositionOffset: core_uobject.Vector
    CharacterSelectRotationOffset: core_uobject.Rotator
    CharacterCreatePositionOffset: core_uobject.Vector
    CharacterCreateRotationOffset: core_uobject.Rotator
    CharacterInspectCameraHeightOffset: float
    CharacterInspectCameraDepthOffset: float
    PrimaryLobbyStandInCameraHeightOffset: float
    PrimaryLobbyStandInCameraDepthOffset: float
    DelayBeforeMainMenuFlourishAnimation: float
    CharacterCreateAuxiliaryActors: unreal.WrappedArray[FrontendStandInAuxiliaryActorData]
    DefaultAuxiliaryActor: FrontendStandInAuxiliaryActorData
    ActionAbilities: unreal.WrappedArray[PlayerStandIn_ActionAbility]
    Augments: unreal.WrappedArray[PlayerStandIn_Augment]
    FrontendWeaponBalanceWeaponData: gbx_inventory.InventoryBalanceData



class PlayerStorage(CrewQuartersInteractiveObject): ...


class PlayerStorageProxy(AdvancedInteractiveObjectProxy):
    OpenAnim: engine.AnimSequence
    OpenIdleAnim: engine.AnimSequence
    CloseAnim: engine.AnimSequence
    CloseIdleAnim: engine.AnimSequence



class PlayerTradeManager(engine.Actor):
    Status: EPlayerTradeManagerStatus
    Partner: PlayerTradeManager
    PartnerPC: OakPlayerController
    PartnerCharacter: OakCharacter_Player
    PartnerStance: EPlayerTradingStance
    PartnerCashOffered: int
    PartnerInvOffered: engine.Actor
    MyCashOffered: int
    MyInvOffered: engine.Actor
    def ServerUpdateInventorySlot(self, Inventory: engine.Actor, Slot: int): ...
    def ServerUpdateCashOffered(self, NewCashValue: int): ...
    def ServerCancelTrade(self): ...
    def OnRep_PartnerInvOffered(self): ...
    def OnRep_PartnerCharacter(self): ...
    def OnRep_PartnerCashOffered(self): ...
    def ClientShowTradeConfirmationMessage(self, IsDuel: bool): ...


class PlayThroughAttributeValueResolver(gbx_game_system_core.AttributeValueResolver):
    PlayThroughToResolve: EPlayThroughType



class PlayThroughDefinedAttributeValueResolver(gbx_game_system_core.AttributeValueResolver):
    Value: PlaythroughDefinedValueRow



class ProjectedShield(engine.ActorComponent):
    Data: ProjectedShieldData
    ParticleSystem: engine.ParticleSystemComponent
    StaticMeshComponent: engine.StaticMeshComponent
    ProjectedAudioComponent: wwise_audio.WwiseAudioComponent
    OwnerActor: engine.Actor
    def ToggleProjectedShield(self, bToggleOn: bool): ...
    def SpawnShield(self): ...
    def OnTakeAnyDamageInternal(self, DamageReceiver: gbx_game_system_core.DamageComponent, Damage: float, DamageType: gbx_game_system_core.GbxDamageType, DamageSource: gbx_game_system_core.DamageSource, InstigatedBy: engine.Controller, DamageCauser: gbx_game_system_core.DamageCauserComponent, Details: gbx_game_system_core.ReceivedDamageDetails): ...
    def OnTakeAnyDamage(self, DamageReceiver: gbx_game_system_core.DamageComponent, Damage: float, DamageType: gbx_game_system_core.GbxDamageType, DamageSource: gbx_game_system_core.DamageSource, InstigatedBy: engine.Controller, DamageCauser: gbx_game_system_core.DamageCauserComponent, Details: gbx_game_system_core.ReceivedDamageDetails): ...
    def OnShieldSpawned(self): ...
    def OnShieldNotDepletedInternal(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def OnShieldNotDepleted(self): ...
    def OnShieldLowHealth(self): ...
    def OnShieldFullHealth(self): ...
    def OnShieldDespawned(self): ...
    def OnShieldDepleted(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def OnShieldBreak(self): ...
    def OnHealthTypeVeryLow(self, HealthType: gbx_game_system_core.HealthType, Index: int): ...
    def OnHealthTypeNormal(self, HealthType: gbx_game_system_core.HealthType, Index: int): ...
    def OnHealthTypeLow(self, HealthType: gbx_game_system_core.HealthType, Index: int): ...
    def IsShieldBroken(self, ReturnValue: bool) -> bool: ...
    def DespawnShield(self): ...


class ProjectedShield_Vehicle(ProjectedShield):
    MaterialInstance: engine.MaterialInstanceDynamic
    VehicleEffectsComponent: VehicleEffectsComponent
    def OnShouldDespawnShield(self): ...
    def OnPrimaryOccupantExit(self): ...
    def OnPrimaryOccupantEnter(self): ...
    def OnEngineStop(self): ...
    def OnEngineStart(self): ...
    def OnDigiThrustStarted(self): ...
    def OnDigiThrustEndFinished(self): ...


class ProjectedShieldData(gbx_runtime.GbxDataAsset):
    Mesh: engine.StaticMesh
    Material: engine.MaterialInterface
    SocketName: str
    MeshOffset: core_uobject.Transform
    AudioSocketName: str
    AudioLocations: unreal.WrappedArray[wwise_audio.WwiseLocationOverride]
    StartShieldWiseEvent: wwise_audio.WwiseEvent
    StopShieldWiseEvent: wwise_audio.WwiseEvent
    Particle: engine.ParticleSystem
    ParticleOffset: core_uobject.Transform
    ShieldHealth: gbx_game_system_core.HealthType
    AttachOnSpawn: bool



class ProjectedShieldData_Vehicle(ProjectedShieldData):
    DespawnShieldOnEngineStop: bool



class QuickChange(AdvancedInteractiveObject):

    def OnSaveGameRenamed(self, NewName: str): ...
    def OnRespec(self): ...
    def OnPickedNewSkinColor(self, Index: int, Color: core_uobject.LinearColor): ...
    def OnPickedNewSkin(self, NewSkin: OakCustomizationData): ...
    def OnPickedNewHead(self, NewHead: OakCustomizationData): ...
    def OnPickedNewEmote(self, NewEmote: OakCustomizationData): ...
    def OnPickedNewECHOTheme(self, NewECHOTheme: OakCustomizationData): ...
    def OnPickedNewBody(self, NewBody: OakCustomizationData): ...


class QuickChangeProxy(AdvancedInteractiveObjectProxy): ...


class ReapBehaviorInterface(core_uobject.Interface): ...


class RegionBalanceStateComponent(gbx_game_system_core.BalanceStateComponent):
    bGameStageAlwaysTracksPlayerLevelAboveMinimum: bool
    RegionManager: RegionManager
    REGION: RegionData



class RegionData(gbx_runtime.GbxDataAsset):
    DlcExpansion: DownloadableExpansionData
    PatchExpansion: PatchExpansionData



class RegionManagerData(gbx_runtime.GbxDataAsset):
    PlayThroughs: unreal.WrappedArray[PlayThroughData]
    GameStageIncreaseAbovePlayer: int



class RegionManager(unreal.UObject):
    MainRegionManagerData: RegionManagerData
    SavedRegionData: unreal.WrappedArray[RegionSaveData]



class ResourceBar(gbx_ui.GbxUserWidget):
    ValueBar: umg.ProgressBar
    CurrentValueText: umg.TextBlock
    MaxValueText: umg.TextBlock
    def SetTextMaxValue(self, NewText: str): ...
    def SetTextCurrentValue(self, NewText: str): ...
    def SetPercent(self, NewValue: float): ...


class RespawnRestrictedVolume(engine.Volume): ...


class ReticleFeedbackWidgetContainer(gbx_ui.GbxUserWidget):
    FeedbackWidgets: unreal.WrappedArray[OakReticleFeedbackWidget]
    OakPCOwner: OakPlayerController
    def OnGameEventCallback(self, GameEvent: EOakReticleFeedbackGameEvent): ...


class RevolverVehicleAnimInstance(OakVehicleAnimInstance):
    BackRaycastDistance: float
    UnderRaycastDistance: float
    ProfileName: str
    HitSequence: engine.AnimSequence
    HitBlendInTime: float
    HitBlendOutTime: float
    HitPlayRate: float
    HitLoopCount: int
    HitSlotName: str
    BodyMesh: engine.SkeletalMeshComponent



class RotatingStaticMeshActor(engine.StaticMeshActor):
    RotatingMovement: engine.RotatingMovementComponent



class SDUCase(CrewQuartersInteractiveObject): ...


class SDUCaseProxy(AdvancedInteractiveObjectProxy):
    SDUs: unreal.WrappedArray[SDUCaseSpawner]
    InitialCameraTarget: str
    SelectedSDUMaterial: engine.MaterialInstanceConstant
    MaxSelectionAngle: float
    MaxSelectionDistance: float
    AngleWeight: float
    DistanceWeight: float
    def PurchaseSDU(self): ...
    def OnSDUSoldOut(self, SoldOutSDU: OakSDUData, AttachmentSocket: gbx_game_system_core.SocketComponent): ...
    def OnSDUSelected(self, NewSDU: OakSDUData, NewAttachmentSocket: gbx_game_system_core.SocketComponent, OldSDU: OakSDUData, OldAttachmentSocket: gbx_game_system_core.SocketComponent): ...
    def OnSDUPurchased(self, PurchasedSDU: OakSDUData, AttachmentSocket: gbx_game_system_core.SocketComponent): ...
    def OnAxisInput(self, Vec: core_uobject.Vector, bGamePad: bool): ...
    def NavigateUp(self): ...
    def NavigateRight(self): ...
    def NavigateLeft(self): ...
    def NavigateDown(self): ...
    def ExitCase(self): ...


class ShieldAugmentStackValueResolver(gbx_game_system_core.AttributeValueResolver):
    AugmentName: str



class ShieldAugmentValueResolver(gbx_game_system_core.AttributeValueResolver):
    bCheckPrimary: bool
    AugmentName: str
    Operator: EStackOperator
    ValueB: gbx_game_system_core.AttributeInitializationData



class ShieldAugmentTableResolver(gbx_game_system_core.AttributeValueResolver):
    TableShieldAug: engine.DataTableRowHandle
    AttributeAugTier: gbx_game_system_core.GbxAttributeData
    AttributeAugPowerScalar: gbx_game_system_core.GbxAttributeData
    bCheckPrimary: bool



class Shield(OakInventoryEquippableItem):
    ShieldAttribute_Capacity: engine.GbxAttributeFloat
    ShieldAttribute_RegenRate: engine.GbxAttributeFloat
    ShieldAttribute_RegenDelay: engine.GbxAttributeFloat
    ShieldMesh: engine.SkeletalMeshComponent
    ShieldResource: gbx_game_system_core.GameResourceData
    ShieldDamageAttributeData: gbx_game_system_core.GbxAttributeData
    BalanceStateComponent: ShieldBalanceStateComponent
    OwningPlayer: OakCharacter_Player
    AppliedAttributes: unreal.WrappedArray[TrackedShieldAttributeData]
    CharactersWithAppliedShotModifiers: unreal.WrappedArray[OakCharacter]
    DamageModifiers: unreal.WrappedArray[ShieldDamageModifierData]
    ShotModifier: gbx_weapon.WeaponShotModifier
    ShieldState: EShieldState
    ShieldBreakFeedback: gbx_game_system_core.FeedbackData
    AdaptiveTimer: engine.TimerHandle
    AdaptiveType: EOakElementalType
    bIsBarrierShield: bool
    AudioComponent: wwise_audio.WwiseAudioComponent
    ProjectedShield: ViewAttachmentComponent
    ProjectedAudioComponent: wwise_audio.WwiseAudioComponent
    AmpAudioComponent: wwise_audio.WwiseAudioComponent
    def RemoveModifierFromAttribute(self, Attribute: gbx_game_system_core.GbxAttributeData, AugmentClass: unreal.UClass, Source: EShieldAttributeModificationSource): ...
    def OnWeaponShotModified(self, Weapon: gbx_weapon.Weapon, Data: gbx_weapon.WeaponShotModifierData): ...
    def OnWeaponChanged(self, Weapon: gbx_weapon.Weapon, LastWeapon: gbx_weapon.Weapon): ...
    def OnShieldUnequipped(self, Equipper: OakCharacter): ...
    def OnShieldNotFilled(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def OnShieldNotDepleted(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def OnShieldFilled(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def OnShieldEquipped(self, Equipper: OakCharacter): ...
    def OnShieldDepleted(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def OnShieldAbsorbedDamage(self, DamageSource: gbx_game_system_core.DamageSource, InDamageType: gbx_game_system_core.GbxDamageType): ...
    def OnProjectedShieldParticleSystemFinished(self, PSC: engine.ParticleSystemComponent): ...
    def OnOwnerUncrouched(self): ...
    def OnOwnerHealthStateChanged(self, HealthState: EHealthState): ...
    def OnOwnerEnteredVehicle(self, PawnAttachSlotComponent: gbx_game_system_core.PawnAttachSlotComponent): ...
    def OnOwnerCrouched(self): ...
    def Multicast_PlayEffectsOnAugment(self, AugmentClass: unreal.UClass, AugmentName: str, AdditionalContext: unreal.UObject): ...
    def IsProjectedShield(self, ReturnValue: bool) -> bool: ...
    def IsPendingDestroyFromBarrier(self, ReturnValue: bool) -> bool: ...
    def IsBarrierShield(self, ReturnValue: bool) -> bool: ...
    def GetDamageType(self, ReturnValue: unreal.UClass) -> unreal.UClass: ...
    def GetBaseShieldDamage(self, ReturnValue: float) -> float: ...
    def AddModifierToAttribute(self, Attribute: gbx_game_system_core.GbxAttributeData, Context: unreal.UObject, Modifier: float, Type: engine.EGbxAttributeModifierType, AugmentClass: unreal.UClass, Source: EShieldAttributeModificationSource): ...


class ShieldAugment(unreal.UObject):
    PrimaryStackDescription: str
    PrimaryStackValues: unreal.WrappedArray[gbx_game_system_core.AttributeInitializationData]
    SecondaryStackDescription: str
    SecondaryStackValues: unreal.WrappedArray[gbx_game_system_core.AttributeInitializationData]
    bUseReceivedDamageEvent: bool
    bUseCausedDamageEvent: bool
    bCallReceievedDamageEventForBarrierDamage: bool
    ReceivedDamageEventData: ShieldAugmentDamageEventData
    CausedDamageEventData: ShieldAugmentDamageEventData
    AugmentName: str
    def StartAugmentCooldown(self, Shield: Shield, StackData: AugmentData, CooldownDuration: float): ...
    def SetDelay(self, Shield: Shield, StackData: AugmentData, Delay: float, DelayName: str): ...
    def K2_OnWeaponShotModified(self, Shield: Shield, StackData: AugmentData, Weapon: gbx_weapon.Weapon, Data: gbx_weapon.WeaponShotModifierData): ...
    def K2_OnWeaponChanged(self, Shield: Shield, StackData: AugmentData, Weapon: gbx_weapon.Weapon, LastWeapon: gbx_weapon.Weapon): ...
    def K2_OnShieldUnequipped(self, Shield: Shield, Equipper: OakCharacter, StackData: AugmentData): ...
    def K2_OnShieldNotFilled(self, Shield: Shield, ResourcePool: gbx_game_system_core.GameResourcePoolReference, StackData: AugmentData): ...
    def K2_OnShieldNotDepleted(self, Shield: Shield, ResourcePool: gbx_game_system_core.GameResourcePoolReference, StackData: AugmentData): ...
    def K2_OnShieldFilled(self, Shield: Shield, ResourcePool: gbx_game_system_core.GameResourcePoolReference, StackData: AugmentData): ...
    def K2_OnShieldEquipped(self, Shield: Shield, Equipper: OakCharacter, StackData: AugmentData): ...
    def K2_OnShieldDepleted(self, Shield: Shield, ResourcePool: gbx_game_system_core.GameResourcePoolReference, StackData: AugmentData): ...
    def K2_OnShieldBeginPlay(self, Shield: Shield, StackData: AugmentData): ...
    def K2_OnShieldAbsorbedDamage(self, Shield: Shield, StackData: AugmentData, DamageSource: gbx_game_system_core.DamageSource, DamageType: gbx_game_system_core.GbxDamageType): ...
    def K2_OnReplicatedEffectTriggered(self, Shield: Shield, StackData: AugmentData, AdditionalContext: unreal.UObject): ...
    def K2_OnDamageTaken(self, Shield: Shield, StackData: AugmentData, DamageReceiver: gbx_game_system_core.DamageComponent, Damage: float, DamageType: gbx_game_system_core.GbxDamageType, DamageSource: gbx_game_system_core.DamageSource, InstigatedBy: engine.Controller, DamageCauser: gbx_game_system_core.DamageCauserComponent, Details: gbx_game_system_core.ReceivedDamageDetails): ...
    def K2_OnCausedDamage(self, Shield: Shield, StackData: AugmentData, DamageInstigator: engine.Actor, Damage: float, DamageType: gbx_game_system_core.GbxDamageType, DamageSource: gbx_game_system_core.DamageSource, DamagedActor: engine.Actor, Details: gbx_game_system_core.CausedDamageDetails): ...
    def K2_OnBarrierEnd(self, BarrierActor: engine.Actor, Shield: Shield, StackData: AugmentData): ...
    def K2_NativeDelayCallback(self, Shield: Shield, StackData: AugmentData, DelayName: str): ...
    def GetValueFromStackCount(self, StackData: AugmentData, bPrimary: bool, ReturnValue: float) -> float: ...


class ShieldAugment_Absorb(ShieldAugment):
    AbsorbSound: wwise_audio.WwiseEvent
    AbsorbParticles: engine.ParticleSystem
    ParticleAttachSocket: str
    LoadedWeaponAmmoAttribute: gbx_game_system_core.GbxAttributeData
    WeaponMaxAmmoAttribute: gbx_game_system_core.GbxAttributeData
    WeaponSlot: WeaponSlotData
    ShieldAbsorbChanceAttribute: gbx_game_system_core.GbxAttributeData
    AbsorbStat: gbx_game_system_core.GameStatData
    bUseRestoreData: bool
    ShieldRestoreData: ShieldAugmentAbsorbRestoreData



class ShieldAugment_Adaptive(ShieldAugment):
    DamageTypeAssociations: unreal.WrappedArray[AdaptiveTypeAssociations]



class ShieldAugment_Amp(ShieldAugment):
    ShotModifier: gbx_weapon.WeaponShotModifier
    AmpShotAudio: wwise_audio.WwiseEvent
    AmpReadyAudioStart: wwise_audio.WwiseEvent
    AmpReadyAudioStop: wwise_audio.WwiseEvent



class ShieldAugment_Attribute(ShieldAugment):
    OnEquippedAttributeModifiers: unreal.WrappedArray[AttributeModifiers]
    OnEquippedAudioEvent: wwise_audio.WwiseEvent
    bTurnOffEquippedAudio: bool
    OnFilledAttributeModifiers: unreal.WrappedArray[AttributeModifiers]
    OnFilledAudioEvent: wwise_audio.WwiseEvent
    bTurnOffFilledAudio: bool
    OnNotDepletedAttributeModifiers: unreal.WrappedArray[AttributeModifiers]
    OnNotDepletedAudioEvent: wwise_audio.WwiseEvent
    bTurnOffNotDepletedAudio: bool
    OnDepletedAttributeModifiers: unreal.WrappedArray[AttributeModifiers]
    OnDepletedAudioEvent: wwise_audio.WwiseEvent
    bTurnOffDepletedAudio: bool
    bApplyDefaultEffectsToPlayersInAura: bool
    bApplyEffectsToBarrier: bool
    PersistentAuraAttributeModifiers: unreal.WrappedArray[AttributeModifiers]



class ShieldAugment_ChargeSpawner(ShieldAugment):
    SpawnCooldown: float
    AttributeToModify: gbx_game_system_core.GbxAttributeData
    ModifierType: engine.EGbxAttributeModifierType
    ModifierDuration: float
    PickupMesh: engine.StaticMesh
    PickupMeshMaterials: unreal.WrappedArray[engine.MaterialInterface]
    MeshScalar: float
    SpawnAudioEvent: wwise_audio.WwiseEvent
    PickupAudioEvent: wwise_audio.WwiseEvent
    ItemPoolList: gbx_inventory.ItemPoolListData
    SpawnPattern: LootSpawnPatternData



class ShieldAugment_Triggerable(ShieldAugment):
    TriggerableOn: EAugmentTriggerOn
    bUntriggerable: bool
    UntriggerableOn: EAugmentTriggerOn
    bResetOnOpposingTrigger: bool
    def K2_UntriggerEffect(self, Shield: Shield, ResourcePool: gbx_game_system_core.GameResourcePoolReference, StackData: AugmentData): ...
    def K2_TriggerEffect(self, Shield: Shield, ResourcePool: gbx_game_system_core.GameResourcePoolReference, StackData: AugmentData): ...


class ShieldAugment_Damage(ShieldAugment_Triggerable):
    DamageData: unreal.UClass
    ScreenParticles: engine.ParticleSystem
    DamageOverride: gbx_game_system_core.AttributeInitializationData
    DamageTypeOverride: unreal.UClass
    DamageSourceOverride: unreal.UClass
    ExplosionDataOverride: gbx_game_system_core.ExplosionData
    ImpactDataOverride: gbx_game_system_core.ForceSelection
    DamageDelay: float
    bCausePersistentDamageOnEquip: bool
    PreDelayAudioEvent: wwise_audio.WwiseEvent
    DamageAudioEvent: wwise_audio.WwiseEvent
    bUseSingularity: bool
    SingularityRadius: gbx_game_system_core.AttributeInitializationData
    BarrierSingularityOffset: float
    SingularityInfo: SingularityInitializationInfo



class ShieldAugment_DamageModifier(ShieldAugment_Triggerable):
    DamageModifier: gbx_game_system_core.ConditionalDamageModifier
    ApplicationTarget: EShieldDamageModifierApplicationTarget
    bUseModifierDuration: bool



class ShieldAugment_Projected(ShieldAugment):
    Mesh: engine.StaticMesh
    ParticleSystemTransform: core_uobject.Transform
    Template_OpenAndLoop: engine.ParticleSystem
    Template_Close: engine.ParticleSystem
    Template_Break: engine.ParticleSystem
    CollisionProfileName: str
    RelativeTransform: core_uobject.Transform
    Material: engine.MaterialInterface
    ProjectedAudio: wwise_audio.WwiseEvent
    ProjectedStopAudio: wwise_audio.WwiseEvent



class ShieldAugment_Resistance(ShieldAugment):
    DamageTypeModifiers: unreal.WrappedArray[DamageTypeAttribute]



class ShieldAugment_Spike(ShieldAugment):
    bUseCooldown: bool
    Cooldown: gbx_game_system_core.AttributeInitializationData
    TriggeringDamageSource: unreal.UClass
    DamageData: unreal.UClass
    bTriggerElementalEffect: bool
    ElementalEffect: ShieldTriggeredElementalEffect
    bTriggerProjectile: bool
    ProjectileEffect: ShieldTriggeredProjectileReflectEffect
    FirstPersonSpikeEffectCollection: unreal.UClass
    SpikeParticleAttachPointName: str
    ThirdPersonSpikeEffectCollection: unreal.UClass



class ShieldAugmentAspectData(gbx_inventory.InventoryAspectData):
    Augment: ShieldAugment



class ShieldAugmentContextResolver(gbx_game_system_core.AttributeContextResolver): ...


class ShieldBalanceStateComponent(OakInventoryBalanceStateComponent):
    ShieldAspects: unreal.WrappedArray[ShieldAugment]
    DamageTypeAspect: ShieldDamageTypeAspectData



class ShieldBarrierInterface(core_uobject.Interface): ...


class ShieldBoosterModifierValueResolver(gbx_game_system_core.AttributeValueResolver): ...


class ShieldBoosterNonAugment(OakInventoryItem):
    ManagedActorDef: OakManagedActorDefinition
    ModifierValue: float
    MeshComponent: engine.StaticMeshComponent
    PickupAudioEvent: wwise_audio.WwiseEvent
    CollisionAudioEvent: wwise_audio.WwiseEvent
    ScreenEffect: engine.ParticleSystem
    def OnShieldChargePickedUp(self, PickupInstigator: OakCharacter): ...


class ShieldChargeInventoryBalanceStateComponent(OakInventoryBalanceStateComponent): ...


class ShieldChargeModifierValueResolver(gbx_game_system_core.AttributeValueResolver): ...


class ShieldChargeInventoryPickup(OakInventoryItem):
    ManagedActorDef: OakManagedActorDefinition
    ModifierValue: float
    AttributeToModify: gbx_game_system_core.GbxAttributeData
    ModifierType: engine.EGbxAttributeModifierType
    ModifierDuration: float
    MeshComponent: engine.StaticMeshComponent
    PickupAudioEvent: wwise_audio.WwiseEvent
    CollisionAudioEvent: wwise_audio.WwiseEvent
    ContextAugment: ShieldAugment_ChargeSpawner
    ScreenEffect: engine.ParticleSystem
    def OnShieldChargePickedUp(self, PickupInstigator: OakCharacter): ...
    def OnRep_ContextAugment(self): ...


class ShieldDamageTypeAspectData(gbx_inventory.InventoryAspectData):
    DamageType: unreal.UClass



class ShieldProviderInterface(core_uobject.Interface):

    def HasShieldEquipped(self, ReturnValue: bool) -> bool: ...


class ShockwaveEffectCollectionData(ElementalEffectCollectionData): ...


class SingularityGrenadeAudioEffectComponent(engine.SceneComponent):
    AuxBus: wwise_audio.WwiseAuxBus
    AudioEffect: wwise_audio.WwiseAudioEffect
    EffectFadeRtpc: wwise_audio.WwiseRtpc
    StartEvent: wwise_audio.WwiseEvent
    StopEvent: wwise_audio.WwiseEvent
    EffectSize: float
    EffectFadeDistance: float
    EffectDuration: float
    def StopActiveEffect(self): ...
    def SpawnSingularityAudioEffectAtLocation(self, WorldContextObject: unreal.UObject, EffectAuxBus: wwise_audio.WwiseAuxBus, EffectLocation: core_uobject.Vector, Size: float, FadeDistance: float, Duration: float, FadeDistanceRtpc: wwise_audio.WwiseRtpc, AdditionalStartEvent: wwise_audio.WwiseEvent, AdditionalStopEvent: wwise_audio.WwiseEvent): ...


class SingularityPullableInterface(core_uobject.Interface):

    def OnSingularityPullEnd(self, SingularityComponent: SingularityComponent): ...
    def OnSingularityPullBegin(self, SingularityComponent: SingularityComponent): ...
    def GetPullScale(self, ReturnValue: float) -> float: ...


class SirenArmControllerInterface(core_uobject.Interface): ...


class SirenCharacterComponent(PlayerCharacterComponent):
    GhostArms1PComponentName: str
    GhostArms3PComponentName: str
    RushHUDItemData: OakPlayerAbilityHUDItemData
    FirstPersonComponent: gbx_game_system_core.FirstPersonComponent
    GhostArms1P: gbx_game_system_core.GbxSkeletalMeshComponent
    GhostArms3P: gbx_game_system_core.GbxSkeletalMeshComponent
    RushStackInstances: unreal.WrappedArray[RushStackInstance]
    ArmAppearanceState: SirenArmAppearanceState
    Rush: int
    ConsumedRush: int
    def UnlockSirenCastMeshes(self, Reason: str): ...
    def StartTattoFade(self, bVisible: bool): ...
    def StartArmMaterialInstanceFade(self, NewInstance: engine.MaterialInstance): ...
    def Start3rdPersonArmFade(self, bVisible: bool, bInstant: bool): ...
    def SetPhaseCastMeshActive(self, bActive: bool): ...
    def SetArmElement(self, NewElement: EPhaseTranceElementalType): ...
    def OnRep_ArmAppearanceState(self): ...
    def OnPhaseTranceComboChanged(self, ActionAbility: OakActionAbility_PhaseTrance): ...
    def OnPhaseTranceActivated(self, InActionAbility: OakActionAbility): ...
    def OnLevelChanged(self, OldLevel: int, NewLevel: int): ...
    def OnFirstPersonCreated(self, bArmsCreated: bool): ...
    def OnCustomizationApplied(self, Customization: gbx_game_system_core.GbxCustomizationData): ...
    def LockSirenCastMeshes(self, Reason: str): ...
    def GetRushCount(self, ReturnValue: int) -> int: ...
    def GetMaxRushCount(self, ReturnValue: int) -> int: ...
    def GetActiveGhostArmElementalType(self, ReturnValue: EPhaseTranceElementalType) -> EPhaseTranceElementalType: ...
    def ConsumeRush(self, ReturnValue: int) -> int: ...
    def CanPlayPassiveGhostArmAction(self, ReturnValue: bool) -> bool: ...
    def AreGhostArmsVisible(self, ReturnValue: bool) -> bool: ...
    def AddRush(self, Value: int): ...


class SirenRushStackData(engine.DataAsset):
    StackName: str
    Count: int



class SirenStandInComponent(StandInCharacterComponent):
    SkillFlourishes: unreal.WrappedArray[SirenStandInFlourish]
    EndingAnimation: unreal.UClass
    GhostArmsComponent: gbx_game_system_core.GbxSkeletalMeshComponent
    bShowArmsOnCharacterCreate: bool
    bShowArmsOnCharacterSelect: bool
    CurrentFlourishAuxiliaryActor: StandInAuxiliaryActor_Siren
    CurrentSlottedPrimaryAugment: OakActionAbilityAugmentData
    def SetGhostArmsVisible(self, bNewVisible: bool): ...
    def OnCustomizationApplied(self, Customization: gbx_game_system_core.GbxCustomizationData): ...


class SkillScreenIronBearAnimInstance(gbx_game_system_core.GbxAnimInstance):
    IronBear: StandInAuxiliaryActor_IronBear
    bIsLocked: bool
    Slot_HPL_Active: bool
    Slot_HPR_Active: bool
    R_Fist_Weight: float
    L_Fist_Weight: float
    L_Fist_Weight_Inv: float
    R_Fist_Weight_Inv: float
    FistTorsoWeight: float



class SkillScreenStandInAnimInstance(gbx_game_system_core.GbxAnimInstance):
    StandInCharacter: OakCharacter_StandIn
    bIsLocked: bool



class SlaughterGameMode(OakGameMode):
    SlaughterGameState: SlaughterGameState
    def BroadcastRoundComplete(self, RoundNumber: int): ...
    def BroadcastNotAllPlayersAssembled(self): ...
    def BroadcastNewWave(self, bBossWave: bool, CountdownDuration: int): ...
    def BroadcastNewRound(self, RoundNumber: int): ...


class SlaughterGameState(OakGameState):
    SlaughterRoundStartNotificationData: HUDNotificationAsset
    SlaughterNewRoundWaveNotificationData: HUDNotificationAsset
    SlaughterRoundCompletedNotificationData: HUDNotificationAsset
    SlaughterFailedNotificationData: HUDNotificationAsset
    SlaughterCountdownNotificationData: unreal.WrappedArray[HUDNotificationAsset]
    SlaughterNotAllPlayersAssembledNotificationData: HUDNotificationAsset
    NewRoundNotificationPriority: int
    NewRoundNotificationText: str
    NewWaveNotificationPriority: int
    NewWaveNotificationText: str
    BossWaveNotificationText: str
    RoundCompleteNotificationPriority: int
    RoundCompleteNotificationText: str
    PlayerDiedNotificationPriority: int
    PlayerDiedNotificationText: str
    TeamWipeNotificationPriority: int
    TeamWipeNotificationText: str
    NotAllPlayersAssembledNotificationPriority: int
    NotAllPlayersAssembledNotificationText: str
    WaveCountdown: int
    def OnSlaughterWaveCountdown__DelegateSignature(self, CountdownRemaining: int): ...
    def OnSlaughterRoundComplete__DelegateSignature(self, RoundNumber: int): ...
    def OnSlaughterPlayerDied__DelegateSignature(self, PlayerState: OakPlayerState): ...
    def OnSlaughterNotAllPlayersAssembled__DelegateSignature(self): ...
    def OnSlaughterNewWave__DelegateSignature(self, bBossWave: bool, CountdownDuration: int): ...
    def OnSlaughterNewRound__DelegateSignature(self, RoundNumber: int): ...
    def OnSlaughterAllPlayersDied__DelegateSignature(self): ...
    def BroadcastRoundComplete(self, RoundNumber: int): ...
    def BroadcastPlayerDied(self, PlayerState: OakPlayerState): ...
    def BroadcastNotAllPlayersAssembled(self): ...
    def BroadcastNewWave(self, bBossWave: bool, CountdownDuration: int): ...
    def BroadcastNewRound(self, RoundNumber: int): ...
    def BroadcastAllPlayersDied(self): ...


class SlideModifierAspectData(gbx_inventory.InventoryAspectData):
    ElementalType: EOakElementalType



class SocialInteractionComponent(gbx_game_system_core.UsableComponent): ...


class SoundControllerSensor(engine.Actor):
    Aggregator: SoundController
    BoxComponent: engine.BoxComponent
    FadeDistance: float
    CurrentValue: float



class SoundController(engine.Actor):
    Sensors: unreal.WrappedArray[SoundControllerSensor]
    RTPC: wwise_audio.WwiseRtpc



class SpawnFactory_Oak(gbx_spawn.SpawnFactory_Generic):
    bCopyRegionDataToSpawnedActors: bool



class SpawnFactory_Lootable(SpawnFactory_Oak):
    bLockOnSpawn: bool
    UnlockCondition: gbx_runtime.GbxCondition
    LootableBalanceDataOverride: gbx_inventory.LootableBalanceData



class SpawnFactory_OakAI(SpawnFactory_Oak):
    ItemPoolToDropOnDeath: gbx_inventory.ItemPoolListInterface
    ItemPoolToDropOnDeathAdditive: bool
    ItemPoolDropOnDeathType: EItemDropOnDeathType
    bOverrideEquippedItems: bool
    CustomItemCollectionToEquip: gbx_inventory.ItemPoolCollection
    CustomItemCollectionsToEquip: unreal.WrappedArray[gbx_inventory.ItemPoolCollection]
    bEquipSingleItemFromCollection: bool
    UINameOverride: gbx_game_system_core.GbxUIName
    TeamOverride: gbx_game_system_core.Team
    GestaltPartListDataOverride: gbx_game_system_core.GestaltPartListData
    DialogNameTagOverride: gbx_dialog.DialogNameTag
    KeyedActions: SpawnFactorKeyedAction



class SpawnFactory_OakInteractiveObject(SpawnFactory_Oak): ...


class SpawnFactory_OakItemPickup(SpawnFactory_Oak):
    ItemPoolToDropFrom: gbx_inventory.ItemPoolData



class SpawnFactory_OakProjectile(SpawnFactory_Oak): ...


class SpawnFactory_OakTurret(SpawnFactory_Oak):
    SeatFactory: gbx_spawn.SpawnFactory



class SpawnFactory_OakVehicle(SpawnFactory_Oak):
    bDigistructOnSpawn: bool
    bAllowScanningOnCAR: bool
    bCannotWorldTravel: bool
    InventoryBalanceData: gbx_inventory.InventoryBalanceData
    VehicleActorClass: unreal.UClass
    SeatFactories: unreal.WrappedArray[gbx_spawn.SpawnFactory]
    bForceDontDespawnWhenNoOccupant: bool
    bForceKeepAssociatedToSpawner: bool
    UINameOverride: gbx_game_system_core.GbxUIName



class VehiclePartSetData(gbx_inventory.InventoryPartSetData): ...


class SpawnFactory_OakVehicleBuilder(SpawnFactory_OakVehicle):
    VehicleClass: unreal.UClass
    bShowArchetypePartOnly: bool
    VehiclePartLists: unreal.WrappedArray[VehiclePartListData]
    PartListBalanceData: gbx_inventory.InventoryBalanceData
    PartSetData: gbx_game_system_core.ActorPartSetData
    SeatList: unreal.WrappedArray[SeatOccupant]
    DefaultSpawnOptions: gbx_spawn.SpawnOptionData
    bRandomizePassengerCount: bool
    RandomizePassengerCount: core_uobject.Int32Interval
    bWeightedPassengersNum: bool
    WeightedPassengersNum: unreal.WrappedArray[WeightedPassengersNum]
    PartTypeEnum: unreal.UEnum
    CustomVehicleInventoryPartSetData: VehiclePartSetData
    CustomInventoryData: gbx_inventory.InventoryData
    CustomVehicleInventoryBalanceData: gbx_inventory.InventoryBalanceData



class SpawnFactory_OakVehicleRandomSeats(SpawnFactory_OakVehicle):
    SeatOptions: unreal.WrappedArray[SpawnFactoryDataArray]



class SpawnLootManager(unreal.UObject):
    DroppedPickupRequests: unreal.WrappedArray[SpawnDroppedPickupLootRequestEntry]
    InventoryActorRequests: unreal.WrappedArray[SpawnInventoryLootRequestEntry]
    PickupsHiddenWhileInStatusMenu: unreal.WrappedArray[OakInventoryItemPickup]
    PickupsHiddenInCinematic: unreal.WrappedArray[OakInventoryItemPickup]
    def OnNumPlayersChanged(self, NewNumPlayers: int): ...


class SpawnPerformance_Skeletal(gbx_game_system_core.PrototypeActor):
    SkeletalMeshComponent: engine.SkeletalMeshComponent



class SpawnPerformance_SkeletalWithReference(SpawnPerformance_Skeletal): ...


class SpawnPerformance_1_SMC(gbx_game_system_core.PrototypeActor):
    StaticMeshComponent: engine.StaticMeshComponent
    StaticMeshComponent1: engine.StaticMeshComponent
    StaticMeshComponent2: engine.StaticMeshComponent
    StaticMeshComponent3: engine.StaticMeshComponent
    StaticMeshComponent4: engine.StaticMeshComponent
    StaticMeshComponent5: engine.StaticMeshComponent
    StaticMeshComponent6: engine.StaticMeshComponent
    StaticMeshComponent7: engine.StaticMeshComponent
    StaticMeshComponent8: engine.StaticMeshComponent
    StaticMeshComponent9: engine.StaticMeshComponent



class SpawnPerformance_1_SMCWithReferences(SpawnPerformance_1_SMC): ...


class SpawnPerformance_1_Components(gbx_game_system_core.PrototypeActor):
    BalanceStateComponent: gbx_game_system_core.BalanceStateComponent
    DamageReceiverComponent: OakDamageComponent
    ElementalInteractionComponent: ElementalInteractionComponent
    OakMissionIconComponent: OakMissionIconComponent
    ParticleSystemComponent: engine.ParticleSystemComponent
    RotatingMovementComponent: engine.RotatingMovementComponent
    SkeletalMeshComponent: engine.SkeletalMeshComponent
    StaticMeshComponent: engine.StaticMeshComponent
    UsableComponent: gbx_game_system_core.UsableComponent
    WwiseAudioComponent: wwise_audio.WwiseAudioComponent



class SpawnPerformance_1_ComponentsWithReferences(SpawnPerformance_1_Components): ...


class SpinnerSliderTestMovie(GFxStatusMenuSubmenu):
    TestSpinner: gbx_ui.GbxSpinner
    TestSlider: gbx_ui.GbxGFxSlider
    TestDropDownList: gbx_ui.GbxGFxDropDownList



class Splat(engine.Actor):
    SplatDataAsset: SplatData
    SplatDecal: engine.DecalComponent
    SplatDecalMID: engine.MaterialInstanceDynamic
    GroundingDecal: engine.DecalComponent
    GroundingDecalMID: engine.MaterialInstanceDynamic
    ParticleSystem: engine.ParticleSystemComponent
    OverlapCollision: engine.GbxConvexComponent
    ElementalInteraction: ElementalInteractionComponent
    Audio: wwise_audio.WwiseAudioComponent
    def InitializeSplat(self): ...


class SplatDamageData(OakDamageData): ...


class SplatData(gbx_runtime.GbxDataAsset):
    bUseGroundingDecal: bool
    bUseSplatDecalMaterialArray: bool
    bOverrideDamageData: bool
    bForceDamageToPlayerControlled: bool
    bOverrideDamageAmount: bool
    bUseGroundingDecalDeathDelay: bool
    BirthDuration: float
    BirthOpacity: float
    BirthRadius: float
    BirthEffect: engine.ParticleSystem
    BirthAudio: wwise_audio.WwiseEvent
    GroundingDecalMaterial: engine.MaterialInterface
    SplatDecalMaterial: engine.MaterialInterface
    SplatDecalMaterialArray: unreal.WrappedArray[engine.MaterialInterface]
    Effect: engine.ParticleSystem
    Duration: float
    Opacity: float
    Radius: float
    BonusDecalScalePercent: float
    DamageDataOverride: unreal.UClass
    DamageScalar: float
    AttitudeDamageRules: gbx_game_system_core.AttitudeDamageRules
    DamageOverride: gbx_game_system_core.AttributeInitializationData
    ElementalInteraction: ElementalInteractionData
    DeathDuration: float
    DeathOpacity: float
    DeathRadius: float
    DeathAudio: wwise_audio.WwiseEvent
    GroundingDecalDeathDelay: float



class SplineFollowerComponent(engine.ActorComponent):
    CallbackInputKey: float
    CallbackDistancesOnSpline: unreal.WrappedArray[SplineFollowerDistanceCheckpoint]
    MaxSpeed: float
    bUseMinSpeed: bool
    MinSpeed: float
    Acceleration: float
    TurnRate: float
    bAutoStart: bool
    ForwardLookUpDistance: float
    OnSplineDistanceDelta: float
    OnSplineYawDelta: float
    SplineComponent: engine.SplineComponent
    CurrentSpeed: float
    CurrentDistanceOnSpline: float
    bMoving: bool
    bOnSpline: bool
    bReverse: bool
    def TelportToPositionOnSpline(self, Percent: float): ...
    def Stop(self, ReturnValue: bool) -> bool: ...
    def Start(self, ReturnValue: bool) -> bool: ...
    def SnapToSpline(self): ...
    def SetSplineComponent(self, Spline: engine.SplineComponent): ...
    def SetDirection(self, bSetReverse: bool): ...
    def OnRep_SplineComponent(self): ...
    def IsMoving(self, ReturnValue: bool) -> bool: ...
    def GetSplineComponent(self, ReturnValue: engine.SplineComponent) -> engine.SplineComponent: ...
    def GetLocationAhead(self, AheadDistance: float, ReturnValue: core_uobject.Vector) -> core_uobject.Vector: ...
    def GetDirection(self, ReturnValue: bool) -> bool: ...
    def GetCurrentDistanceOnSpline(self, ReturnValue: float) -> float: ...


class SplineMovementComponent(engine.MovementComponent):
    SplineComponentHolder: engine.Actor
    SplineComponentNameSelected: str
    StartDistance: float
    MaxSpeed: float
    MinSpeed: float
    LinearDamping: float
    GravityZ: float
    AccelerationAngleThreshold: float
    SleepThresholdMaxTime: float
    SleepThreshold: float
    bIgnoreCollisionWhenMoving: bool
    OffsetFromSpline: core_uobject.Vector
    VelocityCurrent: float
    ImpulseThisFrameAccumulator: float
    CurrentDistanceAlongSpline: float
    TimeWithinSleepThreshold: float
    def SwitchSpline(self, NewSplineComponentHolder: engine.Actor, NewSplineName: str): ...
    def SetStartingDistanceOnSpline(self, DistanceOnSpline: float): ...
    def OnRep_SplineComponentHolder(self): ...
    def OnRep_Impulse(self): ...
    def GetSplineComponent(self, ReturnValue: engine.SplineComponent) -> engine.SplineComponent: ...


class SplineMovementComponentDoubleLinked(SplineMovementComponent):
    CartInFront: engine.Actor
    CartBehind: engine.Actor
    DistanceFromCartInFront: float
    DistanceFromCartBehind: float



class StandInAuxiliaryActor(engine.Actor):
    ActionComponent: gbx_game_system_core.GbxActionComponent
    CustomizationComponent: gbx_game_system_core.GbxCustomizationComponent
    MeshComponent: engine.SkeletalMeshComponent
    HeadMeshReference: gbx_game_system_core.GbxSkeletalMeshComponent
    CachedHeadMeshParent: engine.SceneComponent
    bWantsFadeInCoordinatedEffects: bool
    EquippedWeaponData: gbx_inventory.InventoryBalanceData
    EquippedWeaponSocket: str
    EquippedWeaponScale: float
    EquippedWeaponInstance: gbx_weapon.Weapon
    def SetHidden(self, bNewHidden: bool, Reason: str): ...
    def OnReceivedClonedWeaponAppearance(self, BaseComponent: engine.SceneComponent): ...
    def GetOwningStandIn(self, ReturnValue: OakCharacter_StandIn) -> OakCharacter_StandIn: ...
    def GetOwningPlayer(self, ReturnValue: OakCharacter_Player) -> OakCharacter_Player: ...


class StandInAuxiliaryActor_IronBear(StandInAuxiliaryActor):
    Hardpoints: unreal.WrappedArray[IronBearHardPointAugmentInfo]
    MainMesh: gbx_game_system_core.GbxSkeletalMeshComponent
    LeftHardPointMeshComponent: gbx_game_system_core.GbxSkeletalMeshComponent
    RightHardPointMeshComponent: gbx_game_system_core.GbxSkeletalMeshComponent
    GunnersNestMeshComponent: gbx_game_system_core.GbxSkeletalMeshComponent
    RightHardPointSlotSettings: HardPointSlotSettings
    LeftHardPointSlotSettings: HardPointSlotSettings
    GenericEquippedCE: unreal.UClass
    bOnlyPlayInitialHardPointFlourishOnLeftSlot: bool
    DelayBetweenInitialHardPointFlourishAnimations: float
    LastSlottedLeftHardPoint: OakActionAbilityAugmentData
    LastSlottedRightHardPoint: OakActionAbilityAugmentData



class StandInAuxiliaryActor_Pet(StandInAuxiliaryActor): ...


class StandInAuxiliaryActor_Siren(StandInAuxiliaryActor):
    LifeTime: float
    def Initialize(self, ElementalAugment: OakActionAbilityAugmentData, EffectAugment: OakActionAbilityAugmentData): ...


class StandInAuxiliaryActorAnimInstance(engine.AnimInstance): ...


class StandInGlobals(gbx_runtime.GbxDataAsset):
    StandInDataTable: engine.DataTable
    FullScreenSettings: GlobalsStandInSettings
    SplitScreenSettings: GlobalsStandInSettings
    VerticalSplitScreenSettings: GlobalsStandInSettings
    QuadSplitScreenSettings: GlobalsStandInSettings
    RoomDecorationRotationYawLimits: gbx_runtime.NumericRange
    PlayerLevelToShowActionSkillsOnStandIns: int
    StandingStandinDelayAfterFrontendEmote: float
    StandingStandinDelayAfterFrontendInspect: float
    StandInReturnToInspectRotationInterpSpeed: float
    StandInListSelectionChangeDelay: float
    FrontendSlotSettings: FrontendStandInSlotSettings



class StandInConfigLibrary(engine.BlueprintFunctionLibrary): ...


class StatusEffectEventProviderInterface(core_uobject.Interface): ...


class StatusEffectStackingStrategyData_OakElemental(gbx_game_system_core.StatusEffectStackingStrategyData): ...


class StreamerBoosterData(gbx_runtime.GbxDataAsset):
    PrimaryBoosterInfos: unreal.WrappedArray[StreamerBoosterInfo]
    SecondaryBoosterInfos: unreal.WrappedArray[StreamerBoosterInfo]



class StreamerLootableObject(LootableObject):
    FirstDonor: str
    LargestDonor: str
    LargestDonationAmount: int
    ChestWaypoint: OakMissionIconComponent
    DonationTier: int
    ChestWorldIconData: InWorldIconData
    ChestWaypointVerticalOffset: float
    def TriggerShowEffectSlideout(self, OakPC: OakPlayerController): ...
    def OnShowEffectSlideout(self, OakPC: OakPlayerController): ...


class StreamingEventDispatcher(engine.Actor):
    EventEnemy: gbx_game_system_core.GbxCharacter
    EnemyWaypoint: OakMissionIconComponent
    EnemyUIName: gbx_game_system_core.GbxUIName
    PlayerOwner: OakPlayerController
    EnemySpawnEventRef: OakStreamingInteractionEvent_EnemySpawn
    SpawnedEnemy: engine.Actor
    def ValidEnemySuspend(self, SpawnerComponent: gbx_spawn.SpawnerComponent, Actor: engine.Actor): ...
    def ValidEnemyDied(self, SpawnerComponent: gbx_spawn.SpawnerComponent, Actor: engine.Actor): ...
    def SetEventEnemyName(self, NewEnemyName: str): ...
    def SetEventEnemy(self, Enemy: gbx_game_system_core.GbxCharacter): ...
    def SendUpdatedSessionStats(self, Updated: OakInteractiveSessionStats): ...
    def PlayerDied(self): ...
    def OnVehicleExited(self, PawnAttachSlotComponent: gbx_game_system_core.PawnAttachSlotComponent): ...
    def OnVehicleEntered(self, PawnAttachSlotComponent: gbx_game_system_core.PawnAttachSlotComponent): ...
    def OnRep_ValidEnemyActorSpawned(self): ...
    def OnPlayerInjured(self): ...
    def OnPlayerDead(self): ...
    def OnPlayerCausedDeath(self, Damaged: gbx_game_system_core.DamageComponent, Details: gbx_game_system_core.CausedDeathDetails): ...
    def OnPlayerCausedDamage(self, DamageInstigator: engine.Actor, Damage: float, DamageType: gbx_game_system_core.GbxDamageType, DamageSource: gbx_game_system_core.DamageSource, DamagedActor: engine.Actor, Details: gbx_game_system_core.CausedDamageDetails): ...
    def OnLegendarySpawned(self, bNewVal: bool): ...
    def OnEnemySuspend(self, SpawnerComponent: gbx_spawn.SpawnerComponent, Actor: engine.Actor): ...
    def OnEnemySpawned(self, SpawnerComponent: gbx_spawn.SpawnerComponent, Actor: engine.Actor): ...
    def OnEnemyDied(self, SpawnerComponent: gbx_spawn.SpawnerComponent, Actor: engine.Actor): ...
    def HookToEnemySpawnEvent(self, EnemySpawnEvent: OakStreamingInteractionEvent_EnemySpawn, AllValidSpawners: unreal.WrappedArray[gbx_spawn.SpawnerComponent]): ...
    def GetUpdatedSessionStats(self): ...
    def ExecutePollAction(self, PollActionClassPath: core_uobject.SoftObjectPath, Context: unreal.UObject, Value: float): ...
    def CleanEventEnemy(self): ...


class StreamingPoolActionInfo(gbx_runtime.GbxDataAsset):
    ActionTitle: str
    ActionDescription: str
    ActionValueMinMax: core_uobject.Vector2D
    def PollActionSelected(self, PlayerOwner: OakPlayerController, Context: unreal.UObject, Value: float): ...
    def PollActionInitialized(self): ...


class SwayPatternData(gbx_runtime.GbxDataAsset):
    Samples: unreal.WrappedArray[core_uobject.Vector2D]
    NumberOfOctaves: int
    NumberOfSamplesToGenerate: int



class TechnicalVehicleAnimInstance(OakVehicleAnimInstance):
    bIsBigWheel: bool
    SlotToPlayBounceOn: str
    BrakeBounceBack: engine.AnimSequenceBase
    BrakeBounceFront: engine.AnimSequenceBase
    BlendAccelAlpha: float



class TedioreBehavior(unreal.UObject):

    def K2_OnProjectileLastBounce(self, Projectile: TedioreProjectile): ...
    def K2_OnProjectileInitialized(self, Projectile: TedioreProjectile): ...
    def K2_OnProjectileImpact(self, Projectile: TedioreProjectile, HitResult: engine.HitResult): ...
    def K2_OnProjectileFireWeapon(self, Projectile: TedioreProjectile): ...
    def K2_OnProjectileExplode(self, Projectile: TedioreProjectile): ...
    def K2_OnProjectileEndPlay(self, Projectile: TedioreProjectile): ...
    def K2_OnProjectileBounce(self, Projectile: TedioreProjectile): ...
    def K2_OnProjectileBeginPlay(self, Projectile: TedioreProjectile): ...
    def K2_OnLastBounceEvent(self, Projectile: TedioreProjectile): ...
    def K2_OnInitializedEvent(self, Projectile: TedioreProjectile): ...
    def K2_OnImpactEvent(self, Projectile: TedioreProjectile, HitResult: engine.HitResult): ...
    def K2_OnFireWeaponEvent(self, Projectile: TedioreProjectile): ...
    def K2_OnExplodeEvent(self, Projectile: TedioreProjectile): ...
    def K2_OnEndPlayEvent(self, Projectile: TedioreProjectile): ...
    def K2_OnBounceEvent(self, Projectile: TedioreProjectile): ...
    def K2_OnBeginPlayEvent(self, Projectile: TedioreProjectile): ...


class TedioreBehavior_Bouncy(TedioreBehavior):
    BouncyLifeSpan: float
    MaxNumBounces: int
    Bounciness: float
    Friction: float
    ProjectileGravityScale: float
    TriggerTime: float
    BounceVelocity: float
    BouncyTrail: engine.ParticleSystem
    BounceEvent: wwise_audio.WwiseEvent
    MirvBounceEvent: wwise_audio.WwiseEvent



class TedioreBehavior_Drunken(TedioreBehavior):
    DrunkenTemplate: gbx_game_system_core.DrunkenBaseMovementComponent



class TedioreBehavior_Homing(TedioreBehavior):
    HomingTemplate: GrenadeHomingComponent
    InitialHomingDelay: float
    RetryHomingDelay: float
    InitialSearchQuery: gbx_game_system_core.EnvQueryParams
    RetrySearchQuery: gbx_game_system_core.EnvQueryParams
    OutOfFuelDuration: float
    GravityScale: float
    MaxSpeed: float
    OnHomingFailed: wwise_audio.WwiseEvent
    MIRVOnHomingInit: wwise_audio.WwiseEvent
    MIRVHomingLoopEvent: wwise_audio.WwiseEvent
    MIRVOnHomingFailed: wwise_audio.WwiseEvent



class TedioreBehavior_MIRV(TedioreBehavior):
    SpawnAngleOffset: float
    MirvSpawnOffset: float
    MirvChildClass: unreal.UClass
    bHideWeaponVisuals: bool
    MirvChildDamageScalar: float
    MirvHomingSearchQuery: gbx_game_system_core.EnvQueryParams
    MirvHomingInitialDelay: float
    MirvHomingRetryDelay: float



class TedioreBehavior_Shooting(TedioreBehavior):
    MuzzleEffectCollection: unreal.UClass
    LaserSightTemplate: engine.ParticleSystem
    LaserSightMuzzleOffset: core_uobject.Vector
    ShotDamageScale: float
    ShotSpeedScale: float
    MinShotsFired: int
    NumShotsFiredScale: float
    bUseMaxAmmo: bool
    ConeAngleMin: float
    ConeAngleMax: float
    def K2_OnOutOfAmmo(self, Projectile: TedioreProjectile): ...


class TedioreBehavior_Sticky(TedioreBehavior):
    StuckAICharacter: unreal.UClass
    StuckCharacterInitialLifetime: float
    bFlipMirvStickyTiming: bool
    def OnSpawnAiShootingWeapon(self, SpawnedActor: engine.Actor): ...


class TedioreBehavior_SuppressBouncy(TedioreBehavior): ...


class TedioreBehavior_SuppressDrunken(TedioreBehavior): ...


class TedioreBehavior_SuppressHoming(TedioreBehavior): ...


class TedioreBehavior_TargetCombo(TedioreBehavior):
    TargetComboSphere: engine.SphereComponent
    VisualDelay: float
    TargetComboVisuals: engine.StaticMeshComponent
    HealthType: gbx_game_system_core.HealthTypeData
    ComboDamageScale: gbx_game_system_core.GbxAttributeData
    ComboRadiusScale: gbx_game_system_core.GbxAttributeData
    OnTargetComboExplode: wwise_audio.WwiseEvent
    OnTargetComboStart: wwise_audio.WwiseEvent
    OnTargetComboEnd: wwise_audio.WwiseEvent
    def OnProjectileTakeAnyDamage(self, DamageReceiver: gbx_game_system_core.DamageComponent, Damage: float, DamageType: gbx_game_system_core.GbxDamageType, DamageSource: gbx_game_system_core.DamageSource, InstigatedBy: engine.Controller, DamageCauser: gbx_game_system_core.DamageCauserComponent, Details: gbx_game_system_core.ReceivedDamageDetails): ...
    def K2_OnComboTargetTriggered(self, Projectile: TedioreProjectile): ...
    def K2_ComboTargetTriggeredEvent(self, Projectile: TedioreProjectile): ...


class TedioreProjectile(gbx_weapon.Projectile):
    StaticMesh: engine.StaticMeshComponent
    RotatingComponent: engine.RotatingMovementComponent
    WwiseComponent: wwise_audio.WwiseAudioComponent
    FireMuzzleComponent: gbx_game_system_core.SocketComponent
    AttachedTrail: engine.ParticleSystemComponent
    TedioreBehaviors: unreal.WrappedArray[TedioreBehavior]
    OwningWeapon: gbx_weapon.Weapon
    TedioreProjectileMovement: gbx_weapon.GbxProjectileMovementComponent
    HomingComponent: GrenadeHomingComponent
    DrunkenComponent: gbx_game_system_core.DrunkenBaseMovementComponent
    CachedWeaponFireAudio: wwise_audio.WwiseEvent
    AmmoCount: int
    AmmoUsed: int
    ProjectilesPerShot: int
    ShotAmmoCost: int
    ShotDamage: float
    FireRate: float
    ImpactTriggerDuration: float
    bRotateWhenThrown: bool
    MuzzleSocketName: str
    LaserSightSocketName: str
    bHasMirved: bool
    bIsMirvChild: bool
    MirvBaseDamage: float
    bIgnoreWeaponVisualCloning: bool
    NumMirvProjectileAttribute: gbx_game_system_core.GbxAttributeData
    BouncyAimAssistQuery: gbx_game_system_core.EnvQueryParams
    MaxAssistAngle: float
    AssistAngleDot: float
    StatusEffectDamageScalar: gbx_game_system_core.AttributeInitializationData
    bIsStuck: bool
    def TurnAttachedTrailOn(self, bRestartTrail: bool): ...
    def SetAttachedTrail(self, NewTrail: engine.ParticleSystem): ...
    def RemoveAttachedTrail(self, bDestroyTrail: bool): ...
    def OnRep_OnProjectileStuck(self): ...
    def OnProjectileLastBounce(self, ImpactResult: engine.HitResult): ...
    def OnProjectileBounce(self, ImpactResult: engine.HitResult, ImpactVelocity: core_uobject.Vector): ...
    def OnBehaviorInitialized(self, BehaviorClass: unreal.UClass): ...
    def K2_SpawnTedioreProjectile(self, TedioreWeapon: gbx_weapon.Weapon, TedioreClass: unreal.UClass): ...
    def IsMirvChild(self, ReturnValue: bool) -> bool: ...
    def GetHomingComponent(self, ReturnValue: GrenadeHomingComponent) -> GrenadeHomingComponent: ...
    def GetDrunkenComponent(self, ReturnValue: gbx_game_system_core.DrunkenBaseMovementComponent) -> gbx_game_system_core.DrunkenBaseMovementComponent: ...
    def GetAttachedTrail(self, ReturnValue: engine.ParticleSystemComponent) -> engine.ParticleSystemComponent: ...
    def FindBehaviorByClass(self, BehaviorClass: unreal.UClass, Branches: EBehaviorOutput, bCheckChildClasses: bool, ReturnValue: TedioreBehavior) -> TedioreBehavior: ...
    def CalculateExplosionDamage(self, DamagePerShot: float, BulletsPerShot: int, ReturnValue: float) -> float: ...


class TedioreProjectileClassAspect(gbx_inventory.InventoryAspectData):
    TedioreProjectileClass: unreal.UClass



class TedioreWeaponAspectData(gbx_inventory.InventoryAspectData):
    TedioreBehavior: TedioreBehavior



class WeaponBalanceStateComponent(OakInventoryBalanceStateComponent):
    UseModeAspectSetList: unreal.WrappedArray[WeaponUseModeAspectSetData]
    AudioAspectList: unreal.WrappedArray[WeaponAudioAspectData]
    FoleyAspectList: unreal.WrappedArray[WeaponFoleyAspectData]
    AudioStreamingAspectList: unreal.WrappedArray[WeaponAudioStreamingAspectData]
    EffectAspectList: unreal.WrappedArray[WeaponEffectBaseAspectData]
    MaterialWearAspect: WeaponMaterialWearAspectData
    PlayerMeleeOverrideAspect: WeaponPlayerMeleeOverrideAspectData
    CurrentTrinketPart: WeaponTrinketPartData
    CurrentSkinPart: WeaponSkinPartData
    CachedCustomizationComponent: gbx_game_system_core.GbxCustomizationComponent
    WeaponPrivate: OakWeapon
    def NotifyWeaponPutDown(self): ...
    def NotifyWeaponEquipped(self): ...
    def NotifyWeaponAttached(self): ...
    def NotifyFirstPersonCreated(self): ...


class TedioreWeaponBalanceStateComponent(WeaponBalanceStateComponent):
    TedioreAspects: unreal.WrappedArray[TedioreWeaponAspectData]
    Behaviors: unreal.WrappedArray[TedioreBehavior]
    TedioreProjectileClass: TedioreProjectileClassAspect
    def GetTedioreProjectileClass(self, ReturnValue: unreal.UClass) -> unreal.UClass: ...


class TestMapsMenu(gbx_ui.GbxUmgMenu):
    BackItem: gbx_ui.GbxListItemText
    MapCategories: unreal.WrappedArray[str]
    SubMenuData: gbx_ui.GbxUmgMenuData
    ContentPanel: gbx_ui.GbxScrollBoxList
    def OnTestMapDLCNameSelected(self, Widget: gbx_ui.GbxUserWidget, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnTestMapCategorySelected(self, Widget: gbx_ui.GbxUserWidget, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBackClicked(self, Widget: gbx_ui.GbxUserWidget, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class TestSubMapsMenu(gbx_ui.GbxUmgMenu):
    BackItem: gbx_ui.GbxListItemText
    ContentPanel: gbx_ui.GbxScrollBoxList
    def OnTestMapSelected(self, Widget: gbx_ui.GbxUserWidget, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def OnBackClicked(self, Widget: gbx_ui.GbxUserWidget, InputInfo: gbx_ui.GbxMenuInputEvent): ...


class TinkPile(gbx_ai.SmartObject):
    SpawnerComponent: OakSpawnerComponent
    SpawnPointComponent: OakSpawnPointComponent
    SkelMeshComponent: engine.SkeletalMeshComponent
    RegionComponent: RegionBalanceStateComponent
    TerritoryComponent: gbx_game_system_core.TerritoryComponent
    bEnabled: bool
    StartState: ETinkPileBuildOption
    DefaultTeam: gbx_game_system_core.Team
    UnusedActionSet: gbx_ai.SmartObjectActionSet
    UsedActionSet: gbx_ai.SmartObjectActionSet
    Anim_UnusedIdle: engine.AnimSequence
    Anim_UsedIdle: engine.AnimSequence
    Anim_Use: unreal.WrappedArray[engine.AnimSequence]
    Anim_Reset: engine.AnimSequence
    CurrentTeam: gbx_game_system_core.Team
    ResetTimerHandle: engine.TimerHandle
    UseState: ETinkPileUseState
    CurrentAIOwner: gbx_ai.GbxAIController
    def StartUsing(self, User: engine.Actor): ...
    def SetTeam(self, NewTeam: gbx_game_system_core.Team): ...
    def SetStartState(self, NewStartState: ETinkPileBuildOption): ...
    def SetEnabled(self, bNewEnabled: bool): ...
    def SetBuildOption(self, NewBuildOption: ETinkPileBuildOption): ...
    def ResetUse(self): ...
    def OnTinkPileUseStarted(self): ...
    def OnTinkPileUseFinished(self): ...
    def OnRep_UseState(self): ...
    def OnActorSpawned(self, SpawnerComp: gbx_spawn.SpawnerComponent, Actor: engine.Actor): ...
    def OnActorDied(self, SpawnerComp: gbx_spawn.SpawnerComponent, Actor: engine.Actor): ...
    def GetUseState(self, ReturnValue: ETinkPileUseState) -> ETinkPileUseState: ...
    def BuildObject(self): ...


class TireProjectileMovementComponent(gbx_weapon.WalkingProjectileMovementComponent):
    MeshToRotate: engine.SceneComponent



class TransporterCrane(engine.Actor):
    TransporterTrackComponent: TransporterTrackComponent
    SplineFollowerComponent: SplineFollowerComponent
    SplineComponent: engine.SplineComponent
    CraneMesh: engine.SkeletalMeshComponent
    CraneRecord: TransporterCraneRecord
    ReplicatedCurrentPosition: float
    def StopTrackMovement(self): ...
    def SetTrackMovementDirection(self, bReversed: bool): ...
    def ResumeTrackMovement(self): ...
    def ReachedPickupPoint(self): ...
    def ReachedEnd(self): ...
    def OnRep_SplineComponent(self): ...
    def OnRep_CraneRecord(self): ...
    def OnReachedPickupPoint(self, InSplineFollowerComponent: SplineFollowerComponent, SplineFollowerOwner: engine.Actor): ...
    def OnReachedEnd(self, InSplineFollowerComponent: SplineFollowerComponent, SplineFollowerOwner: engine.Actor): ...
    def BeginTrack(self): ...


class TransporterTrackComponent(engine.ActorComponent):
    WeightedCranes: unreal.WrappedArray[WeightedTransporterCrane]
    TimeBetweenCranes: float
    TimeBetweenPickups: float
    CarryingSpeed: float
    PickupLocation: engine.Actor
    bStartWithCranes: bool
    bReversed: bool
    def SetOverrideCrane(self, NextCrane: TransporterCrane): ...
    def ReverseTrack(self): ...
    def ResumeTrack(self): ...
    def PauseTrack(self): ...
    def ManualSpawnCrane(self, ResetTimer: bool): ...
    def EnableCranes(self, bEnable: bool): ...
    def CraneReachedPickupPoint(self, Crane: TransporterCrane): ...
    def CraneReachedEnd(self, Crane: TransporterCrane): ...
    def CraneBeginTrack(self, Crane: TransporterCrane): ...


class TrophyCase(CrewQuartersInteractiveObject):
    TrophyCaseReplicatedSets: unreal.WrappedArray[TrophyCaseReplicatedSet]
    def OnRep_TrophyCaseReplicatedSets(self): ...


class TrophyCaseProxy(AdvancedInteractiveObjectProxy):
    TrophySets: unreal.WrappedArray[ChallengeTrophySet]
    LockedTrophyMesh: engine.StaticMesh
    BronzeTrophyMaterial: engine.MaterialInstanceConstant
    SilverTrophyMaterial: engine.MaterialInstanceConstant
    GoldTrophyMaterial: engine.MaterialInstanceConstant
    PlatinumTrophyMaterial: engine.MaterialInstanceConstant
    EridiumTrophyMaterial: engine.MaterialInstanceConstant
    TrophyRotationSpeed: float
    SelectedTrophyBaseMaterial: engine.MaterialInstanceConstant
    MaxSelectionAngle: float
    MaxSelectionDistance: float
    AngleWeight: float
    DistanceWeight: float
    def ZoomOut(self): ...
    def ZoomIn(self): ...
    def StopRotatingTrophy(self): ...
    def SelectPrevious(self): ...
    def SelectNext(self): ...
    def RotateTrophyPositive(self): ...
    def RotateTrophyNegative(self): ...
    def OnAxisInput(self, Vec: core_uobject.Vector, bGamePad: bool): ...


class TurretSeatPawn(SeatPawn):
    TurretType: EGroundTurretType
    TeamComponent: gbx_game_system_core.TeamComponent
    DefaultTurretAction: unreal.UClass
    OakPawnAttachSlotComponent: OakPawnAttachSlotComponent
    OakHijackSlotComponent: OakPawnAttachSlotComponent
    LastCharacterAttached: OakCharacter
    LastHijackCharacterAttached: OakCharacter
    SpawnCostSelection: gbx_game_system_core.SpawnCostSelection
    LeftHandIKSocket: str
    RightHandIKSocket: str
    LeftFootIKSocket: str
    RightFootIKSocket: str
    MeshComponent: engine.MeshComponent
    PlayerAlertType: EPlayerAlertType
    def HijackStateChanged(self): ...
    def GetAvailableIKSocketNames(self, SocketNames: unreal.WrappedArray[str]): ...
    def EnableTransitionControl(self, bEnable: bool): ...
    def AttachStateChanged(self): ...


class TutorialGlobals(gbx_runtime.GbxDataAsset):
    TutorialPlaythroughUnlockedData: PlaythroughUnlockedData
    TutorialLevelUpData: TutorialLevelUpData



class UIGlobals(gbx_ui.GbxUIGlobals):
    MissionIcon_Default: InWorldIconData
    MissionIcon_Plot: InWorldIconData
    MissionIcon_Side: InWorldIconData
    MissionIcon_ProvingGrounds: InWorldIconData
    MissionIcon_CircleOfSlaughter: InWorldIconData
    MissionIcon_Raid: InWorldIconData
    MissionIcon_RareSpawn: InWorldIconData
    MissionAreaIcon: InWorldIconData
    PauseMenuData: gbx_ui.GbxMenuData
    GFxStatusMenuData: GFxStatusMenuData
    PCTextChatMenuData: gbx_ui.GbxMenuData
    PCMenuTextChatMenuData: gbx_ui.GbxMenuData
    PCTextChatMenuNotificationMenuData: gbx_ui.GbxMenuData
    GFxHUDInitializationMenuData: gbx_ui.GbxMenuData
    GFxModalTutorialMenuData: gbx_ui.GbxMenuData
    DefaultModalTutorialData: GFxModalTutorialDataAsset
    ItemInspectionMenuData: gbx_ui.GbxMenuData
    StatusMenuNavBarHintWidgetOffsets: unreal.WrappedArray[float]
    FastTravelTutorialAsset: TutorialMessageDataAsset
    FullscreenNewsItems: unreal.WrappedArray[GFxNewsMenuFullscreenData]
    FullscreenNewsBackgrounds: unreal.WrappedArray[GFxNewsMenuFullscreenData]
    ControllerDisconnectMovie: unreal.UClass
    QuickEmoteMenuData: gbx_ui.GbxMenuData
    ItemTradingMenuData: gbx_ui.GbxMenuData
    OverLevelAmount: int
    bOverrideToHideFriendlyBars: bool
    BackpackThresholds: unreal.WrappedArray[OakBackpackCapacityThreshold]
    WeaponCategory: gbx_inventory.InventoryCategoryData
    GrenadeCategory: gbx_inventory.InventoryCategoryData
    ShieldCategory: gbx_inventory.InventoryCategoryData
    ArtifactCategory: gbx_inventory.InventoryCategoryData
    ClassModCategory: gbx_inventory.InventoryCategoryData
    InstantHealthCategory: gbx_inventory.InventoryCategoryData
    AmmoCategory: gbx_inventory.InventoryCategoryData
    RenderPropertiesForOtherThumbnail: OakThumbnailManagerRenderProperties
    GFxDialogBoxTemplate: GbxGFxDialogBoxData
    IconConfig: OakThumbnailManagerConfig
    EridianAnalyser: str
    EridianResonator: str
    MayhemMode: str
    ArtifactSlot: str
    EridianFabricator: str
    MoneyCurrencyInfo: CurrencyInfo
    EridiumCurrencyInfo: CurrencyInfo
    GoldenKeyCurrencyInfo: CurrencyInfo
    VaultCoinCurrencyInfo: CurrencyInfo
    DiamondKeyCurrencyInfo: CurrencyInfo
    VaultCardOneKeyCurrencyInfo: CurrencyInfo
    VaultCardTwoKeyCurrencyInfo: CurrencyInfo
    VaultCardThreeKeyCurrencyInfo: CurrencyInfo
    bCanDisplayDiamondKeys: bool
    MaxPathRange: float
    MaxSubPathNodeRangeSquared: float
    FriendlyColor: core_uobject.LinearColor
    EnemyColor: core_uobject.LinearColor
    NeutralColor: core_uobject.LinearColor
    FriendlyNPCColor_Slight: core_uobject.LinearColor
    EnemyColor_Slight: core_uobject.LinearColor
    FriendlyPlayerColor_Slight: core_uobject.LinearColor
    StandardTextColor: core_uobject.LinearColor
    InvalidOptionColor: core_uobject.LinearColor
    GrenadeDangerRadiusScalar: float
    GrenadeDangerMinimumRadius: float
    PlayerGrenadeDangerDelay: float
    bPauseMenuPausesGame: bool
    bStatusMenuPausesGame: bool
    TravelMessageMovieClass: unreal.UClass
    OnlineMessageMovieClass: unreal.UClass
    SocialEventMessageMovieClass: unreal.UClass
    ErrorMessageAsset: HUDNotificationAsset
    DiscoveryNotificationAsset: HUDNotificationAsset
    AreaEnteredNotificationAsset: HUDNotificationAsset
    VaultRewardNotificationAsset: HUDNotificationAsset
    CrewChallengeNotification: HUDNotificationAsset
    AllPlayersRequiredTitlePresent: str
    AllPlayersRequiredTitleAbsent: str
    AllPlayersRequiredMessagePresent: str
    AllPlayersRequiredMessageAbsent: str
    AllPlayersRequiredDuration: float
    VehicleDefaultLoadouts: unreal.WrappedArray[OakCARMenuLoadout]
    SubtitleVisibilityShowVolumeDB: float
    SubtitleVisibilityHideVolumeDB: float
    SubtitleVisibilityUpdateFrequency: float
    SubtitleTimeBeforeHide: float
    SubtitleDisplayFormat: str
    DefaultIdleDialogEvent: gbx_dialog.DialogEvent
    DefaultIdleDialogTargetParamater: gbx_dialog.DialogParameter
    VoGSource: media_assets.MediaSource
    VoGSpeakerType: gbx_dialog.EVoiceOfGodSpeaker
    SkillMenuData: gbx_ui.GbxMenuData
    CitizenScienceBoosterData: BoosterData



class MessageStackManager(unreal.UObject):
    MessageStack: unreal.WrappedArray[UIManagerMessage]
    MessageMovie: GFxRolloutMessage
    PlayerOwner: OakPlayerController
    UiManagerOwner: UIManager
    def HandleCompleteAnimation(self, GFxWidget: GFxRolloutMessage): ...


class UIManager(unreal.UObject):
    UIGlobals: UIGlobals
    PlayerOwner: OakPlayerController
    OnlineMessageInputComponent: engine.InputComponent
    TravelMessageManager: MessageStackManager
    OnlineMessageManager: MessageStackManager
    SocialEventMessageManager: MessageStackManager
    def DisplaySocialMessage(self, PlayerDisplayName: str, Level: int, ClassDisplayName: str, Description: str, CommandText: str, ReturnValue: MessageHandle) -> MessageHandle: ...
    def AutoUpdateTravelMessage(self, DestinationTravelStation: gbx_travel_station.TravelStationData, RemainingTime: int, CurrentStatus: gbx_travel_station.ETravelStatus): ...


class UIStatData_Ability(gbx_game_system_core.UIStatData):
    DescriptionText: str
    BonusAbilityPoints: int
    ItemColorFrame: str
    SkillTreeDelta_PrimaryPlayer: str
    SkillTreeDelta_SecondaryPlayer: str
    CharacterID: str
    OwningBalanceComponent: OakClassModInventoryBalanceStateComponent



class UIStatData_MayhemModifier(gbx_game_system_core.UIStatData_Numeric):
    DataTableValue: gbx_game_system_core.DataTableValueHandle
    bSubtractOne: bool



class UIStatData_WeaponAttribute(gbx_game_system_core.UIStatData_Attribute):
    UseMode: EWeaponUseMode



class UIStatFormulaEvaluator_WeightedWeaponStatAccumulator(gbx_game_system_core.UIStatFormulaEvaluator):
    bInvertPercent: bool
    DefaultWeighting: WeaponTypeAttributeStatWeighting
    WeaponTypeWeightings: unreal.WrappedArray[WeaponTypeAttributeStatWeighting]



class UMGGameOverScreen(gbx_ui.GbxUmgMenu):
    OakPlayerOwner: OakPlayerController
    def SetCountdownTimerText(self, CountdownText: str): ...


class VaultCardGeneralData(gbx_runtime.GbxDataAsset):
    PerMayhemLevelXPScalars: unreal.WrappedArray[gbx_game_system_core.AttributeInitializationData]
    BaseLevelXPScalar: gbx_game_system_core.AttributeInitializationData



class VaultCardRewardBalanceData(gbx_inventory.InventoryBalanceData):
    ColumnIndex: int
    RowIndex: int
    AlternateKeyReward: gbx_game_system_core.AttributeInitializationData



class VaultHunterProfileCard(gbx_runtime.GbxDataAsset):
    GameCompletionChallengeListGroups: unreal.WrappedArray[gbx_game_system_core.ChallengeCategoryData]
    EnemyChallengeListGroups: unreal.WrappedArray[gbx_game_system_core.ChallengeCategoryData]
    WeaponChallengeListGroups: unreal.WrappedArray[gbx_game_system_core.ChallengeCategoryData]
    CrewChallengeListGroups: unreal.WrappedArray[gbx_game_system_core.ChallengeCategoryData]
    ExplorationChallengeListGroups: unreal.WrappedArray[gbx_game_system_core.ChallengeCategoryData]
    SlaugherChallengeListGroups: unreal.WrappedArray[gbx_game_system_core.ChallengeCategoryData]
    RaidChallengeListGroups: unreal.WrappedArray[gbx_game_system_core.ChallengeCategoryData]
    ProvingGroundChallengeListGroups: unreal.WrappedArray[gbx_game_system_core.ChallengeCategoryData]



class VehicleAttachActorComponentAspectData(OakVehicleAspectData):
    ComparisonTag: str



class VehicleAttachMeshAspectData(OakVehicleAspectData):
    Mesh: core_uobject.SoftObjectPath
    ComponentName: str
    ComponentTags: unreal.WrappedArray[str]
    AttachSocketName: str
    LocalOffset: core_uobject.Vector
    LocalRotationOffset: core_uobject.Rotator
    Scale: core_uobject.Vector
    bUseAttachParentBound: bool
    RevolverOffsetMode: ERevolverOffsetMode
    CollisionProfileName: str
    bWeldSimulatedBodies: bool
    bWeldedBodiesShouldModifyPhysicalProperties: bool
    bUseParentPoseComponent: bool
    AnimMode: int



class VehicleAttachSlotBlueprintAspectData(OakVehicleAspectData):
    SocketName: str
    LocalOffset: core_uobject.Vector
    LocalRotationOffset: core_uobject.Rotator
    bWeldSimulatedBodies: bool
    bWeldedBodiesShouldModifyPhysicalProperties: bool
    bForwardDamageToParent: bool
    bAttachToActor: bool



class VehicleAttachWeaponAspectData(OakVehicleAspectData):
    Weapon: unreal.UClass
    SpawnWeapon: bool
    WantedActiveWeaponSlot: WeaponSlotData
    PrefferedSlotId: int



class VehicleAudioAspectData(OakVehicleAspectData):
    ConfigurationEvents: unreal.WrappedArray[wwise_audio.WwiseEvent]
    ConfigurationRtpcs: unreal.WrappedArray[VehicleConfigurationRtpc]



class VehicleAudioProviderComponent(engine.ActorComponent):
    ForwardSpeedRTPCRefValue: float
    SkidAmountRTPCRefValue: float
    WheelAudioType: EWheelAudioType
    WheelAudioCompTag: str
    WheelAudioReverbBoost: float
    HoveringInPlaceEngineStrength: float
    LandingEvents: unreal.WrappedArray[VehicleLandingEventData]
    LandingAudioEvent: wwise_audio.WwiseEvent
    SteeringAudioEvent: wwise_audio.WwiseEvent
    SuspensionCompressionEvent: wwise_audio.WwiseEvent
    SuspensionExtensionEvent: wwise_audio.WwiseEvent
    SuspensionCompressionEventThreshold: float
    SuspensionExtensionEventThreshold: float
    OverspinDebrisEvent: wwise_audio.WwiseEvent
    DelayBeforeOverspinDebrisEvent: float
    OverspinStartEvent: wwise_audio.WwiseEvent
    OverspinEndEvent: wwise_audio.WwiseEvent
    WheelSpinMinMax: core_uobject.Vector2D
    WheelAudioLoop: VehicleAudioLoopData
    AdditionalWheelAudioLoops: unreal.WrappedArray[VehicleAudioLoopData]
    WheelBrakeEvent: wwise_audio.WwiseEvent
    bWheelBrakeEventIsPlayerOnly: bool
    WheelSwitchPacks: unreal.WrappedArray[WheelRandomSwitchPack]
    EngineLoops: unreal.WrappedArray[VehicleAudioLoopData]
    EngineAdditionalLoops: unreal.WrappedArray[VehicleAudioLoopData]
    EngineMiscLoops: unreal.WrappedArray[VehicleAudioLoopOnNamedCompData]
    OwningVehicle: OakVehicle
    CachedAudioGlobals: OakAudioGlobalsData
    EngineAudioComponent: wwise_audio.WwiseAudioComponent
    ConfigurationWwiseEvents: unreal.WrappedArray[VehicleConfigurationEvent]
    ConfigurationRtpcs: unreal.WrappedArray[VehicleConfigurationRtpc]
    def OnVehicleLanded(self, TimeSpentInAir: float, LandAngle: float, NumWheelsOnGround: int, bAllWheelsLanded: bool): ...
    def OnVehicleGearShift(self, Gear: int, bIsShiftingUp: bool): ...
    def OnVehicleBecameAirborne(self): ...
    def OnSeatAttachStateChanged(self): ...
    def OnOverspinStarted(self, PhysicalMat: engine.PhysicalMaterial): ...
    def OnOverspinEnded(self): ...
    def OnHoverEnabled(self): ...
    def OnHoverDisabled(self): ...
    def OnEngineStop(self): ...
    def OnEngineStart(self): ...


class VehicleClassIdentifier(engine.PrimaryAssetLabel):
    ShortName: str



class VehicleCollisionDamageAspectData(OakVehicleAspectData):
    LinkedToShield: bool
    bLinkedToBoost: bool
    DamageType: unreal.UClass



class VehicleComponent(engine.ActorComponent):
    OverrideByParts: unreal.WrappedArray[VehicleOverrideData]
    OwningVehicle: OakVehicle



class VehicleDrivingDataAsset(gbx_runtime.GbxDataAsset):
    DesiredSpeed: float
    SpeedToActivateBoost: float
    SpeedToActivateSpeedHack: float
    ReverseSpeed: float
    VehicleReverseTime: float
    VehicleReverseFaceThreshold: float
    TurnSpeedFactor: float
    TurnMaxValueDot2: float
    TurnMinValueDot2: float
    bUsePIDController: bool
    Kp: float
    Ki: float
    Kd: float
    MaxDeltaVelIntegral: float
    HandbrakeMinVelocity: float
    HandbrakeMinTurnDot2: float
    ThrottleHandbrakeMinTurnDot2: float
    HandbrakeStopMinTurnDot2: float
    bActivateThrottleHandbrake: bool
    CanDriveCondition: gbx_runtime.GbxCondition
    SpeedModifierValue: gbx_game_system_core.GbxParam
    SpeedHackForce: float
    SpeedHackGravityFactor: float
    SpeedHackTireGripFactor: float
    ValidBoostDirectionDot2: float
    bWallTest: bool
    TestWallsUpdateDelay: float
    TestWallsTraceLength: float
    TestWallsBehindDotFactor: float
    StuckDisableDelay: float



class VehicleEffectsComponent(VehicleComponent):
    MinJumpVelocity: float
    BigLandingMinVelocity: core_uobject.Vector
    LandingFXLocationOffset: core_uobject.Vector
    BigLandingFXLocationOffset: core_uobject.Vector
    WheelAddCurve: engine.RuntimeFloatCurve
    WheelAddStrength: float
    WheelOverspin: float
    SpeedLinesPS: engine.ParticleSystem
    SpeedLineCurve: engine.CurveFloat
    ImpactThrottleThreshold: float
    GrindingInPlaceMaxSpeed: float
    bIsGrindingInPlace: bool
    DefaultEffectsAspectDataCollections: unreal.WrappedArray[OakVehicleEffectAspectDataCollection]
    ScreenParticleMgrComp: gbx_game_system_core.ScreenParticleManagerComponent
    ImpactCooldownTime: float
    LastActorHitResetTime: float
    ImpactVelocityThresholdsInKPH: float
    ImpactEffects: unreal.WrappedArray[VehicleImpactEffectData]
    ExcludedGearsForBackfire: unreal.WrappedArray[int]
    MaxRPMBackfireFrequencyRange: core_uobject.FloatRange
    bTriggerBackfireInBoost: bool
    EndBoostBackfireDelay: float
    LastHitActor: engine.Actor
    VehicleEffects: unreal.WrappedArray[VehicleEffect]
    def StopEffects(self, Event: EVehicleEffectEvent): ...
    def SetEffectVectorParameter(self, ParamName: str, ParamValue: core_uobject.Vector, QueryData: VehicleEffectQueryData): ...
    def SetEffectMaterialParameter(self, ParamName: str, ParamValue: engine.MaterialInterface, QueryData: VehicleEffectQueryData): ...
    def SetEffectFloatParameter(self, ParamName: str, ParamValue: float, QueryData: VehicleEffectQueryData): ...
    def SetEffectColorParameter(self, ParamName: str, ParamValue: core_uobject.LinearColor, QueryData: VehicleEffectQueryData): ...
    def PlayEffects(self, Event: EVehicleEffectEvent): ...
    def OnStopHorn(self): ...
    def OnStatusEffectStarted(self, Receiver: engine.Actor, Spec: gbx_game_system_core.StatusEffectSpec, ElementalType: EOakElementalType): ...
    def OnStatusEffectEnded(self, Receiver: engine.Actor, Spec: gbx_game_system_core.StatusEffectSpec, ElementalType: EOakElementalType): ...
    def OnStartHorn(self): ...
    def OnPrimarySeatStatusChanged(self): ...
    def OnPreBeginFreeze(self, FreezeType: EFreezeType): ...
    def OnHoverStart(self): ...
    def OnHoverEnd(self): ...
    def OnHealthy(self): ...
    def OnHealthVeryLow(self): ...
    def OnHealthLow(self): ...
    def OnGearShift(self, Gear: int, bIsShiftingUp: bool): ...
    def OnDigitrustStart(self): ...
    def OnDigitrustEnd(self): ...
    def OnDead(self): ...
    def OnCryoThawing(self): ...
    def OnCryoThawed(self): ...
    def OnCryoFrozen(self): ...
    def OnCryoFreezing(self): ...
    def OnBoostEnd(self): ...
    def OnActorHit(self, SelfActor: engine.Actor, OtherActor: engine.Actor, NormalImpulse: core_uobject.Vector, Hit: engine.HitResult): ...
    def AnimateScalarParameterValue(self, MaterialInstanceDynamic: engine.MaterialInstanceDynamic, ParameterName: str, ValueRange: core_uobject.Vector2D, Time: float): ...


class BaseVehicleEffectData(gbx_runtime.GbxDataAsset):
    Event: str
    EffectEvent: EVehicleEffectEvent
    bPlayerOnly: bool
    bExcludedInSplitScreen: bool
    StartCondition: gbx_runtime.GbxCondition
    StopCondition: gbx_runtime.GbxCondition



class BaseVehicleEffectDataWithLocation(BaseVehicleEffectData):
    Socket: str
    ComponentTag: str
    RelativeLocation: core_uobject.Vector
    RelativeRotation: core_uobject.Rotator
    RelativeScale: float



class VehicleAudioEffect(BaseVehicleEffectDataWithLocation):
    bPlayAudioAtLocation: bool
    StartAudioEvent: wwise_audio.WwiseEvent
    StopAudioEvent: wwise_audio.WwiseEvent
    ConditionalAudioSwitches: unreal.WrappedArray[ConditionalAudioSwitch]
    AudioComponentName: str
    AudioEmitterRadius: float



class VehicleParticleEffect(BaseVehicleEffectDataWithLocation):
    ParticleEffect: engine.ParticleSystem
    bAutoActivate: bool
    bAttachToParent: bool
    bAlwaysSpawnNewInstance: bool
    bSpawnOnStop: bool
    ParticleComponentTag: str
    bDisableBeforeFreeze: bool



class VehicleImpactEffect(BaseVehicleEffectDataWithLocation):
    ImpactData: gbx_game_system_core.ImpactData
    ImpactTraceDirection: gbx_game_system_core.RelativeDirectionData
    ImpactTraceLength: float
    TraceChannel: int



class VehicleExplosionEffect(BaseVehicleEffectDataWithLocation):
    ExplosionData: gbx_game_system_core.ExplosionData
    ExplosionSize: float
    ExplosionDamageType: unreal.UClass



class VehicleFeedbackEffect(BaseVehicleEffectDataWithLocation):
    FeedbackData: gbx_game_system_core.FeedbackData
    FeedbackScale: float
    bLoop: bool
    bLocalOnly: bool
    bStopFeedback: bool



class VehicleEmitterEnableEffect(BaseVehicleEffectData):
    QueryData: VehicleEffectQueryData
    EmittersEnableData: unreal.WrappedArray[EmitterEnableData]



class VehicleSetAnimPlayRateEffect(BaseVehicleEffectData):
    SkelMeshTag: str
    StartPlayRate: float
    StopPlayRate: float



class VehiclePlaySingleAnimEffect(BaseVehicleEffectData):
    SkelMeshTag: str
    PlayMode: EVehiclePlaySingleAnimMode
    AnimationAsset: engine.AnimationAsset
    bLoop: bool
    bPlaying: bool
    bUseCurrentAnimPosition: bool
    Position: float
    PlayRate: float



class VehicleElementalEffectImmunityAspectData(OakVehicleAspectData):
    ResourceEffectType: EOakStatusEffectResourceEffectType
    LinkedToShield: bool



class VehicleSeatPawn(SeatPawn):
    VehicleSeatComponent: VehicleSeatComponent
    TurretMovementComponent: gbx_vehicle.TurretMovementComponent
    bControlledByVehicleWhenUnoccupied: bool
    HUDInfo: gbx_ui.GbxHUDData
    Vehicle: OakVehicle
    bControlledByVehicle: bool
    bIgnoreCollisionWithVehicle: bool
    def GetVehicle(self, ReturnValue: OakVehicle) -> OakVehicle: ...


class VehicleGunnerSeatPawn(VehicleSeatPawn):
    GetInSmartObject: gbx_ai.SmartObjectComponent
    SmartObjectComponentName: str
    GetInVehicleBlackboardKeyName: str
    GetInVehicleSlotIndexBlackboardKeyName: str
    GetInVehicleBlackboardKey: gbx_game_system_core.GbxBlackboardKeySelector
    GetInVehicleSlotIndexBlackboardKey: gbx_game_system_core.GbxBlackboardKeySelector
    def OnActionUsageEnded(self, UserController: engine.Controller, ActionTag: gameplay_tags.GameplayTag, Result: gbx_ai.ESmartActionResult): ...
    def OnActionReserved(self, UserController: engine.Controller, ActionTag: gameplay_tags.GameplayTag): ...


class VehicleModifyPhysicPropertiesAspectData(OakVehicleAspectData):
    AdditionalMass: float
    InertiaTensorScale: core_uobject.Vector



class VehicleSeatComponent(OakPawnAttachSlotComponent):
    SeatSlot: int
    AdjacentSeatSlot: int
    bSkipExitTransitionWhenFlipped: bool
    Vehicle: OakVehicle
    TransitionSeatSlot: int
    bUseVehicleAimSettings: bool
    bAffectVehicleTeam: bool
    bCrouchWhenSeated: bool
    bNotUsableByEnemies: bool
    FollowVehicleRotation: EFollowVehicleRotation
    bForcePawnIgnoreControllerRotationOnTransition: bool
    bForcePawnUseAllControllerRotationWhileAttached: bool
    bAllowRootMotionWhileAttached: bool
    bHideFirstPersonLegsWhileAttached: bool
    bDisableHandToWeaponAlpha: bool
    bIsUsingBaseAnimation: bool
    HideFirstPersonLegsReason: str
    bCanBeSwitchedTo: bool
    bPlaySafePlaceTransitionWhenNoDetachTransitionFound: bool
    DetachToSafePlaceTransition: gbx_game_system_core.PawnDetachTransition
    bOptimizeInteractBoxes: bool
    UseCharacterWeapon: UseCharacterWeaponSettings
    bUseCharacterWeapon: bool
    AdditiveMovementScale: float
    AdditiveSpeedScale: float
    def ReserveSeat(self, Actor: engine.Actor): ...
    def RequestSwitchSeats(self): ...
    def IsReservedBy(self, Actor: engine.Actor, ReturnValue: bool) -> bool: ...
    def IsReserved(self, ReturnValue: bool) -> bool: ...
    def CanUseCharacterWeapon(self, ReturnValue: bool) -> bool: ...


class VehicleSetBoostDataAspectData(OakVehicleAspectData): ...


class VehicleScanData(unreal.UObject):
    VehicleScan: OakVehicle
    NewPartUnlocks: int



class VehicleSpawnerComponent(engine.ActorComponent):
    WheelsUnlocked: unreal.WrappedArray[InventoryDataUnlockedInfo]
    VehiclesUnlocked: unreal.WrappedArray[VehicleClassIdentifier]
    PartsUnlocked: unreal.WrappedArray[InventoryPartDataUnlockedInfo]
    VehicleLoadouts: unreal.WrappedArray[OakCARMenuVehicleConfig]
    LastUsedVehicleLoadoutIndex: int
    RespawnVehicleTimer: engine.TimerHandle
    SpawnInventoryData: gbx_inventory.InventoryData
    SpawnInventoryBalanceData: gbx_inventory.InventoryBalanceData
    LastVehicleSpawn: OakVehicle
    def UnlockVehicleAndPartForAllPlayer(self, Vehicle: OakVehicle): ...
    def SpawnMissionVehicle(self, Console: CatchARide): ...
    def SetMissionVehicle(self, World: engine.World, MissionSpawner: OakSpawner): ...
    def ServerUpdateLoadoutAtIndex(self, Index: int, NewLoadout: OakCARMenuVehicleConfig): ...
    def ServerUpdateLastUsedVehicleLoadoutIndex(self, NewIndex: int): ...
    def RequestVehicleSpawnCallback(self): ...
    def RequestVehicleSpawn(self, PreviousVehicle: engine.Actor): ...
    def IsMissionVehicleCanBeSpawn(self, CatchRideStation: CatchARide, ReturnValue: bool) -> bool: ...
    def GetVehicleUnlocked(self, Vehicles: unreal.WrappedArray[OakCARVehicleData]): ...
    def GetVehicleType(self, Vehicle: OakVehicle, ReturnValue: OakCARVehicleData) -> OakCARVehicleData: ...
    def GetVehiclePartUnlocked(self, Vehicle: OakCARVehicleData, PartType: ECARPartType, Parts: unreal.WrappedArray[OakCARVehiclePartData]): ...
    def GetVehiclePartByType(self, Vehicle: OakVehicle, Type: ECARPartType, ReturnValue: OakCARVehiclePartData) -> OakCARVehiclePartData: ...
    def GetVehicleLoadoutAtIndex(self, VehicleLoadoutindex: int, OutLoadout: OakCARMenuVehicleConfig, ReturnValue: bool) -> bool: ...
    def GetTotalNumVehicles(self, ReturnValue: int) -> int: ...
    def GetTotalNumParts(self, Vehicle: OakCARVehicleData, PartType: ECARPartType, ReturnValue: int) -> int: ...
    def GetNewlyUnlockedVehicles(self, Vehicles: unreal.WrappedArray[OakCARVehicleData]): ...
    def GetLastVehicleSpawn(self, ReturnValue: OakVehicle) -> OakVehicle: ...


class VehicleSpline(engine.Actor):
    SplineComponent: engine.SplineComponent
    DropOffSpawner: gbx_ai.GbxSpawner
    PostDropOffExitSpline: VehicleSpline
    ExitSequenceLeadInDistance: float
    DescentLeadInDistance: float



class VehicleStatusEffectModifiersAspectData(OakVehicleAspectData):
    StatusEffectModifiers: unreal.WrappedArray[gbx_game_system_core.StatusEffectModifiers]
    LinkedToShield: bool
    bHasHijackProtection: bool



class VehicleTrailComponent(VehicleComponent):
    TrailTickGroup: int
    DefaultParticleSystem: VehicleTrailParticleSystemData
    TrailData: unreal.WrappedArray[VehicleTrailData]
    TrailTranslucentSortPriority: int
    MinSpeedForTrail: float
    TrailUpOffset: float
    FrameIndex: float
    SkidMarkSize: core_uobject.Vector
    MinRPMForFastSpin: float
    MaxSpeedForFastSpin: float
    MinSpeedToActivateBigCore: float
    MinRPMToActivateBigCore: float
    ParticleDriftVelocity: float
    DefaultWadeParticleSystem: VehicleTrailParticleSystemData
    ExtraWadingEffects: unreal.WrappedArray[ExtraWadingData]
    WheelMoveComp: gbx_vehicle.WheeledVehicleMovementComponentNW



class GbxCondition_CanUseRefillAmmo(gbx_runtime.GbxCondition): ...


class VendingMachineRefillAllAmmoValueResolver(gbx_game_system_core.AttributeValueResolver): ...


class VendingMachine(AdvancedInteractiveObject):
    VendingMachineType: EVendingMachineType
    bEnableItemOfTheDay: bool
    EchoDeviceIdleScreenName_BuyBack: str
    EchoDeviceIdleScreenName_Sell: str
    EchoDeviceScreen_BoughtGearSoldByFriend: str
    EchoDeviceScreen_BoughtItemOfTheDay: str
    bSellsGearSoldByFriends: bool
    BalanceComponent: gbx_game_system_core.BalanceStateComponent
    InventoryShopComponent: InventoryShopComponent
    ItemOfTheDayAreaComponent: gbx_game_system_core.GbxAreaComponent
    PostUseRespawnDelaySeconds: float
    BoxComponent: engine.BoxComponent
    def RegisterWithPersistenceManagerPostSpawn(self, SpawnerComponent: gbx_spawn.SpawnerComponent, Actor: engine.Actor): ...
    def OnPlayerExitedItemOfTheDayArea(self, Player: gbx_game_system_core.GbxPlayerController): ...
    def OnPlayerEnteredItemOfTheDayArea(self, Player: gbx_game_system_core.GbxPlayerController): ...
    def K2_OnSoldSomething(self, InventoryActor: engine.Actor): ...
    def K2_OnSoldAllJunk(self): ...
    def K2_OnShelfStablySelected(self, Type: EVendingMachineTrayTileType, InventoryActor: engine.Actor): ...
    def K2_OnRefilledAllHealth(self): ...
    def K2_OnRefilledAllAmmo(self): ...
    def K2_OnBoughtSomething(self, Type: EVendingMachineBuyType, InventoryActor: engine.Actor): ...


class VendingMachineMenu(gbx_ui.GbxUmgMenu):
    VendingMachineList: gbx_ui.GbxScrollBoxList
    TitleText: umg.TextBlock
    HeaderText: umg.TextBlock
    ItemFilterText: umg.TextBlock
    BackgroundImage: umg.Image
    FeaturedItemWidget: gbx_ui.GbxListItem
    VendingMachineMenuCharacter: OakCharacter
    ItemList: unreal.WrappedArray[OakUIInventoryItemDisplayInfo]
    PlayerShopManager: PlayerShopManagerComponent
    def OnVendingItemClicked(self, VendingItem: gbx_ui.GbxListItem): ...
    def OnFeaturedItemClicked(self, FeaturedItem: gbx_ui.GbxUserWidget, InputInfo: gbx_ui.GbxMenuInputEvent): ...
    def AddItemInWidget(self, Item: OakUIInventoryItemDisplayInfo): ...


class VendingMachineMenuData(gbx_ui.GbxUmgMenuData):
    Filters: unreal.WrappedArray[VendingMachineMenuFilter]
    BackgroundImage: slate_core.SlateBrush
    BackpackConfig: GFxBackpackWidgetConfig



class VendingMachineProxy(AdvancedInteractiveObjectProxy):
    VendingMachineMenu: GFxVendingMachineMenu
    ItemAttachmentMode: gbx_inventory.EPickupLootAttachmentMode
    NumTrayTiles: int
    PrimaryTrayIndex: int
    VisibleTrayTilesBufferSize: int
    EndOfListPaddingSize: int
    MinNumTilesToAllowWrapping: int
    MinNumTiles: int
    bHideDummyTiles: bool
    ScrollSkipMaxDuration: float
    bScrollSkipOverSoldOutTiles: bool
    bPickupFlyToEnabled: bool
    DelayBeforeShelfIsStablySelected: float
    SkeletalMeshComponent: engine.SkeletalMeshComponent
    CurrentInteractionMode: EVendingMachineInteractionMode
    CurrentTilesMode: EVendingMachineTilesMode
    Animations: engine.AnimSequence
    AnimIndexOffsets: int
    DelayBeforeHidingPurchasedItem: float
    DelayBeforeDigistructingBackInPurchasedItem: float
    DelayBeforePurchaseItemClunkSound: float
    ShelfMeshOffset: core_uobject.Transform
    DefaultShelfMesh: engine.StaticMesh
    FeaturedInventoryShelfMesh: engine.StaticMesh
    ShelfBoxExtent: core_uobject.Vector
    DefaultShelfMaterial: engine.MaterialInterface
    DefaultFeaturedInventoryShelfMaterial: engine.MaterialInterface
    SelectedShelfMaterialParameterName: str
    InStockShelfMaterialMaterialName: str
    ShelfRarityInfo: unreal.WrappedArray[VendingMachineItemRarityData]
    ItemScoreEmitterTemplate: engine.ParticleSystem
    ItemScoreParticleSortPriority: int
    ItemScoreParameterName: str
    ItemScoreParameterRange: core_uobject.Int32Interval
    ItemScoreParticleScale: float
    ItemScoreParticleTranslationOffset: core_uobject.Vector
    ItemScorePositionParameterName: str
    SoldOutParticleTemplate: engine.ParticleSystem
    SoldOutParticleSortPriority: int
    SoldOutParticleRotation: core_uobject.Rotator
    DefaultSelectedItemEmitterTemplate: engine.ParticleSystem
    CompareItemEmitterTemplate: engine.ParticleSystem
    SelectedItemParticleSortPriority: int
    SelectedItemParticleRarityParameterName: str
    SelectedItemParticleRotation: core_uobject.Rotator
    SelectedItemParticleTranslation: core_uobject.Vector
    ErrorShelfEmitterTemplate: engine.ParticleSystem
    ErrorParticleSortPriority: int
    ErrorShelfParticleRotation: core_uobject.Rotator
    ErrorShelfParticleTranslation: core_uobject.Vector
    ItemDigistructInCE: unreal.UClass
    ItemDigistructOutCE: unreal.UClass
    StartInteractSequence: VendingMachineInteractSequence
    StopInteractionSequence: VendingMachineInteractSequence
    PrimaryPhysMat: engine.PhysicalMaterial
    ErrorSoundEvent: wwise_audio.WwiseEvent
    DigistructInItemEvent: wwise_audio.WwiseEvent
    EnteredItemOfTheDayRangeEvent: wwise_audio.WwiseEvent
    ExitedItemOfTheDayRangeEvent: wwise_audio.WwiseEvent
    MaxSellJunkDuration: float
    MaxJunkCount: int
    PlayerShopManager: PlayerShopManagerComponent
    FrontPlateComponent: engine.StaticMeshComponent
    OwningVendingMachine: VendingMachine
    OwningShopComponent: InventoryShopComponent
    PurchasableTiles: unreal.WrappedArray[VendingMachineTrayTile]
    BuyBackTiles: unreal.WrappedArray[VendingMachineTrayTile]
    SellTiles: unreal.WrappedArray[VendingMachineTrayTile]
    PhysicalShelves: unreal.WrappedArray[VendingMachinePhysicalShelf]
    SelectedItemParticleComponent: engine.ParticleSystemComponent
    HoveredItemParticleComponent: engine.ParticleSystemComponent
    ErrorSelectionParticleComponent: engine.ParticleSystemComponent
    CompareItemParticleComponent: engine.ParticleSystemComponent
    AudioComponent: wwise_audio.WwiseAudioComponent
    SelectedTileIndex: int
    SelectedCompareItemTileIndex: int
    LastSelectionData: VendingMachineLastSelectionData
    CurrentAnimType: EVendingMachineAnimType
    def StopAnimation(self): ...
    def SetAnimationPaused(self, bNewPaused: bool): ...
    def ScrollUp(self, ScrollDuration: float, bIsInitialPress: bool, bCanThrottle: bool): ...
    def ScrollDown(self, ScrollDuration: float, bIsInitialPress: bool, bCanThrottle: bool): ...
    def OnStopInteractionSequenceFinished(self): ...
    def OnStartInteractionSequenceFinished(self): ...
    def K2_OnSoldSomething(self, InventoryActor: engine.Actor): ...
    def K2_OnSoldAllJunk(self): ...
    def K2_OnShelfStablySelected(self, Type: EVendingMachineTrayTileType, InventoryActor: engine.Actor): ...
    def K2_OnRefilledAllHealth(self): ...
    def K2_OnRefilledAllAmmo(self): ...
    def K2_OnItemDroppedToBottomOfVendingMachine(self): ...
    def K2_OnBoughtSomething(self, Type: EVendingMachineBuyType, InventoryActor: engine.Actor): ...
    def GetCurrentSocketTransform(self, InventoryActor: engine.Actor, Mode: EVendingMachineTilesMode, SocketLocation: int, ReturnValue: core_uobject.Transform) -> core_uobject.Transform: ...


class ViewAttachmentComponent(engine.SceneComponent):
    bUpdateLocation: bool
    bUpdateRotation: bool
    ViewPitchScale: float



class WadingEffectsComponent(engine.ActorComponent):
    WakePSC: engine.ParticleSystemComponent
    CurrentOverlappingLLB: LargeLiquidBody
    CurrentOverlappingLLBSectionIndex: int
    CurrentLiquidElement: ElementalInteractionData
    CurrentLiquidPhysMat: engine.PhysicalMaterial
    CurrentLiquidZ: float
    bIsAttachedToPlayer: bool
    def NotifyEndRiverOverlap(self, RiverMesh: engine.PrimitiveComponent, OtherComponent: engine.PrimitiveComponent): ...
    def NotifyBeginRiverOverlap(self, RiverMesh: engine.PrimitiveComponent, OtherComponent: engine.PrimitiveComponent): ...


class WantedPoster(InteractiveObject):
    NativeDefinition: WantedPosterDefinition
    CharacterMeshComponentName: str
    PosterMeshComponentName: str
    NearbyPlayerOverlapComponentName: str
    PosterMeshComponent: gbx_game_system_core.GbxSkeletalMeshComponent
    CharacterMeshComponent: gbx_game_system_core.GbxSkeletalMeshComponent
    NearbyPlayerOverlapComponent: engine.PrimitiveComponent
    MissionDirectorComponent: gbx_mission.MissionDirectorComponent
    MissionObserverComponent: gbx_mission.MissionObserverComponent
    bHologramActive: bool
    RegisteredNearbyPlayers: unreal.WrappedArray[engine.Actor]
    def OnRep_bHologramActive(self): ...
    def OnNearbyPlayerEndOverlap(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int): ...
    def OnNearbyPlayerBeginOverlap(self, OverlappedComponent: engine.PrimitiveComponent, OtherActor: engine.Actor, OtherComp: engine.PrimitiveComponent, OtherBodyIndex: int, bFromSweep: bool, SweepResult: engine.HitResult): ...
    def OnHologramActiveChanged(self): ...
    def HandlePlayerActorDestroyed(self, Actor: engine.Actor): ...
    def GetWantedPosterMission(self, ReturnValue: unreal.UClass) -> unreal.UClass: ...


class WantedPosterDefinition(gbx_runtime.GbxDataAsset):
    SkeletalMesh: engine.SkeletalMesh
    SkeletalMeshTransform: core_uobject.Transform
    SkeletalMeshAnimation: engine.AnimSequence
    GestaltPartList: gbx_game_system_core.GestaltPartListData
    HologramMaterialOverrides: unreal.WrappedArray[engine.MaterialInterface]
    MissionEntryPoint: gbx_mission.MissionObjectiveSetReference



class WeaponAmmoCurrencyComponent(gbx_weapon.WeaponAmmoComponent):
    CurrencyType: gbx_inventory.InventoryCategoryData
    MaxLoadedAmmo: engine.GbxAttributeInteger
    MaxStoredAmmo: int
    LoadedAmmo: int
    StoredAmmo: int
    SpareAmmo: int
    bInfiniteAmmoForAI: bool
    ServerSyncedLoadedAmmo: int
    OwnerInventoryComponent: gbx_inventory.InventoryListComponent
    def ServerSendAmmoState(self): ...
    def OnRep_SpareAmmo(self): ...
    def OnRep_ServerSyncedLoadedAmmo(self): ...
    def OnMaxLoadedAmmoChanged(self, OldValue: float, NewValue: float): ...
    def OnGivenTo(self): ...
    def ClientSetLoadedAmmo(self, NewLoadedAmmo: int): ...
    def ClientConsumeAmmo(self, Amount: int): ...


class WeaponEffectBaseAspectData(gbx_inventory.InventoryAspectData):
    ComparisonTags: gameplay_tags.GameplayTagContainer



class WeaponAttachmentEffectAspectData(WeaponEffectBaseAspectData):
    EffectData: gbx_weapon.WeaponRegisterAttachmentEffectData
    bCloneInHighDetailView: bool



class WeaponAttributeEffectsAspectData(gbx_inventory.InventoryAttributeEffectsAspectData):
    WeaponUseModeAttributeEffects: unreal.WrappedArray[WeaponUseModeAttributeEffectData]



class WeaponAudioAspectData(gbx_inventory.InventoryAspectData):
    UseModeBitmask: int
    ConfigurationEvents: unreal.WrappedArray[wwise_audio.WwiseEvent]
    ConfigurationRtpcs: unreal.WrappedArray[WeaponConfigurationRtpc]
    ConfigureWwiseEvent: wwise_audio.WwiseEvent



class WeaponAudioStreamingAspectData(gbx_inventory.InventoryAspectData):
    EventsToPrepareForStreaming: unreal.WrappedArray[wwise_audio.WwiseEvent]



class WeaponBonusCollectionData(gbx_runtime.GbxDataAsset):
    Bonuses: unreal.WrappedArray[WeaponBonusData]



class WeaponBonusDataTableData(gbx_runtime.GbxDataAsset):
    DataTable: engine.DataTable
    AttributeMapping: unreal.WrappedArray[WeaponBonusDataTableAttributeMappingData]
    ColumnCollections: unreal.WrappedArray[WeaponBonusDataTableColumnCollectionData]
    def EnumerateDataTableColumnNames(self, OutColumnNames: unreal.WrappedArray[str]): ...


class WeaponBonusDataTableAttributeValueResolver(gbx_game_system_core.DataTableAttributeValueResolver): ...


class WeaponBonusAspectData(gbx_inventory.InventoryAspectData):
    bInitializationBonus: bool
    BonusCollection: WeaponBonusCollectionData
    BonusesToApply: unreal.WrappedArray[str]
    DataTableBonuses: unreal.WrappedArray[WeaponBonusDataTableSelectionData]
    BonusIndices: unreal.WrappedArray[int]
    def EnumerateDataTableRowNames(self, WeaponBonusDataTable: WeaponBonusDataTableData, OutRowNames: unreal.WrappedArray[str]): ...
    def EnumerateDataTableColumnNames(self, WeaponBonusDataTable: WeaponBonusDataTableData, OutColumnNames: unreal.WrappedArray[str]): ...
    def EnumerateDataTableColumnCollections(self, WeaponBonusDataTable: WeaponBonusDataTableData, OutColumnCollections: unreal.WrappedArray[str]): ...
    def EnumerateBonuses(self, OutBonuses: unreal.WrappedArray[str]): ...


class WeaponCOVHeatComponent(gbx_weapon.WeaponHeatComponent):
    MinShotsToBreak: int
    MaxShotsToBreak: int
    ConsecutiveBreakInfluence: float
    BrokenEffects: unreal.WrappedArray[COVBrokenEffectData]
    Jankiness: float
    bBroken: bool
    NumShotsToBreak: int
    SelectedBrokenEffectsIndex: int
    NumOverheatedShots: int
    RepairHeatCooldownRate: float
    BrokenMeshComponents: unreal.WrappedArray[engine.StaticMeshComponent]
    def RepairedNotify(self): ...
    def OnRepaired(self): ...
    def OnRep_Broken(self, bWasBroken: bool): ...
    def OnBroken(self): ...


class WeaponCOVRepairComponent(gbx_weapon.WeaponReloadComponent):
    CurrentRepairType: int
    RepairTypes: unreal.WrappedArray[COVRepairType]
    def OnRep_ClientRepairState(self): ...


class WeaponDamageTypeAspectData(gbx_inventory.InventoryAspectData):
    UseModeBitmask: int
    DamageType: unreal.UClass
    ImpactData: gbx_game_system_core.ImpactData
    bUseForBeamsOnly: bool



class WeaponElementColorizationEvaluator(engine.ParticleParameterEvaluator):
    ParameterName: str



class WeaponFireLootComponent(gbx_weapon.WeaponFireProjectileComponent):
    bSpawnLootAtInstigatorLevel: bool
    BaseProjectileSpeed: float
    ItemPool: gbx_inventory.ItemPoolData



class WeaponFoleyAspectData(gbx_inventory.InventoryAspectData):
    FoleyAccessory: gbx_audio.FoleyAccessoryComponent
    AttachmentSocket: str



class WeaponJAKFireProjectileComponent(gbx_weapon.WeaponFireProjectileComponent):
    bStackCrits: bool
    bNonSuccessiveCritBreaksStack: bool
    StackStatusEffectData: gbx_game_system_core.StatusEffectData
    StackStatusEffectDuration: float
    RefundAmmoCount: int
    RicochetCount: int
    RicochetDamageScale: float
    def ResetStack(self): ...


class WeaponMaterialEffectAspectData(WeaponEffectBaseAspectData):
    EffectData: gbx_weapon.WeaponRegisterMaterialEffectData



class WeaponMaterialWearAspectData(gbx_inventory.InventoryAspectData):
    DirtRanges: unreal.WrappedArray[WeightedFloatRange]
    RustRanges: unreal.WrappedArray[WeightedFloatRange]
    WearRanges: unreal.WrappedArray[WeightedFloatRange]



class WeaponPartData(gbx_inventory.InventoryPartData):
    bIgnoredForWeaponNaming: bool
    WeaponUseModeAttributeEffects: unreal.WrappedArray[WeaponUseModeAttributeEffectData]



class WeaponPlayerMeleeOverrideAspectData(gbx_inventory.InventoryAspectData):
    OverridePlayerMeleeData: PlayerMeleeData



class WeaponSightComponent(gbx_weapon.WeaponZoomComponent):
    CustomColorSchemeIndex: int
    bUpdateZoomTransitionParam: bool
    bUpdateColorScheme: bool
    bUseGlobalZoomTransitionState: bool
    ZoomViewFlags: int
    MinTargetTime: float
    SpawnProjectileCloserToSightPercentZ: float
    SpawnProjectileCloserToSightPercentX: float
    MaxAccuracyModifierPct: float
    MaxAccuracyModifierTime: float



class WeaponRedDotComponent(WeaponSightComponent):
    Material: engine.MaterialInstance
    MaterialParamName: str
    EffectData: gbx_weapon.WeaponRegisterAttachmentEffectData
    MaterialInstance: engine.MaterialInstanceDynamic



class WeaponScopeComponent(WeaponSightComponent):
    bHideWeapon: bool
    ScopeMesh: engine.StaticMesh
    ScopeMeshOffset: core_uobject.Vector
    ScopeMeshScale: float
    ScopeMeshDepthScale: float
    ScopeScreenParticle: engine.ParticleSystem
    CloseScopeScreenParticle: engine.ParticleSystem
    ScopeScreenTransitionTime: float
    bHasAmmoCounter: bool
    bHasWeaponShieldIndicator: bool
    bHasTargetLockIndicator: bool
    bHasHeatIndicator: bool
    bHasChargeIndicator: bool
    bInheritAdditionalMaterialParameters: bool
    ZoomTransitionEffectQueryData: gbx_weapon.WeaponEffectQueryData
    ScopeMeshComponent: engine.StaticMeshComponent
    WeaponShieldComponent: WeaponShieldComponent
    WeaponHeatComponent: gbx_weapon.WeaponHeatComponent
    WeaponChargeComponent: gbx_weapon.WeaponChargeComponent
    def OnTargetLockChange(self, EventWeapon: gbx_weapon.Weapon, bLockedOn: bool): ...
    def OnHeatChanged(self): ...
    def OnAmmoChanged(self): ...


class WeaponShieldComponent(engine.ActorComponent):
    ShieldData: gbx_game_system_core.GameResourcePoolData
    BlockAngle: float
    AttributeEffects: unreal.WrappedArray[gbx_game_system_core.AttributeEffectData]
    MaxShield: engine.GbxAttributeFloat
    MaxShieldFormula: gbx_game_system_core.AttributeInitializationData
    HitRegionData: gbx_game_system_core.HitRegionData
    EffectsData: unreal.WrappedArray[gbx_weapon.WeaponRegisterAttachmentEffectData]
    HitConfirmDuration: float
    HitConfirmCurve: engine.CurveFloat
    ScreenHitEffect: engine.ParticleSystem
    ShieldStartEffectId: int
    ShieldStopEffectId: int
    ShieldBreakEffectId: int
    ShieldPool: gbx_game_system_core.GameResourcePoolReference
    ActivationTrigger: EWeaponShieldActivationTrigger
    ActivationZoomState: gbx_weapon.EWeaponZoomState
    DeactivationZoomState: gbx_weapon.EWeaponZoomState
    ShieldStartAudio: wwise_audio.WwiseEvent
    ShieldStopAudio: wwise_audio.WwiseEvent
    ShieldBreakAudio: wwise_audio.WwiseEvent
    ShieldHitAudio: wwise_audio.WwiseEvent
    ShieldNovaAudio: wwise_audio.WwiseEvent
    ShieldStartFeedback: gbx_game_system_core.FeedbackData
    ShieldStopFeedback: gbx_game_system_core.FeedbackData
    ShieldBreakFeedback: gbx_game_system_core.FeedbackData
    ShieldHitFeedback: gbx_game_system_core.FeedbackData
    AttributeModifiers: unreal.WrappedArray[gbx_game_system_core.GbxAttributeModifierHandle]
    bNotifyWeaponUsed: bool
    bShieldCreated: bool
    bIsShieldActive: bool
    bPlayShieldHitAction: bool
    ShieldState: EWeaponShieldState
    ImpactOffsetSocket: str
    HitConfirmParamName: str
    ShieldHitActionDuration: float
    OwnerStatusEffectComponent: OakStatusEffectManagerComponent
    AudioComponent: wwise_audio.WwiseAudioComponent
    ActiveScopeComponent: WeaponScopeComponent
    WeaponPrivate: gbx_weapon.Weapon
    def StopShieldEffect(self): ...
    def StartShieldEffect(self): ...
    def ResourceNowRegenerating(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def ResourceNowFull(self, ResourcePool: gbx_game_system_core.GameResourcePoolReference): ...
    def PlayHitConfirm(self): ...
    def PlayFeedbackSoundEvent(self, Event: wwise_audio.WwiseEvent, bReplicated: bool): ...
    def OnZoomingOut(self, Level: int): ...
    def OnWeaponUsed(self): ...
    def OnShieldCreated(self): ...
    def OnRep_ShieldState(self, PreviousState: EWeaponShieldState): ...
    def OnRep_IsShieldActive(self, bWasShieldActive: bool): ...
    def OnDetached(self): ...
    def OnDeactivationTrigger(self): ...
    def OnAttached(self): ...
    def OnActivationTrigger(self): ...
    def GetWeapon(self, ReturnValue: gbx_weapon.Weapon) -> gbx_weapon.Weapon: ...
    def GetStatusEffectStackCount(self, StatusEffect: gbx_game_system_core.StatusEffectData, ReturnValue: int) -> int: ...
    def GetPlayerController(self, ReturnValue: OakPlayerController) -> OakPlayerController: ...
    def GetInstigator(self, ReturnValue: engine.Pawn) -> engine.Pawn: ...
    def DeactivateShield(self): ...
    def ClientPlayFeedbackSoundEvent(self, Event: wwise_audio.WwiseEvent): ...
    def ActivateShield(self): ...


class WeaponSkeletalControlAspectData(WeaponEffectBaseAspectData):
    ControlData: gbx_weapon.WeaponRegisterSkeletalControlData



class WeaponSkinPartData(OakInventoryCustomizationPartData):
    Manufacturers: unreal.WrappedArray[WeaponSkinManufacturerData]



class WeaponSlotAttributeContextResolver(gbx_game_system_core.AttributeContextResolver):
    WeaponSlot: WeaponSlotData



class WeaponSlotData(gbx_game_system_core.GbxWeaponSlotData):
    LinkedWeaponSlot: WeaponSlotData
    AccuracyData: gbx_game_system_core.GameResourceData
    CrosshairRotation: float



class WeaponSwayGoodnessValueResolver(gbx_game_system_core.AttributeValueResolver): ...


class WeaponSwayComponent(engine.ActorComponent):
    Pattern: SwayPatternData
    Scale: engine.GbxAttributeFloat
    AccuracyScale: engine.GbxAttributeFloat
    Speed: float
    Lacunarity: float
    Persistence: float
    DiscWidth: float
    DiscHeight: float
    ZoomScale: engine.GbxAttributeFloat
    ZoomAccuracyScale: engine.GbxAttributeFloat
    ZoomSmoothingSpeed: float
    ZoomSmoothInTime_OnZoom: float
    ZoomSmoothInTime_OnFire: float
    bApplyAccuracyScaleOnlyWhenFiring: bool
    MaxAccuracyPercent: float
    CurrentRotation: core_uobject.Rotator
    CurrentScale: float
    WeaponPrivate: gbx_weapon.Weapon
    def OnZoomed(self): ...
    def OnUsed(self): ...
    def OnDetached(self): ...
    def OnAttached(self): ...
    def GetSwayGoodness(self, ReturnValue: float) -> float: ...


class WeaponTrinketPreviewActor(engine.Actor):
    CustomizationComponent: gbx_game_system_core.GbxCustomizationComponent
    SkeletalMeshComponent: gbx_game_system_core.GbxSkeletalMeshComponent



class WeaponTrinketPartData(OakInventoryCustomizationPartData):
    AttachSocket: str



class WeaponUseModeAspectData(gbx_inventory.InventoryAspectData):
    UseMode: EWeaponUseMode
    UseModeBitmask: int
    InputChannelBitmask: int
    WeaponUseComponent: gbx_weapon.WeaponUseComponent



class WeaponUseModeCrosshairAspectData(gbx_inventory.InventoryAspectData):
    UseMode: EWeaponUseMode
    CrosshairData: gbx_ui.GbxCrosshairDataAsset
    ZoomedCrosshairData: gbx_ui.GbxCrosshairDataAsset



class WeaponUseModeNameAspectData(gbx_inventory.InventoryAspectData):
    UseMode: EWeaponUseMode
    UseModeName: gbx_game_system_core.UIStatData_Text



class WeaponUseModeSecondaryAspectData(gbx_inventory.InventoryAspectData):
    bCreateComponent: bool
    bAdditive: bool
    bShareBetweenUseModes: bool
    UseModeBitmask: int
    Component: engine.ActorComponent
    ComparisonClass: unreal.UClass
    def EnumerateComponentTypes(self, OutComponentTypes: unreal.WrappedArray[unreal.UClass]): ...


class WeaponVehicleAnimInstance(engine.AnimInstance):
    bIsDriverWeapon: bool
    bIsSeatedWeapon: bool
    bHasTurretOwner: bool
    DualWeaponDownOffset: float
    DualWeaponDownElbowOffset: float
    DualWeaponDownArmEndOffset: float
    DualWeaponTopOffset: float
    DualWeaponTopElbowOffset: float
    DualWeaponTopArmEndOffset: float
    DualWeaponSideOffset: float
    MaxIKStretchRatio: float
    StartIKStretchingRatio: float
    CircleZone: float
    CircleDeadZone: float
    DualWeaponRightCurveStartArmExtensionByYaw: engine.RuntimeFloatCurve
    DualWeaponRightCurveEndArmExtensionByYaw: engine.RuntimeFloatCurve
    DualWeaponLeftCurveStartArmExtensionByYaw: engine.RuntimeFloatCurve
    DualWeaponLeftCurveEndArmExtensionByYaw: engine.RuntimeFloatCurve
    StretchWheelBase: float
    LeftWeaponSocketName: str
    RightWeaponSocketName: str
    OverrideByParts: unreal.WrappedArray[VehicleOverrideData]
    Vehicle: OakVehicle
    Weapon_Vehicle: OakWeapon_Vehicle
    LeftWeaponMesh: engine.SkeletalMeshComponent
    RightWeaponMesh: engine.SkeletalMeshComponent



class WeaponWearAttributeValueResolver(gbx_game_system_core.AttributeValueResolver):
    ValueToResolve: EWeaponWearValueType



class ZoneMapData(gbx_game_system_core.LevelData):
    ZoneMapMeshAssetReference: core_uobject.SoftObjectPath
    ZoneMapDataSections: unreal.WrappedArray[ZoneMapDataSection]
    CustomUnfogHeight: float
    CustomVehicleUnfogHeight: float
    SuppressFastTravelTunnelCondition: gbx_runtime.GbxCondition
    BlacklistedMissionPOIs: unreal.WrappedArray[ZoneMapMissionPOIBlacklistEntry]
    PlanetLocationTransform: core_uobject.Transform
    PlanetZoneDisplayTexture: engine.Texture2D
    ConceptArtToDisplay: engine.Texture2D
    ZoneMapPOIList: unreal.WrappedArray[ZoneMapPOIEntry]
    ZoneMapMissionWaypointList: unreal.WrappedArray[ZoneMapMissionWaypointEntry]
    ZoneMapChallengeList: unreal.WrappedArray[ZoneMapChallengeEntry]
    ZoneMapChallengeGroupList: unreal.WrappedArray[ZoneMapChallengeGroupEntry]
    NumWorldDiscoveryAreas: int
    ZoneMapVersion: int
    bIsTutorialTarget: bool
    AssociatedLeague: int
    AssociatedPatch: PatchExpansionData
    AssociatedDLC: online_subsystem_utils.DownloadableContentData
    bNoFastTravelStations: bool
    POITypesToIgnoreInCurrentMap: unreal.WrappedArray[ZoneMapPOITypeData]
    AdditionalZoneMaps: unreal.WrappedArray[AdditionalZoneMapData]
    def ShouldHighlight(self, WorldContextObject: unreal.UObject, ReturnValue: bool) -> bool: ...
    def SetHighlight(self, WorldContextObject: unreal.UObject, bShouldHighlight: bool): ...
    def SaveZoneFogOfDiscovery(self, ViewingPlayer: OakPlayerController, FogOfDiscoveryRenderTarget: engine.TextureRenderTarget2D, ReturnValue: bool) -> bool: ...
    def SaveCurrentZoneFogOfDiscovery(self, ViewingPlayer: OakPlayerController, ReturnValue: bool) -> bool: ...
    def OnZoneMapMeshDataLoaded(self): ...
    def LoadZoneFogOfDiscoveryTexture(self, ViewingPlayer: OakPlayerController, ReturnValue: engine.Texture2D) -> engine.Texture2D: ...
    def LoadZoneFogOfDiscovery(self, ViewingPlayer: OakPlayerController, FoDRenderTarget: engine.TextureRenderTarget2D, DefaultWidth: int, DefaultHeight: int, ReturnValue: bool) -> bool: ...
    def LoadCurrentZoneFogOfDiscoveryTexture(self, ViewingPlayer: OakPlayerController, ReturnValue: engine.Texture2D) -> engine.Texture2D: ...
    def LoadCurrentZoneFogOfDiscovery(self, ViewingPlayer: OakPlayerController, DefaultWidth: int, DefaultHeight: int, ReturnValue: engine.TextureRenderTarget2D) -> engine.TextureRenderTarget2D: ...
    def IsZoneMapOnPlanet(self, PlanetData: PlanetData, ReturnValue: bool) -> bool: ...
    def IsPOIKnownDirect(self, ViewingPlayer: OakPlayerController, POIEntry: ZoneMapPOIEntry, ReturnValue: bool) -> bool: ...
    def IsPOIKnown(self, ViewingPlayer: OakPlayerController, POIObjectName: str, ReturnValue: bool) -> bool: ...
    def GetZoneWaypointsForMission(self, Mission: unreal.UClass, OutMissionWaypoints: unreal.WrappedArray[ZoneMapMissionWaypointEntry]): ...
    def GetZoneMapPOIList(self, ReturnValue: unreal.WrappedArray[ZoneMapPOIEntry]) -> unreal.WrappedArray[ZoneMapPOIEntry]: ...
    def GetZoneMapPlanet(self, ReturnValue: PlanetData) -> PlanetData: ...
    def GetZoneMapMissionWaypointList(self, ReturnValue: unreal.WrappedArray[ZoneMapMissionWaypointEntry]) -> unreal.WrappedArray[ZoneMapMissionWaypointEntry]: ...
    def GetZoneMapMeshData(self, ReturnValue: ZoneMapMeshData) -> ZoneMapMeshData: ...
    def GetZoneMapChallengeList(self, ReturnValue: unreal.WrappedArray[ZoneMapChallengeEntry]) -> unreal.WrappedArray[ZoneMapChallengeEntry]: ...
    def GetZoneChallengeCounts(self, ViewingPlayer: OakPlayerController, ChallengeCategory: gbx_game_system_core.ChallengeCategoryData, TotalCount: int, CompletedCount: int, bIgnoreHidden: bool): ...
    def GetWorldDiscoveryAreaCounts(self, ViewingPlayer: OakPlayerController, TotalWorldDiscoveryAreas: int, FoundWorldDiscoveryAreas: int, InAssociatedLeague: int, InAssociatedDLC: online_subsystem_utils.DownloadableContentData): ...
    def GetTravelStationWaypointsToMission(self, WorldContextObject: unreal.UObject, StationPOI: unreal.WrappedArray[ZoneMapPOIEntry], MissionToTrack: unreal.UClass): ...
    def GetMissionWaypointStatusDirect(self, WorldContextObject: unreal.UObject, MissionWaypointEntry: ZoneMapMissionWaypointEntry, ReturnValue: int) -> int: ...
    def GetMissionWaypointStatus(self, WorldContextObject: unreal.UObject, MissionWaypointObjectName: str, ReturnValue: int) -> int: ...
    def GetMissionWaypointDisplayTextDirect(self, WorldContextObject: unreal.UObject, MissionWaypointEntry: ZoneMapMissionWaypointEntry, ObjectiveText: unreal.WrappedArray[str], DirectorText: unreal.WrappedArray[str]): ...
    def GetMissionsReferencedByZoneWaypoints(self, OutMissions: unreal.WrappedArray[unreal.UClass]): ...
    def GetMapFilename(self, ReturnValue: str) -> str: ...
    def GetChallengeWorldIconDirect(self, Player: gbx_game_system_core.GbxPlayerController, ChallengeEntry: ZoneMapChallengeEntry, ReturnValue: InWorldIconData) -> InWorldIconData: ...
    def GetChallengeWorldIcon(self, Player: gbx_game_system_core.GbxPlayerController, ChallengeObjectName: str, ReturnValue: InWorldIconData) -> InWorldIconData: ...
    def GetChallengeStatusDirect(self, Player: gbx_game_system_core.GbxPlayerController, ChallengeEntry: ZoneMapChallengeEntry, ReturnValue: int) -> int: ...
    def GetChallengeStatus(self, Player: gbx_game_system_core.GbxPlayerController, ChallengeObjectName: str, ReturnValue: int) -> int: ...
    def GetChallengeScaleformIconDirect(self, Player: gbx_game_system_core.GbxPlayerController, ChallengeEntry: ZoneMapChallengeEntry, ReturnValue: str) -> str: ...
    def GetChallengeScaleformIcon(self, Player: gbx_game_system_core.GbxPlayerController, ChallengeObjectName: str, ReturnValue: str) -> str: ...
    def GetChallengeDisplayTextDirect(self, MissionWaypointEntry: ZoneMapChallengeEntry, ReturnValue: str) -> str: ...
    def ActivateZoneMapPOI(self, ViewingPlayer: OakPlayerController, POIObjectName: str): ...


class ZoneMapDisplayActor(engine.Actor): ...


class ZoneMapDisplayPOI(ZoneMapDisplayActor): ...


class ZoneMapGlobalsData(gbx_runtime.GbxDataAsset):
    FriendPOIType: ZoneMapPOITypeData
    CustomWaypointPOIType: ZoneMapPOITypeData
    ZoneMeshMaterial: engine.MaterialInterface
    ZoneMapDisplayMaterial: engine.MaterialInterface
    ZoneMapDisplayTextureParameter: str
    POIZOffset: float
    BasePOISelectionDistance: float
    CustomWaypointRemoveDistance: float
    FoDWorldPositionTransformMaterial: engine.MaterialInterface
    FoDRenderTargetSize: core_uobject.Vector2D
    FoDMasterMaterial: engine.MaterialInterface
    FoDTranslucentMasterMaterial: engine.MaterialInterface
    FoDMasterMaterialParameter: str
    FODMeshMaterialExternal: engine.MaterialInterface
    FODMeshTranslucentMaterialExternal: engine.MaterialInterface
    FODMeshMatExtTextureParam: str
    FODMeshMatExtTextureSizeParam: str
    FoDSolverMaterial: engine.MaterialInterface
    FoDSolverMaterialParameter: str
    FoDLoaderMaterial: engine.MaterialInterface
    FoDLoaderMaterialParameter: str
    FoDMoveDistanceTestSquared: float
    FoDPlayerPositionMaterialParameter: str
    FoDRadiusMaterialParameter: str
    TestFoDRenderTexture: engine.TextureRenderTarget2D
    PlayerUnfogRadius: float
    VehicleUnfogRadius: float
    DefaultUnfogHeight: float
    DefaultVehicleUnfogHeight: float
    IconClampTransitionBounds: core_uobject.Vector2D



class ZoneMapIconBase(ZoneMapDisplayActor):
    bDisplayInFastTravelList: bool
    SpawnedFromActor: engine.Actor
    ZoneMap: ZoneMapViewer
    bActivated: bool
    def ViewModeChanged(self): ...
    def SetHighlighted(self, bNewActivated: bool): ...
    def CanActivate(self, ReturnValue: bool) -> bool: ...
    def Activate(self): ...


class OakZoneMapIcon_POI(ZoneMapIconBase):
    TextureParameter: str
    SpriteTexture: engine.Texture2D
    DefaultScaleformIconName: str
    POIEntry: ZoneMapPOIEntry
    POIType: ZoneMapPOITypeData
    SpriteMaterial: engine.MaterialInstanceDynamic
    MaterialLocationParameter: str
    MaterialFODTextureParameter: str
    MaterialFODCoordsParameter: str
    MaterialFODEnableParameter: str
    MaterialPlayerZParameter: str
    MaterialScaleMultiplierParameter: str
    MaterialOpacityParameter: str
    OpacityIfInWorldIcon: float
    MaterialMiniMapActiveParameter: str
    IconZOffset: float
    bCullOutsideMiniMap: bool
    AssociatedActor: engine.Actor
    bIsKnown: bool
    bIsFogged: bool
    bInvisible: bool
    POIMeshComponent: engine.MeshComponent
    def SetupSpriteMaterial(self, InSpriteMaterial: engine.MaterialInstanceDynamic): ...
    def SetSpriteMaterial(self, NewSpriteMaterial: engine.Material): ...
    def SetIsKnown(self, bInIsKnown: bool): ...
    def SetAssociatedActor(self, InAssociatedActor: engine.Actor): ...
    def POIActivated(self, ErrorMessage: str, ReturnValue: bool) -> bool: ...
    def OnCharacterDied(self): ...
    def OnAssociatedActorDestroyed(self, DestroyedActor: engine.Actor): ...
    def GetPOIDisplayInfo(self, OutScaleformIconName: str, OutPOIDisplayName: str, OutPOISubHeading: str, OutPOIDescriptionText: unreal.WrappedArray[str], OutPOIUseText: str): ...
    def ForceUpdateTransform(self): ...
    def ExitMenuWhenActivated(self, ReturnValue: bool) -> bool: ...
    def CanPOIBeActivated(self, ReturnValue: bool) -> bool: ...


class ZoneMapMissionWaypointIcon(OakZoneMapIcon_POI):
    WaypointEntry: ZoneMapMissionWaypointEntry
    def K2_OnWaypointUpdated(self): ...
    def GetMissionStatus(self, ReturnValue: int) -> int: ...


class OakZoneMapChallengeIcon(OakZoneMapIcon_POI):
    ChallengeEntry: ZoneMapChallengeEntry
    def K2_OnChallengeUpdated(self): ...
    def GetChallengeStatus(self, ReturnValue: int) -> int: ...
    def GetChallengeIconTexture(self, ReturnValue: engine.Texture2D) -> engine.Texture2D: ...


class OakZoneMapFriendIcon_POI(OakZoneMapIcon_POI): ...


class ZoneMapPlayerIcon_POI(OakZoneMapIcon_POI):
    MaterialXAxisParameter: str
    MaterialYAxisParameter: str
    MaterialZAxisParameter: str
    PlayerPulseMaterialParameter: str
    bUpdateWPOMaterialForVehicleInZoneMapView: bool
    def SetIsOwningPlayer(self): ...
    def OnPlayerExitedVehicle(self, PawnAttachSlotComponent: gbx_game_system_core.PawnAttachSlotComponent): ...
    def OnPlayerEnteringVehicle(self, PawnAttachSlotComponent: gbx_game_system_core.PawnAttachSlotComponent): ...


class ZoneMapVehicleIcon_POI(ZoneMapPlayerIcon_POI):
    CatchARidePOIType: ZoneMapPOITypeData
    PlayerPOIType: ZoneMapPOITypeData
    FriendlyPOIType: ZoneMapPOITypeData
    EmptyPOIType: ZoneMapPOITypeData
    EnemyPOIType: ZoneMapPOITypeData
    ColorParameterName: str
    EnemyColor: core_uobject.LinearColor
    PlayerColor: core_uobject.LinearColor
    NeutralColor: core_uobject.LinearColor
    def OnVehicleSeatsInitialized(self, AssociatedVehicle: OakVehicle): ...
    def OnSpawnByCatchARideChanged(self): ...
    def OnSeatAttachStateChanged(self): ...
    def OnOtherCharacterExitedVehicle(self, Seat: VehicleSeatComponent, Character: OakCharacter): ...
    def OnOtherCharacterEnteredVehicle(self, Seat: VehicleSeatComponent, Character: OakCharacter): ...


class ZoneMapTravelStationIcon_POI(OakZoneMapIcon_POI):
    UnfogRadius: float
    MapUnavailableMessage: str
    AssociatedTravelComponent: gbx_travel_station.TravelStationComponentBase
    def OnTravelIDsChanged(self): ...
    def OnFastTravelStationDiscovered(self, bNoActivationSequence: bool): ...


class ZoneMapInputData(gbx_runtime.GbxDataAsset):
    SpawnPitchValue: float
    TargetSpawnPitchValue: float
    SpawnPitchInterpSpeed: float
    PitchMin: float
    PitchMax: float
    RotationYawInterpSpeed: float
    RotationPitchInterpSpeed: float
    RotationYawInterpSpeedMouse: float
    RotationPitchInterpSpeedMouse: float
    RotationYawSpeedMax: float
    RotationPitchSpeedMax: float
    RotationSpeed: float
    ScaleMin: float
    ScaleMax: float
    LevelScaleRate: float
    LevelInterpModeSpeed: float
    MouseLevelScaleRate: float
    MousePlanetScaleRate: float
    MouseGalaxyScaleRate: float
    PlanetGalaxyScaleRate: float
    KeyboardLevelScaleAxisMultiplier: float
    SpawnScaleValue: float
    TargetSpawnScaleValue: float
    SpawnScaleInterpSpeed: float
    ScaleRate: float
    ScaleInterpolationSpeed: float
    TransformInterpSpeed: float
    TransformInterpSpeedMouse: float
    TransformMoveSpeedMouse: float
    TransformAcceleration: float
    TransformBuffer: float
    GlobalTransformScale: float
    POIStickinessCurve: engine.CurveFloat
    MovementSpeedByScaleCurve: engine.CurveFloat
    ZoomCurve: engine.CurveFloat
    ZoomSpeedByZoomCurve: engine.CurveFloat
    ZoomSpeedBasedOnZoom: engine.CurveFloat
    DisplayRadius: float
    POITraceRadius: float
    POITraceLeadScale: float
    DebugTrace: bool
    POISphereScaleOverZoneMapScale: engine.CurveFloat
    bRecenterResetsOrientation: bool
    GalaxyPitchMax: float
    GalaxyPitchMin: float
    GalaxyPitchInterpSpeed: float
    GalaxyYawInterpSpeed: float
    GalaxyInterpSpeedMouse: float
    GalaxyMoveSpeedMouse: float
    GalaxyDefaultPitch: float
    GalaxyYawMax: float
    GalaxyYawMin: float
    GalaxyInterpModeSpeed: float
    PlanetPitchMax: float
    PlanetPitchMin: float
    PlanetYawMax: float
    PlanetYawMin: float
    PlanetRotationInterpSpeed: float
    PlanetRotationInterpSpeedMouse: float
    PlanetRotationMoveSpeedMouse: float
    PlanetInterpModeSpeed: float
    MiniMap_Pitch: float
    MiniMap_FoV: float
    MiniMap_Distance: float
    MiniMap_RelativeOffset: core_uobject.Vector
    MouseAxisSensitivityMin: float
    MouseAxisSensitivityMax: float
    bInvertMouseXAxis: bool
    bInvertMouseYAxis: bool



class ZoneMapListData(gbx_runtime.GbxDataAsset):
    ZoneMapList: unreal.WrappedArray[ZoneMapData]
    def GetZoneMapDataForCurrentLevel(self, WorldContextObject: unreal.UObject, ReturnValue: ZoneMapData) -> ZoneMapData: ...


class ZoneMapMeshData(gbx_runtime.GbxDataAsset):
    ZoneMapMeshs: unreal.WrappedArray[ZoneMapMeshListEntry]
    GPUPointCloudList: unreal.WrappedArray[ZoneMapGPUPointCloudData]
    FogOfDiscoveryTexture: engine.Texture2D
    ZoneMapMeshVersion: int
    FoDCapture: FogOfDiscoveryCapture
    def SetupStaticMeshComponent(self, Index: int, InStaticMeshComponent: engine.StaticMeshComponent): ...


class ZoneMapPlanetViewer(ZoneMapDisplayActor):
    PlanetZonePOIs: unreal.WrappedArray[PlanetZonePOI]
    PlanetData: PlanetData
    OwningZoneMap: ZoneMapViewer
    def GetZoneMeshOnPlanet(self, ZoneMap: ZoneMapData, ReturnValue: engine.StaticMesh) -> engine.StaticMesh: ...


class ZoneMapPOIComponent(engine.MaterialBillboardComponent):
    TextureParameter: str
    MaterialLocationParameter: str
    MaterialMiniMapActiveParameter: str
    SpriteTexture: engine.Texture2D
    IconZOffset: float
    bCullOutsideMiniMap: bool
    SpriteMaterial: engine.MaterialInstanceDynamic
    AssociatedActor: engine.Actor
    bIsKnown: bool
    ZoneMap: ZoneMapViewer
    MapIconComponent: OakMinimapIconComponent
    def ViewModeChanged(self): ...
    def SetupSpriteMaterial(self, InSpriteMaterial: engine.MaterialInstanceDynamic): ...
    def OnCharacterExitedVehicle(self, PawnAttachSlotComponent: gbx_game_system_core.PawnAttachSlotComponent): ...
    def OnCharacterEnteringVehicle(self, PawnAttachSlotComponent: gbx_game_system_core.PawnAttachSlotComponent): ...
    def OnCharacterDied(self): ...
    def OnAssociatedActorDestroyed(self, DestroyedActor: engine.Actor): ...


class ZoneMapPOIAIComponent(ZoneMapPOIComponent):
    FriendlyPOIType: ZoneMapPOITypeData
    EnemyPOIType: ZoneMapPOITypeData
    def OnTeamChanged(self, TeamComponent: gbx_game_system_core.TeamComponent, PrevTeam: gbx_game_system_core.Team): ...
    def DelayedTeamChanged(self): ...
    def DelayedRemovePOI(self): ...


class ZoneMapPOIIconInterface(core_uobject.Interface): ...


class ZoneMapPOIInterface(core_uobject.Interface): ...


class ZoneMapPOILegendaryComponent(ZoneMapPOIComponent):

    def OnShowLegendariesChanged(self, bNewVal: bool): ...


class ZoneMapPOIMeshComponent(engine.StaticMeshComponent):
    MeshRadius: int
    MeshHeightScale: float
    AreaRadius: int
    IconZOffset: float
    MaterialLocationParameter: str
    MaterialXAxisParameter: str
    MaterialYAxisParameter: str
    MaterialZAxisParameter: str
    MaterialMiniMapActiveParameter: str
    MeshMaterial: engine.MaterialInstanceDynamic
    AssociatedActor: engine.Actor
    def ViewModeChanged(self): ...
    def SetupMeshMaterial(self, InMeshMaterial: engine.MaterialInstanceDynamic): ...


class ZoneMapPOITypeData(gbx_runtime.GbxDataAsset):
    DisplayName: str
    SubHeading: str
    Description: str
    UseText: str
    CanNotBeUsedText: str
    POISprite: engine.Texture2D
    IconFrameName: str
    AlternateIconFrameName: str
    bDisplayInFastTravelList: bool
    POICategory: EZoneMapTargetType
    POIIconClass: unreal.UClass
    bShowInMiniMap: bool
    bShowInZoneMap: bool
    TranslucencySortPriority: int
    SizeMultiplier: float
    IconZOffset: float
    DontUseScaleformIcon: bool



class ZoneMapViewer(engine.Actor):
    DLCGalaxyPOIs: unreal.WrappedArray[OakZoneMapIcon_POI]
    bEchoMenuOpen: bool
    bShowingZoneMap: bool
    bShowingMiniMap: bool
    MousePanSpeed: core_uobject.Vector2D
    MouseMaxPanSpeed: float
    MouseRotateSpeed: core_uobject.Vector2D
    MouseMaxRotateSpeed: float
    MouseZoomSpeed: float
    MouseMaxZoomSpeed: float
    ZoneMapDecorationTag: str
    ZoneMapInputData: ZoneMapInputData
    MapCenterMaterialParameter: str
    MissionPOIActorClass: unreal.UClass
    MissionPOIAreaComponentClass: unreal.UClass
    MissionGiverPOIDisplayName: str
    MissionObjectivePOIDisplayName: str
    ChallengePOIActorClass: unreal.UClass
    LocalPlayerIcon: engine.StaticMesh
    LocalPlayerIconMaterial: engine.MaterialInterface
    bUseActorPOIs: bool
    PlayerPositionMaterialParameter: str
    DisplayingLoadedLevelMaterialParameter: str
    DecorationMeshMaterial: engine.Material
    GPUMaterialParameter: str
    GridBaseMesh: engine.StaticMesh
    GridBaseMaterial: engine.Material
    GridMaterialParameter: str
    WaypointMeshMaterial: engine.Material
    POITargetTraceLength: float
    MainViewTargetSize: core_uobject.Vector2D
    ZoomSpeedModifierTuning: float
    DistortionRadiusParameter: str
    DistortionRadiusMultiplier: float
    DistortionRadiusMaskParameter: str
    DistortionRadiusMaskMultiplier: float
    HologramDistortionParameter: str
    HologramDistortionMultiplier: float
    DynamicMapPOITypes: unreal.WrappedArray[ZoneMapDynamicPOIEntry]
    DynamicPOIClass: unreal.UClass
    MiniMapScale: float
    MiniMapPitch: float
    MiniMap2DScreenOffset: core_uobject.Vector
    MiniMapRenderCoordinatesOffset: core_uobject.Vector2D
    MiniMapOcclusionScale: float
    MiniMap2DOcclusionScale: float
    MiniMapTargetSize: core_uobject.IntPoint
    MiniMapBlendMode: int
    MiniMapHUDScale: core_uobject.Vector2D
    bDeferLevelMapSetState: bool
    bDeferMapListSetup: bool
    ZoneMapRootComponent: engine.SceneComponent
    SpringArm: engine.SpringArmComponent
    MinimapSpringArm: engine.SpringArmComponent
    PlanetRootComponent: engine.SceneComponent
    GalaxyRootComponent: engine.SceneComponent
    MissionIconClass: unreal.UClass
    bHideMissionAreaWaypoint: bool
    LevelData: ZoneMapData
    LevelMeshData: ZoneMapMeshData
    AdditionalLevelMeshData: unreal.WrappedArray[ZoneMapMeshData]
    PlanetClass: unreal.UClass
    PlanetData: PlanetData
    PlayerLevel: ZoneMapData
    PlayerPlanet: PlanetData
    MapDynamicMissionIcons: unreal.WrappedArray[ZoneMapIconInfo]
    MapStaticMissionIcons: unreal.WrappedArray[ZoneMapIconInfo]
    MapDynamicChallengeIcons: unreal.WrappedArray[ZoneMapIconInfo]
    MapStaticChallengeIcons: unreal.WrappedArray[ZoneMapIconInfo]
    MapDynamicIcons: unreal.WrappedArray[ZoneMapIconInfo]
    MapStaticIcons: unreal.WrappedArray[ZoneMapIconInfo]
    MapPlayerIcons: unreal.WrappedArray[ZoneMapIconInfo]
    MapExternalPOIs: unreal.WrappedArray[OakZoneMapIcon_POI]
    InputDevice: gbx_ui.EGbxMenuInputDevice
    POISelectionDistance: float
    FocusedPOI: engine.Actor
    FocusedPOIDistanceRatio: float
    MovementMode: EZoneMapMovementMode
    bDisableMovementInput: bool
    ZoomInAxis: float
    ZoomOutAxis: float
    LeftStickAxisX: float
    LeftStickAxisY: float
    RightStickAxisX: float
    RightStickAxisY: float
    AxisDeadzone: float
    POIMovementSpeedScale: float
    TransformTarget: core_uobject.Vector
    RotationYawTarget: float
    RotationPitchTarget: float
    InterpolationAlpha: float
    ScaleValue: float
    ScaleValueTarget: float
    TargetSpawnScaleValue: core_uobject.Vector
    LastPlayerLocation: core_uobject.Vector
    PlayerMoved: bool
    LevelMapMeshs: unreal.WrappedArray[ZoneMapLevelMeshInfo]
    LevelMapMeshComponents: unreal.WrappedArray[engine.StaticMeshComponent]
    PlayerIconMeshs: unreal.WrappedArray[PlayerIconInfo]
    GridMeshComponent: engine.StaticMeshComponent
    GalaxyMeshComponent: engine.StaticMeshComponent
    GridDMI: engine.MaterialInstanceDynamic
    LevelMapDMIs: unreal.WrappedArray[engine.MaterialInstanceDynamic]
    LastLevelMapMeshCount: int
    LastLevelMapDMICount: int
    ZoneViewLevelMapDMIs: unreal.WrappedArray[engine.MaterialInstanceDynamic]
    LastZoneViewLevelMapDMICount: int
    bLevelMeshDataLoaded: bool
    PostProcessDMI: engine.MaterialInstanceDynamic
    WaypointPathDMI: engine.MaterialInstanceDynamic
    WaypointSpline: engine.SplineComponent
    WaypointMesh: procedural_mesh_component.ProceduralMeshComponent
    FogOfDiscoveryTexture: engine.TextureRenderTarget2D
    FogOfDiscoveryComponent: FogOfDiscoveryComponent
    SceneCapture_MainView: engine.SceneCaptureComponent2D
    SceneCapture_MiniMap: engine.SceneCaptureComponent2D
    ZoneMapRenderTarget: engine.TextureRenderTarget2D
    MinimapRenderTarget: engine.TextureRenderTarget2D
    ZoneMapDisplayMaterialInstance: engine.MaterialInstanceDynamic
    ZoneMapTraceLocation: core_uobject.Vector
    ZoneMapTraceHasHit: bool
    CurrentWaypointPOI: OakZoneMapIcon_POI
    ZoneMapMeshOrigin: core_uobject.Vector
    ZoneMapMeshExtent: core_uobject.Box
    MaxHeight: float
    ZoomInputEased: float
    ZoomPushTransformOffset: core_uobject.Vector
    CachedCameraLocation: core_uobject.Vector
    AdjustPivotAndTargetLength: bool
    bDisableMenuNotification: bool
    bSanctuaryIsHighlighted: bool
    OakProfile: OakProfile
    ZoneMapOffset_4way: core_uobject.Vector2D
    ZoneMapOffset_Vertical: core_uobject.Vector2D
    bDisableAutoPOI: bool
    TargetInfo: ZoneMapIconInfo
    CycledWaypoints: unreal.WrappedArray[ZoneMapIconInfo]
    POIComponentPool: unreal.WrappedArray[engine.PrimitiveComponent]
    CurrentLevelMissionIcons: unreal.WrappedArray[engine.SceneComponent]
    CurrentLevelChallengeIcons: unreal.WrappedArray[engine.SceneComponent]
    def ZoneMapFocusedPOIChanged__DelegateSignature(self, NewlyFocusedPOI: engine.Actor): ...
    def UpdateTransforms(self, DeltaSeconds: float): ...
    def UpdatePOISphereRadii(self): ...
    def UpdatePlayerIcons(self): ...
    def UpdateMiniMapTransforms(self, DeltaSeconds: float): ...
    def UpdateGalaxyTransforms(self, DeltaSeconds: float): ...
    def UpdateDMIs(self, bForceUpdate: bool): ...
    def UpdateCamera(self, DeltaSeconds: float): ...
    def UnfogMapIconObject(self, IconObject: unreal.UObject, Radius: float, Height: float): ...
    def TraceForPOI(self, StartPos: core_uobject.Vector, Direction: core_uobject.Vector, OutZoneMapTraceLocation: core_uobject.Vector, OutZoneMapTraceHasHit: bool): ...
    def SpawnZoneMapIcon(self, IconParentComponent: engine.SceneComponent, IconInfo: ZoneMapIconInfo, POIType: ZoneMapPOITypeData, ReturnValue: OakZoneMapIcon_POI) -> OakZoneMapIcon_POI: ...
    def SpawnZoneMapAnchorAndIcon(self, IconParentComponent: engine.SceneComponent, NewZoneMapIcon: OakZoneMapIcon, IconInfo: ZoneMapIconInfo, POIType: ZoneMapPOITypeData, ReturnValue: MapIconAnchor) -> MapIconAnchor: ...
    def ShowZoneMap(self): ...
    def ShowMenuList(self, bShow: bool): ...
    def SetWaypoint(self): ...
    def SetVisibleRadius(self, Alpha: float, RadiusAlpha: float, Distortion: float): ...
    def SetVisible(self, bVisible: bool): ...
    def SetPivotToActorWorldLocation(self, WorldLocation: core_uobject.Vector): ...
    def ResetPropertiesForZoneChange(self): ...
    def ResetMapOrientation(self, bInstant: bool, bResetOrientation: bool, bSnapToPlayer: bool): ...
    def ResetCycledWaypointIndex(self): ...
    def RemoveMapIconObject(self, IconObject: unreal.UObject): ...
    def RemoveMapIcon(self, IconInfo: ZoneMapIconInfo): ...
    def RemoveActorsFromZoneMapView(self): ...
    def RefreshMapIconObject(self, IconObject: unreal.UObject): ...
    def OnZoneMapMeshDataLoaded(self): ...
    def OnPlayerSaveGameLoaded(self): ...
    def OnPlayerProfileChanged(self): ...
    def OnPlanetClassLoaded(self): ...
    def OnPlanetAddOnPOIsLoaded(self): ...
    def OnMinimapIconComponentUpdateTracking(self, MinimapIconComponent: OakMinimapIconComponent): ...
    def OnMinimapIconComponentEndTracking(self, MinimapIconComponent: OakMinimapIconComponent): ...
    def OnMinimapIconComponentBeginTracking(self, MinimapIconComponent: OakMinimapIconComponent): ...
    def NotifyTransitioning(self, bTransitioning: bool): ...
    def NotifyPOIZoneHighlighted(self, POIIcon: unreal.UObject, POIZone: ZoneMapData, bSelected: bool): ...
    def NotifyPOIPlanetHighlighted(self, POIIcon: unreal.UObject, POIPlanet: PlanetData, bSelected: bool): ...
    def NotifyPOIIconHighlighted(self, POIIcon: unreal.UObject, POIData: ZoneMapPOIEntry, bSelected: bool): ...
    def NotifyMissionWaypointIconHighlighted(self, WaypointIcon: unreal.UObject, WaypointData: ZoneMapMissionWaypointEntry, bSelected: bool): ...
    def NotifyDeployedVehicleHighlighted(self, POIIcon: unreal.UObject, TargetedVehicle: OakVehicle, bSelected: bool): ...
    def NotifyChallengeIconHighlighted(self, ChallengeIcon: unreal.UObject, ChallengeData: ZoneMapChallengeEntry, bSelected: bool): ...
    def LoadPlanetForLevel(self, PlanetToLoad: PlanetData): ...
    def LoadMapForLevel(self, ZoneMapToLoad: ZoneMapData, bSetAsCurrent: bool): ...
    def K2_UpdateTransforms(self, DeltaSeconds: float, ReturnValue: bool) -> bool: ...
    def K2_UpdatePOISphereRadii(self, ReturnValue: bool) -> bool: ...
    def K2_UpdateMiniMapTransforms(self, DeltaSeconds: float, ReturnValue: bool) -> bool: ...
    def K2_SetCustomWaypoint(self): ...
    def K2_ResetAxisInput(self): ...
    def K2_PostLoadedPlanetClass(self): ...
    def K2_PostLoadedMapMesh(self): ...
    def K2_OnZoneMapShown(self): ...
    def K2_OnZoneMapHidden(self): ...
    def K2_OnRemoveIcon(self, IconActor: OakZoneMapIcon_POI, IconInfo: ZoneMapIconInfo): ...
    def K2_OnMiniMapShown(self): ...
    def K2_OnMiniMapHidden(self): ...
    def K2_OnEchoOpened(self): ...
    def K2_OnEchoClosed(self): ...
    def K2_OnAddIcon(self, SpawnedIcon: OakZoneMapIcon_POI, IconInfo: ZoneMapIconInfo): ...
    def K2_HandleVisibilityChanged(self, bVisible: bool): ...
    def K2_HandleInputAction(self, InputAction: str, ReturnValue: bool) -> bool: ...
    def K2_HandleAxisInput(self, InputAction: str, AxisValue: float, ReturnValue: bool) -> bool: ...
    def K2_GotoPlanetMap(self, InPlanetData: PlanetData): ...
    def K2_GotoParentMap(self): ...
    def K2_GotoLevelMap(self, InLevelData: ZoneMapData): ...
    def K2_GetRotationYawTarget(self, DeltaSeconds: float, YawMin: float, YawMax: float, ReturnValue: bool) -> bool: ...
    def K2_GetRotationPitchTarget(self, DeltaSeconds: float, ReturnValue: bool) -> bool: ...
    def K2_GetNewTransformTarget(self, DeltaSeconds: float, TransformMin: core_uobject.Vector, TransformMax: core_uobject.Vector, TransformBuffer: float, GlobalTransformScale: float, ZoomDelta: float, ReturnValue: bool) -> bool: ...
    def K2_GetNewScaleTarget(self, DeltaSeconds: float, ZoomDelta: float, ReturnValue: bool) -> bool: ...
    def K2_FocusOnTransform(self, Transform: core_uobject.Transform): ...
    def K2_FocusOnPlanet(self, Planet: PlanetData): ...
    def K2_FocusOnLevel(self, Level: ZoneMapData): ...
    def K2_CenterOnPlayer(self): ...
    def IsVisible(self, ReturnValue: bool) -> bool: ...
    def IsViewingCurrentLevel(self, ReturnValue: bool) -> bool: ...
    def IsCurrentLevelLoaded(self, ReturnValue: bool) -> bool: ...
    def InitializeZoneMapMesh(self): ...
    def InitializeZoneMapForLevel(self): ...
    def InitializeGalaxyMapMesh(self): ...
    def InitializeCompassAndGrid(self): ...
    def HideZoneMap(self): ...
    def GetZoneMeshData(self, ReturnValue: ZoneMapMeshData) -> ZoneMapMeshData: ...
    def GetZoneChallenges(self, ChallengeCategory: gbx_game_system_core.ChallengeCategoryData, ZoneChallenges: unreal.WrappedArray[ZoneMapChallengeQuery]): ...
    def GetTargetInfo(self, ReturnValue: ZoneMapIconInfo) -> ZoneMapIconInfo: ...
    def GetNewTransformTargetNative(self, DeltaSeconds: float, TransformMin: core_uobject.Vector, TransformMax: core_uobject.Vector, TransformBuffer: float, GlobalTransformScale: float, ZoomDelta: float): ...
    def GetNewScaleTargetNative(self, DeltaSeconds: float, ZoomDelta: float, ScaleMin: float, ScaleMax: float, ScaleRate: float): ...
    def GetNewRotationYawTargetNative(self, DeltaSeconds: float, YawMin: float, YawMax: float): ...
    def GetNewRotationPitchTargetNative(self, DeltaSeconds: float): ...
    def GetMiniMapTexture(self, ReturnValue: engine.Texture) -> engine.Texture: ...
    def GetMapState(self, ReturnValue: EZoneMapViewerState) -> EZoneMapViewerState: ...
    def GetMainViewTexture(self, ReturnValue: engine.Texture) -> engine.Texture: ...
    def GatherZoneMapDecorationActors(self, Actors: unreal.WrappedArray[engine.Actor]): ...
    def EchoDeviceOpened(self): ...
    def EchoDeviceClosed(self): ...
    def DeferredSetStatePlanet(self): ...
    def DeferredSetStateLevel(self): ...
    def DeferredRegistrationWithMissionTracker(self): ...
    def DeferredRegistrationWithIconTracker(self): ...
    def DeferredRegistrationWithFriendStatusSystem(self): ...
    def DeferredRegistrationWithChallengeManager(self): ...
    def CheckAndAdjustCaptureTextureSize(self): ...
    def ChallengesRegistered(self): ...
    def AddPOIIcons(self): ...
    def AddPlayerIcons(self, AllPlayers: bool): ...
    def AddMapIcon(self, IconInfo: ZoneMapIconInfo, NewZoneMapIcon: OakZoneMapIcon, POIType: ZoneMapPOITypeData, ReturnValue: MapIconAnchor) -> MapIconAnchor: ...
    def AddFriendIcons(self): ...
    def AddDecorationMeshs(self): ...
    def AddChallengeIcons(self): ...
    def AddActorToZoneMapView(self, NewViewActor: engine.Actor): ...


class ExitDownStateInformation:
    ExitReason: EExitDownStateReason
    CustomExitNotification: HUDNotificationAsset
    CustomExitMessageText: str



class HUDInWorldIconTargetInfo:
    IconData: InWorldIconData
    Actor: engine.Actor
    LocationComponent: engine.SceneComponent
    SocketName: str
    LocationOffset: core_uobject.Vector
    Radius: float
    Guid: core_uobject.Guid



class SecondaryHealthDamageEventDetails:
    DamageSource: gbx_game_system_core.DamageSource
    DamageType: gbx_game_system_core.GbxDamageType
    InstigatorPawn: engine.Pawn
    bWasCrit: bool
    HitLocation: core_uobject.Vector
    HitDirection: core_uobject.Vector



class HealthTypeDepletedDetails:
    HealthType: gbx_game_system_core.HealthTypeData
    DamageType: gbx_game_system_core.GbxDamageType
    Index: int



class DamageBlockEventDetails:
    DamageType: gbx_game_system_core.GbxDamageType
    DamageSource: gbx_game_system_core.DamageSource



class MapIDData:
    ZoneNameID: int
    MapNameID: int



class BossbarEventData:
    Type: EBossbarEventType
    Boss: OakCharacter



class GlobalScreenParticleData:
    StartAndLoopParticle: engine.ParticleSystem
    EndParticle: engine.ParticleSystem
    ContentDims: core_uobject.Vector2D
    ParticleDepth: float
    Tag: str



class EffectivePlayerCountData:
    EffectiveNumPlayers: int
    Setting: EEffectivePlayerCountSetting



class MayhemModeState:
    bIsActive: bool
    MayhemLevel: int
    PendingMayhemLevel: int
    PendingRandomSeed: int
    CachedOptionalOverrides: MayhemDebugOverrides
    ReplicableSets: MayhemReplicableSetsData
    RandomSeed: int



class MayhemReplicableSetsData:
    ActiveSetsBits: int



class MayhemDebugOverrides:
    ModifierIndexOverrides: unreal.WrappedArray[int]



class ProcessedReward:
    Currency: int
    Experience: int
    CurrencyType: gbx_inventory.InventoryCategoryData
    SpawnedInventoryItems: unreal.WrappedArray[engine.Actor]



class CommandRingTarget:
    Actor: engine.Actor
    BaseComponent: engine.SceneComponent
    Location: core_uobject.Vector
    Rotation: core_uobject.Rotator



class OakResourceEffectData:
    ResourceEffectType: EOakStatusEffectResourceEffectType
    ResourcePool: gbx_game_system_core.GameResourcePoolData
    PostDepleteImmuneTime: gbx_game_system_core.GbxAttributeData
    DamageTypeClass: unreal.UClass
    DamageModifier: gbx_game_system_core.GbxAttributeData
    DamagedActorModifier: gbx_game_system_core.GbxAttributeData
    DefaultPercentBaseDamage: float
    FXData: OakStatusEffectPresentationData



class OakCoordinatedEffectSwitch:
    Enum: unreal.UEnum
    NativeEnumName: str
    bNativeEnum: bool
    InitialState: int
    States: unreal.WrappedArray[OakCoordinatedEffectSwitchState]
    CurrentState: int
    Owner: engine.Actor
    ActionComp: gbx_game_system_core.GbxActionComponent
    ReplicatedState: int



class OakCoordinatedEffectSwitchState:
    DisplayName: str
    Name: str
    Effect: unreal.UClass



class OakCharacterCustomizationData:
    Customization_Colorizations: unreal.WrappedArray[OakCharacterColorization]
    bApplyCustomization_Colorization: bool
    Customization_Pattern: OakCharacterPattern
    bApplyCustomization_Pattern: bool
    Customization_SkinTone: OakCharacterSkinTone
    bApplyCustomization_SkinTone: bool
    Customization_Tattoos: OakCharacterTattoos
    bApplyCustomization_Tattoos: bool
    Customization_Hairs: unreal.WrappedArray[OakCharacterHair]
    bApplyCustomization_Hair: bool
    Customization_Eyes: OakCharacterEyes
    bApplyCustomization_Eyes: bool
    Customization_Decals: unreal.WrappedArray[OakCharacterDecal]
    bApplyCustomization_Decal: bool
    Customization_Colorization: OakCharacterColorization
    Customization_Hair: OakCharacterHair
    Customization_Decal: OakCharacterDecal



class OakCharacterCustomization:
    bRandomizeColor: bool
    ColorRandomizer: ColorRandomizer



class ColorRandomizer:
    Hue: float
    Saturation: float
    Scale: gbx_runtime.NumericRange



class OakCharacterDecal(OakCharacterCustomization):
    DecalStrength: float
    bOverrideDecalStrength: bool
    DecalColor: core_uobject.LinearColor
    bOverrideDecalColor: bool
    DecalColorHighlight: core_uobject.LinearColor
    bOverrideDecalColorHighlight: bool
    Texture_Comp: engine.Texture
    Texture_Normal: engine.Texture
    Texture_BaseColor: engine.Texture
    Textures: unreal.WrappedArray[OakCharacterTexturePair]



class OakCharacterTexturePair:
    Comp: engine.Texture
    Normal: engine.Texture



class OakCharacterHair(OakCharacterCustomization):
    InnerColor: core_uobject.LinearColor
    bOverrideInnerColor: bool
    OuterColor: core_uobject.LinearColor
    bOverrideOuterColor: bool
    SSSColor: core_uobject.LinearColor
    bOverrideSSSColor: bool



class OakCharacterColorization(OakCharacterCustomization):
    Primary1: core_uobject.LinearColor
    bOverridePrimary1: bool
    Primary2: core_uobject.LinearColor
    bOverridePrimary2: bool
    Secondary1: core_uobject.LinearColor
    bOverrideSecondary1: bool
    Secondary2: core_uobject.LinearColor
    bOverrideSecondary2: bool
    Tertiary1: core_uobject.LinearColor
    bOverrideTertiary1: bool
    Tertiary2: core_uobject.LinearColor
    bOverrideTertiary2: bool



class OakCharacterEyes:
    RandomEyeColors: unreal.WrappedArray[core_uobject.Color]
    bOverrideEyeColor: bool



class OakCharacterTattoos(OakCharacterCustomization):
    TattooColor: core_uobject.LinearColor
    bOverrideTattooColor: bool



class OakCharacterSkinTone(OakCharacterCustomization):
    SkinTone: core_uobject.LinearColor
    bOverrideSkinTone: bool



class OakCharacterPattern:
    Primary: float
    bOverridePrimary: bool
    Secondary: float
    bOverrideSecondary: bool
    Tertiary: float
    bOverrideTertiary: bool
    Skin: float
    bOverrideSkin: bool
    bRandomizeUse: bool
    Chance: float
    bRandomizeTexture: bool
    Textures: unreal.WrappedArray[OakCharacterTexturePair]



class OakGenderData:
    Mesh: engine.SkeletalMesh
    MeshOffset: core_uobject.Vector
    GestaltPartList: gbx_game_system_core.GestaltPartListData
    AnimBlueprint: unreal.UClass
    AnimSetGenericNames_Enable: unreal.WrappedArray[str]
    AnimSetGenericNames_Disable: unreal.WrappedArray[str]
    AnimSets_Enable: unreal.WrappedArray[engine.GbxAnimSet]
    AnimSets_Disable: unreal.WrappedArray[engine.GbxAnimSet]
    Materials: unreal.WrappedArray[engine.MaterialInstance]
    DialogNameTags: unreal.WrappedArray[gbx_dialog.DialogNameTag]
    CryoMesh: apex_destruction.DestructibleMesh
    GoreSourceMaterialIndex: int



class WeaponSlotContainer:
    WeaponSlots: unreal.WrappedArray[WeaponSlotEntry]



class WeaponSlotEntry:
    SlotData: WeaponSlotData
    AttachedWeapon: gbx_weapon.Weapon
    PendingAttachedWeapon: gbx_weapon.Weapon
    ClientPredictedPendingAttachedWeapon: gbx_weapon.Weapon
    RestoreSlotData: unreal.UObject
    AccuracyPool: gbx_game_system_core.GameResourcePoolReference



class InventorySlotContainer(engine.FastArraySerializer):
    InventorySlots: unreal.WrappedArray[InventorySlotEntry]



class InventorySlotEntry(engine.FastArraySerializerItem):
    EquippedInventory: engine.Actor
    Enabled: bool
    Selected: bool
    SlotData: InventorySlotData
    EquippedTrinket: WeaponTrinketPartData
    ClientCachedEquippedInventory: engine.Actor
    ClientCachedEquippedTrinket: WeaponTrinketPartData



class HolsteredWeaponData:
    WeaponSizeType: EWeaponHolsteredSizeType
    AttachMode: gbx_inventory.EPickupLootAttachmentMode
    SocketName: str
    bVisibleInFirstPerson: bool



class CharacterCorpseState:
    bEnableCorpseCleanup: bool
    bShouldTearOff: bool
    bOverrideVisibleCorpseRemovalTime: bool
    OverrideVisibleCorpseRemovalTime: float
    ContactWithVehiclesTime: float



class ReplicatedInteractionInfo:
    OriginalMaterials: unreal.WrappedArray[engine.MaterialInterface]
    HandSocketName: str
    bGhostedMaterialOn: bool
    bAttractEmitterOn: bool



class RegisteredWeaponShotModifier:
    Modifier: gbx_weapon.WeaponShotModifier
    Owner: unreal.UObject
    ContextOverride: unreal.UObject



class HornSequenceEntry:
    StartTime: float
    Duration: float



class OakVehicleAdditiveData:
    VelocityMinTresholdForward: float
    VelocityMaxTresholdForward: float
    VelocityMinTresholdBackward: float
    VelocityMaxTresholdBackward: float
    VelocityMinTresholdLateral: float
    VelocityMaxTresholdLateral: float
    FrontBackMinInterpSpeed: float
    FrontBackMaxInterpSpeed: float
    LeftRightMinInterpSpeed: float
    LeftRightMaxInterpSpeed: float



class VehicleOccupantLoopingFeedback:
    FeedbackData: gbx_game_system_core.FeedbackData
    AffectedControllers: unreal.WrappedArray[engine.PlayerController]



class VehicleInputParams:
    InputComponentClass: unreal.UClass
    bUseCameraOverride: bool
    DriverSeatCameraModeOptionsOverride: PawnAttachCameraModeOptions



class PawnAttachCameraModeOptions:
    AttachingBlendInTimeOverride: float
    PersistentBlendInTimeOverride: float
    PersistentBlendOutTimeOverride: float
    DetachingBlendOutTimeOverride: float
    AttachingMode: str
    PersistentMode: str
    DetachingMode: str



class IronBearHardPointData:
    Slot: OakActionAbilityAugmentSlotData
    ModSlot: OakActionAbilityAugmentSlotData
    WeaponSlot: WeaponSlotData
    Orientation: EIronBearHardPointOrientation



class GroundSlamEndedDetails:
    bInterrupted: bool
    ImpactVelocity: float



class SlideEndedDetails:
    HitActor: engine.Actor
    StopVelocity: core_uobject.Vector



class SlidingImpactState:
    OwnerMovementComponent: OakCharacterMovementComponent
    StartAudioEvent: wwise_audio.WwiseEvent
    StopAudioEvent: wwise_audio.WwiseEvent
    bIgnoreSlidingState: bool
    LastImpact: engine.HitResult
    LastImpactTraceTime: float
    Effects: unreal.WrappedArray[TrackedSlidingImpactEffect]
    SpeedParticleParameterName: str



class TrackedSlidingImpactEffect:
    Component: engine.SceneComponent
    PhysicalMaterial: engine.PhysicalMaterial



class CharacterJumpGoalSetting:
    InitialZVelocity: float
    GoalHeight: float
    bUseInitialZVelocity: bool
    bUseGoalHeight: bool



class ReplicatedMeleeActionData:
    Counter: int
    Action: unreal.UClass
    MeleeData: PlayerMeleeData



class MeleeWeaponAttachmentData:
    Mesh: engine.StaticMesh
    Socket: str
    RelativeLocation: core_uobject.Vector
    RelativeRotation: core_uobject.Rotator
    CustomizationTargets: unreal.WrappedArray[gbx_game_system_core.GbxCustomizationTargetData]
    Component: gbx_game_system_core.GbxStaticMeshComponent



class GearUpAirdropData:
    Spawner: OakMissionSpawner



class OakNPCMailDataEntry(engine.TableRowBase):
    SenderDisplayName: str
    Subject: str
    Body: str
    ItemPoolReward: gbx_inventory.ItemPoolData



class PlayerCombatEncounterData:
    Experience: int
    CriticalHits: int
    Kills: int
    BadassKills: int
    RaidBossKills: int



class GearSoldByFriendData:
    GearSerialNumber: str
    PlayerClassIdentifierHash: int
    FriendNetId: engine.UniqueNetIdRepl



class OakCARMenuVehicleConfig:
    LoadoutSaveName: str
    ColorIndex1: int
    ColorIndex2: int
    ColorIndex3: int



class GFxMissionTrackerRewardDisplayData:
    Currency: int
    CurrencyType: gbx_inventory.InventoryCategoryData
    Items: unreal.WrappedArray[GFxMissionTrackerInventoryItemData]



class GFxMissionTrackerInventoryItemData:
    ItemTypeFrameName: str
    ItemRarityFrameName: str
    ItemRarityFrameText: str
    ItemScore: int



class VaultCardManager:
    VaultCardRewardEntries: unreal.WrappedArray[VaultCardRewardList]
    PendingInventoryReward: gbx_inventory.InventoryReplicationData
    CurrentVaultCardChallenges: unreal.WrappedArray[VaultCardCurrentChallengeLists]
    Owner: OakPlayerController
    VaultCardGlobalData: VaultCardGeneralData



class VaultCardCurrentChallengeLists:
    Challenges: unreal.WrappedArray[unreal.UClass]
    CompletedChallenges: unreal.WrappedArray[unreal.UClass]
    PreviouslyActiveDailyChallenges: unreal.WrappedArray[VaultCardPreviousChallenge]
    PreviouslyActiveWeeklyChallenges: unreal.WrappedArray[VaultCardPreviousChallenge]



class VaultCardPreviousChallenge:
    PreviousChallengeSeed: int
    PreviousChallenge: unreal.UClass



class VaultCardRewardList:
    UnlockedVaultCardRewards: unreal.WrappedArray[VaultCardRewardInfo]
    RedeemedVaultCardRewards: unreal.WrappedArray[VaultCardRewardInfo]
    RedeemedVaultCardGearRewards: unreal.WrappedArray[VaultCardGearRewardInfo]



class VaultCardGearRewardInfo: ...


class VaultCardRewardInfo: ...


class PremiumCurrencyManager:
    Currencies: unreal.WrappedArray[PremiumCurrencyData]
    Owner: OakPlayerController



class PremiumCurrencyData:
    CategoryData: gbx_game_system_core.GbxInventoryCategoryData



class MessageHandle: ...


class UnlockedPlayerEchoLogData:
    EchoLogData: EchoLogData



class CrewQuartersRoomInfo:
    RoomItemData: CrewQuartersRoomItemData
    IsNew: bool



class CrewQuartersDecorationInfo:
    DecorationItemData: CrewQuartersDecorationItemData
    IsNew: bool



class OakInventoryCustomizationPartInfo:
    CustomizationPart: OakInventoryCustomizationPartData
    bIsNew: bool



class OakCustomizationInfo:
    Customization: OakCustomizationData
    IsNew: bool



class OakPlayerPath: ...


class TriggerFeedbackState:
    WeaponTriggerFeedback: gbx_weapon.WeaponTriggerFeedbackAsset



class OrphanedUIStandIn:
    StandInActor: engine.Actor
    Container: OakUIActorContainer



class OutstandingActivityFeedData:
    FeedData: ActivityFeedReward
    ChallengeLevelTargetValue: int
    ChallengeLevelCompleted: int



class ClientExpectedSaveGameValues:
    bWaitingForServer: bool
    ExperiencePoints: int
    ResourcePools: unreal.WrappedArray[ResourcePoolSavegameData]
    Abilities: OakPlayerAbilitySaveGameData
    InventoryList: unreal.WrappedArray[gbx_inventory.InventorySaveGameData]
    SDUList: unreal.WrappedArray[OakSDUSaveGameData]



class OakSDUSaveGameData:
    SDULevel: int
    SDUDataPath: str



class OakPlayerAbilitySaveGameData:
    TreeGrade: int
    AbilityPoints: int
    TreeItemList: unreal.WrappedArray[OakAbilityTreeItemSaveGameData]
    AbilitySlotList: unreal.WrappedArray[OakAbilitySlotSaveGameData]
    AugmentSlotList: unreal.WrappedArray[OakActionAbilityAugmentSaveGameData]
    AugmentConfigurationList: unreal.WrappedArray[OakActionAbilityAugmentConfigurationSaveGameData]



class OakActionAbilityAugmentConfigurationSaveGameData: ...


class OakActionAbilityAugmentSaveGameData: ...


class OakAbilitySlotSaveGameData: ...


class OakAbilityTreeItemSaveGameData:
    Points: int
    MaxPoints: int
    TreeIdentifier: int



class ResourcePoolSavegameData:
    Amount: float



class PlayerPainSoundData:
    HealthPercentThreshold: float
    SoundTag: gbx_audio.CharacterSoundTag



class ReplicatedPlayerEchoDeviceState:
    bWantsToBeActive: bool
    EquipType: gbx_weapon.EWeaponEquipType
    ScreenName: str



class OakSDUContainer(engine.FastArraySerializer):
    SDUList: unreal.WrappedArray[OakSDUEntry]
    SDUAttributeModifiers: unreal.WrappedArray[gbx_game_system_core.GbxAttributeModifierHandle]



class OakSDUEntry(engine.FastArraySerializerItem):
    SDUData: OakSDUData
    SDULevel: int



class PlayerEchoDeviceState:
    EchoDeviceBlueprint: unreal.UClass
    OverrideScreenDataTable: engine.DataTable
    OffsetInterpSpeed: float
    RotationInterpSpeed: float
    BaseScreenPositionOffset: core_uobject.Vector2D
    DepthOffset: float
    EchoDevice: EchoDevice
    bIsAttached: bool
    IdleScreenName: str
    CurrentScreenName: str
    NextScreenName: str
    ButtonStates: EchoDeviceButtonState
    DPadAxes: core_uobject.Vector2D
    LastDPadAxes: core_uobject.Vector2D
    CurrentMenuName: str
    CurrentScreenPosition: core_uobject.Vector2D
    CurrentRotationOffset: core_uobject.Rotator
    ProjectionFXPosition: EchoDeviceTargetFXPosition
    CachedInMenuFXTransform: core_uobject.Transform



class EchoDeviceTargetFXPosition:
    UIObject: gbx_ui.GbxGFxObject



class EchoDeviceButtonState:
    bPressed: bool
    AutoReleaseDelay: float



class LootableEventResultItem:
    OrderIndex: int
    bDisplayNameIsInventoryDataName: bool
    DisplayNameParts: unreal.WrappedArray[gbx_inventory.InventoryNamePartData]
    SerialNumber: str
    MonetaryValue: int
    InventoryScoreValue: int
    bHasAFoilPart: bool
    Stats: gbx_game_system_core.CachedUIStatCollectionData
    Base64EncodedThumbnail: str
    BalanceStateComp: gbx_inventory.InventoryBalanceStateComponent



class ShieldEffectStateData:
    Owner: OakStatusEffectManagerComponent
    State: EShieldEffectState
    RelativeHitLocation: engine.Vector_NetQuantize
    NextHitTime: float



class OakEffectPresentationManager(engine.FastArraySerializer):
    Owner: OakStatusEffectManagerComponent
    Items: unreal.WrappedArray[OakEffectPresentationItem]
    ParticleSystemWrappers: unreal.WrappedArray[OakPresentationParticleSystemWrapper]
    PresentationTransitionInstances: unreal.WrappedArray[OakPresentationParamTransitionInstance]
    FreezePresentation: OakFreezePresentation
    MeshComponentTracker: AppliedMeshComponentTracker



class AppliedMeshComponentTracker:
    ManagerComponent: OakStatusEffectManagerComponent
    TrackedMeshes: unreal.WrappedArray[engine.MeshComponent]
    ChildTargetActors: unreal.WrappedArray[engine.Actor]



class OakFreezePresentation:
    Data: OakFreezeData
    DestructibleComponents: unreal.WrappedArray[apex_destruction.DestructibleComponent]
    StaticMeshComponents: unreal.WrappedArray[engine.StaticMeshComponent]
    GroundDecalComponent: engine.DecalComponent



class OakPresentationParamTransitionInstance:
    FXData: OakStatusEffectPresentationData
    ScreenComponent: engine.ParticleSystemComponent



class OakPresentationParticleSystemWrapper:
    Component: engine.ParticleSystemComponent



class OakEffectPresentationItem(engine.FastArraySerializerItem):
    FXData: OakStatusEffectPresentationData
    EffectValue: float
    EffectAudioInstance: wwise_audio.WwisePlaybackInstance



class OakElementalAuraEffectInstance:
    Data: OakElementalAuraEffectData



class OakElementalAuraEffectData:
    ElementalEffectData: OakElementalEffectData
    DamageData: unreal.UClass
    DamageRadius: gbx_game_system_core.AttributeInitializationData
    DamagedActorModifier: gbx_game_system_core.GbxAttributeData
    DamageCauserModifier: gbx_game_system_core.GbxAttributeData
    DamageRate: float



class ActiveOakResourceEffect:
    ResourceEffectData: OakResourceEffectData
    ResourcePoolReference: gbx_game_system_core.GameResourcePoolReference
    ResourceLock: gbx_game_system_core.ResourceLock



class StreamerBoosterStatus:
    Owner: OakStatusEffectManagerComponent
    PrimaryBoosterStatusIndex: int
    SecondaryBoosterStatusIndex: int
    TimeDuration: float
    TimeRemaining: float



class CSBoosterStatus:
    Owner: OakStatusEffectManagerComponent
    BoosterStatusIndex: int
    TimeDuration: float
    TimeRemaining: float



class CryoFreezeAssetData:
    Mesh: apex_destruction.DestructibleMesh
    AssociatedComponentName: str



class OakUIInventoryItemDisplayInfo:
    ItemName: str
    ItemLevel: int
    ItemDescription: str
    ManufacturerName: str
    ItemScore: int
    bNew: bool
    bFavorite: bool
    bTrash: bool
    bCanEquip: bool
    bIsEquipped: bool
    bCellLocked: bool
    bCellUnavailable: bool
    ReferenceObject: unreal.UObject
    PickupOrderIndex: int
    ListEntry: gbx_inventory.InventoryListEntry
    ItemHandle: gbx_inventory.InventoryListEntryHandle
    ItemActor: engine.Actor
    RarityData: gbx_inventory.InventoryRarityData
    ManufacturerData: gbx_inventory.ManufacturerData
    DamageType: gbx_game_system_core.GbxDamageType
    SpecialSortName: str
    UseType: EOakUIInventoryItemUseType
    bUseCosmeticLabel: bool



class InteractiveObjectTrapEntry:
    TrapActor: InteractiveObject
    ActivationType: EInteractiveObjectTrapActivationType
    InstructionDelay: float



class ZoneMapIconInfo:
    TargetActor: engine.Actor
    IconAnchor: MapIconAnchor
    IconPOIComponent: engine.PrimitiveComponent
    IconActor: OakZoneMapIcon_POI
    IconClass: unreal.UClass
    IconGuid: core_uobject.Guid
    IconLocation: core_uobject.Vector
    IconRotation: core_uobject.Rotator
    ChallengeComponent: gbx_game_system_core.ChallengeLevelActorComponent
    DisplayName: str
    Description: str
    IconFrameName: str
    bIsDynamic: bool
    bShowDynamicInNonCurrentMap: bool
    bIsPlayer: bool
    bShowInMiniMap: bool
    bShowInZoneMap: bool
    POIEntry: ZoneMapPOIEntry
    MissionWaypointEntry: ZoneMapMissionWaypointEntry
    ChallengeEntry: ZoneMapChallengeEntry
    TargetedVehicle: OakVehicle
    WaypointStatus: int
    bMissionTrackerIcon: bool
    bOutOfMapWaypoint: bool
    ChallengeStatus: int
    ChallengeClass: unreal.UClass



class ZoneMapChallengeEntry:
    ChallengeActorName: str
    ChallengeWaypointTransform: core_uobject.Transform
    ChallengeWaypointFODTexelCoords: core_uobject.IntPoint
    ChallengeClass: unreal.UClass
    ChallengeGUID: core_uobject.Guid



class ZoneMapMissionWaypointEntry:
    PointOfInterestType: ZoneMapPOITypeData
    MissionWaypointObjectName: str
    MissionWaypointTransform: core_uobject.Transform
    MissionWaypointRadius: int
    MissionObjectives: unreal.WrappedArray[gbx_mission.MissionObjectiveReferenceWeak]
    MissionDirectorName: gbx_game_system_core.GbxUIFormattedText
    BlacklistIndex: int
    bOutOfMap: bool
    bHideMissionAreaWaypoint: bool
    AreaComponentClassOverride: unreal.UClass



class ZoneMapPOIEntry:
    PointOfInterestType: ZoneMapPOITypeData
    PointOfInterestObjectName: str
    PointOfInterestTransform: core_uobject.Transform
    PointOfInterestFODTexelCoords: core_uobject.IntPoint
    CustomPOIData: unreal.UObject



class ZoneMapChallengeQuery:
    ChallengeClass: unreal.UClass
    ChallengeStatus: int
    IconActor: OakZoneMapIcon_POI



class PlayerIconInfo:
    AssociatedPlayer: OakPlayerState
    AssociatedCharacter: OakCharacter_Player
    PlayerIconMesh: engine.StaticMeshComponent
    LastPlayerLocation: core_uobject.Vector
    LastPlayerRotation: core_uobject.Rotator



class ZoneMapLevelMeshInfo:
    MapMesh: engine.StaticMeshComponent
    MapMeshDMI: engine.MaterialInstanceDynamic
    MapTranslucentMesh: engine.StaticMeshComponent
    MapTranslucentMeshDMI: engine.MaterialInstanceDynamic
    MeshDisplayCondition: gbx_runtime.GbxCondition



class ZoneMapDynamicPOIEntry:
    POIType: ZoneMapPOITypeData
    bShowInMiniMap: bool
    bShowInZoneMap: bool



class OakLevelSyncMessageText:
    TitleText: str
    PlayerStateDescriptionText: str
    AnonymousDescriptionText: str
    OnScreenDuration: float



class UIManagerMessage:
    Title: str
    PlayerName: str
    Description: str
    Glyph: str
    CommandText: str
    IconFrame: str
    IntroSound: str
    OutroSound: str
    bIsBlocking: bool
    bTimedMessage: bool
    TimeCreated: float
    TimeRemaining: float
    bDisplaySpinner: bool
    SpecialType: EMessageSpecialType
    BrushInfo: BrushInfo
    Handle: MessageHandle
    OtherPlayerState: OakPlayerState



class BrushInfo:
    SlateBrush: slate_core.SlateBrush



class SectorDistance: ...


class SectorFromBP:
    SectorRoot: engine.SceneComponent
    FakeEmissiveWholeFloor: engine.StaticMeshComponent
    PropaneAudioComponent: wwise_audio.WwiseAudioComponent
    HeatingElements: unreal.WrappedArray[engine.StaticMeshComponent]
    FakeEmissives: unreal.WrappedArray[engine.StaticMeshComponent]
    DamageZones: unreal.WrappedArray[engine.StaticMeshComponent]
    Bursts: unreal.WrappedArray[engine.ParticleSystemComponent]
    HeatHazes: unreal.WrappedArray[engine.ParticleSystemComponent]
    Anticipations: unreal.WrappedArray[engine.ParticleSystemComponent]



class Sector: ...


class Ring: ...


class AIOOrientedParticleData:
    ParticleSystem: engine.ParticleSystem
    OriginSocket: str
    ParticleBeamTargetParameterName: str
    DefaultBeamTargetPosition: core_uobject.Vector
    ParticleComponent: engine.ParticleSystemComponent
    Target: AIOOrientedParticleTarget



class AIOOrientedParticleTarget: ...


class AgonizerAttackDataTableRow(engine.TableRowBase):
    CooldownMin: float
    CooldownMax: float



class FloorSectorDistance: ...


class FloorSector: ...


class FloorSectorRing: ...


class AIAspectSettings_Dialog:
    ConditionalDialogEvents: unreal.WrappedArray[AIAspectSettings_DialogCondition]
    DialogEvent: gbx_dialog.DialogEvent
    DialogParams: unreal.WrappedArray[gbx_game_system_core.GbxNamedParam]
    DialogParamAssets: unreal.WrappedArray[gbx_dialog.DialogParameter]
    DialogStartDelay: gbx_game_system_core.GbxParam
    DialogCooldownTime: gbx_game_system_core.GbxParam
    bUseDialogCooldownTime: bool
    bPlayOnStop: bool



class AIAspectSettings_DialogCondition:
    Condition: gbx_game_system_core.GbxParam
    DialogEvent: gbx_dialog.DialogEvent



class AIAspectSettings_MovePath:
    NodeTag: str
    bAllowPathSegment: bool
    IntermediatePath: PathSegmentSetting



class PathSegmentSetting:
    ReachDistance: float
    ReachHeight: float
    SnapGroundDistance: float
    GoalModifiers: gbx_nav.GbxNavGoalModifiers



class AIAspectSettings_Revive:
    Target: gbx_game_system_core.GbxBlackboardKeySelector
    ReviveDistance: gbx_game_system_core.GbxParam



class AIAspectSettings_VehicleArchetype:
    VehicleArchetype: int
    bInverted: bool



class AIAspectSettings_VehicleAttitude:
    Attitude: int
    Inverted: bool



class AIAspectSettings_VehicleDriverLeaves:
    bInverted: bool



class AIAspectSettings_VehicleDriving:
    DisableTurnHandBrake: gbx_game_system_core.GbxParam



class AIAspectSettings_VehicleEscortSpeed:
    NearDistance: gbx_game_system_core.GbxParam
    FarDistance: gbx_game_system_core.GbxParam
    CatchUpSpeed: gbx_game_system_core.GbxParam
    GoalUpdateDistance: float
    AnticipationTime: float
    bValidatePath: bool
    EscortPathValidation: EscortPathValidation



class EscortPathValidation:
    RotateAngleToSearchPath: float
    ValidatePathAnticipationTime: float
    ValidatePathFowardDistance: float
    ValidatePathIteration: int
    bCanGoIfValidationFailed: bool



class AIAspectSettings_VehicleHorn:
    HornSequence: unreal.WrappedArray[HornSequenceEntry]
    bStopWithAction: bool



class AIAspectSettings_VehicleParts:
    bInverted: bool



class AIAspectSettings_VehicleSpeed:
    WantedSpeed: gbx_game_system_core.GbxParam
    bUseWantedSpeed: bool
    WantedSteering: gbx_game_system_core.GbxParam
    bUseWantedSteering: bool
    MaxSpeed: gbx_game_system_core.GbxParam
    UseBoost: gbx_game_system_core.GbxParam
    ForceReverse: gbx_game_system_core.GbxParam
    GoBackward: gbx_game_system_core.GbxParam
    ForceHandbrake: gbx_game_system_core.GbxParam
    SpeedHack: gbx_game_system_core.GbxParam
    RubberbandSpeed: RubberbandSpeed
    bUseRubberbandSpeed: bool
    Duration: gbx_game_system_core.GbxParam
    bUseDuration: bool



class RubberbandSpeed:
    RubberbandTargetKey: gbx_game_system_core.GbxBlackboardKeySelector
    MinDistance: gbx_game_system_core.GbxParam
    MaxDistance: gbx_game_system_core.GbxParam
    MaxSpeed: gbx_game_system_core.GbxParam
    MinSpeed: gbx_game_system_core.GbxParam
    bBehindOnly: bool



class AnointedEnemyData:
    PreFreezeAction: unreal.UClass
    FailsafeDestroyDelay: float
    bSuppressItemPoolsForFailsafeShatter: bool



class AIPlayThroughData:
    bOverrideUIDisplayName: bool
    bOverrideDisplayName: bool
    bOverrideDropOnDeathItemPools: bool
    bOverrideEquippedItems: bool
    bOverrideHealthInformation: bool
    DisplayUIName: gbx_game_system_core.GbxUIName
    DisplayName: str
    DropOnDeathItemPools: gbx_inventory.ItemPoolCollection
    EquippedItemPoolCollection: gbx_inventory.ItemPoolCollection
    EquippedItemPoolCollections: unreal.WrappedArray[gbx_inventory.ItemPoolCollection]
    bEquipSingleItemFromCollection: bool
    AttributeStartingValues: unreal.WrappedArray[gbx_game_system_core.AttributeBaseValueData]
    BalanceTableRow: engine.DataTableRowHandle
    HealthInformation: unreal.WrappedArray[gbx_game_system_core.HealthType]



class AILootDropOverride:
    bOverrideDropPattern: bool
    bOverrideSocketName: bool
    bDisabledByDefault: bool
    SocketName: str
    OverrideDropPattern: LootSpawnPatternData



class DodgeVOInfo:
    DialogEvent: gbx_dialog.DialogEvent
    VocalizationTag: gbx_audio.CharacterSoundTag



class AIOCameraEntryTransition:
    TransitionName: str
    AngleRange: gbx_runtime.NumericRange
    StartLocation: core_uobject.Vector
    bOverrideLocationDuration: bool
    LocationDurationOverride: float
    bOverrideRotationDuration: bool
    RotationDurationOverride: float



class AIOCameraStateInfo:
    StateName: str
    TargetLocation: core_uobject.Vector
    TargetLocationSplitscreen: core_uobject.Vector
    TargetLocationVerticalSplitscreen: core_uobject.Vector
    TargetLocationQuadSplitscreen: core_uobject.Vector
    TargetLookAtLocation: core_uobject.Vector
    TargetLookAtLocationSplitscreen: core_uobject.Vector
    TargetLookAtLocationVerticalSplitscreen: core_uobject.Vector
    TargetLookAtLocationQuadSplitscreen: core_uobject.Vector
    Easing: gbx_game_system_core.GbxEasingFunc
    TransitionDuration: float
    PostProcessOverrides: AIOCameraStatePostProcessOverrides



class AIOCameraStatePostProcessOverrides:
    bOverrideFocalDistance: bool
    bOverrideFarTransitionRegion: bool
    bOverrideNearTransitionRegion: bool
    bOverrideFocalRegion: bool
    bOverrideFarBlurSize: bool
    bOverrideNearBlurSize: bool
    bOverrideVignetteIntensity: bool
    FocalDistanceOverride: float
    FarTransitionRegionOverride: float
    NearTransitionRegionOverride: float
    FocalRegionOverride: float
    FarBlurSizeOverride: float
    NearBlurSizeOverride: float
    VignetteIntensityOverride: float



class ReplicatedStolenProjectileData:
    Socket: str
    Projectile: engine.Actor



class AnimNode_Carnivora(anim_graph_runtime.AnimNode_SkeletalControlBase):
    MaxYawFrontWheel: float
    MinYawFrontWheel: float
    MaxYawTireTrack: float
    MinYawTireTrack: float
    MinTrackShaftBoneScale: float
    MaxTrackShaftBoneScale: float
    FrontWheelsMinHeight: float
    FrontWheelsMaxHeight: float
    TireTrackMinHeight: float
    TireTrackMaxHeight: float
    FrontWheelRadius: float
    TireTrackWheelsRadius: float
    SmallGearRadius: float
    BigAxleRadius: float
    MainAxleRadius: float



class AnimNode_EmperorHandler(anim_graph_runtime.AnimNode_SkeletalControlBase):
    SuspensionDropMaxSpeed: float
    SlidingInterpolationSpeed: float
    SlidingDisplacement: core_uobject.Vector2D
    SinPeriod1: float
    SinPeriod2: float
    SinPeriod3: float
    SinAmplitude1: float
    SinAmplitude2: float
    SinAmplitude3: float
    SwivelConeX: float
    SwivelConeY: float
    HoverIntrepSpeed: float
    HoverBodyHeigth: float
    InoccupiedHoverBodyHeigth: float



class AnimNode_OutrunnerBooster(anim_graph_runtime.AnimNode_SkeletalControlBase): ...


class AnimNode_OutrunnerHandler(anim_graph_runtime.AnimNode_SkeletalControlBase):
    SuspensionDropMaxSpeed: float
    AccelInterpSpeed: float
    AccelerationTreshold: float
    TurningVelocityTreshold: float
    PitchInterpSpeed: float
    RollInterpSpeed: float
    RollMaxAngle: float
    BoostAlphaInterSpeed: float
    BankingBoostAlpha: float
    PitchAccelerationCurve: engine.RuntimeFloatCurve
    TranslationUpAccelerationCurve: engine.RuntimeFloatCurve
    MaxSteeringAngle: float
    BoostBodyTranslation: core_uobject.Vector
    BoostBodyPitchAdd: float
    RoadSurfaceAmplitudePitchHighFreq: float
    RoadSurfaceFrequencyPitchHighFreq: float
    RoadSurfaceFrequencyRollFreq: float
    RoadSurfacePersistencePitchHighFreq: float
    RoadSurfaceOctavesPitchHighFreq: int
    RoadSurfaceAmplitudePitchLowFreq: float
    RoadSurfaceFrequencyPitchLowFreq: float
    RoadSurfacePersistencePitchLowFreq: float
    RoadSurfaceOctavesPitchLowFreq: int
    BodyFollowSpeedOfPitch: float
    BodyFollowAmplitudeMultiplier: float
    MinTimeToSwitch: float
    MaxTimeToSwitch: float
    MinBumpTimeValue: float
    MaxBumpTimeValue: float
    MinAlphaValue: float
    MaxAlphaValue: float
    MinInterpSpeed: float
    MaxInterpSpeed: float
    DefaultRoadBumpiness: float
    RoadBumpinessOverrides: unreal.WrappedArray[RoadBumpinessDataOutrunner]
    HoverWheelSpeedWhenTurningOnSelf: float
    HoverWheelAngle: float
    HoverWheelRearLeftPos: core_uobject.Vector
    HoverWheelRearRightPos: core_uobject.Vector
    HoverSpinSpeedIdle: float
    HoverOffsetZ: float
    HoverSuspensionArmAngleOffset: float
    HoverSuspensionArmAmplitude: float
    HoverSuspensionArmSpeed: float
    HoverMaxPitchAngle: float
    HoverMaxRollAngle: float
    HoverSpinSpeedFullTrottle: float
    HoverSpinMaxSpeedAngularVelocity: float
    HoverMaxVelocity: float
    HoverPitchInterpSpeed: float
    HoverPitchBoostingInterpSpeed: float
    HoverRollInterpSpeed: float
    HoverBodyAccelTreshold: float
    HoverBodyActiveBlend: float
    HoverVelocityIntensityX: float
    HoverVelocityIntensityY: float
    HoverWheelRotationIntensity: float
    HoverWheelRotationIntensityY: float
    HoverBodySin: unreal.WrappedArray[HoverBodySinusOutrunner]
    SwivelCone: core_uobject.Vector2D
    HoverBodyTransitionCurve: engine.RuntimeFloatCurve



class HoverBodySinusOutrunner:
    HoverScale: core_uobject.Vector
    OffsetX: float
    OffsetY: float
    Frequency: float
    Amplitude: float



class RoadBumpinessDataOutrunner:
    SurfaceType: int
    Bumpiness: float



class AnimNode_RevolverBooster(anim_graph_runtime.AnimNode_SkeletalControlBase):
    BodyCycleFromEngineCycleRatio: float
    IdleRPM: float
    EngineRunningAmplitude: float
    EngineIdleAmplitude: float
    MufflerAmplitudeMutliplier: float
    EngineRunningFrequency: float
    EngineIdleFrequency: float
    MufflerFrequencyMutliplier: float



class AnimNode_RevolverHandler(anim_graph_runtime.AnimNode_SkeletalControlBase):
    MaxSteeringAngle: float
    SinPeriod1: float
    SinPeriod2: float
    SinPeriod3: float
    SinAmplitude1: float
    SinAmplitude2: float
    SinAmplitude3: float
    SwivelConeX: float
    SwivelConeY: float
    SwivelPeriodX: float
    SwivelPeriodY: float
    HoverIntrepSpeed: float
    BodyCompensationInterpSpeed: float
    HoverBodyCompensationInterpSpeed: float
    BodyOffsetInterpSpeed: float
    BodyHoverOffset: float
    PositionOffsetFromRotation: float
    HoverMaxPitchAngle: float
    HoverMaxRollAngle: float
    HoverPitchInterpSpeed: float
    HoverPitchBoostingInterpSpeed: float
    HoverRollInterpSpeed: float
    AccelerationCurve: engine.RuntimeFloatCurve



class AnimNode_TechnicalHandler(anim_graph_runtime.AnimNode_SkeletalControlBase):
    SuspensionDropMaxSpeed: float
    SuspensionCamberCurve: engine.RuntimeFloatCurve
    CamberIntensity: float
    BigWheelsBodyZ: float
    AccelerationTreshold: float
    TurningVelocityTreshold: float
    PitchInterpSpeed: float
    RollInterpSpeed: float
    RollMaxAngle: float
    BankingBoostAlpha: float
    PitchAccelerationCurve: engine.RuntimeFloatCurve
    BoostBodyPitchAdd: float
    BoostBodyUpAdd: float
    MaxSteeringAngle: float
    RoadSurfaceAmplitudePitchHighFreq: float
    RoadSurfaceFrequencyPitchHighFreq: float
    RoadSurfaceFrequencyRollFreq: float
    RoadSurfacePersistencePitchHighFreq: float
    RoadSurfaceOctavesPitchHighFreq: int
    RoadSurfaceAmplitudePitchLowFreq: float
    RoadSurfaceFrequencyPitchLowFreq: float
    RoadSurfacePersistencePitchLowFreq: float
    RoadSurfaceOctavesPitchLowFreq: int
    BodyFollowSpeedOfPitch: float
    BodyFollowAmplitudeMultiplier: float
    MinTimeToSwitch: float
    MaxTimeToSwitch: float
    MinBumpTimeValue: float
    MaxBumpTimeValue: float
    MinAlphaValue: float
    MaxAlphaValue: float
    MinInterpSpeed: float
    MaxInterpSpeed: float
    DefaultRoadBumpiness: float
    RoadBumpinessOverrides: unreal.WrappedArray[RoadBumpinessData]
    EngineAmplitude: float
    BodyCycleFromEngineCycleRatio: float
    IdleRPM: float
    HoverWheelAngle: float
    HoverSpinSpeedIdle: float
    HoverSpinSpeedFullTrottle: float
    HoverOffsetZ: float
    HoverFrontWheelAdd: float
    HoverMaxVelocity: float
    HoverSuspensionIntensityUp: float
    HoverSuspensionIntensityDown: float
    HoverBodySin: unreal.WrappedArray[HoverBodySinus]
    SwivelCone: core_uobject.Vector2D
    HoverMaxPitchAngle: float
    HoverMaxRollAngle: float
    HoverPitchInterpSpeed: float
    HoverPitchBoostingInterpSpeed: float
    HoverRollInterpSpeed: float
    HoverWheelRotationIntensity: float
    HoverWheelRotationIntensityY: float
    HoverBodyTransitionCurve: engine.RuntimeFloatCurve



class HoverBodySinus:
    HoverScale: core_uobject.Vector
    OffsetX: float
    OffsetY: float
    Frequency: float
    Amplitude: float



class RoadBumpinessData:
    SurfaceType: int
    Bumpiness: float



class AnimNode_TrailerHandler(anim_graph_runtime.AnimNode_SkeletalControlBase):
    SuspensionDropMaxSpeed: float



class AnimNode_WeaponVehicleHandler(anim_graph_runtime.AnimNode_SkeletalControlBase):
    bUseYawBone: bool
    bUsePitchBone: bool
    PitchMinAngleClamp: float
    PitchMaxAngleClamp: float
    bUseProjectileBone: bool
    bIsDualWeapon: bool
    bUseBoneReTargeting: bool
    SourceBone: engine.BoneReference
    DestBone: engine.BoneReference



class BeastmasterPetStencilData:
    OutlineColor: core_uobject.LinearColor
    OutlineThickness: int



class BeastmasterStandInActionSkillData:
    CustomActor: unreal.UClass
    CustomActorTranslationOffset: core_uobject.Vector
    CustomCE: unreal.UClass
    SkillAnimation: unreal.UClass
    PetAnimation: unreal.UClass
    PetAnimationDelay: float
    PetScaleCurve: engine.RuntimeFloatCurve



class BeastmasterStandInPetData:
    PetBlueprint: unreal.UClass
    CustomPetSpawnCE: unreal.UClass
    EnrageScale: float
    Translation: core_uobject.Vector
    Rotation: core_uobject.Rotator



class BehindTheScenesCategory:
    CategoryName: str
    Items: unreal.WrappedArray[BehindTheScenesItem]



class BehindTheScenesItem:
    Content: BehindTheScenesMediaContainer
    MediaLabelText: str
    ItemType: EBehindTheScenesItemType



class BlackJackCardDefinition:
    DebugString: str
    CardValue: int
    SuitIndex: int
    CardIndex: int



class DialogParameterValuePair:
    Parameter: gbx_dialog.DialogParameter
    Value: gbx_game_system_core.GbxParam



class LadderBehaviorGoalParams:
    bControlPitch: bool
    bControlYaw: bool
    bInterruptedByInput: bool
    bDisableInput: bool
    Pitch: gbx_camera_modes.InitialRotationAxisParams
    Yaw: gbx_camera_modes.InitialRotationAxisParams



class CameraIntroBlend:
    TimeBeforeAllowingMovingCamera: float
    StartBlend: float
    EndBlend: float
    bUseACurve: bool
    BlendByCurve: engine.RuntimeFloatCurve
    DampingLocation: float
    DampingRotation: float



class CameraPitchOffset:
    KeyYawAngle: float
    ForwardOffset: float
    UpwardOffset: float
    DampingBankingRatio: float
    CloneSymmetricalKey: bool



class CameraKeyOffset:
    TeleportFromStart: bool
    LookAtLocationOffset: core_uobject.Vector
    LocalCameraLocationOffset: core_uobject.Vector
    LocalCameraRotationOffset: core_uobject.Rotator
    AddedFOV: float



class CarnivoraFakeTurrets:
    ShootingStyle: ECarnivoraFakeTurretShootingStyle
    MinDelayBetweenBurstWave: float
    MinDelayInsideBurstShot: float
    NbBulletPerBurst: int
    SocketName: str
    LightProjectileData: unreal.UClass
    ProjectileSpeed: float
    MaxPrediction: float
    DamageType: unreal.UClass
    Range: float
    DistanceFromPoint: float
    MaxAngle: float
    DirectHitPct: float
    SpreadAngle: float
    DrawDebugProjectileLine: bool
    CurrentTargetActor: engine.Actor



class SplineTriggers:
    bIsReverse: bool
    NextSplineTriggerId: int



class WheelState:
    RelativeSpeed: float



class CarnivoraAnimInstanceProxy(engine.AnimInstanceProxy): ...


class CarnivoraDamageZoneInfo:
    FrontDamageMultiplier: float
    SideDamageMultiplier: float
    BackDamageMultiplier: float



class ChallengeFilterType:
    FilterName: str
    IncludedCategories: unreal.WrappedArray[gbx_game_system_core.ChallengeCategoryData]



class CharacterGroundSlamGradeData:
    MinimumHeight: float
    ControlledMove: unreal.UClass
    StartAction: unreal.UClass
    LandingDistance: float
    LandingAction: unreal.UClass



class CharacterItemPoolExpansionInfo:
    DropOnDeathItemPools: unreal.WrappedArray[gbx_inventory.ItemPoolInfo]



class ElementalSlideEffect:
    DefaultResponse: gbx_game_system_core.ImpactResponseEffect
    ImpactResponses: unreal.WrappedArray[gbx_game_system_core.ImpactResponseInfo]



class LastCollisionDamageInfo:
    HitActor: engine.Actor
    bOwnerIsCollider: bool
    RelativeVelocity: core_uobject.Vector



class TextElementCondition:
    Condition: gbx_runtime.GbxCondition
    TextToAdd: str



class CorpseRecord:
    Actor: engine.Actor
    CorpseStartTime: float



class CosmeticDamageEventDetails:
    Damage: float
    HitLocation: core_uobject.Vector
    HitDirection: core_uobject.Vector
    Instigator: engine.Actor
    DamageType: unreal.UClass
    DamageSource: unreal.UClass



class PlayerItemDisplayInfo:
    AssociatedPlayer: OakPlayerController
    AssociatedItem: engine.Actor
    AssociatedDisplayItem: engine.Actor



class CrewQuartersDecorationSaveData:
    DecorationIndex: int
    DecorationDataPath: str



class CrewQuartersDecorationItemSaveGameData:
    IsNew: bool



class CrewQuartersRoomAssignment:
    AssociatedPlayerClass: PlayerClassIdentifier
    AssociatedRoom: gbx_dynamic_room.DynamicRoomBaseData



class CrewQuartersGunRackSaveData:
    RackSaveData: unreal.WrappedArray[CrewQuartersGunRackItemSaveData]



class CrewQuartersGunRackItemSaveData:
    EncryptedSerialNumber: unreal.WrappedArray[int]
    DevelopmentSaveData: gbx_inventory.InventoryBalanceStateInitializationData
    SlotAssetPath: str



class CrewQuartersSaveData:
    PreferredRoomAssignment: int
    Decorations: unreal.WrappedArray[CrewQuartersDecorationSaveData]
    RoomDataPath: str



class CrewQuartersRoomItemSaveGameData:
    IsNew: bool
    RoomItemAssetPath: str



class CSBoosterInfo:
    NameId: str
    AnimName: str
    BoosterTextureName: str
    DisplayName: str
    Description: str
    UnlockDescription: str
    Price: int
    StatusEffectData: gbx_game_system_core.StatusEffectData
    EffectDuration: float
    Icon: engine.Texture



class IncomingDamagePresentationGlobalInfo:
    ScreenParticleHealth: engine.ParticleSystem
    ScreenParticleShield: engine.ParticleSystem
    ScreenParticleArmor: engine.ParticleSystem
    ScreenParticleHealth_SplitScreen: engine.ParticleSystem
    ScreenParticleShield_SplitScreen: engine.ParticleSystem
    ScreenParticleArmor_SplitScreen: engine.ParticleSystem
    DirectionalParticleEventName: str
    DirectionalEmitterName: str
    MaxNumDirectionalParticles: int
    FullParticleEventName: str
    FullEmitterName: str
    DamageSeverityParameterName: str
    DamageDirectionParameterName: str
    DamageParticleDirectionQuantization: float
    AspectRatioThresholdToUseWidescreenParticles: float
    FlinchAnimationStregthNoise: float
    FlinchAnimationAngleNoise: float
    RadialBlurMaxDistance: float
    PresentationLevels: IncomingDamagePresentationGenericData



class IncomingDamagePresentationGenericData: ...


class IncomingDamagePresentationSource:
    DamageSources: unreal.WrappedArray[unreal.UClass]
    PresentationGroup: IncomingDamagePresentationGroup



class IncomingDamagePresentationGroup:
    PresentationLevels: IncomingDamagePresentationData



class IncomingDamagePresentationData:
    DamageThreshold: gbx_game_system_core.AttributeInitializationData
    DamageScore: gbx_game_system_core.AttributeInitializationData
    DamageScoreThreshold: gbx_game_system_core.AttributeInitializationData
    FeedbackData: gbx_game_system_core.FeedbackData
    HealthAudioEvent: wwise_audio.WwiseEvent
    ShieldAudioEvent: wwise_audio.WwiseEvent
    ArmorAudioEvent: wwise_audio.WwiseEvent
    DamageSeverityParticleParamValue: float
    ArmsAnimationFlinchStrength: float
    bUseRadialBlur: bool
    RadialBlur: engine.RadialBlurSelection



class DebugMenuCommandItemData:
    Category: str
    Label: str
    Description: str
    ExecCommand: str



class DebugMenuGradebox:
    Panel: umg.CanvasPanel
    Image: umg.Image
    Description: umg.TextBlock
    Atts: unreal.WrappedArray[umg.TextBlock]



class GbxReportTag:
    bShowInMenu: bool
    Tag: str
    Description: str



class DefaultCrosshairData:
    Name: str
    XSpread: float
    YSpread: float



class DiscoverySaveData:
    DiscoveredLevelInfo: unreal.WrappedArray[DiscoveredLevelInfo]



class DiscoveredLevelInfo:
    DiscoveredLevelName: str
    DiscoveredAreas: unreal.WrappedArray[DiscoveredAreaInfo]



class DiscoveredAreaInfo:
    DiscoveredAreaName: str



class DiscoveredPlanetInfo:
    bIsNewPlanet: bool



class DlcLevelTravelPair:
    NonDlcStationData: gbx_travel_station.TravelStationData
    DlcStationData: gbx_travel_station.TravelStationData



class PlayerDuelArenaState:
    Player: OakCharacter_Player



class DuelModeSettings:
    DuelArenaTimeout: float
    DuelChallengeTimeout: float
    bUseDuelStartDelay: bool
    DuelStartDelay: float
    NumParticipantsInfo: unreal.WrappedArray[DuelingNumParticipantsInfo]
    DuelTotemSpawnTraceVertOffset: float
    DuelTotemSpawnInFrontDistance: float
    DuelTotemSpawnFindGroundDistance: float



class DuelingNumParticipantsInfo:
    NumPlayers: int
    MaxArenaSize: float
    DuelLength: float



class DuelTeamGroup:
    PlayerIndexToTeam: unreal.WrappedArray[gbx_game_system_core.Team]



class ActiveDuelState:
    ParticipatingTeams: unreal.WrappedArray[TeamActiveDuelState]
    DuelArena: DuelArena
    DuelTotem: DuelTotem
    DuelInstigator: OakCharacter_Player
    WinningTeam: gbx_game_system_core.Team
    DuelLosers: unreal.WrappedArray[DuelLoserState]
    TradeManager: PlayerTradeManager
    ActiveIndex: int
    Classification: EDuelClassification



class DuelLoserState:
    Player: OakCharacter_Player
    LoseReason: EDuelLoseReason



class TeamActiveDuelState:
    DuelTeam: gbx_game_system_core.Team
    Players: unreal.WrappedArray[PlayerActiveDuelState]



class PlayerActiveDuelState:
    PlayerCharacter: OakCharacter_Player
    bIsMainPlayer: bool
    DuelTeam: gbx_game_system_core.Team
    SavedInfo: PlayerDueling_SavedInfo



class PlayerDueling_SavedInfo:
    Team: gbx_game_system_core.Team



class EchoDeviceScreenData(engine.TableRowBase):
    MaterialInstance: engine.MaterialInstance
    Rate: float
    Sound: wwise_audio.WwiseEvent
    NextScreenName: str



class PlayerEchoDeviceOrientationData(engine.TableRowBase):
    bHideEchoInFirstPerson: bool
    bVerticalSplitscreenHideEchoInFirstPerson: bool
    bQuadSplitscreenHideEchoInFirstPerson: bool
    ScreenPosition: core_uobject.Vector2D
    SplitScreenScreenPosition: core_uobject.Vector2D
    VerticalSplitScreenScreenPosition: core_uobject.Vector2D
    QuadSplitScreenScreenPosition: core_uobject.Vector2D
    RotationOffset: core_uobject.Rotator
    SplitScreenRotationOffset: core_uobject.Rotator
    VerticalSplitScreenRotationOffset: core_uobject.Rotator
    QuadSplitScreenRotationOffset: core_uobject.Rotator



class EchoDeviceUIController:
    Config: EchoDeviceUIData
    bEquipEchoDevice: bool
    PrimaryCharacter: OakCharacter_Player



class EchoInfo:
    DialogPlayingID: int
    Caller: gbx_dialog.GbxDialogComponent
    CharacterData: CharacterEchoData
    PerformanceData: PerformanceEchoData
    AudioInstance: wwise_audio.WwisePlaybackInstance
    MoodKeyframeToUse: str
    VoGMoodKeyToUse: str
    VoGSpeakerID: gbx_dialog.EVoiceOfGodSpeaker
    bForceEchoOnly: bool



class ElementalInteractionDamageOverlapData: ...


class ElementalInteractionDamageValuesData: ...


class ElementalDamageTriggeredInteractionData:
    Interaction: ElementalInteractionData
    HitLocation: core_uobject.Vector
    InstigatorController: engine.Controller



class SupportedElementalInteractionData:
    State: ElementalInteractionData
    TransitionTimeScale: float
    DamageTriggeredTransitionTimeScale: float
    OverrideDamageTriggeredSourceDuration: float
    bOverrideDamageAmount: bool
    bOverrideBaseStatusEffectChance: bool
    bOverrideBaseStatusEffectDamage: bool
    bOverrideBaseStatusEffectDuration: bool
    OverrideDamageAmount: gbx_game_system_core.AttributeInitializationData
    OverrideBaseStatusEffectChance: gbx_game_system_core.AttributeInitializationData
    OverrideBaseStatusEffectDamage: gbx_game_system_core.AttributeInitializationData
    OverrideBaseStatusEffectDuration: gbx_game_system_core.AttributeInitializationData



class ElementalInteractionTransitionData:
    SourceInteraction: ElementalInteractionData
    TargetInteraction: ElementalInteractionData
    TransitionTime: float
    DamageTriggeredTransitionTime: float



class ElementalInteractionManagerPostPhysicsTickFunction(engine.TickFunction): ...


class ActorElementalDamageData:
    DamageCount: int



class ActorElementalInteractionDamageData:
    InstigatorController: engine.Controller



class ElementalPuddleTransitionConfigurationData:
    DecalMaterial: engine.MaterialInterface
    MeshMaterial: engine.MaterialInterface
    AudioLoop: wwise_audio.WwiseEvent
    PhysMatOverride: engine.PhysicalMaterial
    EmitterNames: unreal.WrappedArray[str]



class OakVehicleAnimInstanceProxy(phys_xvehicles.VehicleAnimInstanceProxy): ...


class EmperorVehicleAnimInstanceProxy(OakVehicleAnimInstanceProxy): ...


class PlayerVaultCardLevelFormula:
    BaseValue: float
    BaseMultiplier: float
    Multiplier: float
    Power: float
    Offset: float



class PlayerGuardianRankFormula:
    BaseValue: float
    BaseMultiplier: float
    Multiplier: float
    Power: float
    Offset: float



class PlayerExperienceFormula:
    Multiplier: float
    Power: float
    Offset: float



class LevelBasedExpScale:
    LevelDifference: int
    HigherLevelEnemyExpScale: float
    LowerLevelEnemyExpScale: float



class ExpAwardWeight:
    Players: int
    KillerExpBonus: float
    ExpWeight: float



class PaintedTarget:
    PaintedTarget: engine.Actor
    HUDIconInfo: HUDInWorldIconTargetInfo



class ReviveStateInformation:
    ReviveState: EReviveState
    ReviveSuccessful: bool



class FriendEventDataEntry(engine.TableRowBase):
    FriendEventType: EFriendEventType
    Priority: EFriendEventPriority
    ContainsSpoiler: bool
    BroadcastToSingleFriend: bool
    DisplayNotificationOnFriendHUD: bool
    bAlwaysShowNotification: bool
    DisplayEventOnTimeline: bool
    EventTitleText: str
    EventText: str



class ZoneIDToMissionEventReferenceData:
    ZoneNameEnumIdx: int
    MissionEventReference: gbx_mission.MissionEventReference



class MapIDToPlanetDataMappingData:
    MapID: int
    PlanetData: PlanetData



class PlanetMapDataToPlanetIdMappingData:
    PlanetData: PlanetData
    PlanetID: int



class ZoneIdToMapIdMappingData:
    ZoneNameEnumIdx: int
    MapNameEnumIdx: int



class GalaxySkyboxData:
    MapNameEnumIdx: int
    ZoneNameEnumIdx: int
    ArriveSequence: gbx_level_sequence.GbxLevelSequence
    ExitSequence: gbx_level_sequence.GbxLevelSequence



class DiscoveryIOData:
    DownloadableExpansionData: DownloadableExpansionData
    Transform: core_uobject.Transform



class VaultCardExportChallengeLists:
    AssociatedDLC: online_subsystem_utils.DownloadableContentData
    Challenges: unreal.WrappedArray[unreal.UClass]



class VaultCardActiveChallengeList: ...


class AmpedShotSettings:
    AmpedShotTracerFX: unreal.UClass
    AmpedShotBeamFX: unreal.UClass
    AmpedShotSound: wwise_audio.WwiseEvent



class OakVehicleManagerSettings:
    OakVehicleManagerUpdateTime: float
    TimeBeforeStartDamaging: float
    DamagePercentBySecond: float
    TimeBeforeDigistructOut: float
    TimeBeforeExplode: float
    DistanceToDigistruct: float
    NavCorrecterSearchRadius: float
    NavCorrecterDestroyDelay: float



class PickupEvaluationSettings:
    MinEvaluationHeight: float
    EvaluationWidth: float
    BoxExtentZFactor: float
    SelectedWidthBoost: float
    SelectedHeightBoost: float
    SelectedBoxZFactorBoost: float
    SelectedBoxZFactorBoost_Attached: float
    AttachedPickupPreferredBoxMaxHeight: float
    AttachedPickupTracedMeshPriorityBoost: float
    PickupStickiness: float
    MinLookAtTolerance: float
    SkipVisibilityTraceTestRange: float
    ItemCardBottomPickupOffset: float
    ItemCardUpperLootBeamHeight: float



class GbxGFxDialogBoxInfo:
    HeaderText: str
    BodyText: str
    Choices: unreal.WrappedArray[GbxGFxDialogBoxChoiceInfo]
    bKeybindingAllowGamepadInputs: bool
    bKeybindingAllowMouseKeyboardInputs: bool
    DialogBoxStyle: EGbxGFxDialogBoxStyle
    InputText: str
    bCanCloseWhenChoicesArrayIsEmpty: bool
    bInputTextField: bool
    bPasswordTextField: bool
    bAnyUserCanInteract: bool
    bCanCancel: bool
    bSuppressSpawnSound: bool
    InitialChoice: str
    InitialChoiceIndex: int
    ButtonType: EGbxGFxDialogBoxButtonType
    TargetPC: gbx_game_system_core.GbxPlayerController
    bAllowCloseWhenAnotherLocalPlayerLeaves: bool
    OverrideDefaultTemplate: GbxGFxDialogBoxData



class GbxGFxDialogBoxChoiceInfo:
    LabelText: str
    ActionName: str
    InputAction: str
    bCloseDialogOnSelection: bool
    bPressToHoldChoice: bool



class ReportReason:
    DisplayName: str
    Code: EShiftReportReason



class GbxInputEvent_OakLookAxis(gbx_input.GbxInputEvent_Axis_Core): ...


class GbxInputEvent_OakMoveAxis(gbx_input.GbxInputEvent_Axis_Core): ...


class GbxInputEvent_OakUIAxis(gbx_input.GbxInputEvent_Axis_Core):
    HoldTime: float



class DeathCircleStageData:
    Radius: gbx_game_system_core.AttributeInitializationData
    StableSeconds: gbx_game_system_core.AttributeInitializationData
    TransitionSeconds: gbx_game_system_core.AttributeInitializationData



class GFxBackpackWidget:
    ThumbnailManager: OakThumbnailManager
    bThumbnailMangerIsExternal: bool
    UIGlobals: UIGlobals
    Config: GFxBackpackWidgetConfig
    Items: unreal.WrappedArray[OakUIInventoryItemDisplayInfo]
    GridWidget: gbx_ui.GbxGFxGridScrollingList
    Listener: GFxBackpackWidgetListener
    bIsInited: bool
    FirstBackpackItemOfInterest: int
    LastSelectedBackpackItem: GFxBackpackWidgetItem
    bNeedsThumbnailsRefreshed: bool
    bDoNotManageThumbnailSweeping: bool
    bNeedsSweep: bool



class GFxBackpackWidgetConfig:
    GridWidgetPath: str
    GridWidgetConfig: gbx_ui.GbxGFxListConfig
    ItemBackpackSpaceMinIfInfinite: int
    NumBackpackIconsToKeep: int
    ItemBackpackSpaceMinLocked: int
    MinVisibleCells: int
    NumCellsToPreCreate: int
    BackpackItemScaleformClass: str
    EmptyBackpackItemScaleformClass: str
    ListItemNativeClass: unreal.UClass
    ButtonHelpText: str
    bUseTrashButtonStates: bool
    OakPC: OakPlayerController
    OwningMovie: gbx_ui.GbxGFxMovie
    GridWidgetParent: gbx_ui.GbxGFxObject



class GFxBuddyWidgetAnimQueueItem:
    TargetActor: engine.Actor



class GFxCARPreviewData:
    Vehicle: OakCARVehicleData
    Parts: unreal.WrappedArray[OakCARVehiclePartData]
    SelectedVehicle: OakCARVehicleData
    SelectedPart: OakCARVehiclePartData



class GFxCARMenuListData:
    ListClipName: str
    ListConfig: gbx_ui.GbxGFxPooledGridListFullConfig
    ListConfigSplitScreen: gbx_ui.GbxGFxPooledGridListFullConfig
    List: gbx_ui.GbxGFxPooledGridList



class GFxCARMenuLoadAssetInfo:
    StringAssetRef: core_uobject.SoftObjectPath



class GFxCARMenuPartInfo:
    PartName: str
    PartType: OakCARMenuPartType
    StageName: str
    ListName: str
    CustomizePanelFrameName: str
    AdjacentWidgets: gbx_ui.GbxFocusableWidgetAdjacencyNames
    AdjacentWidgetsSplitscreen: gbx_ui.GbxFocusableWidgetAdjacencyNames
    bCanSelectEmpty: bool
    BUTTON: GFxCARMenuPartButton
    Page: GFxCARMenuCustomizePage



class OakCARMenuPartType:
    bIsBody: bool
    PartType: ECARPartType



class GFxCARMenuCustomizePageConfig:
    CARMenuOwner: GFxCARMenu
    VehicleSpawner: VehicleSpawnerComponent
    ItemList: gbx_ui.GbxGFxPooledGridList
    PartType: OakCARMenuPartType
    bCanSelectEmpty: bool



class OakCARMenuStatCardStatInfo:
    Stat: OakCARVehiclePartStat
    AggregatedValue: float



class GFxChallengeProgressItem:
    FirstChallengeName: str
    SecondChallengeName: str
    bHasNameTransitioned: bool
    FirstDescription: str
    SecondDescription: str
    bHasDescriptionTransitioned: bool
    FirstTypeIconFrame: str
    SecondTypeIconFrame: str
    bHasIconTransitioned: bool
    bViewAsPercent: bool
    bViewOneOffCompletionNotProgress: bool
    ProgressPctToStartAnimFrom: float
    ProgressOutOfValue: int
    ProgressOutOfMax: int
    bChallengeWasCompleted: bool
    bHasPercentCompleteTransitioned: bool
    ChallengeClass: unreal.UClass
    bAddedAsProgressOfChildChallenge: bool
    ParentRanking: int



class PlayerClassInfo:
    PlayerStandInActorName: str
    ActorSocketName: str
    TextOffset: core_uobject.Vector2D
    DefaultPosition: core_uobject.Vector2D
    PlayerClassId: PlayerClassIdentifier



class OakUIControllerConnectedState:
    LocalPlayer: engine.LocalPlayer
    DisconnectMovie: GFxControllerDisconnectMovie



class OrganizationInfo:
    OrganizationId: str
    TextStyle: str
    TextEntry: str



class CreditsTableRow(engine.TableRowBase):
    FirstName: str
    LastName: str
    Title: str
    Organization: str
    ExtraText: str
    ExtraTextStyle: str



class CreditsSection:
    CreditsDataAssets: unreal.WrappedArray[CreditsDataAsset]
    CreditsImageDataList: unreal.WrappedArray[CreditsImageData]
    TransitionTimeBetweenImages: float
    HorizontalSpacing: float
    UserAnimationSpeed: float
    DefaultAnimationSpeed: float
    PauseTime: float
    bAllowScrollingCredits: bool
    ScrollingDelay: float
    DelayAfterLastCredit: float
    BackgroundMusicStartEvent: wwise_audio.WwiseEvent
    BackgroundMusicEndEvent: wwise_audio.WwiseEvent



class CreditsImageData:
    CreditsImage: core_uobject.SoftObjectPath
    ImageShowTime: float
    ImageMaxTime: float



class CreditsTextureCache:
    CreditsTexture: engine.Texture2D



class CreditsRangeIndex: ...


class CreditsTextFieldInfo:
    StyleId: str
    TextField: gbx_ui.GbxTextField



class CreditsLineInfo:
    StyleId: str
    TextEntry: str



class GFxCrewQuartersMoodMenuMoodInfo:
    RoomBaseData: gbx_dynamic_room.DynamicRoomBaseData
    bIsLocked: bool
    bIsNew: bool



class GFxCurrencyCounterCategoryData:
    ItemCategory: gbx_inventory.InventoryCategoryData
    LastValue: int



class GFxCurrencyCounterQueueInfo:
    ItemCategory: gbx_inventory.InventoryCategoryData
    DeltaValue: int
    StartTotal: int
    FinalTotal: int
    StartAudioEvent: str
    StopAudioEvent: str



class GFxDisplayNotificationWidgetTextFields:
    TextFieldPath: str



class GFxDuelTimerTotemData:
    TimerClip: GFxDuelTimerTotemObject
    AttachedDuelTotemComponent: OakDuelingWidgetTotemComponent
    bInUse: bool



class GFxDeulingNotificationRewardWin: ...


class LocalizationStatus:
    PanelTitle: str
    ShiftAccountLabel: str
    StreamingServiceLabel: str
    AccountNameLabel: str
    ExtensionVersionLabel: str
    ChannelTitleLabel: str
    CurrentViewerLabel: str



class StatusItem: ...


class GFxEchoNetMailboxMenu_Adjustment:
    ContextMenuOffsetExpandingDown: core_uobject.Vector2D
    ContextMenuOffsetExpandingUp: core_uobject.Vector2D



class GFxEchoNetMatchmakingActivityData:
    NormalData: GFxEchoNetMathcmakingActivitySubTypeData
    HeroicData: GFxEchoNetMathcmakingActivitySubTypeData
    ImageId: str
    bLookingAtHeroic: bool



class GFxEchoNetMathcmakingActivitySubTypeData:
    Guid: str
    bLocked: bool
    bFeatured: bool
    bIsHeroic: bool
    Name: str
    Description: str



class GFxEchoNetRosterMenu_Adjustment:
    ContextMenuOffsetExpandingDown: core_uobject.Vector2D
    ContextMenuOffsetExpandingUp: core_uobject.Vector2D



class GFxFriendsInAreaListMenu_Adjustment:
    ContextMenuOffsetExpandingDown: core_uobject.Vector2D
    ContextMenuOffsetExpandingUp: core_uobject.Vector2D



class GFxGameModeNotificationWidgetInfo:
    NotificationType: EGameModeNotificationType
    TimelinePosition: str
    ContentPath: str
    TextFieldPath: str
    TextFieldShadowPath: str
    DisplayedText: str



class GFxGrenadeIndicatorSortItem:
    Grenade: OakProjectile
    DistSq: float



class GFxInventoryMenuUnlockLookupItem:
    DisplayText: str



class GFxInventoryMenuEquipToSlot:
    ItemWidget: GFxInventoryItemWidget
    TrinketWidget: GFxInventoryMenuTrinketButton
    IconWidget: gbx_ui.GbxGFxObject
    bTrinketEnabled: bool
    SlotInfo: OakInventoryMenuPaperDollSlotInfo



class OakInventoryMenuPaperDollSlotInfo:
    WidgetName: str
    TrinketName: str
    SlotData: InventorySlotData
    SlotFilterId: str
    SlotIconWidgetName: str
    SlotIconFrame: str
    NoKeyBoundFrameName: str
    SlotIconInputAction: str
    Adjancency: EOakInventoryMenuPaperDollSlotAdjacency
    bUnlockedIsBeastmaster: bool
    bUnlockedIsExtraArtifacts: bool
    SplitScreenPage: int



class GFxInventoryMenuSwapItem:
    Side: EGFxInventoryMenuFocusSide
    ItemWidget: GFxInventoryItemWidget
    ItemObject: unreal.UObject



class GFxInventoryMenuConfig:
    WeaponCategory: gbx_inventory.InventoryCategoryData
    GrenadeCategory: gbx_inventory.InventoryCategoryData
    ShieldCategory: gbx_inventory.InventoryCategoryData
    GoldenKeyResourceData: gbx_inventory.InventoryCategoryData
    ErediumResourceData: gbx_inventory.InventoryCategoryData
    MoneyResourceData: gbx_inventory.InventoryCategoryData
    VaultCoinResourceData: gbx_inventory.InventoryCategoryData
    bReturnToBackpackWhenEquippingFromIt: bool
    bClearAllNewnessWhenLeavingMenu: bool
    bEnableInspect: bool
    SelectionHighlightColorForItemCard: core_uobject.LinearColor
    SelectionComparisonColorForItemCard: core_uobject.LinearColor
    ItemCardLineThickness: float
    PageFilters: unreal.WrappedArray[OakInventoryMenuFilter]
    ItemTypeSortPriorities: unreal.WrappedArray[OakInventoryMenuTypePriorityInfo]
    ItemGroupingsByType: unreal.WrappedArray[OakInventoryMenuItemGrouping]
    ItemGroupingsByManufacturer: unreal.WrappedArray[OakInventoryMenuItemGrouping]
    InputAction_Drop: str
    InputAction_DropByHolding: str
    InputAction_TrashFavorite: str
    InputAction_Inspect: str
    InputAction_Unequip: str
    PaperDollSlotSetup: unreal.WrappedArray[OakInventoryMenuPaperDollSlotInfo]
    AmmoTypes: unreal.WrappedArray[gbx_weapon.GbxAmmoTypeData]
    GrenadeAmmoType: gbx_weapon.GbxAmmoTypeData
    ItemInspectionMenuData: gbx_ui.GbxMenuData
    ItemCardMovie: scaleform_ui.SwfMovie
    ItemCardOffset: core_uobject.Vector2D
    ItemCardScale: float
    CompareItemCardOffset: core_uobject.Vector2D
    CompareItemCardScale: float
    BackpackConfig: GFxBackpackWidgetConfig
    TrinketIconsReserveCount: int
    TotalCurrencySpinnerHeightOverride: float
    CurrencyWidgetPauseOnNewValueTime: float
    CurrencyWidgetCostSpinTime: float
    TrinketsText: str
    Tutorials: GFxMenuTutorialCollection
    FirstBootTutorial: str
    GearUpModeTutorial: str
    LargeBackpackVisibleCells: int
    SmallBackpackVisibleCells: int
    bResortBackpackWhenAddingAndRemovingItems: bool
    DelayBeforeDragStart: float



class GFxMenuTutorialCollection:
    Tutorials: unreal.WrappedArray[GFxMenuTutorial]
    TintClips: unreal.WrappedArray[GFxMenuTutorialTintClipData]



class GFxMenuTutorialTintClipData:
    TintClipName: str
    TintClipPath: str
    TintClip: gbx_ui.GbxGFxObject



class GFxMenuTutorial:
    TutorialName: str
    TutorialSequence: GFxMenuTutorialSequence



class GFxMenuTutorialSequence:
    SequenceList: unreal.WrappedArray[GFxMenuTutorialState]



class GFxMenuTutorialState:
    DialogSize: EGFxMenuTutorialDialogSize
    FocusDirection: EGFxMenuTutorialFocusDirection
    SplitScreenFocusDirection: EGFxMenuTutorialFocusDirection
    VerticalSplitScreenFocusDirection: EGFxMenuTutorialFocusDirection
    QuadSplitScreenFocusDirection: EGFxMenuTutorialFocusDirection
    DialogOffset: core_uobject.Vector2D
    SplitScreenDialogOffset: core_uobject.Vector2D
    VerticalSplitScreenDialogOffset: core_uobject.Vector2D
    QuadSplitScreenDialogOffset: core_uobject.Vector2D
    HeaderText: str
    BodyText: str
    VisibleTintClipsNames: unreal.WrappedArray[str]
    SplitScreenVisibleTintClipsNames: unreal.WrappedArray[str]
    VerticalSplitScreenVisibleTintClipsNames: unreal.WrappedArray[str]
    QuadSplitScreenVisibleTintClipsNames: unreal.WrappedArray[str]
    AllowedInputAxes: unreal.WrappedArray[str]
    AllowedInputActions: unreal.WrappedArray[str]
    bAdvanceOnKeyPress: bool
    bAllowTutorialSkip: bool



class OakInventoryMenuItemGrouping:
    ID: str
    WeaponTypeData: gbx_weapon.WeaponTypeAsset
    ManufacturerData: gbx_inventory.ManufacturerData



class OakInventoryMenuTypePriorityInfo:
    ItemType: gbx_inventory.InventoryCategoryData
    WeaponTypeData: gbx_weapon.WeaponTypeAsset
    PriorityValue: int



class OakInventoryMenuFilter:
    DisplayName: str
    SortMode: EOakInventoryMenuSortMode



class UIHardpointData:
    Type: EIronBearUIHardpointType
    ProgressBarName: str
    ProgressBarFrameName: str
    IconFrameName: str
    ElementalIconName: str
    FallbackElementalIconFrameName: str
    BarText: str



class GFxItemCardAbbreviatedObject:
    OwningPC: OakPlayerController
    ItemCardRootClip: gbx_ui.GbxGFxObject
    CachedInventoryShop: InventoryShopComponent
    MainStatWidgets: unreal.WrappedArray[GFxItemCardMainStat]
    MainStatMirroredWidgets: unreal.WrappedArray[GFxItemCardMainStat]
    ArtifactRarityIcon: gbx_ui.GbxGFxObject
    AbbreviatedAmmoIcon: gbx_ui.GbxGFxObject
    UpdateElementalInfoTime: float
    CurrentBalanceComponent: gbx_inventory.InventoryBalanceStateComponent
    CurrentComparisonItem: gbx_inventory.InventoryBalanceStateComponent
    ElementalEffects: unreal.WrappedArray[ItemCardElementalDetails]
    LastElementalFrame: str
    ArtifactMainStats: unreal.WrappedArray[GFxItemCardArtifactLine]
    ClassModSkillEntries: unreal.WrappedArray[GFxItemCardSkillEntry]
    SkillIconSWF: scaleform_ui.SwfMovie
    CurrentSkillIconSWFPath: core_uobject.SoftObjectPath



class ItemCardElementalDetails:
    EffectText: str
    ProcChanceText: str
    IconFrame: str



class GFxItemCardObject(GFxItemCardAbbreviatedObject):
    DescriptionHighlightColor: str
    TotalSpinnerHeightOverride: float
    CostSpinTime: float
    PauseOnNewValueTime: float
    SecondaryStatsBottomSpacer: float
    ClassModSpacingHeight: float
    LegendaryArtifactSpacingHeight: float
    TotalVerticalAdjustment: float
    CurrencyWidget: GFxCurrencyCounterClip
    ItemName: gbx_ui.GbxTextField
    MainStatBackground: gbx_ui.GbxGFxObject
    MainStatBackgroundRaritySides: gbx_ui.GbxGFxObject
    TextStats: gbx_ui.GbxTextField
    SDUTextStats: gbx_ui.GbxTextField
    PickupTextStats: gbx_ui.GbxTextField
    MaxNumTextStats: int
    TextStatsTextfieldToUse: gbx_ui.GbxTextField
    ManufacturerWrapper: gbx_ui.GbxGFxObject
    ManufacturerFill: gbx_ui.GbxGFxObject
    ManufacturerStats: gbx_ui.GbxTextField
    ManufacturerTextTint: gbx_ui.GbxGFxObject
    ItemCardBottom: gbx_ui.GbxGFxObject



class ItemInspectionSelectedPartData:
    SelectedPartCE: unreal.UClass



class GFxItemInspectionLocator:
    RotateFactor: float
    PanFactor: float
    ZoomFactor: float
    ItemFOV: float
    ReferenceItemScale: float
    ScaleRange: core_uobject.Vector2D
    MouseToPanFactor: float
    MouseToRotateFactor: float
    MouseWheelFactor: float
    KeyboardZoomFactor: float
    HeightThreshold: float
    IntroDuration: float
    IntroRotation: core_uobject.Rotator
    IntroRotationRandomness: core_uobject.Rotator
    IntroRotationAlphaPowerRandomness: float
    MenuOuter: GFxItemInspectionMenu



class GFxItemInspectionCategoryInfo:
    CategoryData: gbx_inventory.InventoryCategoryData
    BaseTransform: core_uobject.Transform



class GFxItemInspectionPageData:
    Page: EGFxItemInspectionPages
    NavId: str
    FrameName: str
    PageTitle: str



class GFXItemInspectionPartEnumTable:
    IdMap: unreal.WrappedArray[GFxItemInspectionMenuEnumIdMap]



class GFxItemInspectionMenuEnumIdMap:
    EnumType: unreal.UEnum
    IdValues: unreal.WrappedArray[str]



class GFxItemInspectionPageBase:
    PageWrapper: gbx_ui.GbxGFxObject



class GFxItemInspectionSkinsPage(GFxItemInspectionPageBase):
    SkinsListConfig: gbx_ui.GbxGFxPooledGridListFullConfig
    SplitScreenSkinListRowCount: int
    DefaultSkinName: str
    WeaponSkinTextName: str
    SkinsList: GFxItemInspectionSkinsList
    ScrollBarSkinsClip: gbx_ui.GbxGFxSlider
    NavArrowLeftButton: gbx_ui.GbxGFxButton
    NavArrowRightButton: gbx_ui.GbxGFxButton



class GFxItemInspectionPartsPage(GFxItemInspectionPageBase):
    PartsListConfig: gbx_ui.GbxGFxPooledGridListFullConfig
    SplitScreenPartsListSize: int
    NumStatRows: int
    WeaponPartEffectsText: str
    WeaponPartsText: str
    WeaponPartsContainerClip: gbx_ui.GbxGFxObject
    PartsListClip: GFxItemInspectionPartList
    ScrollBarClip: gbx_ui.GbxGFxSlider
    StatRowClips: unreal.WrappedArray[GFxItemInspectionStatRowObject]



class GFxItemInspectionPartStat:
    Description: str
    CompareResult: gbx_game_system_core.EUIStatComparisonResult



class GFxItemInspectionElementalPage(GFxItemInspectionPageBase):
    HealthHeaderLabel: str
    ShieldHeaderLabel: str
    ArmorHeaderLabel: str
    ChangeViewLables: unreal.WrappedArray[str]
    RootClip: gbx_ui.GbxGFxObject
    ChangeViewHintClip: gbx_ui.GbxGFxHintWidget
    ElementalTypes: unreal.WrappedArray[gbx_game_system_core.GbxDamageType]
    CurrentElementalIndex: int



class GFxItemInspectionPageElementalStarRatings:
    VsFlesh: float
    VsShield: float
    VsArmor: float



class GFxItemInspectionManufacturerPage(GFxItemInspectionPageBase):
    WatchCommericalHintText: str
    ChallengesHeaderText: str
    ViewChallengeText: str
    RootClip: gbx_ui.GbxGFxObject
    PlayCommercialHintClip: gbx_ui.GbxGFxHintWidget
    ManufacturerDescriptionTextClip: gbx_ui.GbxTextField
    ManufacturerDescriptionScrollbarClip: gbx_ui.GbxGFxSlider
    ManufacturerDescriptionMaskClip: gbx_ui.GbxGFxObject
    ChallengeClips: unreal.WrappedArray[GFxItemInspectionManufacturerChallengeObject]
    ChallengeInfos: unreal.WrappedArray[GFxItemInspectManufacturerChallengeInfo]



class GFxItemInspectManufacturerChallengeInfo:
    ChallengeClass: unreal.UClass



class GFxItemInspectionInspectPage(GFxItemInspectionPageBase):
    SkinTitleText: str
    SkinsHintClip: gbx_ui.GbxGFxHintWidget



class GFxLeaguesMenuStandInState:
    ActorData: DesiredStandInActorData
    Customization: OakCustomizationData
    WeaponTrinket: WeaponTrinketPartData
    WeaponSkin: WeaponSkinPartData
    ActorReward: engine.Actor
    StandInConfig: str



class DesiredStandInActorData:
    CustomStandInClass: unreal.UClass
    DataAsset: gbx_runtime.GbxDataAsset



class LoadGameMenuEntry:
    SaveGameName: str
    CharacterLevel: int
    CharacterClassName: str



class ContextMenu:
    ContainerWrapper: gbx_ui.GbxGFxObject
    MenuList: gbx_ui.GbxGFxGridScrollingList
    ContextInfo: ContextMenuContextInfo
    bIsVisible: bool



class ContextMenuContextInfo: ...


class RecommendedFriendInviteStatus: ...


class MenuItemButton:
    MenuItem: gbx_ui.GbxGFxButton
    LabelDropShadow: gbx_ui.GbxTextField
    SocialWrapper: gbx_ui.GbxGFxObject
    ListIconContainer: gbx_ui.GbxGFxObject
    ListIcon: gbx_ui.GbxGFxObject
    ListIconText: gbx_ui.GbxTextField
    NeedHelpIcon: gbx_ui.GbxGFxObject



class GFxMapMenu_Adjustment:
    ContextMenuOffsetExpandingDown: core_uobject.Vector2D
    ContextMenuOffsetExpandingUp: core_uobject.Vector2D



class FriendIconNameAndIndex:
    IconFlashIndex: int
    IconTextureName: str



class GFxMapMenuStateInfo:
    StateName: str
    StateFrame: str



class MinimapBoundingCircle:
    CenterPoint: core_uobject.Vector2D



class GFxMinimapWidgetIcon:
    ZoneMapPOIData: ZoneMapPOIEntry
    bIsAreaWaypoint: bool
    bClampRadarEdge: bool
    MaxClampDistance: float
    bShouldBeVisibleIfInRange: bool
    IconLocation: core_uobject.Vector
    bStaticIconLocation: bool
    TargetActor: engine.Actor
    TargetGuid: core_uobject.Guid
    TargetMinimapIconComponent: unreal.UObject
    IconInstance: gbx_ui.GbxGFxObject
    bCachedVisible: bool
    TrackedType: EGFxMinimapWidgetIconTrackedType
    AreaWaypointIconSize: float
    CurrentTransitionTime: float
    TransitionStartingLocation: core_uobject.Vector2D
    IconFrameName: str



class MissionLogEchoDeviceSettings:
    StandInType: EStandInActorType
    StandInConfigName: str
    EchoDeviceIdleScreenName: str



class GFxMissionLogMissionItem:
    bValid: bool
    DisplayText: str
    Type: EGFxMissionLogMissionItemType
    MissionClass: unreal.UClass
    AsOakMission: OakMission
    EchoLogData: EchoLogData
    MissionType: EOakMissionType
    bIsTracked: bool
    bIsBlocked: bool
    bIsCompleted: bool
    bIsInCurrentZone: bool
    bHasBeenViewed: bool
    IconType: EGFxMissionLogMissionIconType
    NumFriendsPlayingThisMission: int



class GFxMissionTrackerAnimationData:
    Description: str
    AnimationType: EGFxMissionTrackerAnimationType
    MissionObjectiveLink: gbx_mission.MissionObjectiveReference
    OptionalSlotToClearOut: GFxMissionTrackerSlot



class GFxMissionTrackerRewardQueueData:
    RewardData: GFxMissionTrackerRewardDisplayData
    Mission: unreal.UClass



class GFxMissionTrackerRewardSlot: ...


class NameplateBarData:
    NameplateBar: gbx_ui.GbxGFxProgressBar
    NameplateBarContainer: gbx_ui.GbxGFxObject



class Transition:
    Curr: GFxNewsItem
    Next: GFxNewsItem



class GFxNotificationQueueListItem:
    AssetData: HUDNotificationAsset
    ActiveWidgetContent: GFxDisplayedNotificationWidget
    Priority: int
    MessageText: str
    SpawnAudioOverride: str
    DespawnAudioOverride: str
    TimeoutTimeRemaining: float
    bCurrentlyDisplayed: bool
    NotificationId: int



class GFxOakMenuHelpers: ...


class SubtitleBarItems:
    ControlsSubtitlesSL: gbx_ui.GbxGFxGridScrollingList
    LeftNavButton: gbx_ui.GbxGFxHintWidget
    BasicTab: gbx_ui.GbxGFxListCell
    AdvancedTab: gbx_ui.GbxGFxListCell
    BenchmarkTab: gbx_ui.GbxGFxListCell
    KeyboardMappings: gbx_ui.GbxGFxListCell
    GamepadMappings: gbx_ui.GbxGFxListCell
    RightNavButton: gbx_ui.GbxGFxHintWidget



class GFxPassiveSkillWidgetSlotData:
    HUDItemData: OakPlayerAbilityHUDItemData
    Icon: GFxPassiveSkillIcon



class PauseMenuTickFunction(engine.TickFunction): ...


class GFxPlayerStorageBag:
    Items: unreal.WrappedArray[OakUIInventoryItemDisplayInfo]



class PlaythroughSelectionModeEntry:
    ModeName: str
    ModeDescription: str
    ModeFrameName: str
    PlaythroughNum: int
    ModeSelectionSound: str



class QuickChangeRespecTreeBranchRow:
    Entries: unreal.WrappedArray[gbx_ui.GbxGFxObject]
    RespecAnim: gbx_ui.GbxGFxObject



class IconNameAndIndex:
    IconFlashIndex: int
    IconTextureName: str



class BaseQuickChangeMenuStateData:
    MenuStateName: str
    MenuStateDescription: str
    ContentFrameName: str
    IconFrameName: str
    StandInConfig: str
    bForceProjectionFXOn: bool
    MenuState: EBaseQuickChangeMenuState
    CustomizationType: gbx_game_system_core.GbxCustomizationTypeData



class GFxSkillScreenSkillInfo:
    ItemType: ESkillItemDisplayType
    ItemName: str
    ItemDescription: str



class GFxSkillScreenBranchContainer:
    Root: gbx_ui.GbxGFxObject
    BranchObject: gbx_ui.GbxGFxObject
    Branch: GFxSkillScreenBranch
    OriginalBranch: GFxSkillScreenBranch



class GFxSkillScreenInfoCardContainer:
    Root: gbx_ui.GbxGFxObject
    InfoCardButton: gbx_ui.GbxGFxButton
    IconArt: gbx_ui.GbxGFxObject
    DescriptionText: gbx_ui.GbxTextField
    ScrollBar: gbx_ui.GbxGFxSlider
    ScrollMask: gbx_ui.GbxGFxObject
    AvailablePointsString: str



class GFxSkillScreenLoadoutChoiceInfo:
    ItemData: OakPlayerAbilityTreeItemData
    ChoiceSelectedName: str
    ChoiceSelectionName: str
    ChoiceDescription: str
    EquipState: EGFxSkillScreenLoadoutChoiceEquipState



class GFxStatusMenuNavBarInfo:
    IconFrameName: str
    MenuID: str



class GFxStatusMenuSubmenuKeyMap:
    InputAction: str
    SubMenuId: str



class GFxStoreMenuPage:
    PageType: EGFxStoreMenuTabType
    FeaturedItem: GFxStoreMenuDLCItem
    NonFeaturedItems: unreal.WrappedArray[GFxStoreMenuDLCItem]



class GFxStoreMenuDLCItem:
    Type: EGFxStoreMenuTabType
    Name: str
    Description: str
    PreviewImageUrl: str
    bPurchased: bool
    bDownloaded: bool
    DiscountPercent: int



class SubtitleLine:
    TextToDisplay: str
    Duration: float
    bForce: bool



class ClosedCaptionEntry:
    LineField: gbx_ui.GbxTextField
    RemainingLifetime: float



class GFxVaultHunterProfileCardStatConfig:
    StatsInfo: unreal.WrappedArray[StatConfigInfo]



class StatConfigInfo:
    StatName: str
    PercentCompletion: int



class GFxVaultHunterProfileCardInventoryConfig:
    WeaponRarityFrames: str
    WeaponTypeFrames: str
    GrenadeRarityFrame: str
    ShieldRarityFrame: str
    ClassModRarityFrame: str
    RelicRarityFrame: str
    bIsRelic2: bool



class GFxVaultHunterProfileCardSkillsConfig:
    GreenProgress: float
    BlueProgress: float
    RedProgress: float
    PurpleProgress: float
    ClassFrameName: str



class GFxVaultHunterProfileCardPlayerConfig:
    ProfilePicture: engine.Texture
    PlayerName: str
    MissionName: str
    bHasSelectedCharacter: bool



class VendingTabOrder:
    BuyTab: GFxVendingMachineDisplayMode
    BuyBackTab: GFxVendingMachineDisplayMode
    SellTab: GFxVendingMachineDisplayMode
    TabOrder: unreal.WrappedArray[GFxVendingMachineDisplayMode]



class VendingObjectToSocketLocationMap: ...


class VendingMachineSocketLocationAndOffset:
    Location: core_uobject.Vector
    SocketName: str
    Offset: core_uobject.Vector2D
    OffsetSplitScreen: core_uobject.Vector2D



class VendingIDToSocketNameMap: ...


class GFxVendingMenuConfig:
    GoldenKeyResourceData: gbx_inventory.InventoryCategoryData
    ErediumResourceData: gbx_inventory.InventoryCategoryData
    InventoryCategoriesAllowed: unreal.WrappedArray[gbx_inventory.InventoryCategoryData]
    PageFilters: unreal.WrappedArray[OakInventoryMenuFilter]
    ItemGroupingsByType: unreal.WrappedArray[OakInventoryMenuItemGrouping]
    ItemGroupingsByManufacturer: unreal.WrappedArray[OakInventoryMenuItemGrouping]
    ItemTypeSortPriorities: unreal.WrappedArray[OakInventoryMenuTypePriorityInfo]
    BackpackThresholds: unreal.WrappedArray[OakBackpackCapacityThreshold]



class OakBackpackCapacityThreshold:
    Percentage: float
    Color: slate_core.SlateColor



class GFxVendingMachineMenuFilter:
    Name: str
    DataTypeFilter: gbx_inventory.InventoryCategoryData



class GoreSelectionResults:
    StumpSocket: str
    StumpBoneScale: core_uobject.Vector
    StumpDecalSize: core_uobject.Vector
    StumpMesh: engine.StaticMesh
    StumpParticles: engine.ParticleSystem
    StumpMaterialOverride: engine.MaterialInstanceConstant
    StumpDecal: engine.MaterialInstanceConstant
    StumpSound: wwise_audio.WwiseEvent
    bStumpReceivesDecal: bool
    bInheritStumpMaterialParameters: bool
    InheritStumpMaterialParametersMethod: engine.EMaterialParameterCopyMethod
    bInheritLimbMaterialParameters: bool
    InheritLimbMaterialParametersMethod: engine.EMaterialParameterCopyMethod
    LimbSocket: str
    LimbMesh: unreal.UObject
    LimbParticles: engine.ParticleSystem
    LimbActorClass: unreal.UClass
    LimbMaterialOverride: engine.MaterialInstanceConstant
    LimbForce: float
    bScaleLimbToStump: bool
    LimbScale: float
    LimbMassScale: float
    SourceMaterialIndex: int



class GoreSizeSelectionData:
    bSpecifiedMinScale: bool
    bSpecifiedMaxScale: bool
    MinScale: float
    MaxScale: float
    StumpMeshes: unreal.WrappedArray[engine.StaticMesh]
    StumpParticles: unreal.WrappedArray[engine.ParticleSystem]
    StumpDecals: unreal.WrappedArray[engine.MaterialInstanceConstant]
    StumpSound: wwise_audio.WwiseEvent
    StumpMaterialOverride: engine.MaterialInstanceConstant
    LimbMeshes: unreal.WrappedArray[unreal.UObject]
    LimbParticles: unreal.WrappedArray[engine.ParticleSystem]
    LimbMaterialOverride: engine.MaterialInstanceConstant
    LimbForce: gbx_game_system_core.ForceSelection
    bScaleLimbToStump: bool
    LimbScale: float



class GrenadeAttachedTrail: ...


class GrenadeChildGenerationData:
    DividerGrenadeGeneration: int
    MiniMirvGrenadeGeneration: int
    MirvGrenadeGeneration: int
    RainGrenadeGeneration: int
    SpringGrenadeGeneration: int
    StickyGrenadeGeneration: int
    bIsLingering: bool
    LongbowTarget: core_uobject.Vector



class DamageTypeParticleProperty:
    PropertyName: str
    DefaultPropertyValue: float



class LingeringDamageTypeInfo:
    DamageStyle: ELingeringDamageStyle
    ElementalEmitter: engine.ParticleSystem
    LightBeam: unreal.UClass
    BeamSocketName: str
    DamageData: unreal.UClass
    DamageScale: float
    LingeringRadius: float
    MirvChildLingeringRadius: float
    RainChildLingeringRadius: float
    StackValues: unreal.WrappedArray[gbx_game_system_core.AttributeInitializationData]



class MoneyStackValues:
    AudioEvent: wwise_audio.WwiseEvent
    ItemPool: gbx_inventory.ItemPoolListInterface



class PayloadInstanceData:
    StackCount: int
    bInstanceBool: bool
    InstanceFloat: float
    InstanceInt: int
    InstanceVector: core_uobject.Vector
    InstanceActor: engine.Actor
    TriggerCount: int



class SingularityTargetInfo: ...


class SingularityInitializationBase:
    PullTag: gbx_game_system_core.HitReactionTag
    IgnoreTags: gameplay_tags.GameplayTagContainer
    MinPullRadius: float
    IgnoreActors: unreal.WrappedArray[engine.Actor]
    EffectAuxBus: wwise_audio.WwiseAuxBus
    EffectSize: float
    EffectFadeDistance: float
    EffectDuration: float
    FadeDistanceRtpc: wwise_audio.WwiseRtpc
    AdditionalStartEvent: wwise_audio.WwiseEvent
    AdditionalStopEvent: wwise_audio.WwiseEvent



class SingularityBurstInfo(SingularityInitializationBase):
    SingularityLocation: core_uobject.Vector
    MaxPullRadius: float
    SingularityForce: float
    SingularityExplosion: gbx_game_system_core.ExplosionData



class SingularityInitializationInfo(SingularityInitializationBase):
    Duration: float
    ForcePerSecond: float
    SpinDirection: ESpinDirection
    SpinMinDistance: float
    SpinMaxDistance: float
    SpinHorizontalScalar: float
    SpinVerticalScalar: float
    LocationOffset: core_uobject.Vector
    bAttachToOwnerRoot: bool
    bPersistantComponent: bool
    SingularityParticles: engine.ParticleSystem
    BaseDestructibleChunkMass: float
    SingularitySource: unreal.UClass
    MinFalloffScalar: float



class OakCharacterMassData(engine.TableRowBase):
    Mass: float
    FlinchThreshold: float
    StaggerThreshold: float
    LaunchThreshold: float



class HolsteredGearSlotOptions:
    InventoryCategory: gbx_inventory.InventoryCategoryData



class HolsteredGearAttachmentSlot:
    OuterSlot: HolsteredGearSlot
    Mesh: engine.MeshComponent



class InventoryAspectAbilityInfo:
    Ability: unreal.UClass



class VendingMachineRefillAmmoData:
    AmmoMax: gbx_game_system_core.GbxAttributeData
    AmmoCurrent: gbx_game_system_core.GbxAttributeData
    AmmoStackCount: gbx_game_system_core.GbxAttributeData
    AmmoStackCost: gbx_game_system_core.GbxAttributeData



class OakWeaponNamedNamingAttribute:
    AttributeName: str
    bUseFormula: bool
    Attribute: gbx_game_system_core.GbxAttributeData
    Formula: gbx_game_system_core.UIStatFormulaEvaluator



class ManufacturerWeaponSightData:
    Manufacturer: gbx_inventory.ManufacturerData
    RarityTable: engine.DataTable



class WeaponSightEffectTableData(engine.TableRowBase):
    CrosshairColor: core_uobject.LinearColor



class OakPlayerAnimInstanceProxy(gbx_game_system_core.GbxCharacterAnimInstanceProxy): ...


class IronBearAnimInstanceProxy_FirstPerson(OakPlayerAnimInstanceProxy): ...


class LargeLiquidBodySurfaceSection:
    WorldZ: float
    ClippingVolumes: unreal.WrappedArray[LargeLiquidBodySurfaceSectionClippingVolume]



class LargeLiquidBodySurfaceSectionClippingVolume:
    ClippingPlanes: unreal.WrappedArray[core_uobject.Plane]



class LevelAssetList:
    LevelPackage: str
    AssetNames: unreal.WrappedArray[str]



class LevelTravelDataListStationPatch:
    AssociatedTravelStationName: str
    PatchedTravelData: unreal.WrappedArray[LevelTravelDataListPatch]



class LevelTravelDataListPatch:
    LevelTravelData: gbx_travel_station.LevelTravelStationData
    LevelTravelDataCondition: gbx_runtime.GbxCondition
    MissionIconCondition: gbx_runtime.GbxCondition
    MovieToPlayDuringTravelMap: int



class LootablePersistenceData:
    ResetDelay: float
    bStoreInSaveGame: bool



class LootablePileDamageInteraction:
    DamageSources: unreal.WrappedArray[unreal.UClass]
    Response: LootablePileInteractionResponse



class LootablePileInteractionResponse:
    LootPatternOverride: LootSpawnPatternData
    DisturbBoneForce: float



class LootableObjectDamageEventDetails:
    Damage: float
    HitLocation: core_uobject.Vector
    HitDirection: core_uobject.Vector
    HitForce: core_uobject.Vector
    Instigator: engine.Actor
    DamageType: unreal.UClass
    DamageSource: unreal.UClass



class LootableMeshSwapData:
    NewMesh: engine.SkeletalMesh
    bSkipRegularOpeningWhenDamaged: bool
    Response: LootableInteractionResponse



class LootableInteractionResponse:
    TransitionAnimation: engine.AnimSequence
    IdleAnimation: engine.AnimSequence



class LootableAnimState:
    bLooping: bool
    Animation: engine.AnimSequence



class LootableDirectionalResponse:
    AngleRange: gbx_runtime.NumericRange
    Interactions: unreal.WrappedArray[LootableInteractionResponse]



class ConditionalLootableInteractionResponse:
    Condition: gbx_runtime.GbxCondition
    Interaction: LootableInteractionResponse



class MatchmakingSearchDefinition:
    ActivityGuidString: str
    ParentActivityGuidString: str
    TitleKey: str
    DescriptionKey: str
    ImageId: str
    HopperName: str
    Version: str
    OrderedSearches: unreal.WrappedArray[MatchmakingSearchParameters]
    TravelStationPaths: unreal.WrappedArray[str]
    MatchmakingRequirements: unreal.WrappedArray[MatchmakingRequirement]
    MinPlayerCount: int
    MaxPlayerCount: int
    ModifierSets: unreal.WrappedArray[MatchmakingModifierSetData]



class MatchmakingModifierSetData:
    Name: str
    DisplayName: str
    DisplayDesc: str
    Modifiers: unreal.WrappedArray[MatchmakingModifierData]



class MatchmakingModifierData:
    Name: str
    TargetResolverName: str
    EffectName: str
    Value: float



class MatchmakingRequirement:
    Type: EMatchmakingRequirementType
    ComparisonOp: EMatchmakingRequirementComparisonOp
    Value: int
    DescriptionKey: str



class MatchmakingSearchParameters:
    SearchName: str
    bMatchGameSettings: bool
    SearchParameters: unreal.WrappedArray[MatchmakingSearchParameter]



class MatchmakingSearchParameter:
    ParamName: str
    TargetParamName: str
    Op: int
    ValueRange: int



class PendingMayhemState:
    ModifierSets: unreal.WrappedArray[MayhemModifierSet]



class MayhemModifierSet:
    Modifiers: unreal.WrappedArray[MayhemModifier]
    Weight: float
    MutualExclusionTags: unreal.WrappedArray[str]
    UIStats: unreal.WrappedArray[gbx_game_system_core.UIStatData]



class MayhemModifier:
    ModifierTarget: gbx_abilities.GbxAbilityEffectTargetResolutionData



class MayhemModeTwoLevelOverride:
    LevelRangeMin: int
    LevelRangeMax: int
    bOverrideCoreModifierSet: bool
    CoreModifierSetOverride: MayhemCoreModifierSet
    bOverrideRandomModifiersSlots: bool
    RandomModifierSlotsOverride: unreal.WrappedArray[MayhemModifierSlotInterface]



class MayhemCoreModifierSet:
    Modifiers: unreal.WrappedArray[MayhemModifier]
    UIStats: MayhemCoreSetUIStats



class MayhemCoreSetUIStats:
    UIStat_FleshHealthScale: gbx_game_system_core.UIStatData
    UIStat_ShieldHealthScale: gbx_game_system_core.UIStatData
    UIStat_ArmorHealthScale: gbx_game_system_core.UIStatData
    UIStat_ExperienceScale: gbx_game_system_core.UIStatData
    UIStat_CurrencyScale: gbx_game_system_core.UIStatData
    UIStat_LootDropRateScale: gbx_game_system_core.UIStatData



class MainMenuCameraViewpointBlendPair:
    ViewpointA: EMainMenuViewpointType
    ViewpointB: EMainMenuViewpointType
    BlendParamsOverride: MainMenuCameraBlendParamsSet



class MainMenuCameraBlendParamsSet:
    DefaultParams: MainMenuCameraBlendParams
    bOverrideLocationParams: bool
    bOverrideRotationParams: bool
    LocationParams: MainMenuCameraBlendParams
    RotationParams: MainMenuCameraBlendParams



class MainMenuCameraBlendParams:
    BlendTime: float
    BlendEasing: gbx_game_system_core.GbxEasingFunc



class MainMenuCameraViewpointGroup:
    PrimaryViewpoint: MainMenuCameraViewpoint
    SecondaryViewpoints: unreal.WrappedArray[MainMenuCameraViewpoint]



class MainMenuCameraViewpoint:
    CameraActor: engine.CameraActor



class ClaptrapSkitSublevel:
    SublevelName: str
    LoadCondition: gbx_runtime.GbxCondition



class OakAbilityDebugMenuSpecList: ...


class OakAbilityDebugMenuListItemSpec: ...


class OakAbilityResourceController_SirenRushStack(gbx_abilities.GbxAbilityResourceController): ...


class OakAbilityResourceSpec_SirenRushStack(gbx_abilities.GbxAbilityResourceSpec):
    SirenComponent: SirenCharacterComponent
    RushStackData: SirenRushStackData



class OakAbilityResourceController_WeaponShotModifier(gbx_abilities.GbxAbilityResourceController): ...


class OakAbilityResourceSpec_WeaponShotModifier(gbx_abilities.GbxAbilityResourceSpec):
    DamageCauserComponent: OakDamageCauserComponent
    ShotModifier: gbx_weapon.WeaponShotModifier
    ContextOverride: unreal.UObject



class OakActionAbilityEnumMaskHelper: ...


class OakPlayerAbilityTreeItemInfo:
    ItemData: OakPlayerAbilityTreeItemData
    BranchData: OakPlayerAbilityTreeBranchData



class OakPlayerAbilityTreeTierInfo:
    TierData: OakPlayerAbilityTreeTierData



class OakPlayerAbilityTreeBranchInfo:
    BranchData: OakPlayerAbilityTreeBranchData



class OakAbilityTimerResult:
    Result: EOakAbilityTimerResult
    PulsesThisFrame: int
    TotalPulseTime: float



class OakAbilityTimer:
    Spec: OakAbilityTimerSpec
    Value: float



class OakAbilityTimerSpec:
    Timer: OakAbilityTimerData
    bIsInfinite: bool
    bRemoveOnPause: bool
    Duration: float
    LoopCount: int
    ReplacePolicy: EOakAbilityTimerReplacePolicy
    TickPolicy: EOakAbilityTimerTickPolicy



class ActionSkillFailureCodeDescription:
    FailureCode: int
    FailureCodeText: str



class ActionState_OakAnim(gbx_game_system_core.ActionState_Anim): ...


class OakAnimActionAbilityEndAction:
    EndAction: EOakAnimActionAbilityEndAction
    Condition: gbx_runtime.GbxCondition



class ActionState_OakAnimActionAbility(ActionState_OakAnim): ...


class ActionState_OakAnimActionAbilityOperative(ActionState_OakAnimActionAbility): ...


class ActionState_OakAnimActionAbilityPhaseTrance(ActionState_OakAnimActionAbility): ...


class ActionState_OakAnimPhaseTranceArms(ActionState_OakAnim): ...


class ActionState_OakPlayerMelee(ActionState_OakAnim): ...


class ActionState_OakAnim_TedioreReload(ActionState_OakAnim): ...


class ActionState_OakAnim_WeaponReload(ActionState_OakAnim): ...


class ActionState_OakAttachedAnim(ActionState_OakAnim): ...


class PawnInterpolationInfo:
    TranslationTime: float
    RotationTime: float



class OakActionState_CoordinatedEffect(gbx_game_system_core.ActionState_CoordinatedEffect): ...


class OakActionState_CoordinatedEffect_ActionAbility(OakActionState_CoordinatedEffect): ...


class ActionState_OakDetachFromSeat(gbx_game_system_core.ActionState_Base): ...


class ActionState_OakEmote(ActionState_OakAnim): ...


class ActionState_OakFrozenDeath(gbx_game_system_core.ActionState_Base): ...


class ActionState_OakGib(gbx_game_system_core.ActionState_Gib): ...


class OakElementalGibData:
    bOverrideDefaultEffects: bool
    bOverrideDefaultParticleSystem: bool
    bOverrideDefaultSound: bool
    bOverrideDefaultDecal: bool
    Effect: gbx_game_system_core.ImpactResponseEffect
    Particle: engine.ParticleSystem
    Sound: wwise_audio.WwiseEvent



class ActionState_OakHostileAttach(gbx_game_system_core.ActionState_SimpleAnim): ...


class ReplicatedEject:
    EjectVel: core_uobject.Vector



class ActionState_OakLeapOnVehicle(gbx_ai.ActionState_NavHomingJump): ...


class ActionState_OakRandomAnim(ActionState_OakAnim): ...


class ActionState_OakPetUltimateAbility(ActionState_OakRandomAnim): ...


class ActionState_OakPhaseMove(gbx_game_system_core.ActionState_Loop): ...


class ActionState_OakPhysicalDeath(gbx_game_system_core.ActionState_PhysicalDeath): ...


class RandomAnimDef:
    AnimAsset3rd: gbx_game_system_core.AnimActionDef
    Weight: float



class ActionState_OakVehicleInteractionAnim(ActionState_OakAnim): ...


class ActionState_OakVehicleMoveTo(gbx_game_system_core.ActionState_Base): ...


class ActionState_OakVehicleSpawnAnim(gbx_spawn.ActionState_SpawnAnim): ...


class ActionState_OakCloak(OakActionState_CoordinatedEffect): ...


class OakActionCloak_TrackedTargetState:
    TrackedTarget: engine.Actor
    ConsecutiveShotCount: int
    ShotsRemaining: int



class OakPhaseTranceLockEffectSpec:
    bIsLocked: bool
    EffectMask: int



class OakPhaseTranceEffectSpec:
    EffectMask: int
    ComboData: PhaseTranceActivationComboData
    EffectTarget: engine.Actor
    DamageData: float



class PhaseTranceActivationComboData:
    AttackData: OakActionAbilityAugmentData_PhaseTrance_Attack
    EffectData: OakActionAbilityAugmentData_PhaseTrance_Effect
    ElementData: OakActionAbilityAugmentData_PhaseTrance_Element



class OakAISwarmActor:
    Actor: engine.Actor
    DestinationComponent: engine.SceneComponent
    Destination: engine.SceneComponent
    Movement: OakAISwarmMovement



class OakAISwarmMovement:
    MaxSpeed: gbx_game_system_core.GbxParam
    Acceleration: gbx_game_system_core.GbxParam
    RotationRate: gbx_game_system_core.GbxParam
    RotationType: EOakAISwarmRotation



class ChunkIdAssetClassesData:
    ChunkId: int
    AssetClasses: unreal.WrappedArray[core_uobject.SoftClassPath]



class LevelMultiplierDefinedValueRow(gbx_game_system_core.AttributeDefinedValueRow):
    Multiplier: gbx_game_system_core.AttributeInitializationData
    Level: gbx_game_system_core.AttributeInitializationData
    Offset: gbx_game_system_core.AttributeInitializationData



class PlayerCountAndPlaythroughDefinedValueRow(gbx_game_system_core.AttributeDefinedValueRow):
    OnePlayer_PT1: gbx_game_system_core.AttributeInitializationData
    TwoPlayers_PT1: gbx_game_system_core.AttributeInitializationData
    ThreePlayers_PT1: gbx_game_system_core.AttributeInitializationData
    FourPlayers_PT1: gbx_game_system_core.AttributeInitializationData
    OnePlayer_PT2: gbx_game_system_core.AttributeInitializationData
    TwoPlayers_PT2: gbx_game_system_core.AttributeInitializationData
    ThreePlayers_PT2: gbx_game_system_core.AttributeInitializationData
    FourPlayers_PT2: gbx_game_system_core.AttributeInitializationData



class PlayerCountDefinedValueRow(gbx_game_system_core.AttributeDefinedValueRow):
    OnePlayer: gbx_game_system_core.AttributeInitializationData
    TwoPlayers: gbx_game_system_core.AttributeInitializationData
    ThreePlayers: gbx_game_system_core.AttributeInitializationData
    FourPlayers: gbx_game_system_core.AttributeInitializationData



class PlaythroughDefinedValueRow(gbx_game_system_core.AttributeDefinedValueRow):
    PlaythroughOne: gbx_game_system_core.AttributeInitializationData
    PlaythroughTwoAndBeyond: gbx_game_system_core.AttributeInitializationData



class OakProjectedShield:
    StaticMesh: engine.StaticMeshComponent
    ParticleSystem: engine.ParticleSystemComponent



class BodyMeshLinkedParameters:
    OwnerClasses: unreal.WrappedArray[unreal.UClass]
    LinkedParameters: unreal.WrappedArray[gbx_game_system_core.CustomizationLinkedParameter]



class OakCARMenuStatLineData:
    PartStat: OakCARVehiclePartStat



class OakCARMenuLoadoutCustomizer:
    CurrentConfig: OakCARMenuVehicleConfig
    PreviewConfig: OakCARMenuVehicleConfig



class OakCARMenuVehicleConfigSaveData:
    LoadoutSaveName: str
    BodyAssetPath: str
    WheelAssetPath: str
    ArmorAssetPath: str
    CoreModAssetPath: str
    GunnerWeaponAssetPath: str
    DriverWeaponAssetPath: str
    OrnamentAssetPath: str
    MaterialDecalAssetPath: str
    MaterialAssetPath: str
    ColorIndex1: int
    ColorIndex2: int
    ColorIndex3: int



class OakCARVehicleUIInfo:
    DisplayName: str
    Description: str
    DisplayStats: unreal.WrappedArray[OakCARMenuStatValue]
    bIsLoading: bool
    bIsEmpty: bool
    bIsLocked: bool
    PreviewMesh: unreal.WrappedArray[CARPreviewMesh]
    PreviewParticles: unreal.WrappedArray[CARPreviewParticleSystem]
    OnEquipSound: wwise_audio.WwiseEvent
    OverridePreviewLookAtTransform: bool
    PreviewLookAtTransform: core_uobject.Transform
    BlendPostProcess: bool
    PostProcessSetting: engine.PostProcessSettings



class CARPreviewParticleSystem:
    ComponentName: str
    Offset: core_uobject.Transform
    ParentPart: ECARPartType
    ParentSocket: str



class CARPreviewMesh:
    ComponentName: str
    Offset: core_uobject.Transform
    Skin: unreal.WrappedArray[CARSkinMaterials]
    ParentPart: ECARPartType
    ParentSocket: str
    OffsetToOtherParts: unreal.WrappedArray[CARPreviewMeshOffsetByPart]



class CARPreviewMeshOffsetByPart:
    Type: ECARPartType
    Offset: core_uobject.Vector



class CARSkinMaterials:
    ComponentName: str
    SectionIndex: int
    Color1Params: unreal.WrappedArray[str]
    Color2Params: unreal.WrappedArray[str]
    Color3Params: unreal.WrappedArray[str]



class OakCARMenuStatValue:
    StatData: OakCARVehiclePartStat
    Value: float



class OakChallengeTierRewardsPerInstance:
    LeagueInstance: int
    TierRewards: unreal.WrappedArray[OakChallengeTierRewards]



class OakChallengeTierRewards:
    ExperienceReward: gbx_game_system_core.AttributeInitializationData
    CashReward: gbx_game_system_core.AttributeInitializationData
    EridiumReward: gbx_game_system_core.AttributeInitializationData
    RewardItemPool: gbx_inventory.ItemPoolData
    RewardCustomizations: unreal.WrappedArray[OakCustomizationData]
    RewardWeaponSkins: unreal.WrappedArray[WeaponSkinPartData]
    RewardWeaponTrinkets: unreal.WrappedArray[WeaponTrinketPartData]



class ChallengeReward: ...


class ChallengeMinimapIcon:
    LevelActorComponent: gbx_game_system_core.ChallengeLevelActorComponent
    MinimapIconWidget: GFxMinimapWidget
    MinimapIconGUID: core_uobject.Guid
    bCompleted: bool



class ChallengeInWorldIcon:
    LevelActorComponent: gbx_game_system_core.ChallengeLevelActorComponent
    AssociatedContainer: GFxInWorldIconContainer
    ChallengeIcon: GFxInWorldIcon



class ChallengeInWorldIconQueueEntry:
    LevelActorComponent: gbx_game_system_core.ChallengeLevelActorComponent
    PlayerToRegister: gbx_game_system_core.GbxPlayerController



class DamageChallengeData:
    WeaponType: gbx_weapon.WeaponTypeData
    Manufacturer: gbx_inventory.ManufacturerData
    DamageTypeClass: unreal.UClass



class OakChallengeSaveGameData:
    CompletedCount: int
    bIsActive: bool
    bCurrentlyCompleted: bool
    CompletedProgressLevel: int
    ProgressCounter: int
    StatInstanceState: unreal.WrappedArray[OakChallengeStatSaveGameData]
    RewardTiersClaimed: unreal.WrappedArray[bool]
    DefaultChallengeObj: gbx_game_system_core.Challenge



class OakChallengeStatSaveGameData:
    CurrentStatValue: int



class CameraManViewPoint: ...


class PlayerTeleportState:
    TeleportData: OakPlayerTeleportData



class CheatManagerItemPool:
    ItemPool: str
    Quantity: int



class CinematicState:
    CinematicTag: OakCinematicTag
    SequenceTime: float
    CurrentState: ECinematicState



class CinematicData:
    CinematicTag: OakCinematicTag
    Sequence: level_sequence.LevelSequence
    Movie: media_assets.MediaSource
    IntroCinematicMode: gbx_game_system_core.CinematicModeData
    bRepeatable: bool
    bDisallowCutsceneSkip: bool
    IntroTime: float
    IntroScreenParticle: engine.ParticleSystem
    PlayingCinematicMode: gbx_game_system_core.CinematicModeData
    MissionObjective: gbx_mission.MissionObjectiveReference



class OakCustomizationSaveGameData:
    IsNew: bool



class GoreRegionEventSummary:
    HitLocation: engine.Vector_NetQuantize
    HitDirection: engine.Vector_NetQuantizeNormal
    Origin: engine.Vector_NetQuantize
    Radius: float
    GoreRegionIndex: int



class GoreRegionState:
    GoreData: GoreDamageData
    bOverrideStumpSocket: bool
    bOverrideRootDamageBone: bool
    bOverrideStumpBoneScale: bool
    bOverrideLimbSocket: bool
    StumpSocket: str
    StumpBoneScale: core_uobject.Vector
    RootDamageBone: str
    LimbSocket: str
    LimbScale: float
    EventName: str



class DamageDataCustomStatusEffectApplicationSpec:
    StatusEffect: gbx_game_system_core.StatusEffectData
    Condition: gbx_runtime.GbxCondition
    bApplyToEnemiesOnly: bool
    EffectDuration: gbx_game_system_core.AttributeInitializationData



class PlayerDifficultyBalanceInfo:
    PlayerDamageTakenMultiplier: float



class NumPlayersDamageBalanceInfo:
    NumPlayers: int
    RadiationMultiplier: float



class IncomingDamageDisplayInfo:
    HealthDamageIndicatorStaticMesh: engine.StaticMesh
    ShieldDamageIndicatorStaticMesh: engine.StaticMesh
    ArmorDamageIndicatorStaticMesh: engine.StaticMesh
    DamageIndicatorRelativeLocation: core_uobject.Vector
    DamageIndicatorScale: float
    MinForegroundFOVToDrawIndicators: float
    DamageIndicatorDuration: float
    DamageIndicatorFadeDuration: float
    ScaleDurationBySeverityCurve: engine.RuntimeFloatCurve
    MaxDamageIndicators: int
    DamageIndicatorSphereRelativeLocation: core_uobject.Vector
    DamageIndicatorSphereRelativePitch: float
    DamageIndicatorSphereRadius: core_uobject.Vector
    DamageIndicatorOpacityAlphaParameterName: str
    DamageIndicatorPercentOfLifeMaterialParameterName: str
    DamageIndicatorCenterFadeScreenPercent: gbx_runtime.NumericRange
    DamageIndicatorCenterFadeMaterialParameterName: str
    DamageIndicatorYawRemappingCurve: engine.RuntimeFloatCurve
    DamageIndicatorPitchRemappingCurve: engine.RuntimeFloatCurve
    MaxPitchToApplyYawRemapping: float
    MeleeJoltRange: float
    MeleeJoltLocationCurve: engine.RuntimeFloatCurve
    AttackerLocationCrouchEasing: gbx_game_system_core.GbxEasingFunc
    AttackerLocationCrouchTransitionDuration: float



class StatusEffectApplicationDamageDefaultSettings:
    StatusEffectData: gbx_game_system_core.StatusEffectData
    Duration: float
    PercentBaseDamage: float
    PercentChance: float



class DamageDisplayInfo:
    DamageNumberParticleSystem: engine.ParticleSystem
    DamageNumberParticleEventName: str
    DamageNumberCritParticleEventName: str
    DamageNumberResistParticleEventName: str
    DamageNumberImmuneParticleEventName: str
    DamageNumberVehicleLocationOffset: core_uobject.Vector



class OakPipelineDamageInput(gbx_game_system_core.PipelineDamageInput):
    KillStat: gbx_game_system_core.GameStatData



class OakHealthTypeBalanceData(gbx_game_system_core.HealthTypeBalanceData):
    NonelementalModifier: float
    CorrosiveModifier: float
    CryoModifier: float
    FireModifier: float
    ShockModifier: float
    RadiationModifier: float
    PlayThroughTwoOverride: engine.DataTableRowHandle
    MayhemLevel4Override: engine.DataTableRowHandle



class AmputateLimbData:
    BoneName: str
    BoneScale: core_uobject.Vector
    StumpMesh: engine.StaticMesh
    StumpParticles: engine.ParticleSystem
    StumpMaterialOverride: engine.MaterialInstanceConstant
    StumpDecal: engine.MaterialInstanceConstant
    StumpDecalSize: core_uobject.Vector
    bStumpReceivesDecal: bool
    StumpSound: wwise_audio.WwiseEvent
    StumpTransform: core_uobject.Transform
    LimbMesh: unreal.UObject
    LimbParticles: engine.ParticleSystem
    LimbActorClass: unreal.UClass
    LimbMaterialOverride: engine.MaterialInstanceConstant
    bInheritStumpMaterialParameters: bool
    InheritStumpMaterialParametersMethod: engine.EMaterialParameterCopyMethod
    bInheritLimbMaterialParameters: bool
    InheritLimbMaterialParametersMethod: engine.EMaterialParameterCopyMethod
    bScaleLimbToStump: bool
    LimbSocket: str
    LimbScale: float
    LimbMassScale: float
    SourceMaterialIndex: int



class CauseDamageStatusEffectOverrides:
    BaseChance: float
    BaseDuration: float
    BaseDamage: float
    bBaseDamageAsPercent: bool
    ChanceScalar: float
    DurationScalar: float
    DamageScalar: float



class AvailablePartData:
    PartData: gbx_game_system_core.WeightedActorPartData
    OptionButton: OakDebugWeaponBuilderButton



class AvailableInventoryBalanceData:
    InventoryBalance: gbx_inventory.InventoryBalanceData
    OptionButton: OakDebugWeaponBuilderButton



class AvailableAmmoType:
    AmmoType: gbx_weapon.GbxAmmoTypeData
    OptionButton: OakDebugWeaponBuilderButton



class AvailableManufacturer:
    Manufacturer: gbx_inventory.ManufacturerData
    OptionButton: OakDebugWeaponBuilderButton



class DeveloperPerk:
    KeyCombo: unreal.WrappedArray[input_core.Key]
    PerkTypeEnumIdx: int



class EchoLogTrackingInfo: ...


class DialogScriptToLoadEntry:
    DialogScriptLevelName: str



class OakDownloadableEntitlementCurrencyType:
    CurrencyName: str
    CurrencyPartData: DownloadableEntitlementPartData_Currency



class DownloadableEntitlementSetItem:
    ID: int
    Count: int
    Description: str
    SerialNumber: str



class GRMLNBeamConfiguration:
    TargetQuery: gbx_game_system_core.EnvQueryParams
    BeamDuration: gbx_game_system_core.AttributeInitializationData
    CooldownDuration: gbx_game_system_core.AttributeInitializationData



class GRMLNBeamData:
    Owner: OakDroneProjectile_GRMLN
    CurrentTarget: engine.Actor
    TargetDamageComponent: gbx_game_system_core.DamageComponent
    TargetQueryParams: gbx_game_system_core.EnvQueryParams



class GRMLNStaticFieldData(GRMLNBeamData): ...


class GRMLNBadDoseData(GRMLNBeamData): ...


class GRMLNHardpointData:
    Type: EGRMLNHardpointType
    bIsModUnlockedHardpoint: bool
    ModUnlock: EGRMLNModType
    FireRate: gbx_game_system_core.AttributeInitializationData
    Ammunition: gbx_game_system_core.AttributeInitializationData
    BurstRefireRate: gbx_game_system_core.AttributeInitializationData
    Damage: gbx_game_system_core.AttributeInitializationData
    LightProjectileDataClass: unreal.UClass
    NormalDamageData: GRMLNHardPointDamageData
    CryoDamageData: GRMLNHardPointDamageData
    WeaponFireSockets: unreal.WrappedArray[str]
    RandomRangeMin: float
    RandomRangeMax: float
    Owner: OakDroneProjectile_GRMLN



class GRMLNHardPointDamageData:
    DamageTypeClass: unreal.UClass
    WeaponFireEvent: wwise_audio.WwiseEvent
    MuzzleFlash: engine.ParticleSystem



class GRMLNHoverProfile:
    MovementMode: EOakDroneMovementMode
    Radius: gbx_game_system_core.DataTableValueHandle
    Altitude: gbx_game_system_core.DataTableValueHandle



class PlayerClassToClassId:
    PlayerClassName: str



class DevMapToMapId:
    DevMapName: str



class LootAudioStinger:
    SoundActor: engine.Actor
    Sound: wwise_audio.WwiseEvent



class ConditionalSavegameExpression:
    Condition: gbx_runtime.GbxCondition
    SaveGame: unreal.UClass
    Profile: unreal.UClass



class GameStateSaveData:
    LastTraveledMapID: MapIDData
    MayhemLevel: int
    MayhemRandomSeed: int



class OakHitRegionModifierData:
    DamageScale: gbx_game_system_core.AttributeInitializationData
    Condition: gbx_runtime.GbxCondition
    DamageType: unreal.UClass



class GbxInputEventHelper_SigFunc_OakMoveLookAxis_Data:
    Val: core_uobject.Vector
    bGamePad: bool



class OakInventoryItemSaveGameData:
    Item: gbx_inventory.InventorySaveGameData
    PickupOrderIndex: int
    Flags: int



class OakInventorySortData:
    SortMode: EOakInventoryMenuSortMode
    SortPriorities: unreal.WrappedArray[OakInventoryMenuTypePriorityInfo]
    bDoEquippedTypeFirst: bool
    EquippedItemGrouping: str



class OakInventoryMenuCounts:
    ItemCount: int
    ItemMax: int
    ItemCountColor: core_uobject.LinearColor
    GoldenKeyCount: int
    ErediumCount: int
    MoneyCount: int
    VaultCoinCount: int



class ExtractedOakInventoryCombinationNameData:
    FirstPartTag: str
    SecondPartTag: str
    NamePart: gbx_inventory.InventoryNamePartData



class OakInventoryNameData:
    Part: gbx_inventory.InventoryPartData
    NamePart: gbx_inventory.InventoryNamePartData



class OakJAKFeedbackData:
    ParticleEffect: engine.ParticleSystem
    SoundEvent: wwise_audio.WwiseEvent



class LevelledSaveGameData:
    Level: int



class OakLightBeamInitializationData(gbx_weapon.LightBeamInitializationData):
    BaseStatusEffectChance: float
    BaseStatusEffectDamage: float
    BaseStatusEffectDuration: float



class OakLightProjectileInitializationData(gbx_weapon.LightProjectileInitializationData):
    BaseStatusEffectChance: float
    BaseStatusEffectDamage: float
    BaseStatusEffectDuration: float
    StatusEffectChanceScalar: float
    StatusEffectDamageScalar: float
    StatusEffectDurationScalar: float



class WeightedLoadingTooltip:
    ToolTipText: str
    Weight: float



class OakMailItem:
    MailItemType: EMailItemType
    SenderDisplayName: str
    Subject: str
    Body: str
    GearSerialNumber: str
    MailGuid: str
    DateSent: core_uobject.DateTime
    ExpirationDate: core_uobject.DateTime
    FromPlayerId: engine.UniqueNetIdRepl
    bHasBeenRead: bool



class ManagedActorCountData: ...


class ManagedActorOwnerEntry: ...


class ManagedActorEntry:
    Actors: unreal.WrappedArray[engine.Actor]



class MapCharacterPhysicsSettings:
    PlayerAirControlScale: float



class MayhemUILevelData:
    ModEnemies: str
    ModCurrency: str
    ModDropRate: str
    ModXP: str



class MayhemModifierDifficultyLevel:
    MayhemLevel: int
    StaticModifiers: OakModifierSet
    RandomModifierCount: int
    RandomModifierSets: unreal.WrappedArray[WeightedOakModifierSet]



class WeightedOakModifierSet:
    Weight: float
    ModifierSet: OakModifierSet
    MutualExclusionTags: unreal.WrappedArray[str]



class OakModifierSet:
    bDisplay: bool
    ModifierName: str
    DisplayName: str
    DisplayDesc: str
    Modifiers: unreal.WrappedArray[engine.DataTableRowHandle]



class InstancedPlayerOwnerInfo:
    InstancedPlayerOwner: OakPlayerController
    bOnlyShowOnPlayerOwner: bool
    PointOfInterestType: ZoneMapPOITypeData



class AutoplayCombatState:
    EnemyTarget: engine.Actor



class AutoplayMissionState:
    PossibleActions: unreal.WrappedArray[AutoplayAction]
    CurrentMission: unreal.UClass
    CurrentObjective: unreal.UObject



class AutoplayAction:
    Target: engine.Actor



class MissionSpawnerFailsafeData:
    Actor: engine.Actor
    FailsafeSeconds: int



class LevelSyncCompletedMission:
    MissionClass: unreal.UClass
    Level: int



class MissionStarterGear:
    Objective: gbx_mission.MissionObjective



class OakModifierData(engine.TableRowBase):
    TargetResolver: engine.DataTableRowHandle
    Effect: engine.DataTableRowHandle
    MinValue: float
    MaxValue: float



class OakModifierSetWithMutexTags:
    ModifierSet: OakModifierSet
    MutexTags: unreal.WrappedArray[str]



class OakModifierStatusEffectData(engine.TableRowBase):
    AttributeData: gbx_game_system_core.GbxAttributeData
    ModifierType: engine.EGbxAttributeModifierType
    MaxValue: float
    MinValue: float



class OakModifierTargetResolverData(engine.TableRowBase):
    TargetResolvers: unreal.WrappedArray[gbx_abilities.GbxAbilityEffectTargetResolutionData]
    TargetResolver: gbx_abilities.GbxAbilityEffectTargetResolutionData



class MusicInterestASR:
    SustainValue: float
    AttackTimeSeconds: float
    SustainTimeSeconds: float
    DecayTimeSeconds: float



class MusicLayerInfo:
    NoneState: wwise_audio.WwiseState
    OnState: wwise_audio.WwiseState
    OffState: wwise_audio.WwiseState
    ExitCombatState: wwise_audio.WwiseState



class MusicSection:
    CombatMin: float
    CombatMax: float



class MusicPart:
    UpdateIntervalInBeats: int
    InterestMin: float
    InterestMax: float



class MusicLayer:
    InterestMin: float
    InterestMax: float



class ScriptedVehicleMove: ...


class DrivingOverride: ...


class SpeedOverride: ...


class RubberbandSpeedData:
    RubberBandTarget: engine.Actor
    MinDistance: float
    MaxDistance: float
    MinDistanceSpeed: float
    MaxDistanceSpeed: float
    bBehindOnly: bool
    SplineReference: engine.Actor
    SplineDistanceOffset: float
    bUseSpline: bool
    CachedSplineComponent: engine.SplineComponent



class OakNavReverseState:
    World: engine.World
    NavComp: OakNavComponent



class OakOnlineLobbyPlayerInfo:
    PlateState: EOakOnlineLobbyPlayerPlateState
    bIsLobbyLead: bool
    DisplayName: str
    MissionDisplayName: str
    MapDisplayName: str
    PlayerClassDisplayName: str
    CharacterLevel: int
    ConnectivityState: EOakOnlineLobbyConnectivityState
    TalkingState: EOakOnlineLobbyTalkingState



class OakOnlineLobbyInfo:
    NetworkType: ENetworkType
    InviteType: EInviteType
    CurrentActivity: str
    ConnectivityState: EOakOnlineLobbyConnectivityState
    CurrentConnectedPlayerCount: int
    MaxConnectedPlayerCount: int



class OnlineNetworkOptionData:
    Label: str
    Description: str
    NetworkType: ENetworkType
    InviteType: EInviteType



class OakPassiveAbilityHUDIconData:
    ActivationType: EOakPassiveAbilityHUDIconActivationType
    CustomStatusEffectData: gbx_game_system_core.StatusEffectData
    AbilityTimerData: OakAbilityTimerData
    HUDItemData: OakPlayerAbilityHUDItemData



class TriggeredPassiveAbilityEffect:
    StatusEffectData: gbx_game_system_core.StatusEffectData
    Duration: gbx_game_system_core.AttributeInitializationData
    bApplyToPlayer: bool
    AdditionalEffectTargets: EAdditionalTriggeredEffectTargets
    bUsePlayerForAdditionalEffectTargetContext: bool
    bWantsEffectEndedEvent: bool
    bCanTriggerMultipleTimesPerFrame: bool



class OakPassiveAbilitySirenGhostArmControllerSpec:
    DurationType: EOakPassiveAbilitySirenArmDurationType
    TimerData: OakAbilityTimerData
    StatusEffectData: gbx_game_system_core.StatusEffectData



class BonusAttributeModifierUpgrade:
    GradeToApplyAt: int
    BonusUpgrade: gbx_game_system_core.AttributeInitializationData



class PassiveAbilityBuffData:
    PassiveAbilityClassPath: core_uobject.SoftObjectPath
    TreeBranchColorInfo: BranchColorInfo
    ItemFrameName: str
    AbilityNameLocNamespace: str
    AbilityNameLocKey: str
    GradeBonusInitializer: gbx_game_system_core.AttributeInitializationData



class BranchColorInfo:
    FrameColorName: str
    FrameColorHeader: core_uobject.LinearColor
    FrameColorBackground: core_uobject.LinearColor
    IconColor: core_uobject.LinearColor
    IconBackgroundColor: core_uobject.LinearColor
    IllustrationName: str



class OakPhaseWebSphereLinkedTargetList(engine.FastArraySerializer):
    Owner: OakPhaseWebSphere
    Items: unreal.WrappedArray[OakPhaseWebSphereLinkedTargetItem]



class OakPhaseWebSphereLinkedTargetItem(engine.FastArraySerializerItem):
    LinkedTarget: OakCharacter
    BeamData: OakPhaseWebSphereBeamData
    BeamComponent: engine.ParticleSystemComponent



class OakPhaseWebSphereBeamData:
    BeamEmitterName: str
    BeamParticleSystem: engine.ParticleSystem
    BeamSourceComponent: engine.SceneComponent
    SourceSocketName: str
    BeamDestComponent: engine.SceneComponent
    DestSocketName: str



class OakPhaseWebSphere_SharedDamageData:
    SharedDamage: float
    DamageType: unreal.UClass
    DamageSource: unreal.UClass



class OakPhaseWebSphereListLock:
    Owner: OakPhaseWebSphere
    PendingRemoves: unreal.WrappedArray[OakCharacter]



class OakPlayerAbilityHUDItemValue:
    StackCount: int
    PercentComplete: int



class OakActionAbilityAugmentSlotConfigurationList:
    Owner: OakPlayerAbilityManagerComponent
    SlotConfigurations: unreal.WrappedArray[OakActionAbilityAugmentSlotConfiguration]



class OakActionAbilityAugmentSlotConfiguration:
    ActionAbilityClass: unreal.UClass
    SlotData: OakActionAbilityAugmentSlotData
    AugmentConfigurations: unreal.WrappedArray[OakActionAbilityAugmentConfiguration]



class OakActionAbilityAugmentConfiguration:
    AugmentData: OakActionAbilityAugmentData
    Settings: unreal.WrappedArray[OakActionAbilityAugmentConfigurationSetting]



class OakActionAbilityAugmentConfigurationSetting:
    ModSlotData: OakActionAbilityAugmentSlotData
    ModData: OakActionAbilityAugmentData



class OakActionAbilityAugmentSlotList(engine.FastArraySerializer):
    Owner: OakPlayerAbilityManagerComponent
    Items: unreal.WrappedArray[OakActionAbilityAugmentSlot]



class OakActionAbilityAugmentSlot(engine.FastArraySerializerItem):
    ActionAbilityClass: unreal.UClass
    SlotData: OakActionAbilityAugmentSlotData
    AugmentData: OakActionAbilityAugmentData



class OakPlayerAbilitySlotList(engine.FastArraySerializer):
    Owner: OakPlayerAbilityManagerComponent
    Items: unreal.WrappedArray[OakPlayerAbilitySlot]



class OakPlayerAbilitySlot(engine.FastArraySerializerItem):
    SlotData: OakPlayerAbilitySlotData
    AbilityClass: unreal.UClass



class OakPlayerAbilityHUDItemList(engine.FastArraySerializer):
    Owner: OakPlayerAbilityManagerComponent
    Items: unreal.WrappedArray[OakPlayerAbilityHUDItem]



class OakPlayerAbilityHUDItem(engine.FastArraySerializerItem):
    HUDItemData: OakPlayerAbilityHUDItemData
    Value: OakPlayerAbilityHUDItemValue



class OakAbilitySlot:
    LevelUnlock: int
    SlotID: core_uobject.Guid



class OakActionAbilitySlot(OakAbilitySlot):
    AugmentSlots: unreal.WrappedArray[OakAbilitySlot]



class OakPlayerAbilityAllyQueryResult:
    Allies: unreal.WrappedArray[OakCharacter_Player]
    Companions: unreal.WrappedArray[engine.Actor]



class OakPlayerAbilityAllyQuerySpec:
    bInfiniteRange: bool
    Range: float
    bIncludeCompanions: bool



class AbilityTreeItem:
    Owner: OakPlayerAbilityTree
    ItemData: OakPlayerAbilityTreeItemData



class AbilityTreeTier:
    Owner: OakPlayerAbilityTree
    TierData: OakPlayerAbilityTreeTierData



class AbilityTreeBranch:
    Owner: OakPlayerAbilityTree
    BranchData: OakPlayerAbilityTreeBranchData



class ViewLeadingInfo:
    Translation: gbx_game_system_core.ViewLeadingTranslationInfo
    Rotation: gbx_game_system_core.ViewLeadingRotationInfo



class PlayerEchoLogStatus:
    EchoLogData: EchoLogData



class AutoAimDebugData: ...


class MissionDeliveryData:
    Missions: unreal.WrappedArray[unreal.UClass]
    MissionGiver: engine.Actor



class OakFriendEncounterData:
    TimeLastEncounter: int



class OakProfileMenuTutorialInfo:
    SeenTutorials: unreal.WrappedArray[str]
    bTutorialsDisabled: bool
    bTutorialsAllowedInNonGameModes: bool
    bHasSeenFastTravelPrompt: bool



class OakProfileLastInventoryFilterInfo:
    SlotTypeId: str
    LastFilterIndex: int



class TriggeredDamagePresentation: ...


class RecentlyResistedAttackData:
    DamagedActor: engine.Actor



class RecentIncomingDamageData:
    DamageInstigator: engine.Actor
    DamageInstigatorDamageComponent: gbx_game_system_core.DamageComponent
    DamageInstigatorLocation: engine.Vector_NetQuantize
    InitialDuration: float
    DamageSeverity: float
    TimeRemaining: float
    bWasJolt: bool
    Flags: gbx_game_system_core.ERecentDamageFlags
    InstanceId: int



class OakProfileCloudData:
    ProfileStatsData: unreal.WrappedArray[GameStatSaveGameData]
    BankInventoryList: unreal.WrappedArray[gbx_inventory.InventorySaveGameData]
    LostLootInventoryList: unreal.WrappedArray[gbx_inventory.InventorySaveGameData]
    NPCMailItems: unreal.WrappedArray[OakMailItem]
    MailGuids: unreal.WrappedArray[str]
    ProfileSDUList: unreal.WrappedArray[OakSDUSaveGameData]
    UnlockedCustomizations: unreal.WrappedArray[OakCustomizationSaveGameData]
    UnlockedInventoryCustomizationParts: unreal.WrappedArray[OakInventoryCustomizationPartInfo]
    GuardianExperience: int
    UnlockedCrewQuartersDecorations: unreal.WrappedArray[CrewQuartersDecorationItemSaveGameData]
    UnlockedCrewQuartersRooms: unreal.WrappedArray[CrewQuartersRoomItemSaveGameData]
    OakProfileChallengeData: unreal.WrappedArray[OakChallengeSaveGameData]
    CitizenScienceLevelProgression: unreal.WrappedArray[int]
    CitizenScienceCSBucksAmount: int
    bCitizenScienceHasSeenIntroVideo: bool
    bCitizenScienceTutorialDone: bool
    CurrentVaultCardDaySeed: int
    CurrentVaultCardWeekSeed: int
    VaultCardRewards: unreal.WrappedArray[VaultCardRewardList]
    VaultCardPreviousChallenges: unreal.WrappedArray[OakVaultCardPreviousChallengeData]



class OakVaultCardPreviousChallengeData:
    PreviousChallengeSeed: int



class GameStatSaveGameData:
    StatValue: int



class PlaythroughActiveFastTravelSaveData:
    ActiveTravelStations: unreal.WrappedArray[gbx_travel_station.ActiveFastTravelSaveData]



class LevelPersistence_Level_SaveGameData:
    LevelName: str
    SavedActors: unreal.WrappedArray[LevelPersistence_Actor_SaveGameData]



class LevelPersistence_Actor_SaveGameData:
    ActorName: str
    TimerRemaining: int



class InventoryUISaveGameData:
    PickupOrderIndex: int
    bHasBeenSeenInInventoryMenu: bool
    bMarkedAsFavorite: bool
    bMarkedAsJunk: bool
    InventoryListIndex: int



class UITrackingSaveGameData:
    bHasSeenSkillMenuUnlock: bool
    bHasSeenGuardianRankMenuUnlock: bool
    bHasSeenEchoBoot_AmmoBar: bool
    bHasSeenEchoBoot_ShieldBar: bool
    bHasSeenEchoBoot_Grenades: bool
    HighestTHVMBreadcrumbSeen: int
    SavedSpinOffset: int



class EchoLogSaveGameData:
    bHasBeenSeenInLog: bool



class CustomPlayerColorSaveGameData:
    ColorParameter: str
    AppliedColor: core_uobject.Vector
    SplitColor: core_uobject.Vector
    bUseDefaultColor: bool
    bUseDefaultSplitColor: bool



class EquippedInventorySaveGameData:
    InventoryListIndex: int
    Enabled: bool



class ChallengeCategoryProgressSaveData:
    CategoryProgress: unreal.WrappedArray[int]



class MissionPlaythroughSaveGameData:
    MissionList: unreal.WrappedArray[MissionStatusPlayerSaveGameData]



class MissionStatusPlayerSaveGameData:
    Status: int
    bHasBeenViewedInLog: bool
    bKickoffPlayed: bool
    LeagueInstance: int



class OakPlayerCharacterSlotSaveGameData:
    AugmentSlotList: unreal.WrappedArray[OakPlayerCharacterAugmentSaveGameData]



class OakPlayerCharacterAugmentSaveGameData: ...


class RegionSaveGameData:
    GameStage: int
    PlayThroughIdx: int



class PlayerClassSaveGameData: ...


class SDUBonusLevelData(engine.TableRowBase):
    SDUPrice: int
    Currency: gbx_inventory.InventoryCategoryData
    AttributeModifyInfo: gbx_game_system_core.AttributeEffectData
    SDURarity: gbx_inventory.InventoryRarityData



class SpawnPointEffect:
    Condition: gbx_runtime.GbxCondition
    SpecialEffect: unreal.UClass



class OakStatusEffectPresentation_Audio:
    bUsesAudioEvents: bool
    StartEvent: wwise_audio.WwiseEvent
    StopEvent: wwise_audio.WwiseEvent



class OakStatusEffectPresentation_Material:
    bUsesMaterialParameter: bool
    MaterialParameterName: str
    TransitionDuration: float



class OakStatusEffectPresentation_Material_TransitionData:
    TransitionTriggerValue: float
    MaterialTargetValue: float



class OakStatusEffectPresentation_ScreenParticle:
    bUsesScreenParticle: bool
    TransitionDuration: float
    ParamName: str
    FirstPersonScreenEffect: engine.ParticleSystem
    ScreenParticleDepth: float



class OakStatusEffectPresentation_Particle:
    bUsesThirdPersonParticles: bool
    ParticlePresentationName: str
    ThirdPersonParameterName: str
    ThirdPersonParticleSystem: engine.ParticleSystem
    SupportedEmitters: unreal.WrappedArray[str]



class DonorInfo:
    DonorName: str
    TotalDonation: int



class Donator:
    bIsFirstDonator: bool
    DonatorName: str
    NumberOfDonations: int
    BitsDonatedTotal: int



class DonationTier:
    PercentOfMinProductCost: float
    TierTitle: str
    TierDescription: str
    TierDuration: float



class BitProduct:
    ProductName: str
    ProductSKU: str
    ProductDevSKU: str
    BitsCost: int



class StreamingStatusInfo:
    Text: str
    Color: core_uobject.Color
    Description: str
    bIsDescriptionRelevant: bool



class OakInteractiveEventStats:
    NbRareChestEvents: int
    RareChestEventWinners: int
    NbBadassEvents: int
    BadassViewersKilled: int
    NbPinataEvents: int
    NbMoxxisEvents: int
    MoxxisEventTotalBits: int
    NbExtractionEvents: int



class OakInteractiveSessionStats:
    SessionLifetimeInSeconds: float
    DamageCaused: int
    NbEnemiesKilled: int
    NbTimeInjured: int
    NbTimeDead: int
    NbLegendaries: int



class PollActionInfo:
    PollAction: StreamingPoolActionInfo
    SelectionText: str
    Weight: float
    MaxUsagePerEvent: int
    ActionID: int
    NbTimeUsedInEvent: int
    LastSelectedValue: float
    VoteCount: int



class MinimalCharacterInfo:
    ExperiencePoints: int
    PlayerLevel: int
    BackpackSize: int
    GoldenKeys: int
    Inventory: unreal.WrappedArray[MinimalInventoryInfo]
    EquippedInventory: unreal.WrappedArray[MinimalEquippedInventoryInfo]
    AbilityPoints: int
    AbilitySlots: unreal.WrappedArray[MinimalAbilitSlotInfo]
    AugmentSlots: unreal.WrappedArray[MinimalAugmentSlotInfo]



class SkillTreeItemsStatValues: ...


class MinimalAugmentSlotInfo: ...


class MinimalAbilitSlotInfo: ...


class MinimalEquippedInventoryInfo:
    PickupOrderIdx: int
    bEnabled: bool



class MinimalInventoryInfo:
    PickupOrderIdx: int
    StoredActor: engine.Actor
    SerialNumber: str
    ThumbnailName: str
    InventoryCategory: gbx_inventory.InventoryCategoryData
    bIsTrash: bool
    bIsFavorite: bool
    bIsMissionItem: bool
    ItemJsonObjString: str
    bBase64ThumbnailGenerated: bool



class OakThumbnailManagerConfig:
    ThumbnailLoadFrequency: float
    MaxThumbnails: int
    ThumbnailSize: core_uobject.IntPoint
    ThumbnailMaterial: engine.MaterialInterface



class OakThumbnailManagerItemInfo:
    URL: str
    IconData: OakThumbnailManagerIcon
    RenderProperties: OakThumbnailManagerRenderProperties



class OakThumbnailManagerRenderProperties:
    ItemTransform: core_uobject.Transform
    LightProperties: OakThumbnailManagerLightProperties
    AdditionalLights: unreal.WrappedArray[OakThumbnailManagerLightProperties]
    ThumbnailParameters: engine.ThumbnailParameters
    PostProcessSettings: engine.PostProcessSettings



class OakThumbnailManagerLightProperties:
    Direction: core_uobject.Rotator
    Brightness: float
    Color: core_uobject.Color



class OakThumbnailManagerIcon: ...


class OakUIChallengeListData:
    HeaderCategory: gbx_game_system_core.ChallengeCategoryData
    NumHeaderChildren: int
    NumHeaderChildrenCompleted: int
    ChallengeInstanceData: gbx_game_system_core.ChallengeInstanceData
    ZoneMapData: ZoneMapData
    NumChildren: int
    NumChildrenComplete: int
    bIsUndiscovered: bool
    ChallengeClass: unreal.UClass
    OwnerDataProvider: OakUIChallengeDataProvider
    bShowAllChallenges: bool



class OakUIVirtualBackpackConfig: ...


class TouchPickupEvaluationResult:
    Pickups: unreal.WrappedArray[OakInventoryItemPickup]



class PickupEvaluationResult:
    Pickup: OakInventoryItemPickup



class VaultCardColumnData:
    VaultCardRewardRows: unreal.WrappedArray[VaultCardRewardData]



class VaultCardRewardDataBase:
    DisplayName: str
    Description: str
    PerkFrameName: str
    VaultCardRewardKeyCost: int



class VaultCardRewardData(VaultCardRewardDataBase):
    VaultCardRewardCustomizations: unreal.WrappedArray[OakCustomizationData]
    VaultCardRewardWeaponSkin: WeaponSkinPartData
    VaultCardRewardWeaponTrinket: WeaponTrinketPartData
    VaultCardRewardQuartersDeco: CrewQuartersDecorationItemData



class VaultCardGearRewardData(VaultCardRewardDataBase):
    GearReward: gbx_inventory.InventoryBalanceData
    GearRewardItemPool: gbx_inventory.ItemPoolData



class HornSequence:
    HornSequence: unreal.WrappedArray[HornSequenceEntry]



class FakeGear:
    RPMCurve: engine.FloatCurve
    SpeedMinMax: core_uobject.Vector2D



class NavPainterLayerEntry: ...


class SkinParameterData:
    Color1: unreal.WrappedArray[gbx_inventory.MaterialParameterData]
    Color2: unreal.WrappedArray[gbx_inventory.MaterialParameterData]
    Color3: unreal.WrappedArray[gbx_inventory.MaterialParameterData]



class StuckTeleport:
    bEnableStuckTeleport: bool
    ForwardStuckValue: float
    CantMoveValuePerSec: float
    StuckTeleportTrigger: float
    StuckDecay: float
    bShowDebug: bool



class OakVehicleNavCorrecter:
    World: engine.World
    GbxNavWorld: gbx_nav.GbxNavWorld
    OakNavComp: OakNavComponent
    OakVehicle: OakVehicle
    NavAgentProps: engine.NavAgentProperties



class VehicleUnlockedSaveGameData:
    AssetPath: str
    bJustUnlocked: bool



class DummyProjectileInfo:
    ProjectileClass: unreal.UClass
    Socket: str
    TransitInAction: unreal.UClass
    TransitOutAction: unreal.UClass
    TransitInSoundEvent: wwise_audio.WwiseEvent
    ProjectileActor: engine.Actor



class WeaponAudioBodyLoopPlaybackInfo: ...


class WeaponAudioBodyLoop:
    PlaybackSocket: str
    StartLoopEvent: wwise_audio.WwiseEvent
    StopLoopEvent: wwise_audio.WwiseEvent
    LoopType: EWeaponAudioBodyLoopType
    ComponentSize: float
    ComponentTag: str



class WeaponShellCasingImpact: ...


class WeaponShellCasingAudioParameters:
    ShellCasingWwiseEvent: wwise_audio.WwiseEvent
    EjectDistance: float
    ImpactDelay: float



class WeaponAudioFailsafe: ...


class WeaponConfigurationRtpc:
    RtpcParam: wwise_audio.WwiseRtpc
    Value: float
    PriorityAveragingSum: float



class WeaponConfigurationEvent:
    Priority: int
    WwiseEvent: wwise_audio.WwiseEvent



class OakVehicleWeaponTriggerFeedbackDefinitionData:
    Feedback: gbx_weapon.WeaponTriggerFeedbackAsset
    WeaponAssetPath: str



class OakWeaponTriggerFeedbackDefinitionData:
    Feedback: gbx_weapon.WeaponTriggerFeedbackAsset
    WeaponClassPath: str
    PartType: EOakWeaponPartType
    PartTypeValue: int



class OakWeaponNamingAttributePair:
    FirstAttributeName: str
    SecondAttributeName: str
    NamePart: gbx_inventory.InventoryNamePartData



class OakWeaponNamingAttributeThresholdData:
    AttributeName: str
    FirstThreshold: float
    SecondThreshold: float



class OakWeaponAttributeNamingData:
    Attribute: gbx_game_system_core.GbxAttributeData
    NamingTiers: unreal.WrappedArray[OakWeaponNameThresholdPairData]



class OakWeaponNameThresholdPairData:
    Threshold: float
    NamePart: gbx_inventory.InventoryNamePartData



class WindVectorField:
    VectorFieldSize: core_uobject.IntVector
    Bounds: core_uobject.Box



class RepWindDirection:
    TargetYaw: float
    Duration: float



class RepWindGust:
    Seed: int



class OperativeBarrierState:
    BarrierState: EOperativeBarrierState
    RedeployLocation: core_uobject.Vector
    RedeployRotation: core_uobject.Rotator
    bIsTransitioningStates: bool



class OperativeBarrierStatusEffectInfo:
    OwnerStatusEffect: gbx_game_system_core.StatusEffectData
    DefaultStatusEffect: gbx_game_system_core.StatusEffectData
    Duration: float



class ShieldBarrierTrackedBuffTarget:
    Target: engine.Actor
    Mod1Reference: gbx_game_system_core.StatusEffectInstanceReference
    Mod5Reference: gbx_game_system_core.StatusEffectInstanceReference



class CurrentOperativeStandInAbilitySlotInfo:
    ActionAbility: unreal.UClass
    AuxiliaryActor: StandInAuxiliaryActor



class OperativeStandInActionAbility:
    CharacterFlourishAnimation: unreal.UClass
    AuxiliaryActor: unreal.UClass
    AuxiliaryTranslationOffset: core_uobject.Vector
    AuxiliaryRotationOffset: core_uobject.Rotator
    AuxiliaryScale: float
    AuxiliaryFlourishAnimation: unreal.UClass
    AuxiliaryIdleAnimation: unreal.UClass
    bAttachAuxiliaryActorToCharacter: bool
    AuxiliaryAttachmentSocket: str
    bCopyPlayerAnims: bool
    bCopyPlayerWeapon: bool
    FadeInFlourishVisibleDelay: float



class GamepadStickTypeToSchemes:
    SchemesWithStickType: unreal.WrappedArray[RebindContextAndDescription]



class RebindContextAndDescription:
    SchemeName: str
    Description: unreal.WrappedArray[OptionDescriptionItem]



class OutrunnerVehicleAnimInstanceProxy(OakVehicleAnimInstanceProxy): ...


class PerPlayerCullable:
    CullableActor: engine.Actor



class PhotoModeState:
    bPhotoModeUIVisible: bool
    bHUDVisible: bool
    bGamePausedState: bool
    bAutoFocusState: bool
    PostProcessSettings: engine.PostProcessSettings
    Contrast: float
    DOFIntensity: float
    FOV: float
    bFilmToneMapperState: bool
    FilterIndex: int
    FilterIntensity: float
    FocalDistance: float
    FocalRegion: float
    FringeIntensity: float
    Gain: float
    Gamma: float
    GrainIntensity: float
    bHidePlayerState: bool
    Quality: float
    Saturation: float
    Shoulder: float
    Slope: float
    bSuperSharpModeState: bool
    Toe: float
    ViewRoll: float
    VignetteIntensity: float
    VignetteFeathering: float
    TimeOfDay: float
    bPausable: bool
    bHideDamageNumbersState: bool
    bOverrideFocusState: bool
    bMatchGameState: bool



class PhotoModeOptionSet:
    OptionSetName: str
    Options: unreal.WrappedArray[PhotoModeOption]



class PhotoModeOption:
    OptionName: str
    OptionEffect: EPhotoModeOptionEffect
    bIsSlider: bool
    SliderDisplayMin: float
    SliderDisplayMax: float
    SliderOutputMin: float
    SliderOutputMax: float
    bSliderDisplayAsInteger: bool
    SliderStepping: float
    SliderRepeatsToAccelerate: int
    SliderMaxIncreases: int
    SliderFastestSteps: int
    SpinnerOptions: unreal.WrappedArray[str]



class ZoneMapPOIMeshListEntry:
    ZoneMapPOIMesh: engine.StaticMesh
    ZoneMapForPOIMesh: ZoneMapData



class OakPlayerCharacterSlotItemList(engine.FastArraySerializer):
    Owner: PlayerCharacterComponent
    Items: unreal.WrappedArray[OakPlayerCharacterSlotItem]



class OakPlayerCharacterSlotItem(engine.FastArraySerializerItem):
    SlotData: PlayerCharacterComponentSlotData
    AugmentData: PlayerCharacterComponentAugmentData



class GuardianRankRewardCategoryEntry:
    RankRewardCategory: GuardianRankRewardCategoryData
    NumCategoryTokens: int



class GuardianRankPerkEntry:
    RankPerk: GuardianRankPerkData
    PerkAbilityInstance: gbx_abilities.GbxAbility
    bUnlocked: bool
    bWasJustUnlocked: bool



class GuardianRankRewardEntry:
    RankReward: GuardianRankRewardData
    NumTokens: int



class GuardianRankEnabledIndexTracker: ...


class GuardianRankCharacterSaveGameData:
    AvailableTokens: int
    GuardianRank: int
    GuardianExperience: int
    bGuardianRankSystemEnabled: bool
    RankRewards: unreal.WrappedArray[GuardianRankRewardCharacterSaveGameData]
    RankPerks: unreal.WrappedArray[GuardianRankPerkCharacterSaveGameData]
    RankRewardRandomSeed: int



class GuardianRankPerkCharacterSaveGameData:
    bEnabled: bool



class GuardianRankRewardCharacterSaveGameData:
    NumTokens: int
    bEnabled: bool



class GuardianRankSaveGameData:
    GuardianRank: int
    StartingExperience: int
    GuardianExperience: int



class GuardianRankProfileData:
    AvailableTokens: int
    RankRewards: unreal.WrappedArray[GuardianRankRewardSaveGameData]
    GuardianRank: int
    GuardianExperience: int
    RankRewardRandomSeed: int



class GuardianRankRewardSaveGameData:
    NumTokens: int



class PlayerIdentityWidgetInfo: ...


class MeleeReverseImpactEntry:
    TargetMass: float
    ImpactForce: float



class PlayerBuyBackableInventory:
    InventoryActor: engine.Actor



class LobbyPlayerStandInLoadOutInfo:
    HeadCustomization: OakCustomizationData
    BodyCustomization: OakCustomizationData
    SkinCustomization: OakCustomizationData
    EquippedEmote: OakCustomizationData
    Weapon1Skin: WeaponSkinPartData



class StandInAuxiliaryState:
    Actor: StandInAuxiliaryActor
    TemplateData: FrontendStandInAuxiliaryActorData



class FrontendStandInAuxiliaryActorData:
    ActorClass: unreal.UClass
    Translation: core_uobject.Vector
    Rotation: core_uobject.Rotator
    Scale: float
    bPlayAnimations: bool
    bDigistructIn: bool
    DigistructDelay: float
    bAttachAuxiliaryActorToCharacter: bool
    AuxiliaryAttachmentSocket: str
    bCopyPlayerWeapon: bool
    PlayerTranslation: core_uobject.Vector
    PlayerRotation: core_uobject.Rotator



class PlayerStandInInitData:
    PlayerClass: PlayerClassIdentifier
    OwnerPlayerController: OakPlayerController



class ExtraStandInAnimationMeshData:
    ComponentName: str
    AnimBlueprint: unreal.UClass
    AnimSet: engine.GbxAnimSet



class FrontendStandInSpecialAnimationData:
    Animation: unreal.UClass
    AuxiliaryAnimation: unreal.UClass
    InitialDelay: float



class PlayerStandIn_Augment:
    ActorData: FrontendStandInAuxiliaryActorData
    bOverrideDefault: bool



class PlayerStandIn_ActionAbility:
    ActorData: FrontendStandInAuxiliaryActorData
    bOverrideDefault: bool



class ProjectedMeshResults: ...


class ProjectedMeshOptions:
    Shape: EProjectedMeshShape
    Size: float
    Scale2D: core_uobject.Vector2D
    Complexity: int
    NumRings: int
    bFlipNormals: bool
    bGenerateUVs: bool
    CollisionChannel: int
    StartTraceDistance: float
    EndTraceDistance: float
    PushAwayDistance: float
    bIgnoreActor: bool
    AdditionalIgnoredActors: unreal.WrappedArray[engine.Actor]



class RegionBalancePreviewData:
    GameStageMinimum: int
    GameStageMaximum: int
    GameStageIncreaseOverPlayerLevel: int



class PlayThroughData:
    PlayThrough: int
    bEnforceMinimumGameStageForPlaythrough: bool
    MinimumGameStageForPlaythrough: gbx_game_system_core.AttributeInitializationData
    Regions: unreal.WrappedArray[RegionBalanceData]
    bGameStageTracksPlayerLevelAboveMinimum: bool



class RegionBalanceDataBase:
    MinGameStage: int
    MaxGameStage: int
    GameStageIncreaseAbovePlayer: int
    bSpecifyBoostAbovePlayer: bool



class RegionBalanceData(RegionBalanceDataBase):
    REGION: RegionData
    MissionOverrides: unreal.WrappedArray[RegionMissionBalanceData]



class RegionMissionBalanceData(RegionBalanceDataBase):
    Mission: unreal.UClass



class RegionSaveData:
    REGION: RegionData
    GameStage: int
    PlayThroughIdx: int



class RevolverVehicleAnimInstanceProxy(OakVehicleAnimInstanceProxy): ...


class SDUCaseSpawner:
    AttachmentSocketName: str
    SDUData: OakSDUData
    DisplayMesh: engine.StaticMesh
    NextSDULeft: str
    NextSDURight: str
    NextSDUUp: str
    NextSDUDown: str
    bSoldOut: bool
    AttachmentSocket: gbx_game_system_core.SocketComponent
    CameraSocket: gbx_game_system_core.SocketComponent
    DisplayMeshComponent: engine.StaticMeshComponent
    TextRenderComponent: engine.TextRenderComponent
    MouseCollisionComponent: engine.BoxComponent



class ShieldDamageModifierData:
    Augment: ShieldAugment_DamageModifier
    ModifierInstance: gbx_game_system_core.ConditionalDamageModifier
    RegisteredCharacters: unreal.WrappedArray[OakCharacter]



class AugmentData:
    Shield: Shield
    StackCount: int
    bCanBeTriggered: bool
    bInstanceBool: bool
    InstanceFloat: float
    InstanceInt: int
    InstanceVector: core_uobject.Vector
    InstanceActor: engine.Actor



class TrackedShieldAttributeData:
    Data: gbx_game_system_core.GbxAttributeData
    ModifierHandle: gbx_game_system_core.GbxAttributeModifierHandle
    ShieldAugmentClass: unreal.UClass



class ShieldAugmentDamageEventData:
    bShieldMustNotBeDepleted: bool
    bInstanceBoolMustBeTrue: bool
    bInstanceBoolMustBeTrueForBarrier: bool
    bMustBeTriggerable: bool
    bSetNotTriggerableAfterTriggering: bool
    TriggerCooldown: gbx_game_system_core.AttributeInitializationData
    DamageEventFilter: gbx_game_system_core.DamageFilter



class ShieldAugmentAbsorbRestoreData:
    bOnlyTriggerOnBarrier: bool
    TriggeringDamageTypes: unreal.WrappedArray[unreal.UClass]
    RestoreAmount: gbx_game_system_core.AttributeInitializationData



class AdaptiveTypeAssociations:
    DamageType: EOakElementalType
    ResistanceAttribute: gbx_game_system_core.GbxAttributeData
    TriggerAudioEvent: wwise_audio.WwiseEvent
    HitByTypeAudioEvent: wwise_audio.WwiseEvent



class AttributeModifiers:
    AttributeToModify: gbx_game_system_core.GbxAttributeData
    ModifierType: engine.EGbxAttributeModifierType
    StackValues: unreal.WrappedArray[gbx_game_system_core.AttributeInitializationData]



class DamageTypeAttribute:
    AttributeToModify: gbx_game_system_core.GbxAttributeData
    DamageType: unreal.UClass



class ShieldTriggeredProjectileReflectEffect:
    bShieldMustBeActiveToTrigger: bool
    LightProjectile: unreal.UClass
    Damage: gbx_game_system_core.AttributeInitializationData



class ShieldTriggeredElementalEffect:
    bShieldMustBeActiveToTrigger: bool
    DamagePerSecond: gbx_game_system_core.AttributeInitializationData
    ResourceEffectValue: gbx_game_system_core.AttributeInitializationData
    DamageType: unreal.UClass



class SirenArmAppearanceState:
    PassiveGhostArmConfiguration: SirenGhostArmConfiguration
    bTattooFlare: bool
    ElementalType: EPhaseTranceElementalType
    ActiveGhostArmConfiguration: SirenGhostArmConfiguration
    Owner: SirenCharacterComponent



class SirenGhostArmConfiguration:
    GhostArmConfiguration: ESirenGhostArmConfigurationType
    MaterialInstance: engine.MaterialInstance



class RushStackInstance:
    StackData: SirenRushStackData



class SirenStandInFlourish:
    bHideCharacterDuringFlourish: bool
    bStartAuxiliaryActorHidden: bool
    AuxiliaryActor: unreal.UClass
    Animation: unreal.UClass



class SpawnFactorKeyedAction:
    bOverrideKeyedActionList: bool
    SpawnKeyedActionList: unreal.WrappedArray[gbx_game_system_core.DataActionPair_Spawn]
    SpawnMeshKeyedActionList: unreal.WrappedArray[gbx_game_system_core.DataActionPair_SpawnMesh]
    SmartObjectKeyedActionList: unreal.WrappedArray[gbx_game_system_core.DataActionPair_SmartObject]



class WeightedPassengersNum:
    PassengerCount: int
    Weight: float



class SeatOccupant:
    SeatSlot: int
    SpawnOptions: gbx_spawn.SpawnOptionData



class VehiclePartListData(gbx_game_system_core.ActorPartListData): ...


class SpawnFactoryDataArray:
    SpawnFactoryDataArray: unreal.WrappedArray[gbx_spawn.SpawnFactoryData]



class SpawnInventoryLootRequest:
    ContextActor: engine.Actor
    SelectedInventoryInfos: unreal.WrappedArray[gbx_inventory.SelectedInventoryInfo]
    InstancingPolicy: ELootInstancingPolicy
    PlayerToInstanceFor: OakPlayerController



class SpawnInventoryLootRequestEntry(SpawnInventoryLootRequest): ...


class SpawnDroppedPickupLootRequest:
    ContextActor: engine.Actor
    SelectedInventoryInfos: unreal.WrappedArray[gbx_inventory.SelectedInventoryInfo]
    ItemPools: gbx_inventory.ItemPoolListInterface
    InstancingPolicy: ELootInstancingPolicy
    PlayerToInstanceFor: OakPlayerController
    bStartHidden: bool
    bRandomizeActivateDelay: bool
    ActivateDelay: float
    MaxSpawnDelay: float
    InitialLootMassScale: float
    LootSpawnAction: unreal.UClass
    SocketName: str
    RequestType: ESpawnDroppedPickupLootRequestType
    AttributeEffects: unreal.WrappedArray[gbx_game_system_core.AttributeEffectData]
    bDroppedFromAI: bool
    DropPattern: LootSpawnPatternData
    AttachComponent: engine.SceneComponent
    AttachmentMode: gbx_inventory.EPickupLootAttachmentMode



class SpawnDroppedPickupLootRequestEntry(SpawnDroppedPickupLootRequest):
    SpawningStates: unreal.WrappedArray[SelectedInventorySpawningState]



class SelectedInventorySpawningState:
    SeletedInventoryInfo: gbx_inventory.SelectedInventoryInfo
    InitData: gbx_inventory.InventoryBalanceStateInitializationData



class SplineFollowerDistanceCheckpoint:
    Name: str
    Distance: float



class HardPointSlotSettings:
    AnimationSlotName: str
    CESlotName: str
    HardPointSelectedCE: unreal.UClass
    HardpointPreviewCE: unreal.UClass
    HardPointEquippedCE: unreal.UClass



class IronBearHardPointAugmentInfo:
    Mesh: engine.SkeletalMesh
    LeftFlourishAnimation: unreal.UClass
    RightFlourishAnimation: unreal.UClass



class FrontendStandInSlotSettings:
    SlotsToRemainHidden: unreal.WrappedArray[int]
    Transitions: FrontendStandInSlotTransitionSettings



class FrontendStandInSlotTransitionSettings:
    SlotsToHideDuringInspection: unreal.WrappedArray[int]



class GlobalsStandInSettings:
    BaseStandInDepth_EchoRelative: float
    BaseStandInPosition_EchoRelative: core_uobject.Vector2D
    BaseStandInRotation_EchoRelative: core_uobject.Rotator
    BaseEchoProjectionFXDepth_UIObject: float



class StandInUIConfigData(engine.TableRowBase):
    bPositionRelativeToEchoDeviceProjectionSocket: bool
    CustomPivotSocket: str
    bLockStandInPositionOnFadeOut: bool
    Lighting: StandInLightingSetting
    Scale: StandInScaleSetting
    Positioning: StandInPositionSetting
    ScaleSplitScreen: StandInScaleSetting
    ScaleVerticalSplitScreen: StandInScaleSetting
    ScaleQuadSplitScreen: StandInScaleSetting
    PositioningSplitScreen: StandInPositionSetting
    PositioningVerticalSplitScreen: StandInPositionSetting
    PositioningQuadSplitScreen: StandInPositionSetting
    bMayAlterRotationDamping: bool
    RotationDamping: float
    LocationDamping: float



class StandInPositionSetting:
    ScreenPosition: core_uobject.Vector2D
    DefaultRotation: core_uobject.Rotator
    Depth: float
    bOrientProjectionFX: bool
    ProjectionFXOffset: core_uobject.Vector2D
    ProjectionFXDepthOffset: float



class StandInPlayerClassSpecificPositionSetting:
    ScreenPosition: core_uobject.Vector2D
    DefaultRotation: core_uobject.Rotator
    Depth: float



class StandInPlayerClassSpecificPositionSettingContextOverride:
    ScreenPosition: core_uobject.Vector2D
    DefaultRotation: core_uobject.Rotator
    Depth: float



class StandInScaleSetting:
    Scale: float
    AutoScaleMode: EStandInAutoScaleMode
    AutoScaleExtent: core_uobject.Vector



class StandInLightingSetting:
    DefaultLighting: StandInLightingConfig



class StandInLightingConfig:
    LightComponents: unreal.WrappedArray[StandInLightingComponentConfig]
    AmbientCubemapIntensity: float



class StandInLightingComponentConfig:
    ComponentName: str
    bOverrideLocation: bool
    Location: core_uobject.Vector
    bOverrideRotation: bool
    Rotation: core_uobject.Rotator
    bOverrideIntensity: bool
    Intensity: float



class StandInUIController:
    VerticalSplitInVehicleAdjustment: float
    OuterObject: unreal.UObject
    PlayerController: OakPlayerController
    StandInContainer: OakUIActorContainer
    LightComponents: unreal.WrappedArray[StandInLightComponentInstance]
    StandInTransformRoot: engine.SceneComponent
    CurrentStandInActor: engine.Actor
    SecondaryActors: unreal.WrappedArray[engine.Actor]
    TempInventoryActor: engine.Actor
    StandInTemplateInventoryBalanceState: gbx_inventory.InventoryBalanceStateComponent
    LastDesiredActorData: DesiredStandInActorData
    DesiredActorData: DesiredStandInActorData
    StreamedObjects: unreal.WrappedArray[unreal.UObject]



class StandInLightComponentInstance:
    Component: engine.LightComponent



class StandInUIControllerTickFunction(engine.TickFunction): ...


class StreamerBoosterInfo:
    NameId: str
    DisplayName: str
    StatusEffectData: gbx_game_system_core.StatusEffectData
    Icon: engine.Texture



class TechnicalVehicleAnimInstanceProxy(OakVehicleAnimInstanceProxy): ...


class TestMapMenuEntry:
    DisplayName: str
    MapName: str



class TransporterCraneRecord:
    CraneState: int
    MoveSpeed: float
    MoveStartPosition: float
    MoveStartTime: float



class WeightedTransporterCrane:
    Crane: unreal.UClass
    Weight: int



class TrophyCaseReplicatedSet:
    BaseData: unreal.WrappedArray[TrophyCaseReplicatedBase]



class TrophyCaseReplicatedBase:
    BaseTag: str
    CompletedProgressLevel: int
    MaxProgressLevel: int



class ChallengeTrophySet:
    TrophySetName: str
    TrophySetDescription: str
    TrophyGroupList: unreal.WrappedArray[ChallengeTrophyGroup]



class ChallengeTrophyGroup:
    TrophyGroupName: str
    TrophyGroupDescription: str
    AssociatedGroupBase: TrophyCaseBaseComponent
    TrophyList: unreal.WrappedArray[ChallengeTrophy]



class ChallengeTrophy:
    TrophyName: str
    TrophyDescription: str
    TrophyMesh: engine.StaticMesh
    AssociatedChallenge: unreal.UClass
    AssociatedTrophyBaseTag: str
    AssociatedTrophyBase: ChallengeTrophyBaseComponent



class PlaythroughUnlockedData:
    PlaythroughUnlockedMessages: unreal.WrappedArray[TutorialMessageDataAsset]
    PlaythroughUnlockedMessages_Modal: unreal.WrappedArray[GFxModalTutorialDataAsset]
    bUseModalTutorial: bool
    ModalTutorialDelay: float



class TutorialLevelUpData:
    LevelUpMessage: TutorialMessageDataAsset
    LevelUpMessage_Modal: GFxModalTutorialDataAsset
    LevelForMessage: int
    bUseModalTutorial: bool
    ModalTutorialDelay: float



class GFxNewsMenuFullscreenData:
    NewsLabel: str



class CurrencyInfo:
    ItemCategory: gbx_inventory.InventoryCategoryData
    IncStartAudioEvent: str
    IncStopAudioEvent: str
    DecStartAudioEvent: str
    DecStopAudioEvent: str
    CurrencyFrameName: str



class WeaponTypeAttributeStatWeighting:
    WeaponType: gbx_weapon.WeaponTypeData
    WeightedStats: unreal.WrappedArray[WeightedWeaponUIStat]



class WeightedWeaponUIStat:
    NormalizationRange: core_uobject.FloatInterval
    Attribute: gbx_game_system_core.GbxAttributeData
    ValueStyle: gbx_game_system_core.EUIStatValueStyle
    Weight: float
    PreviewPercentWeight: float



class VehicleAttachWeaponAdditionalData:
    Key: str
    Data: str



class WheelRandomSwitchPack:
    WheelSwitches: unreal.WrappedArray[wwise_audio.WwiseSwitch]
    WheelsToIgnoreForSwitches: unreal.WrappedArray[int]



class VehicleConfigurationRtpc:
    RtpcParam: wwise_audio.WwiseRtpc
    DefaultValue: float
    ValueAttribute: gbx_game_system_core.GbxAttributeData
    bUpdateEveryFrame: bool



class VehicleConfigurationEvent:
    WwiseEvent: wwise_audio.WwiseEvent
    AudioComponentTag: str



class VehicleAudioLoopOnNamedCompData:
    AudioLoopData: VehicleAudioLoopData
    AudioComponentTag: str
    PlaybackInstances: unreal.WrappedArray[wwise_audio.WwisePlaybackInstance]



class VehicleAudioLoopData:
    LoopStart: wwise_audio.WwiseEvent
    LoopEnd: wwise_audio.WwiseEvent



class VehicleLandingEventData:
    LandingEvent: wwise_audio.WwiseEvent
    MaxTimeInAir: float



class VehicleEffect:
    EffectData: BaseVehicleEffectData



class VehicleImpactEffectData:
    FilteredImpactData: unreal.WrappedArray[FilteredImpactData]



class FilteredImpactData:
    ImpactData: unreal.WrappedArray[gbx_game_system_core.ImpactData]
    DefaultVehicleOccupantsFeedback: gbx_game_system_core.FeedbackData
    FeedbackScale: float
    bLocalOnlyFeedback: bool



class EmitterEnableData:
    EmitterName: str
    EnableMode: EEmitterEnableMode



class VehicleEffectQueryData:
    Event: str
    EffectEvent: EVehicleEffectEvent
    ComponentTag: str



class VehicleEffectData:
    Event: str
    ParticleEffect: engine.ParticleSystem
    Socket: str
    bPlayerOnly: bool
    bAutoActivate: bool
    bPlayAudioAtLocation: bool
    RelativeLocation: core_uobject.Vector
    RelativeRotation: core_uobject.Rotator
    RelativeScale: float
    StartAudioEvent: wwise_audio.WwiseEvent
    StopAudioEvent: wwise_audio.WwiseEvent
    ConditionalAudioSwitches: unreal.WrappedArray[ConditionalAudioSwitch]
    AudioComponentName: str
    AudioEmitterRadius: float



class ConditionalAudioSwitch:
    SwitchCondition: gbx_runtime.GbxCondition
    SwitchToSet: wwise_audio.WwiseSwitch



class VehicleOverrideData:
    PartSelections: unreal.WrappedArray[str]
    Property: unreal.WrappedArray[str]
    Data: unreal.UObject
    DataType: unreal.UClass



class UseCharacterWeaponSettings:
    ShootMaxAngle: float



class InventoryPartDataUnlockedInfo: ...


class InventoryDataUnlockedInfo: ...


class ExtraWadingData:
    WadingData: VehicleTrailData
    DefaultWadeParticleSystem: VehicleTrailParticleSystemData



class VehicleTrailParticleSystemData:
    ParticleSystemTemplate: engine.ParticleSystem
    VectorParamsToSet: unreal.WrappedArray[TrailVectorParam]



class TrailVectorParam:
    ParamName: str
    Value: core_uobject.Vector



class VehicleTrailData:
    WheelFXSocketName: str
    WheelPhysBoneName: str
    LocalOffset: core_uobject.Vector
    LocalRotationOffset: core_uobject.Rotator
    TrailPSComponent: engine.ParticleSystemComponent
    WadingPSComponent: engine.ParticleSystemComponent
    WheelRef: gbx_vehicle.GbxVehicleWheel



class VendingMachineMenuFilter:
    Name: str
    DataTypeFilter: gbx_inventory.InventoryCategoryData



class VendingMachineInteractSequence:
    DigistructCurve: engine.RuntimeFloatCurve
    Duration: float
    Events: unreal.WrappedArray[VendingMachineSequenceTimedEvent]



class VendingMachineSequenceTimedEvent:
    Delay: float
    EventName: str



class VendingMachineLastSelectionData:
    InventoryActor: engine.Actor



class VendingMachineItemRarityData:
    Rarity: gbx_inventory.InventoryRarityData
    ShelfMaterial: engine.MaterialInterface
    ItemOfTheDayShelfMaterial: engine.MaterialInterface
    SelectionParticleRarityParameter: float



class VendingMachineTrayTile:
    PhysicalActor: gbx_inventory.PickupableMeshActor
    InventoryActor: engine.Actor
    InventoryBalance: gbx_inventory.InventoryBalanceStateComponent



class VendingMachinePhysicalShelf:
    ShelfMeshComponent: engine.StaticMeshComponent
    ClickCollisionComponent: engine.BoxComponent
    ItemScoreParticleComponent: engine.ParticleSystemComponent
    SoldOutParticleComponent: engine.ParticleSystemComponent
    MaterialInstance: engine.MaterialInstanceDynamic



class WeaponUseModeAspectSetData:
    Aspect: WeaponUseModeAspectData
    SecondaryAspectList: unreal.WrappedArray[WeaponUseModeSecondaryAspectData]
    DamageTypeAspect: WeaponDamageTypeAspectData
    NameAspect: WeaponUseModeNameAspectData
    CrosshairAspect: WeaponUseModeCrosshairAspectData



class WeaponBonusDataTableSelectionData:
    UseModeBitmask: int
    WeaponBonusDataTable: WeaponBonusDataTableData
    RowName: str
    ColumnNames: unreal.WrappedArray[str]
    ColumnCollections: unreal.WrappedArray[str]



class WeaponBonusDataTableColumnCollectionData:
    CollectionName: str
    ColumnNames: unreal.WrappedArray[str]



class WeaponBonusDataTableAttributeMappingData:
    bInstigatorAttribute: bool
    ColumnName: str
    Attribute: gbx_game_system_core.GbxAttributeData
    ModifierType: engine.EGbxAttributeModifierType
    DataTableAttributeValueResolver: WeaponBonusDataTableAttributeValueResolver



class WeaponBonusData:
    Name: str
    WeaponUseModeAttributeEffects: unreal.WrappedArray[WeaponUseModeAttributeEffectData]
    InstigatorAttributeEffects: unreal.WrappedArray[gbx_game_system_core.AttributeEffectData]



class WeaponUseModeAttributeEffectData:
    UseMode: EWeaponUseMode
    UseModeBitmask: int
    AttributeEffects: unreal.WrappedArray[gbx_game_system_core.AttributeEffectData]



class COVBrokenEffectData:
    Mesh: engine.StaticMesh
    AttachSocket: str
    HiddenBone: str
    BreakEffectType: int
    BreakEffectID: int
    BrokenEffectType: int
    BrokenEffectID: int
    bHideAmpEffect: bool



class COVRepairType:
    BrokenEffectIndex: gbx_game_system_core.AttributeInitializationData
    RepairTime: float
    RepairCompletePercent: float
    CooldownCompletePercent: float
    SelectionWeight: float



class WeightedFloatRange:
    MinValue: float
    MaxValue: float
    Weight: gbx_game_system_core.AttributeInitializationData



class WeaponSkinManufacturerData:
    Manufacturer: gbx_inventory.ManufacturerData
    WeaponTypes: unreal.WrappedArray[WeaponSkinWeaponTypeData]



class WeaponSkinWeaponTypeData:
    WeaponType: gbx_weapon.WeaponTypeData
    Materials: unreal.WrappedArray[WeaponSkinSectionData]



class WeaponSkinSectionData:
    SectionIndex: int



class WeaponVehicleAnimInstanceProxy(engine.AnimInstanceProxy): ...


class ZoneMapMissionPOIBlacklistEntry:
    BlacklistedCharacterPath: str
    MissionBlacklistCondition: gbx_runtime.GbxCondition
    bBlacklistMissionGiving: bool
    ObjectiveBlacklistCondition: gbx_runtime.GbxCondition
    bBlacklistObjectiveWaypoint: bool



class ZoneMapChallengeGroupEntry:
    ChallengeGroup: gbx_game_system_core.ChallengeCategoryData
    ChallengesInGroup: unreal.WrappedArray[unreal.UClass]
    NumChallengesInCategory: int
    NumChallengesVisibleInUI: int



class ZoneMapDataSection:
    ZoneMapSectionObjectName: str
    SectionName: str
    Origin: core_uobject.Vector
    Extents: core_uobject.Vector



class ZoneMapDisplayInfo:
    LevelName: str
    DisplayName: str
    Description: str



class ZoneMapGPUPointCloudData:
    PositionData: engine.Texture
    NormalsData: engine.Texture



class ZoneMapMeshListEntry:
    ZoneMapMesh: engine.StaticMesh
    ZoneMapVisibilityExtents: core_uobject.Box
    MeshDisplayCondition: gbx_runtime.GbxCondition
    bConditionalMeshDisplay: bool



class CachedPlanetZonePOI:
    ZoneReference: ZoneMapData



class PlanetZonePOI:
    ZoneReference: ZoneMapData
    ZoneMeshOnPlanet: engine.StaticMesh



class EExitDownStateReason(enum.Enum):
    ExitDownStateReason_SecondWind = 0
    ExitDownStateReason_Revived = 1
    ExitDownStateReason_Interrupted = 2


class EDownState(enum.Enum):
    DownState_Down = 0
    DownState_DownAndExerting = 1
    DownState_GivingUp = 2


class EReviveState(enum.Enum):
    ReviveState_Reviving = 0
    ReviveState_BeingRevived = 1


class EOakElementalType(enum.Enum):
    Corrosive = 0
    Cryo = 1
    Shock = 2


class EKilledEnemyFriendEventType(enum.Enum):
    Enemy = 0
    NamedEnemy = 1
    EKilledEnemyFriendEventType_MAX = 2


class EMatchmakingState(enum.Enum):
    PreparingToSearch = 0
    Searching = 1
    StartingGameplay = 2


class EBossbarEventType(enum.Enum):
    Enable_Invulnerable_Event = 0
    Disable_Invulnerable_Event = 1
    Destroy_Event = 2


class EOakLeague(enum.Enum):
    OL_BloodyHarvest = 0
    OL_ValentinesDay = 1
    OL_SummerOfGreed = 2


class EEffectivePlayerCountSetting(enum.Enum):
    UserRequested = 0
    Actual = 1


class EOakGameStateUIGroupMode(enum.Enum):
    Cooperation = 0
    Coopetition = 1


class EMultiplayerLootMode(enum.Enum):
    Instanced = 0
    EMultiplayerLootMode_MAX = 1


class ENewGameState(enum.Enum):
    IntroMovie = 0
    CharacterSelect = 1
    ENewGameState_MAX = 2


class EPlayerExperienceType(enum.Enum):
    Mission = 0
    Combat = 1


class EPlayerExperienceSource(enum.Enum):
    SideMissionAward = 0
    XPCombat = 1
    PlotMissionAward = 2


class ECommandRingLocationType(enum.Enum):
    Ground = 0
    Feet = 1


class ECommandRingAlignmentType(enum.Enum):
    View2D = 0
    SurfaceWorld = 1
    SurfaceView = 2


class ECommandRingReferenceActorType(enum.Enum):
    Owner = 0
    Custom = 1


class EOakStatusEffectResourceEffectType(enum.Enum):
    EOakStatusEffectResourceEffectType_MAX = 0


class EHealthAdded(enum.Enum):
    Falure = 0
    EHealthAdded_MAX = 1


class EValidIndex(enum.Enum):
    Invalid = 0
    EValidIndex_MAX = 1


class EHealthState(enum.Enum):
    Low = 0
    VeryLow = 1
    Dead = 2


class EWeaponActionChannel(enum.Enum):
    EWeaponActionChannel_MAX = 0
    Reload = 1
    Zoom = 2


class EZoomEventType(enum.Enum):
    ZoomingIn = 0
    ZoomingOut = 1


class EDeathType(enum.Enum):
    HealthDepleted = 0
    FellOutOfWorld = 1
    Suicide = 2


class EOakGender(enum.Enum):
    Female = 0
    Random = 1


class EWeaponHolsteredSizeType(enum.Enum):
    Large = 0
    EWeaponHolsteredSizeType_MAX = 1
    Medium = 2


class ETargetedNameplateType(enum.Enum):
    ETargetedNameplateType_MAX = 0
    NPC = 1
    Boss = 2


class EA9KSawState(enum.Enum):
    Cooldown = 0
    PickTarget = 1
    ReachedTarget = 2
    PrepareToShootAndShoot = 3


class EVaultRewardType(enum.Enum):
    EridianAnalyser = 0
    EridianFabricator = 1
    EridianResonator = 2


class ETrackedIconOwner(enum.Enum):
    InWorldContainer = 0
    Minimap_Clamped = 1
    Released = 2


class EAnointedDeathState(enum.Enum):
    Freezing = 0
    Frozen = 1
    TimedOut = 2


class EVehicleDeathType(enum.Enum):
    InstantDeath = 0
    HealthDepleted = 1
    FellOutOfWorld = 2


class EClearInputFilter(enum.Enum):
    DisableHover = 0
    ClearWeapons = 1
    ClearInputComponent = 2
    EClearInputFilter_MAX = 3


class ENavPainterLayer(enum.Enum):
    Driver = 0
    Scripted = 1


class EVehicleEffectEvent(enum.Enum):
    BoostPoolFull = 0
    Boost = 1
    BoostChargeCountChanged = 2
    Horn = 3
    MaxRPMBackfire = 4


class ENavCorrectionSetting(enum.Enum):
    Enabled = 0
    Disabled = 1


class EVehicleHealthState(enum.Enum):
    EVehicleHealthState_MAX = 0
    Low = 1
    VeryLow = 2


class EIronBearExitReason(enum.Enum):
    ManualExit = 0
    ActionSkillStopped = 1
    FellOutOfWorld = 2


class EIronBearHardPointOrientation(enum.Enum):
    Left = 0
    Right = 1


class EIronBearCoreType(enum.Enum):
    StrengthThroughBalance = 0
    GundamBear = 1
    SurpriseforYou = 2
    EIronBearCoreType_MAX = 3


class EIronBearDamageLevel(enum.Enum):
    Light = 0
    EIronBearDamageLevel_MAX = 1
    Moderate = 2


class EIronBearSpawnStyle(enum.Enum):
    Quick = 0
    EIronBearSpawnStyle_MAX = 1


class EJumpType(enum.Enum):
    UpwardLadderJump = 0
    Default = 1
    Sprint = 2


class EGameModeNotificationType(enum.Enum):
    Raid_RaidSurvived = 0
    Raid_PlayerIsOut = 1
    Raid_TeleporterActivated = 2
    COS_Defeat = 3
    GearUp_SupplyDrop = 4


class EDeathCircleStatus(enum.Enum):
    DCS_Stable = 0
    DCS_Transitioning = 1
    DCS_MAX = 2


class EOakReticleFeedbackGameEvent(enum.Enum):
    DamageCaused = 0
    DeathCaused = 1


class ECanReRollInventoryResult(enum.Enum):
    CantAfford = 0
    No = 1


class EPOIActivationResult(enum.Enum):
    Failure_Generic = 0
    Failure_PlayerInMenu = 1
    Failure_FastTravelDisabled = 2
    Failure_PhotoModeActive = 3


class EKickReason(enum.Enum):
    Kicked = 0
    Invite = 1
    SessionEnd = 2


class EInventoryListType(enum.Enum):
    IL_MAX = 0
    IL_Bank = 1
    IL_LostLoot = 2


class EPlayerDifficultySetting(enum.Enum):
    MAX = 0
    StoryMode = 1


class ELateJoinState(enum.Enum):
    ApplyingSaveGame = 0
    SelectingCharacter = 1


class ETradeRequestReceptionType(enum.Enum):
    FriendsOnly = 0
    Off = 1


class EHyperHoopState(enum.Enum):
    NotStarted = 0
    AttachingPawn = 1
    Moving = 2


class EVendingMachineBuyType(enum.Enum):
    EVendingMachineBuyType_MAX = 0
    BuyBack = 1
    GearSoldByFriend = 2


class EVendingMachineScrollDirection(enum.Enum):
    Backward = 0
    EVendingMachineScrollDirection_MAX = 1


class EGrenadeThrowFailureReason(enum.Enum):
    ActionsLocked = 0
    NotHealthy = 1
    NotEnoughAmmo = 2


class EDuelClassification(enum.Enum):
    FreeForAll = 0
    EDuelClassification_MAX = 1


class EDuelLoseReason(enum.Enum):
    PlayerKilled = 0
    PlayerQuit = 1
    EDuelLoseReason_MAX = 2


class EVehicleImpactForce(enum.Enum):
    Grinding = 0
    VerySmall = 1
    Medium = 2


class EEffectStateType(enum.Enum):
    Stop = 0
    Count = 1


class EFreezeType(enum.Enum):
    Anointed = 0
    MAX = 1


class EShieldEffectState(enum.Enum):
    Damaged = 0
    Depleted = 1


class EFreezeState(enum.Enum):
    Frozen = 0
    EFreezeState_MAX = 1
    Freezing = 2


class EOakUIInventoryItemUseType(enum.Enum):
    UsableInternal = 0
    EquippableInternal = 1


class EInteractiveObjectInteractiveState(enum.Enum):
    EInteractiveObjectInteractiveState_MAX = 0
    Interactive = 1
    NonInteractive = 2


class EInteractiveObjectLockState(enum.Enum):
    Locked = 0
    EInteractiveObjectLockState_MAX = 1
    Unlocked = 2


class EInteractiveObjectState(enum.Enum):
    Disabled = 0
    Enabling = 1
    Enabled = 2


class EPlayerAlertType(enum.Enum):
    Friendly = 0
    Neutral = 1
    Loot = 2


class EInteractiveObjectTrapActivationType(enum.Enum):
    DeactivateTrap = 0
    EInteractiveObjectTrapActivationType_MAX = 1


class EManagedWidgetType(enum.Enum):
    OnlineMessageAnimation = 0
    EManagedWidgetType_MAX = 1


class EZoneMapChallengeStatus(enum.Enum):
    ZMC_Unknown = 0
    ZMC_CompletedChallenge = 1


class EZoneMapMissionStatus(enum.Enum):
    ZMM_OutOfMap = 0
    ZMM_TrackedObjective = 1
    ZMM_OptionalObjective = 2


class EZoneMapViewerState(enum.Enum):
    Planet = 0
    Galaxy = 1
    EZoneMapViewerState_MAX = 2


class EZoneMapMovementMode(enum.Enum):
    Animate = 0
    Interpolate = 1


class EMissionDeliveryMenuDisplayState(enum.Enum):
    Friends = 0
    EMissionDeliveryMenuDisplayState_MAX = 1


class EOakMessageType(enum.Enum):
    MessageType_PlayerLeft = 0
    MessageType_PlayerJoined = 1
    MessageType_SpectatorJoined = 2
    MessageType_PlayerChangedName = 3


class EMessageSpecialType(enum.Enum):
    MST_TradeOffer = 0
    MST_SeatSwapOffer = 1


class EMainMenuViewpointType(enum.Enum):
    OptionsMenu = 0
    PlaythroughMode = 1
    MainMenuGroup = 2


class EActivityFeedImageAspectRatio(enum.Enum):
    FEED_IMAGE_ASPECT_RATIO_1_51_X_1 = 0
    FEED_IMAGE_ASPECT_RATIO_4_X_3 = 1
    FEED_IMAGE_ASPECT_RATIO_2_08_X_1 = 2


class EAIOOrientedParticleTargetType(enum.Enum):
    DefaultPosition = 0
    UIObject = 1


class EA9KFightPhase(enum.Enum):
    Phase1 = 0
    Phase2 = 1
    Phase4 = 2


class EVehicleAchetypeNative(enum.Enum):
    Technical = 0
    Outrunner = 1
    Emperor = 2


class EHeldActorPreset(enum.Enum):
    Melee = 0
    Shield = 1


class ECarnivoraBones(enum.Enum):
    RW_Root = 0
    RW_SuspensionR0 = 1
    RW_Wheel0 = 2
    RW_Wheel2 = 3
    SideAxle = 4
    TrackShaft2_T = 5


class EEmperorBones(enum.Enum):
    EntropyCore = 0
    Cannon_Pitch = 1
    F_L_Wheel2 = 2
    Cannon_Yaw = 3
    L_Turret_Pitch = 4
    R_R_Hover02 = 5


class EOutrunnerBoosterBones(enum.Enum):
    L_Muffler = 0
    L_Turbine = 1
    R_Muffler = 2
    R_Top_Muffler = 3


class EOutrunnerBones(enum.Enum):
    F_L_SuspensionArm = 0
    F_L_Steering = 1
    Turret_Pitch = 2
    F_R_SuspensionArm = 3
    R_L_Steering = 4


class ERevolverBoosterBones(enum.Enum):
    Main = 0
    Muffler = 1
    Count = 2


class ERevolverBones(enum.Enum):
    Count = 0
    Body_Pitch = 1
    Wheels = 2


class ETechnicalBones(enum.Enum):
    LeftMuffler = 0
    RightMuffler = 1
    R_Axle = 2
    F_L_Wheel = 3
    F_L_SuspensionDn_T = 4
    Player2 = 5


class ETrailerBones(enum.Enum):
    R_R_Wheel = 0
    F_R_Wheel = 1
    F_L_Wheel = 2
    R_R_Spring_Body = 3


class EDualWeaponBones(enum.Enum):
    Base = 0
    Main = 1
    L_Shoulder = 2
    L_Shoulder_Piston = 3
    R_Shoulder_Piston = 4


class EWeaponBones(enum.Enum):
    Root = 0
    Main = 1
    Turret_Pitch = 2
    Count = 3


class EPetRespawnCooldownRefundType(enum.Enum):
    EPetRespawnCooldownRefundType_MAX = 0


class EPetReleaseReason(enum.Enum):
    PetProfileChanged = 0
    PetDied = 1
    EPetReleaseReason_MAX = 2


class EBehindTheScenesItemType(enum.Enum):
    EBehindTheScenesItemType_MAX = 0
    Slideshow = 1


class EIntroType(enum.Enum):
    EnterFromSwapSeat = 0
    HijackFromGround = 1
    EIntroType_MAX = 2


class ECARStatus(enum.Enum):
    Active = 0
    Unfolding = 1
    ECARStatus_MAX = 2


class ECarnivoraFakeTurretShootingStyle(enum.Enum):
    CONE_IN_DIRECTION = 0
    ECarnivoraFakeTurretShootingStyle_MAX = 1


class ECarnivoraAverageLocation(enum.Enum):
    FRONT_LEFT = 0
    NUM = 1
    BACK_RIGHT = 2


class ECarnivoraPartName(enum.Enum):
    TIRE_TRACK_1 = 0
    FRONT_WHEEL_1 = 1
    FRONT_WHEEL_2 = 2
    ECarnivoraPartName_MAX = 3


class ECharacterEchoDataMediaPlaybackType(enum.Enum):
    LoopUntilAudioEnds = 0
    ECharacterEchoDataMediaPlaybackType_MAX = 1


class ECrosshairColorsEnum(enum.Enum):
    WHITE = 0
    GREEN = 1
    TEAL = 2


class EDamagePresentationLevel(enum.Enum):
    MAX = 0
    Low = 1
    Medium = 2


class EDiscoveryAreaDrawStyle(enum.Enum):
    EDiscoveryAreaDrawStyle_MAX = 0
    Wire = 1
    Solid = 2


class EDuelTotemDestroyReason(enum.Enum):
    TimedOut = 0
    Canceled = 1
    EDuelTotemDestroyReason_MAX = 2


class EPotentialDuelState(enum.Enum):
    WaitingToStart = 0
    WaitingToBeAccepted = 1
    EPotentialDuelState_MAX = 2


class EActiveDuelStatus(enum.Enum):
    Finished = 0
    InProgress = 1


class EDuelMode(enum.Enum):
    EDuelMode_MAX = 0
    Vehicle = 1


class ECanSprintResult(enum.Enum):
    No = 0
    Cancel = 1


class EEchoDeviceButton(enum.Enum):
    Button2 = 0
    EEchoDeviceButton_MAX = 1
    Button3 = 2


class EEchoLogBlockedStartMethod(enum.Enum):
    PlayInWorldOnly = 0
    Queue = 1
    EEchoLogBlockedStartMethod_MAX = 2


class EEchoLogDisplayCategory(enum.Enum):
    EridianLog = 0
    TyphonLog = 1


class EDamagePresentationModifier(enum.Enum):
    Increase = 0
    Decrease = 1


class EElementalEffectSizeComputationType(enum.Enum):
    BoundsBoxExtentMaxAxis = 0
    EElementalEffectSizeComputationType_MAX = 1


class EElementalInteractionMode(enum.Enum):
    OnlyTransmit = 0
    OnlyReceive = 1


class EElementalInteractionSourceMode(enum.Enum):
    Always = 0
    Never = 1
    EElementalInteractionSourceMode_MAX = 2


class EPuddleState(enum.Enum):
    Idle = 0
    CleaningUp = 1
    EPuddleState_MAX = 2


class ENativeEnemyExperienceType(enum.Enum):
    Boss = 0
    NormalHigh = 1
    Normal = 2
    ToughHigh = 3


class EWeaponInputChannel(enum.Enum):
    Channel2 = 0


class EWeaponUseMode(enum.Enum):
    Mode2 = 0
    Mode3 = 1


class EFriendEventPriority(enum.Enum):
    High = 0
    Normal = 1
    EFriendEventPriority_MAX = 2


class EFriendEventType(enum.Enum):
    KilledNamedEnemy = 0
    GearSold = 1
    LevelUp = 2
    PlotMissionCompletion = 3
    UnlockedTrueVaultHunterMode = 4


class EFriendEventNotificationLifetime(enum.Enum):
    Long = 0
    VeryLong = 1


class EFriendEventNotificationFrequency(enum.Enum):
    High = 0
    VeryLow = 1
    Low = 2


class EFrontendStandInAnimType(enum.Enum):
    CharacterSelect = 0
    CharacterCreate = 1
    EFrontendStandInAnimType_MAX = 2


class EOakCharacterMovementConditionType(enum.Enum):
    IsLandingFromGroundSlam = 0
    EOakCharacterMovementConditionType_MAX = 1


class EBoostChargeCountComparisonMode(enum.Enum):
    GreaterThan = 0
    NotEqual = 1
    SmallerThan = 2


class EBoostPoolValueComparisonMode(enum.Enum):
    GreaterThan = 0
    NotEqual = 1
    SmallerThan = 2


class EGbxGFxDialogBoxButtonType(enum.Enum):
    EGbxGFxDialogBoxButtonType_MAX = 0
    HintBox = 1


class EGbxGFxDialogBoxStyle(enum.Enum):
    Warning = 0
    Error = 1
    EGbxGFxDialogBoxStyle_MAX = 2


class EShiftReportReason(enum.Enum):
    Sportsmanship = 0
    Abuse = 1
    LeavingOrAfk = 2
    EShiftReportReason_MAX = 3


class EGbxInputEvent_OakUIAxis_Events(enum.Enum):
    Released = 0
    Held = 1


class EGeyserBehavior(enum.Enum):
    Intermittent = 0
    AlwaysOn = 1


class EGeyserState(enum.Enum):
    SteamAnticipationOff = 0
    SteamOn = 1
    SteamOff = 2


class EAmmoBarMode(enum.Enum):
    NoMode = 0
    ModeSwitch = 1
    EridianFabricator = 2


class EMovieFFRWState(enum.Enum):
    FastForward = 0
    Rewind = 1


class EBuddyWidgetFanfareState(enum.Enum):
    LevelUp = 0
    SecondWind = 1


class EBuddyWidgetState(enum.Enum):
    Dying = 0
    Healthy_JustRespawned = 1
    Respawning = 2


class EBuddyWidgetContainerAnimState(enum.Enum):
    SlideIn = 0
    SlideOut = 1
    EBuddyWidgetContainerAnimState_MAX = 2


class EGFxCARMenuPage(enum.Enum):
    Customize = 0
    Deploy = 1


class EGFxCARMenuPartCellType(enum.Enum):
    LoadoutButton = 0
    CustomizeCell = 1


class EGFxChallegeProgressWidgetState(enum.Enum):
    On = 0
    Out = 1


class ECheckpointWidgetState(enum.Enum):
    Intro = 0
    Hidden = 1
    Exit = 2


class EColorPickerMode(enum.Enum):
    PrimarySecondary = 0
    PrimaryOnly = 1


class EColorSelectionType(enum.Enum):
    BottomColor = 0
    ResetBothToDefault = 1


class ECrosshairType(enum.Enum):
    IRONBEAR = 0
    ECrosshairType_MAX = 1


class ECrosshairState(enum.Enum):
    ACTION_SKILL = 0
    SPRINTING = 1
    ECrosshairState_MAX = 2


class EGFxCurrencyCounterState(enum.Enum):
    AnimatingToValue = 0
    HoldingOnValue = 1


class EGFxDuelingTimerState(enum.Enum):
    Challenger = 0
    TimerAndMatch = 1
    Hidden = 2


class EECHOLOGWidgetState(enum.Enum):
    Displayed = 0
    EECHOLOGWidgetState_MAX = 1
    Activating = 2


class EGFxMailboxMenuMailSort(enum.Enum):
    Unread = 0
    Friend = 1
    EGFxMailboxMenuMailSort_MAX = 2


class EGFxMailboxMenuState(enum.Enum):
    Send_ChooseItem = 0
    Receive = 1
    Send_Confirm = 2


class EGFxRosterCellType(enum.Enum):
    OnlineFriend = 0
    FindShiftFriendButton = 1
    ManageShiftFriendsButton = 2


class EECHOWidgetState(enum.Enum):
    Activating = 0
    Displayed = 1
    EECHOWidgetState_MAX = 2


class EGFxExperienceBarState(enum.Enum):
    ExperienceAddedAnimation = 0
    LevelUpAnimation = 1
    EGFxExperienceBarState_MAX = 2


class EGFxFeedWidgetState(enum.Enum):
    On = 0
    Out = 1


class EFFYLBarState(enum.Enum):
    BeingRevived = 0
    Reviving = 1


class EGFxFrontendLandingPageType(enum.Enum):
    WantsLan = 0
    WantsInGameForMail = 1


class EGFxFrontendMenuFocusAnim(enum.Enum):
    MainMenuFocus = 0
    Focused = 1


class EGFxFrontendMenuMode(enum.Enum):
    EchoNetMenus = 0
    MainMenu = 1
    NewGameMenu = 2


class EGFxGrenadeIndicatorMode(enum.Enum):
    Safe = 0
    Danger = 1


class EGFxGuardianRankMenuState(enum.Enum):
    Information_PerkSelected = 0
    MenuLocked = 1
    GuardianRankDisabled = 2


class ECalibrationOptionSourceType(enum.Enum):
    COST_FromRecent = 0
    COST_FromDefaults = 1


class EHUDInitAnimWidgetTarget(enum.Enum):
    HealthBar = 0
    XPBar = 1
    MissionTracker = 2
    EHUDInitAnimWidgetTarget_MAX = 3


class EPromptLinesLayouts(enum.Enum):
    PrimaryPress = 0
    PrimaryPress_SecondaryPress = 1
    PrimaryHold = 2
    EPromptLinesLayouts_MAX = 3


class EInteractionPromptGlyphMode(enum.Enum):
    CantUse = 0
    Normal = 1
    EInteractionPromptGlyphMode_MAX = 2


class EGFxInventoryMenuBackpackSize(enum.Enum):
    EGFxInventoryMenuBackpackSize_MAX = 0
    OneColumn = 1


class EGFxInventoryMenuFocusSide(enum.Enum):
    Backpack = 0
    PaperDoll = 1


class EGFxInWorldIconClampUpdate(enum.Enum):
    ClampedInFront = 0
    EGFxInWorldIconClampUpdate_MAX = 1
    NotClamped = 2


class EInWorldIconRange(enum.Enum):
    Near = 0
    Far = 1


class EGFxItemInspectionPages(enum.Enum):
    Inspect = 0
    Manufacturer = 1
    Parts = 2


class EBackButtonHint(enum.Enum):
    Cancel = 0
    Exit = 1


class ETradingMenuState(enum.Enum):
    Backpack = 0
    Done = 1


class ELeaguesMenuLayout(enum.Enum):
    Overview = 0
    Challenges = 1


class EGFxMainAndPauseMenuType(enum.Enum):
    Main = 0
    Pause = 1


class EGFxMapMenuProgressPanelState(enum.Enum):
    Progress = 0
    List = 1


class EDetailsPanelMode(enum.Enum):
    Mission = 0
    NoTarget = 1
    POIInfo = 2
    EDetailsPanelMode_MAX = 3


class EGFxMapMenuState(enum.Enum):
    Tutorial_Stage1 = 0
    Tutorial_Stage2 = 1
    Tutorial_Stage4 = 2
    Challenges = 3


class EGFxMapMenuMapState(enum.Enum):
    Planet = 0
    Level = 1
    EGFxMapMenuMapState_MAX = 2


class EGFxMenuTutorialFocusDirection(enum.Enum):
    Left = 0
    Right = 1
    EGFxMenuTutorialFocusDirection_MAX = 2


class EGFxMenuTutorialDialogSize(enum.Enum):
    Small = 0
    Medium = 1


class EGFxMinimapWidgetIconTrackedType(enum.Enum):
    PlayerIcon = 0
    Mission = 1
    MinimapIconComponent = 2


class EGFxMissionLogMissionItemType(enum.Enum):
    EchoLog = 0
    Header = 1


class EGFxMissionLogFilterType(enum.Enum):
    MissionLogByExpansion = 0
    MissionLogMissionType = 1
    EGFxMissionLogFilterType_MAX = 2


class EGFxMissionLogNavType(enum.Enum):
    EchoLog = 0
    Missions = 1
    EridianLog = 2


class EGFxMissionLogMissionIconType(enum.Enum):
    Plot = 0
    EchoLog = 1
    Side = 2
    Ignored = 3


class EGFxMissionTrackerAnimationType(enum.Enum):
    Active = 0
    SlideIn = 1
    SlideOut = 2
    SlideInFromBelowChecked = 3


class ETargetedNameplateState(enum.Enum):
    NotShowingTarget = 0
    ShowingValidTarget = 1
    ETargetedNameplateState_MAX = 2


class ENameplateStyle(enum.Enum):
    BossBar = 0
    Overhead = 1


class EDLCMenuItemUsability(enum.Enum):
    AlreadyStarted = 0
    CanUse = 1
    NotInstalled = 2


class EOverheadNameplateDisplayState(enum.Enum):
    State_Arrow = 0
    CenteredName_Arrow = 1
    CenteredName_Name = 2


class EOverheadNameplateHealthState(enum.Enum):
    Dying = 0
    BeingRevived = 1
    EOverheadNameplateHealthState_MAX = 2


class EPetCommandWidgetState(enum.Enum):
    Unlocked = 0
    Ready = 1
    BeginCooldown = 2
    Initalization = 3


class EGFxPlayerStorageMenuItemAction(enum.Enum):
    MoveToInventory = 0
    MoveToBank = 1
    EGFxPlayerStorageMenuItemAction_MAX = 2


class EGFxPlayerStorageMenuState(enum.Enum):
    CompareBackpackFocused = 0
    BackpackDeposit = 1
    BankRetrieve = 2


class EQuickChangeMenuSortMode(enum.Enum):
    Alphabetic = 0
    NewToOld = 1


class EBaseQuickChangeChoiceType(enum.Enum):
    Color = 0
    Head = 1
    Body = 2
    WeaponTrinket = 3


class EBaseQuickChangeMenuState(enum.Enum):
    BodySelection = 0
    HeadSelection = 1
    ColorSelection = 2
    TrinketIcon = 3


class EReloadWidgetDisplayState(enum.Enum):
    AmmoLow = 0
    EReloadWidgetDisplayState_MAX = 1
    NoSpareAmmo = 2


class GFxSHiFT(enum.Enum):
    ResetPassword = 0
    NotSignedIn = 1
    SignInAccount = 2
    GFxSHiFT_MAX = 3


class ESirenSkillScreenSlotType(enum.Enum):
    ComboAbility = 0
    ComboEffect = 1
    Passive = 2


class ESkillItemActionState(enum.Enum):
    CanEquipPrimary = 0
    CanEquipSecondary = 1
    BlockedByTutorial = 2
    Maxed = 3


class ESkillItemUnlockAnimState(enum.Enum):
    Unplayed = 0
    Played = 1


class ESkillScreenItemPurchaseState(enum.Enum):
    FirstPoint = 0
    AddPoints = 1
    ESkillScreenItemPurchaseState_MAX = 2


class ESkillScreenReceiveHighlightState(enum.Enum):
    Available = 0
    Active = 1


class ESkillScreenLoadoutSlotClearability(enum.Enum):
    CanClear = 0
    CannotClear_SlotEmpty = 1
    CannotClear_SlotMustBeFilled = 2


class EGFxSkillScreenLoadoutChoiceEquipState(enum.Enum):
    Equipped = 0
    Available = 1


class EGFxSkillScreenState(enum.Enum):
    BranchesFocused = 0
    LoadoutEdit = 1
    TreeLocked_Info = 2


class ESkillScreenSlotType(enum.Enum):
    Compatible = 0
    All = 1


class EGFxStatusMenuTransitionReason(enum.Enum):
    NextPage = 0
    Pushed = 1
    Switched = 2


class EGFxStoreMenuTabType(enum.Enum):
    Expansions = 0
    Featured = 1
    Purchased = 2


class ESubtitleLayoutType(enum.Enum):
    SubtitlesOnly = 0
    ClosedCaptionsOnly = 1
    ESubtitleLayoutType_MAX = 2


class EGbxGFxSpinnerWidgetGoToMethod(enum.Enum):
    Immediately = 0
    EGbxGFxSpinnerWidgetGoToMethod_MAX = 1


class EGFxVaultHunterProfileCardView(enum.Enum):
    Stat = 0
    Inventory = 1


class EGFxVaultHunterProfileCardMode(enum.Enum):
    Friend = 0
    Self = 1


class EGFxVehiclePartWidgetState(enum.Enum):
    Condensed = 0
    Off = 1
    RollOn = 2


class UGFxVehiclePartUnlockedWidgetState(enum.Enum):
    Playing = 0
    UGFxVehiclePartUnlockedWidgetState_MAX = 1


class EGFxVehicleWeaponType(enum.Enum):
    HEAT = 0
    MAGAZINE = 1
    EGFxVehicleWeaponType_MAX = 2


class EGFxVendingMachineMenuBackpackState(enum.Enum):
    Buy = 0
    Sell = 1
    CompareToMachine = 2


class EVendingMachineSocketMapStates(enum.Enum):
    SOCKETMAP_SELL = 0
    SOCKETMAP_COMPARE = 1
    SOCKETMAP_MAX = 2


class GFxVendingMachineDisplayMode(enum.Enum):
    GFXVENDOR_Sell = 0
    GFXVENDOR_Buyback = 1
    GFXVENDOR_MAX = 2


class EGoreRegionType(enum.Enum):
    Arm = 0
    Leg = 1
    EGoreRegionType_MAX = 2


class EChildPayloadType(enum.Enum):
    Payload_Spring = 0
    Payload_MiniMirv = 1
    Payload_Mirv = 2


class ELingeringDamageStyle(enum.Enum):
    DamageStyle_Radius = 0
    DamageStyle_Beam = 1


class EInstanceDataOperator(enum.Enum):
    Multiply = 0
    EInstanceDataOperator_MAX = 1


class ESpinDirection(enum.Enum):
    SD_Clockwise = 0
    SD_Counterclockwise = 1


class EHolsteredGearState(enum.Enum):
    FadingIn = 0
    FadingOut = 1


class EInWorldIconFadeType(enum.Enum):
    Distance = 0
    TargetedRadius = 1


class EInWorldIconClassType(enum.Enum):
    Nameplate = 0
    EInWorldIconClassType_MAX = 1


class EInWorldIconEdgeBehavior(enum.Enum):
    Hide = 0
    EInWorldIconEdgeBehavior_MAX = 1


class ELootSpawnTiming(enum.Enum):
    OnEnabling = 0
    OnAnimNotify = 1


class EMissionDrivenLootableType(enum.Enum):
    UseSelfMissionObjective = 0
    CopyPickupMissionObjective = 1


class ELootableOpenReason(enum.Enum):
    Damage = 0
    ELootableOpenReason_MAX = 1


class EDebugMatchmakingFailure(enum.Enum):
    CreateMatchmakingSession = 0
    JoinMatchmakingSession = 1
    FindGameplaySession = 2
    EDebugMatchmakingFailure_MAX = 3


class EMatchmakingError(enum.Enum):
    CreateClientMatchmakingBeaconFailed = 0
    StartHostingFailed = 1
    StartMatchmakingRoundFailed = 2
    NetworkFailure = 3


class EMatchmakingRequirementComparisonOp(enum.Enum):
    Equal = 0
    GreaterThan = 1
    NotEqual = 2


class EMatchmakingRequirementType(enum.Enum):
    EMatchmakingRequirementType_MAX = 0
    PlayerLevel = 1
    PlotMission = 2


class EMatchmakingSearchParameterOp(enum.Enum):
    Equals = 0
    NotEquals = 1
    GreaterThanEquals = 2


class EInitialPlayerStatus(enum.Enum):
    Selected = 0
    EInitialPlayerStatus_MAX = 1


class EOakAbilityTimerResult(enum.Enum):
    EOakAbilityTimerResult_MAX = 0
    Stopped = 1
    Finished = 2


class EOakAbilityTimerTickPolicy(enum.Enum):
    OnlyWhenActive = 0
    EOakAbilityTimerTickPolicy_MAX = 1


class EOakAbilityTimerReplacePolicy(enum.Enum):
    EOakAbilityTimerReplacePolicy_MAX = 0
    ReplaceExisting = 1


class ESkillWidgetSlot(enum.Enum):
    GrenadeActionSkillWidget = 0
    ActionSkillWidget = 1


class EOakAchievements(enum.Enum):
    ReachLevel2 = 0
    ReachLevel10 = 1
    ReachLevel50 = 2
    WinDuel = 3
    DiscoverAllPandoraLocations = 4
    CompleteMission2 = 5
    DLC3_CompleteMission1 = 6


class EOakAnimActionAbilityEndAction(enum.Enum):
    Stop = 0
    Abort = 1
    EOakAnimActionAbilityEndAction_MAX = 2


class EHostileAttachState(enum.Enum):
    Attack = 0
    GripFeedback = 1
    Ejected = 2


class ELeapOnVehicle_SeatType(enum.Enum):
    Hostile = 0
    Driver = 1
    Gunner = 2


class EOakActionAbilitySecondaryUseActionType(enum.Enum):
    Secondary = 0
    Primary = 1


class EOakActionAbilityStopAction(enum.Enum):
    Abort = 0
    Expidited = 1


class ECloneSwapReason(enum.Enum):
    NewU = 0
    ECloneSwapReason_MAX = 1


class EOakActionAbilityPetModType(enum.Enum):
    Mod2 = 0
    Mod1 = 1
    Mod4 = 2


class EOakActionAbilityPetEvolutionType(enum.Enum):
    Evolution1 = 0
    Evolution2 = 1


class EOakActionAbilityPetType(enum.Enum):
    Spiderant = 0
    Jabbermon = 1
    Loader = 2


class EPhaseTranceEffectTargetType(enum.Enum):
    Location = 0
    EPhaseTranceEffectTargetType_MAX = 1


class EPhaseTranceElementalType(enum.Enum):
    Element1 = 0
    Element2 = 1
    Element4 = 2


class EPhaseTranceEffectType(enum.Enum):
    Effect1 = 0
    Effect2 = 1
    Effect4 = 2


class EPhaseTranceAttackFamilyType(enum.Enum):
    AttackFamily1 = 0
    AttackFamily2 = 1
    AttackFamily4 = 2


class EOperativeBarrierModType(enum.Enum):
    Mod2 = 0
    Mod3 = 1
    Mod5 = 2


class EDigiCloneModType(enum.Enum):
    Mod2 = 0
    Mod3 = 1
    Mod5 = 2
    Mod9 = 3


class EGRMLNModType(enum.Enum):
    Mod2 = 0
    Mod3 = 1
    Mod5 = 2


class EIronBearUIHardpointType(enum.Enum):
    MINIGUN = 0
    SALAMANDER_THROWER = 1
    BEARFIST = 2


class EIronBearModType(enum.Enum):
    Mod2 = 0
    Mod1 = 1
    EIronBearModType_MAX = 2


class EOakAISwarmRotation(enum.Enum):
    Strafe = 0
    Forward = 1


class ECARRestrictionType(enum.Enum):
    DLC3 = 0
    ECARRestrictionType_MAX = 1


class ECARPartType(enum.Enum):
    Armor = 0
    Wheel = 1
    GunnerWeapon = 2
    Material = 3


class EChallengRewardFormattingType(enum.Enum):
    Eridium = 0
    Other = 1


class ECameraAttachState(enum.Enum):
    CAS_Attached = 0
    CAS_MAX = 1


class EVehicleArchetype(enum.Enum):
    Technical = 0
    Outrunner = 1
    Emperor = 2


class ECinematicState(enum.Enum):
    PlayingSequence = 0
    PlayingIntro = 1


class EOakMayhemModeConditionType(enum.Enum):
    EOakMayhemModeConditionType_MAX = 0
    CompareMayhemLevel = 1


class EHealthTypeState(enum.Enum):
    EHealthTypeState_MAX = 0
    Low = 1
    VeryLow = 2


class EDamageInstigatorClassification(enum.Enum):
    PlayerVersusPlayer = 0
    EDamageInstigatorClassification_MAX = 1
    PlayerVersusAI = 2


class EOakElementalDeathEffects(enum.Enum):
    Custom = 0
    Disabled = 1


class EUIDialogCallout(enum.Enum):
    EquipItemFailed = 0
    EquipAskillFailed = 1
    InsufficientFunds = 2


class EGRMLNHardpointType(enum.Enum):
    MachineGun = 0
    Mod4 = 1


class EOakDroneFacingMode(enum.Enum):
    FaceTarget = 0
    EOakDroneFacingMode_MAX = 1
    FaceMoveDir = 2


class EOakDroneMovementMode(enum.Enum):
    FlyToTarget = 0
    HoverAtTarget = 1
    EOakDroneMovementMode_MAX = 2


class EOakElementalStackBucketType(enum.Enum):
    Weapon = 0
    InteractiveObject = 1
    Character = 2


class EInviteType(enum.Enum):
    InviteOnly = 0
    FriendsOnly = 1


class EFriendSyncState(enum.Enum):
    EFriendSyncState_MAX = 0
    Enabled = 1


class ECrossplayState(enum.Enum):
    ECrossplayState_MAX = 0
    Enabled = 1


class ENetworkType(enum.Enum):
    Lan = 0
    Online = 1


class EPlayerInputLockType(enum.Enum):
    Jumping = 0
    All = 1
    Movement = 2


class EActivityCompletionFriendEventType(enum.Enum):
    CircleOfSlaughterCompletion = 0
    ProvingGroundsCompletion = 1


class EBenchmarkDataOutputMode(enum.Enum):
    Summary = 0
    DetailedCSV = 1


class EAmbientOcclusionQuality(enum.Enum):
    Low = 0
    Medium = 1
    Ultra = 2


class ECharacterDetail(enum.Enum):
    Medium = 0
    High = 1
    ECharacterDetail_MAX = 2


class ECharacterTextureDetail(enum.Enum):
    Medium = 0
    High = 1
    Deprecated = 2


class EScreenSpaceReflections(enum.Enum):
    Medium = 0
    High = 1
    EScreenSpaceReflections_MAX = 2


class EVolumetricFogType(enum.Enum):
    Medium = 0
    High = 1
    EVolumetricFogType_MAX = 2


class EFoliageDensity(enum.Enum):
    Medium = 0
    High = 1
    EFoliageDensity_MAX = 2


class ETerrainType(enum.Enum):
    Medium = 0
    High = 1
    ETerrainType_MAX = 2


class EEnvironmentDetail(enum.Enum):
    EEnvironmentDetail_MAX = 0
    Medium = 1
    High = 2


class EDrawDistance(enum.Enum):
    Medium = 0
    High = 1
    EDrawDistance_MAX = 2


class EEnvironmentTextureDetail(enum.Enum):
    Medium = 0
    High = 1
    Deprecated = 2


class EShadowQuality(enum.Enum):
    Medium = 0
    High = 1
    EShadowQuality_MAX = 2


class EAnisotropicFilteringType(enum.Enum):
    FourX = 0
    TwoX = 1
    SixteenX = 2


class EMaterialQuality(enum.Enum):
    Medium = 0
    High = 1
    EMaterialQuality_MAX = 2


class ETextureStreamingQuality(enum.Enum):
    Medium = 0
    High = 1
    ETextureStreamingQuality_MAX = 2


class EGraphicsQuality(enum.Enum):
    Ultra = 0
    Low = 1
    Medium = 2


class EFrameRateLimit(enum.Enum):
    Capped30FPS = 0
    Capped60FPS = 1
    Unlimited = 2


class EResolutionScale(enum.Enum):
    Scale_75 = 0
    Scale_100 = 1
    Scale_150 = 2


class ESupportedAspectRatios(enum.Enum):
    AspectRatio_16_10 = 0
    AspectRatio_Unsupported = 1
    AspectRatio_32_9 = 2


class EHUDType(enum.Enum):
    StandardPlayerHUD = 0
    EHUDType_MAX = 1
    VehicleHUD = 2


class EOakInputActionEventType(enum.Enum):
    Button = 0
    Axis = 1


class EPickupFlyToSettingsType(enum.Enum):
    Container = 0
    AutoLootContainer = 1


class EOakInventoryItemFlags(enum.Enum):
    MarkedAsFavorite = 0
    MarkedAsJunk = 1


class EOakInventoryMenuPaperDollSlotAdjacency(enum.Enum):
    Right = 0
    Left = 1


class EOakInventoryMenuAmmoState(enum.Enum):
    Empty = 0
    Highlighted = 1
    HighlightedEmpty = 2


class EOakInventoryMenuWhatChanged(enum.Enum):
    SortChanged = 0
    RefreshAll = 1
    RemovedItem = 2


class EOakInventoryMenuSortMode(enum.Enum):
    Level = 0
    Type = 1
    Rarity = 2


class EOakInventoryItemWidgetSelectType(enum.Enum):
    PopoutSelection = 0
    HideWhenSelected = 1


class EOakInventoryItemWidgetDisabledReason(enum.Enum):
    SlotLocked = 0
    BrowsingAnotherPanel = 1
    EOakInventoryItemWidgetDisabledReason_MAX = 2


class EOakStatusMenuInventoryEvent(enum.Enum):
    EOakStatusMenuInventoryEvent_MAX = 0
    BackpackItemHighlighted = 1
    BackpackHighlighted = 2


class EOakInventoryRarityBalanceTableType(enum.Enum):
    EOakInventoryRarityBalanceTableType_MAX = 0


class EMailItemType(enum.Enum):
    GearboxMail = 0
    NPCMail = 1
    PlayerMail = 2


class EReapOrder(enum.Enum):
    NewestFirst = 0
    Random = 1


class EOakManufacturerBalanceTableType(enum.Enum):
    EOakManufacturerBalanceTableType_MAX = 0


class EOakMinimapIconComponentType(enum.Enum):
    TargetingComponentDriven = 0
    WhileAlive = 1


class EOakMissionType(enum.Enum):
    Side = 0
    Plot = 1
    CircleOfSlaughter = 2
    EOakMissionType_MAX = 3


class EOakMusicLayer(enum.Enum):
    Bass = 0
    Chord = 1
    Perc_Kick = 2


class EOakMusicPart(enum.Enum):
    Part_0 = 0
    Part_1 = 1
    Part_3 = 2
    Part_7 = 3
    Part_15 = 4


class EOakMusicSection(enum.Enum):
    Section_0 = 0
    Section_1 = 1
    Section_3 = 2
    Section_7 = 3


class EDrivingOverridePriority(enum.Enum):
    Aspect = 0
    Scripted = 1
    Invalid = 2


class ESpeedModifierOverridePriority(enum.Enum):
    UserEdge = 0
    Scripted = 1
    Aspect = 2


class EOakOnlineLobbyTalkingState(enum.Enum):
    Talking = 0
    Muted = 1


class EOakOnlineLobbyPlayerPlateState(enum.Enum):
    Invite = 0
    WaitingForPlayers = 1
    PlayerListed = 2


class EOakOnlineLobbyConnectivityState(enum.Enum):
    Low = 0
    Medium = 1
    None_ = 2


class EOakPassiveAbilityHUDIconActivationType(enum.Enum):
    StatusEffect = 0
    AbilityTimer = 1
    ActiveState = 2


class EAdditionalTriggeredEffectTargets(enum.Enum):
    MyCompanions = 0
    MyAllies = 1


class EOakPassiveAbilitySirenArmDurationType(enum.Enum):
    AbilityState = 0
    AbilityTimer = 1
    EOakPassiveAbilitySirenArmDurationType_MAX = 2


class ESkillItemRealType(enum.Enum):
    CharacterAugment = 0
    PlayerAbility = 1
    Augment = 2


class ESkillItemDisplayType(enum.Enum):
    ModPrimary = 0
    ActionSkill = 1
    Passive = 2


class ESkillItemLayoutInfo(enum.Enum):
    Center = 0
    Right = 1
    RightWing = 2


class EScreenCalibrationMode(enum.Enum):
    HDRBrightness = 0
    StandardBrightnessAndBlackLevel = 1


class EJoystickScheme(enum.Enum):
    SouthPaw = 0
    OldSchool = 1
    Count = 2


class EDrivingButtonScheme(enum.Enum):
    CameraRelative = 0
    VehicleRelative = 1
    Count = 2


class EWalkingButtonScheme(enum.Enum):
    Classic = 0
    Count = 1


class EGameJoinNotificationState(enum.Enum):
    EGJNS_PlayerStateReplicated = 0
    EGJNS_MAX = 1
    EGJNS_SyncLevelReplicated = 2


class EPresentableStatusEffectValueStrategy(enum.Enum):
    EPresentableStatusEffectValueStrategy_MAX = 0
    InstanceCount = 1


class ERadiateMovementType(enum.Enum):
    SimpleMoveOnGround = 0
    ERadiateMovementType_MAX = 1


class ERadiateMethod(enum.Enum):
    MinMaxDistance = 0
    ERadiateMethod_MAX = 1


class EClassRepNodeMapping(enum.Enum):
    RelevantForConnections = 0
    Spatialize_Static = 1
    Spatialize_Dormancy = 2


class EEventTriggerType(enum.Enum):
    StreamingEvent_WorldTriggered = 0
    StreamingEvent_ViewerTriggered = 1


class EStreamingInteractionEventState(enum.Enum):
    StreamingEvent_Preliminary = 0
    StreamingEvent_Standby = 1
    StreamingEvent_MAX = 2


class ECharacterProfileUpdateStep(enum.Enum):
    Step_Inventory = 0
    Step_MainCharacterInfo2 = 1


class EStreamingManagerState(enum.Enum):
    StreamingManager_Initialized = 0
    StreamingManager_Active = 1
    StreamingManager_MAX = 2


class EEndEventReasons(enum.Enum):
    Error = 0
    Success = 1
    NoParticipants = 2
    MapExited = 3


class EOakTriggerComponentEventType(enum.Enum):
    UnTouch = 0
    EOakTriggerComponentEventType_MAX = 1


class EOakUIChallengeDataProviderPopulateType(enum.Enum):
    Galaxy = 0
    EOakUIChallengeDataProviderPopulateType_MAX = 1
    Planet = 2


class EVehicleInputMode(enum.Enum):
    CameraRelative_ThirdPerson = 0
    VehicleRelative_LeftSide = 1
    Count = 2


class EVehiclePropertyValueType(enum.Enum):
    PlanarSpeed_KPH = 0
    ForwardSpeed_KPH = 1
    PlanarSpeed_MPH = 2
    IsAIDriven = 3


class EVoGDisplayState(enum.Enum):
    FadingIn = 0
    FadingOut = 1
    Inactive = 2


class EOakWeaponPartType(enum.Enum):
    Foregrip = 0
    Mag = 1
    ModeSwitch = 2
    Melee = 3


class VehicleWeapons(enum.Enum):
    Technical_StickyBombs = 0
    Technical_TireBombs = 1
    Outrunner_SwarmerMissile = 2
    Outrunner_FlameThrower = 3
    Emperor_BouncingLaser = 4


class EWeaponAudioBodyLoopState(enum.Enum):
    Equipping = 0
    Reloading = 1
    EWeaponAudioBodyLoopState_MAX = 2


class EWeaponAudioBodyLoopType(enum.Enum):
    NPCOnly = 0
    BothPlayersAndNPCs = 1


class EOnlineMessageAnimationEnum(enum.Enum):
    EXIT_ANIMATION = 0
    INTRO_ANIMATION = 1


class EOperativeBarrierState(enum.Enum):
    Carried = 0
    Deployed = 1
    EOperativeBarrierState_MAX = 2


class EOptionType(enum.Enum):
    Option_Keybinding = 0
    Gameplay_InvertMapYawControls = 1
    Option_Title = 2
    Audio_VoiceVolume = 3
    Audio_EnableMicrosoftSpatial_Unavailable = 4
    Network_ToastsDuration = 5
    AdvancedGraphics_DisplayPerformanceStats = 6
    Bindings_PCMoveForward = 7


class EOptionItemType(enum.Enum):
    Button = 0
    Slider = 1
    Spinner = 2
    TodoItem = 3


class EEchoPerformanceMode(enum.Enum):
    EchoLog = 0
    VoG = 1
    EEchoPerformanceMode_MAX = 2


class EPhotoModeOptionEffect(enum.Enum):
    FieldOfView = 0
    CameraRoll = 1
    FocusDistance = 2
    Saturation = 3
    VignetteIntensity = 4


class EEchoDeviceFXPositionMode(enum.Enum):
    ViewportPosition = 0
    UIObject = 1


class ETransactionType(enum.Enum):
    Sell = 0
    BuyBack = 1
    PurchaseCustomization = 2


class EPlayerStandInType(enum.Enum):
    FrontendLobby = 0
    CharacterSelect = 1
    SkillScreen = 2


class EFrontendStandInSpecialAnimType(enum.Enum):
    PrimaryPlayerFlourish = 0
    CharacterSelectSelection = 1
    CharacterCreationSelection = 2


class EPlayerTradingStance(enum.Enum):
    DuelReady = 0
    TradeReady = 1
    EPlayerTradingStance_MAX = 2


class EPlayerTradeManagerStatus(enum.Enum):
    Trading = 0
    Dueling = 1
    ResolvingDuel = 2


class EPlayThroughType(enum.Enum):
    EffectivePlayThrough = 0
    EPlayThroughType_MAX = 1


class EProjectedMeshShape(enum.Enum):
    Square = 0
    EProjectedMeshShape_MAX = 1


class EShieldState(enum.Enum):
    Empty = 0
    PartiallyFilled = 1
    EShieldState_MAX = 2


class EShieldAttributeModificationSource(enum.Enum):
    Equipped = 0
    NotDepleted = 1
    Filled = 2


class EStackOperator(enum.Enum):
    Multiply = 0
    EStackOperator_MAX = 1


class EShieldDamageModifierApplicationTarget(enum.Enum):
    InstigatorReceivedDamage = 0
    EShieldDamageModifierApplicationTarget_MAX = 1


class EAugmentTriggerOn(enum.Enum):
    TriggerOn_MAX = 0
    TriggerOn_Depleted = 1
    TriggerOn_NotFilled = 2


class ESirenGhostArmConfigurationType(enum.Enum):
    ThirdPerson = 0
    FirstPerson = 1
    GhostArmsLocked = 2


class EItemDropOnDeathType(enum.Enum):
    DropOnDeath_FirstDeath = 0
    DropOnDeath_MAX = 1
    DropOnDeath_LastDeath = 2


class ELootInstancingPolicy(enum.Enum):
    DontInstance = 0
    InstanceForPlayer = 1


class ESpawnDroppedPickupLootRequestType(enum.Enum):
    Attach = 0
    ESpawnDroppedPickupLootRequestType_MAX = 1


class EStandInAutoScaleMode(enum.Enum):
    ScaleUpOrDown = 0
    ScaleDown = 1


class EStandInActorType(enum.Enum):
    Player = 0
    PlayerSkillScreen = 1
    WeaponTrinket = 2


class EBehaviorOutput(enum.Enum):
    NotFound = 0
    EBehaviorOutput_MAX = 1


class ETinkPileUseState(enum.Enum):
    NotUsed = 0
    InUse = 1
    Resetting = 2


class ETinkPileBuildOption(enum.Enum):
    TurretBasic = 0
    TurretPlaceholder2 = 1
    RocketPodBasic = 2


class ETransporterCraneState(enum.Enum):
    ETransporterCraneState_MAX = 0
    Stopped = 1
    MoveForward = 2


class ETrophyCaseViewingState(enum.Enum):
    ViewingSet = 0
    ViewingGroup = 1
    ETrophyCaseViewingState_MAX = 2


class EGroundTurretType(enum.Enum):
    Standing = 0
    EGroundTurretType_MAX = 1


class EUIManagerState(enum.Enum):
    PLAYING_ANIMATION = 0
    EUIManagerState_MAX = 1


class UIManagerMessages(enum.Enum):
    High = 0
    Normal = 1
    Lowest = 2


class EChallengeCategoryID(enum.Enum):
    Weapon = 0
    Enemy = 1
    Exploration = 2
    Max = 3


class ERevolverOffsetMode(enum.Enum):
    Left = 0
    Right = 1


class EWheelAudioType(enum.Enum):
    MultiPosition2Wheels = 0
    MultiPosition1Wheel = 1
    EWheelAudioType_MAX = 2


class EVehiclePlaySingleAnimMode(enum.Enum):
    PlayOnStop = 0
    EVehiclePlaySingleAnimMode_MAX = 1


class EEmitterEnableMode(enum.Enum):
    EnableOnStartDisableOnStop = 0
    EnableOnStop = 1
    DisableOnStartEnableOnStop = 2


class EFollowVehicleRotation(enum.Enum):
    Yaw = 0
    YawAndPitch = 1


class EVendingMachineType(enum.Enum):
    EVendingMachineType_MAX = 0
    Health = 1
    Ammo = 2


class VendingMachineDisplayMode(enum.Enum):
    EVMDM_Sell = 0
    EVMDM_Buyback = 1


class EVendingMachineTilesMode(enum.Enum):
    BuyBack = 0
    Sell = 1


class EVendingMachineInteractionMode(enum.Enum):
    BuyBack = 0
    Sell = 1


class EVendingMachineAnimType(enum.Enum):
    BackTwice = 0
    Back = 1
    BackJiggle = 2
    ForwardJiggle = 3
    MAX = 4


class EVendingMachineTrayTileType(enum.Enum):
    Featured = 0
    EndOfListDummy = 1
    GearSoldByFriend = 2


class EWeaponShieldActivationTrigger(enum.Enum):
    Attach = 0
    Custom = 1


class EWeaponShieldState(enum.Enum):
    Depleted = 0
    EWeaponShieldState_MAX = 1


class EWeaponWearValueType(enum.Enum):
    Rust = 0
    Dirt = 1


class EZoneMapTargetType(enum.Enum):
    POI = 0
    Player = 1
    MissionWaypoint = 2
